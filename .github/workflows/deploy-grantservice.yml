name: Deploy GrantService

on:
  push:
    branches: [ main, Dev, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          echo "Starting deployment..."
          
          # Остановка сервисов перед обновлением
          echo "Stopping services..."
          sudo systemctl stop grantservice-bot || true
          sudo systemctl stop grantservice-admin || true
          
          # Переход в директорию проекта
          cd /var/GrantService

          # ВАЖНО: Резервное копирование БД ПЕРЕД любыми git операциями
          echo "Backing up production database..."
          if [ -f "data/grantservice.db" ]; then
            cp data/grantservice.db data/grantservice.db.backup
            echo "✓ Database backed up to data/grantservice.db.backup"
          else
            echo "⚠ Warning: Production database not found at data/grantservice.db"
          fi

          # Защита критичных файлов конфигурации
          echo "Protecting config/.env (bot token)..."
          if [ -f "config/.env" ]; then
            cp config/.env /tmp/grantservice_env_safe
            echo "✓ Bot token backed up"
          else
            echo "⚠ Warning: config/.env not found - bot may fail to start!"
          fi

          # Защита директории data/ от git clean
          echo "Protecting data directory..."
          if [ -d "data" ]; then
            # Временно перемещаем data/ за пределы репозитория
            mv data /tmp/grantservice_data_safe
            echo "✓ Data directory moved to safe location"
          fi

          # Настройка git для работы без аутентификации
          git config pull.rebase false

          # Проверяем наличие локальных изменений
          echo "Checking for local changes..."
          if ! git diff-index --quiet HEAD --; then
            echo "⚠️  Local changes detected, will be overwritten"
            git status --short
          fi

          # Обновление из репозитория
          echo "Updating from GitHub..."
          git fetch --all

          # Определяем ветку и обновляемся из неё
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $BRANCH_NAME"

          # Безопасное обновление: сначала пробуем pull, при конфликтах - reset
          if [ "$BRANCH_NAME" = "master" ]; then
            echo "Updating to latest master..."
            if git merge-base --is-ancestor HEAD origin/master; then
              # Fast-forward возможен - безопасный pull
              git pull origin master
            else
              # Есть расхождения - нужен reset
              echo "⚠️  Diverged from origin, forcing reset..."
              git reset --hard origin/master
            fi
          else
            echo "Updating to latest Dev..."
            if git merge-base --is-ancestor HEAD origin/Dev; then
              git pull origin Dev
            else
              echo "⚠️  Diverged from origin, forcing reset..."
              git reset --hard origin/Dev
            fi
          fi

          # Очистка только ignored файлов (не трогаем untracked)
          git clean -fdX  # Только .pyc, __pycache__ и т.д.

          # Восстановление data/ обратно
          echo "Restoring data directory..."
          if [ -d "/tmp/grantservice_data_safe" ]; then
            mv /tmp/grantservice_data_safe data
            echo "✓ Data directory restored"
          fi

          # Восстановление config/.env
          echo "Restoring config/.env (bot token)..."
          if [ -f "/tmp/grantservice_env_safe" ]; then
            mkdir -p config
            cp /tmp/grantservice_env_safe config/.env
            chmod 600 config/.env
            echo "✓ Bot token restored"
          fi

          # Проверяем, что обновление прошло успешно
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Updated to commit: $CURRENT_COMMIT"

          # Финальная проверка БД
          echo "Verifying production database..."
          if [ -f "data/grantservice.db" ]; then
            DB_SIZE=$(du -h data/grantservice.db | cut -f1)
            echo "✓ Production database intact: $DB_SIZE"
          else
            echo "✗ ERROR: Production database missing after update!"
            if [ -f "data/grantservice.db.backup" ]; then
              echo "Restoring from backup..."
              cp data/grantservice.db.backup data/grantservice.db
              echo "✓ Database restored from backup"
            fi
          fi
          
          # Проверка, что файлы обновлены
          echo "Checking if files are updated..."
          ls -la scripts/
          ls -la .github/workflows/
          
          # Активация виртуального окружения (если используется)
          if [ -f "/var/GrantService/venv/bin/activate" ]; then
              source /var/GrantService/venv/bin/activate
          fi
          
          # Обновление зависимостей для бота
          echo "Installing bot dependencies..."
          cd /var/GrantService/telegram-bot
          pip install -r requirements.txt
          
          # Обновление зависимостей для админки
          echo "Installing admin panel dependencies..."
          cd /var/GrantService/web-admin
          pip install -r requirements.txt
          
          # Инициализация авторизации (БЕЗОПАСНО для продакшн БД)
          echo "Initializing auth roles..."
          cd /var/GrantService
          python3 scripts/init_auth_roles.py || true
          python3 scripts/fix_authorization.py || true

          # Обновление systemd сервисов при необходимости
          echo "Updating systemd services if needed..."
          bash scripts/setup_systemd_services.sh || true
          
          # Запуск сервисов
          echo "Starting services..."
          sudo systemctl start grantservice-bot
          sudo systemctl start grantservice-admin
          
          # Небольшая пауза для запуска
          sleep 5
          
          # Проверка статуса
          echo "Checking service status..."
          sudo systemctl status grantservice-bot --no-pager
          sudo systemctl status grantservice-admin --no-pager
          
          echo "Deployment completed successfully!"