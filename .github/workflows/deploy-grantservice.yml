name: Deploy GrantService

on:
  push:
    branches: [ main, Dev, master ]
  workflow_dispatch:

jobs:
  # Pre-deployment tests
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio psycopg2-binary python-dotenv
        pip install -r telegram-bot/requirements.txt || true

    - name: Run integration tests
      run: |
        # Run critical integration tests before deployment
        pytest tests/integration/test_full_application_flow.py::TestFullApplicationFlow::test_complete_application_flow -v || exit 1
        pytest tests/integration/test_streamlit_users_page.py::TestUsersPageData::test_get_total_users -v || exit 1
        pytest tests/integration/test_postgresql_migration.py::TestDatabaseConnection::test_can_connect_to_postgresql -v || exit 1
      continue-on-error: false

    - name: Notify tests failed
      if: failure()
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=-4930683040" \
          -d "parse_mode=HTML" \
          -d "text=‚ùå <b>GrantService Tests FAILED</b>%0A%0ADeployment blocked - tests failed.%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0A%0A<a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>View workflow run</a>"

  # Deployment job (only runs if tests pass)
  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Notify deployment started
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=-4930683040" \
          -d "parse_mode=HTML" \
          -d "text=üöÄ <b>GrantService Deployment Started</b>%0A%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AAuthor: ${{ github.actor }}%0A%0ATests: ‚úÖ Passed"

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          echo "Starting deployment..."
          
          # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          echo "Stopping services..."
          sudo systemctl stop grantservice-bot || true
          sudo systemctl stop grantservice-admin || true
          
          # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
          cd /var/GrantService

          # –í–ê–ñ–ù–û: –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –ü–ï–†–ï–î –ª—é–±—ã–º–∏ git –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
          echo "Backing up production database..."
          if [ -f "data/grantservice.db" ]; then
            cp data/grantservice.db data/grantservice.db.backup
            echo "‚úì Database backed up to data/grantservice.db.backup"
          else
            echo "‚ö† Warning: Production database not found at data/grantservice.db"
          fi

          # –ó–∞—â–∏—Ç–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          echo "Protecting config/.env (bot token)..."
          if [ -f "config/.env" ]; then
            cp config/.env /tmp/grantservice_env_safe
            echo "‚úì Bot token backed up"
          else
            echo "‚ö† Warning: config/.env not found - bot may fail to start!"
          fi

          # –ó–∞—â–∏—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data/ –æ—Ç git clean
          echo "Protecting data directory..."
          if [ -d "data" ]; then
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ–º data/ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            mv data /tmp/grantservice_data_safe
            echo "‚úì Data directory moved to safe location"
          fi

          # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ git –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          git config pull.rebase false

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
          echo "Checking for local changes..."
          if ! git diff-index --quiet HEAD --; then
            echo "‚ö†Ô∏è  Local changes detected, will be overwritten"
            git status --short
          fi

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          echo "Updating from GitHub..."
          git fetch --all

          # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ç–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º—Å—è –∏–∑ –Ω–µ—ë
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch: $BRANCH_NAME"

          # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º pull, –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö - reset
          if [ "$BRANCH_NAME" = "master" ]; then
            echo "Updating to latest master..."
            if git merge-base --is-ancestor HEAD origin/master; then
              # Fast-forward –≤–æ–∑–º–æ–∂–µ–Ω - –±–µ–∑–æ–ø–∞—Å–Ω—ã–π pull
              git pull origin master
            else
              # –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è - –Ω—É–∂–µ–Ω reset
              echo "‚ö†Ô∏è  Diverged from origin, forcing reset..."
              git reset --hard origin/master
            fi
          else
            echo "Updating to latest Dev..."
            if git merge-base --is-ancestor HEAD origin/Dev; then
              git pull origin Dev
            else
              echo "‚ö†Ô∏è  Diverged from origin, forcing reset..."
              git reset --hard origin/Dev
            fi
          fi

          # –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ ignored —Ñ–∞–π–ª–æ–≤ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º untracked)
          git clean -fdX  # –¢–æ–ª—å–∫–æ .pyc, __pycache__ –∏ —Ç.–¥.

          # ========================================
          # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: Verify critical files exist
          # ========================================
          echo "Verifying critical Python modules..."
          MISSING_FILES=0

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ data/database/ –º–æ–¥—É–ª–µ–π
          if [ ! -f "data/database/__init__.py" ]; then
            echo "‚úó ERROR: data/database/__init__.py is MISSING!"
            MISSING_FILES=1
          else
            echo "‚úì data/database/__init__.py exists"
          fi

          if [ ! -f "data/database/models.py" ]; then
            echo "‚úó ERROR: data/database/models.py is MISSING!"
            MISSING_FILES=1
          else
            echo "‚úì data/database/models.py exists"
          fi

          if [ ! -f "data/database/auth.py" ]; then
            echo "‚úó ERROR: data/database/auth.py is MISSING!"
            MISSING_FILES=1
          else
            echo "‚úì data/database/auth.py exists"
          fi

          # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ git
          if [ $MISSING_FILES -eq 1 ]; then
            echo "‚ö†Ô∏è  CRITICAL: Missing core Python modules detected!"
            echo "Restoring from git repository..."
            git restore data/database/

            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if [ -f "data/database/models.py" ]; then
              echo "‚úì Files successfully restored from git"
            else
              echo "‚úó FATAL: Cannot restore critical files - deployment ABORTED"
              exit 1
            fi
          fi

          # –û—á–∏—Å—Ç–∫–∞ Python –∫—ç—à–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
          echo "Clearing Python cache..."
          find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name '*.pyc' -delete 2>/dev/null || true
          echo "‚úì Python cache cleared"

          # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ data/ –æ–±—Ä–∞—Ç–Ω–æ
          echo "Restoring data directory..."
          if [ -d "/tmp/grantservice_data_safe" ]; then
            mv /tmp/grantservice_data_safe data
            echo "‚úì Data directory restored"
          fi

          # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ config/.env
          echo "Restoring config/.env (bot token)..."
          if [ -f "/tmp/grantservice_env_safe" ]; then
            mkdir -p config
            cp /tmp/grantservice_env_safe config/.env
            chmod 600 config/.env
            echo "‚úì Bot token restored"
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
          CURRENT_COMMIT=$(git rev-parse HEAD)
          echo "Updated to commit: $CURRENT_COMMIT"

          # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
          echo "Verifying production database..."
          if [ -f "data/grantservice.db" ]; then
            DB_SIZE=$(du -h data/grantservice.db | cut -f1)
            echo "‚úì Production database intact: $DB_SIZE"
          else
            echo "‚úó ERROR: Production database missing after update!"
            if [ -f "data/grantservice.db.backup" ]; then
              echo "Restoring from backup..."
              cp data/grantservice.db.backup data/grantservice.db
              echo "‚úì Database restored from backup"
            fi
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã
          echo "Checking if files are updated..."
          ls -la scripts/
          ls -la .github/workflows/
          
          # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
          if [ -f "/var/GrantService/venv/bin/activate" ]; then
              source /var/GrantService/venv/bin/activate
          fi
          
          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –±–æ—Ç–∞
          echo "Installing bot dependencies..."
          cd /var/GrantService/telegram-bot
          pip install -r requirements.txt
          
          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
          echo "Installing admin panel dependencies..."
          cd /var/GrantService/web-admin
          pip install -r requirements.txt
          
          # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ë–ï–ó–û–ü–ê–°–ù–û –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –ë–î)
          echo "Initializing auth roles..."
          cd /var/GrantService
          python3 scripts/init_auth_roles.py || true
          python3 scripts/fix_authorization.py || true

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
          echo "Updating systemd services if needed..."
          bash scripts/setup_systemd_services.sh || true
          
          # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "Starting services..."
          sudo systemctl start grantservice-bot
          sudo systemctl start grantservice-admin
          
          # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
          sleep 5
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
          echo "Checking service status..."
          sudo systemctl status grantservice-bot --no-pager
          sudo systemctl status grantservice-admin --no-pager

          echo "Deployment completed successfully!"

    # Post-deployment smoke tests
    - name: Run smoke tests
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          echo "Running smoke tests..."

          # Test 1: Check bot process is running
          if systemctl is-active --quiet grantservice-bot; then
            echo "‚úì Bot service is running"
          else
            echo "‚úó Bot service is NOT running"
            exit 1
          fi

          # Test 2: Check admin panel is running
          if systemctl is-active --quiet grantservice-admin; then
            echo "‚úì Admin service is running"
          else
            echo "‚úó Admin service is NOT running"
            exit 1
          fi

          # Test 3: Check admin panel HTTP endpoint
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8550/ || echo "000")
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "302" ]; then
            echo "‚úì Admin panel HTTP: $HTTP_CODE"
          else
            echo "‚úó Admin panel HTTP failed: $HTTP_CODE"
            exit 1
          fi

          # Test 4: Check HTTPS endpoint
          HTTPS_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://grantservice.onff.ru/ || echo "000")
          if [ "$HTTPS_CODE" = "200" ] || [ "$HTTPS_CODE" = "302" ]; then
            echo "‚úì HTTPS endpoint: $HTTPS_CODE"
          else
            echo "‚úó HTTPS endpoint failed: $HTTPS_CODE"
            exit 1
          fi

          # Test 5: Check database connectivity
          cd /var/GrantService
          if python3 -c "from data.database.models import get_db_connection; conn = get_db_connection(); conn.close(); print('‚úì Database connection OK')" 2>/dev/null; then
            echo "‚úì Database is accessible"
          else
            echo "‚ö† Database connection test failed (non-critical)"
          fi

          # Test 6: Check bot token is valid (not placeholder)
          if grep -q "YOUR_BOT_TOKEN" config/.env 2>/dev/null; then
            echo "‚úó CRITICAL: Bot token is placeholder!"
            exit 1
          else
            echo "‚úì Bot token is configured"
          fi

          echo "All smoke tests passed!"

    # Notify success
    - name: Notify deployment success
      if: success()
      run: |
        # Get commit message
        COMMIT_MSG=$(git log -1 --pretty=format:"%s")

        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=-4930683040" \
          -d "parse_mode=HTML" \
          -d "text=‚úÖ <b>GrantService Deployment SUCCESS</b>%0A%0Aüì¶ Branch: ${{ github.ref_name }}%0Aüí¨ Commit: ${COMMIT_MSG}%0Aüë§ Author: ${{ github.actor }}%0A%0Aü§ñ Bot: Running%0Aüíª Admin: Running%0Aüåê HTTPS: OK%0A%0A‚è± Deploy time: ~30s"

    # Notify failure and rollback
    - name: Rollback on failure
      if: failure()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || '22' }}
        script: |
          echo "Deployment failed! Rolling back..."

          cd /var/GrantService

          # Get current and previous commit
          CURRENT_COMMIT=$(git rev-parse HEAD)
          PREVIOUS_COMMIT=$(git rev-parse HEAD~1)

          echo "Current commit: $CURRENT_COMMIT"
          echo "Rolling back to: $PREVIOUS_COMMIT"

          # Rollback to previous commit
          git reset --hard HEAD~1

          # Clear Python cache
          find . -type d -name '__pycache__' -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name '*.pyc' -delete 2>/dev/null || true

          # Restart services
          sudo systemctl restart grantservice-bot
          sudo systemctl restart grantservice-admin

          sleep 5

          # Check status after rollback
          if systemctl is-active --quiet grantservice-bot && systemctl is-active --quiet grantservice-admin; then
            echo "‚úì Services restored after rollback"
          else
            echo "‚úó Services still failing after rollback - manual intervention needed!"
            exit 1
          fi

    - name: Notify deployment failure
      if: failure()
      run: |
        curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
          -d "chat_id=-4930683040" \
          -d "parse_mode=HTML" \
          -d "text=‚ùå <b>GrantService Deployment FAILED</b>%0A%0A‚ö†Ô∏è Automatic rollback executed%0A%0ABranch: ${{ github.ref_name }}%0ACommit: ${{ github.sha }}%0AAuthor: ${{ github.actor }}%0A%0A<a href='https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'>View logs</a>%0A%0A‚ö°Ô∏è Manual check required!"