#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Claude Code API Wrapper
"""

import requests
import json
import time
from typing import Optional, Dict, Any

class ClaudeCodeClient:
    def __init__(self, base_url: str = "http://localhost:8000", api_key: str = None):
        self.base_url = base_url.rstrip('/')
        self.api_key = api_key
        self.session_id: Optional[str] = None
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {api_key}' if api_key else None
        }
        
    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = requests.get(f"{self.base_url}/health", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e), "status": "unhealthy"}
    
    def chat(self, message: str, session_id: Optional[str] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Claude Code"""
        try:
            payload = {
                "message": message,
                "session_id": session_id or self.session_id
            }
            
            response = requests.post(
                f"{self.base_url}/chat",
                headers=self.headers,
                json=payload
            )
            response.raise_for_status()
            
            result = response.json()
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ session_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            if not self.session_id:
                self.session_id = result.get('session_id')
                
            return result
            
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def execute_code(self, code: str, language: str = "python", 
                    session_id: Optional[str] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude Code"""
        try:
            payload = {
                "code": code,
                "language": language,
                "session_id": session_id or self.session_id
            }
            
            response = requests.post(
                f"{self.base_url}/code",
                headers=self.headers,
                json=payload
            )
            response.raise_for_status()
            
            result = response.json()
            if not self.session_id:
                self.session_id = result.get('session_id')
                
            return result
            
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def list_sessions(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
        try:
            response = requests.get(f"{self.base_url}/sessions", headers=self.headers)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}
    
    def delete_session(self, session_id: str) -> Dict[str, Any]:
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            response = requests.delete(
                f"{self.base_url}/sessions/{session_id}",
                headers=self.headers
            )
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": str(e)}

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    client = ClaudeCodeClient(
        base_url="http://localhost:8000",
        api_key="your-secure-api-key"
    )
    
    print("ü§ñ Claude Code API Client - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API:")
    health = client.health_check()
    print(json.dumps(health, indent=2, ensure_ascii=False))
    
    if health.get("status") != "healthy":
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # 2. –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
    print("\n2. –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç —Å Claude:")
    chat_response = client.chat("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
    if "error" not in chat_response:
        print(f"Claude: {chat_response.get('response')}")
        print(f"Session ID: {chat_response.get('session_id')}")
    else:
        print(f"–û—à–∏–±–∫–∞: {chat_response['error']}")
    
    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
    print("\n3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞:")
    python_code = """
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 10 —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏
result = [fibonacci(i) for i in range(10)]
print("–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏:", result)
"""
    
    code_response = client.execute_code(python_code, "python")
    if "error" not in code_response:
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(code_response.get('result'))
    else:
        print(f"–û—à–∏–±–∫–∞: {code_response['error']}")
    
    # 4. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç
    print("\n4. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Ç:")
    programming_request = """
–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –ø–æ –¥–ª–∏–Ω–µ.
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
–¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""
    
    prog_response = client.chat(programming_request)
    if "error" not in prog_response:
        print("Claude —Å–æ–∑–¥–∞–ª –∫–æ–¥:")
        print(prog_response.get('response'))
    else:
        print(f"–û—à–∏–±–∫–∞: {prog_response['error']}")
    
    # 5. –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
    print("\n5. –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏:")
    sessions = client.list_sessions()
    if "error" not in sessions:
        print(f"–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {sessions.get('total')}")
        for session in sessions.get('sessions', []):
            print(f"  - {session['session_id']} (—Å–æ–∑–¥–∞–Ω–∞: {session['created_at']})")
    else:
        print(f"–û—à–∏–±–∫–∞: {sessions['error']}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å Claude"""
    client = ClaudeCodeClient(
        base_url="http://localhost:8000",
        api_key="your-secure-api-key"
    )
    
    print("ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å Claude Code")
    print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'code' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞")
    print("=" * 50)
    
    while True:
        try:
            user_input = input("\nüë§ –í—ã: ").strip()
            
            if user_input.lower() == 'quit':
                break
            elif user_input.lower() == 'code':
                print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):")
                code_lines = []
                while True:
                    line = input()
                    if line == "":
                        break
                    code_lines.append(line)
                
                if code_lines:
                    code = '\n'.join(code_lines)
                    language = input("–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è [python]: ") or "python"
                    
                    result = client.execute_code(code, language)
                    if "error" not in result:
                        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                        print(result.get('result'))
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                continue
            
            if not user_input:
                continue
                
            response = client.chat(user_input)
            if "error" not in response:
                print(f"\nü§ñ Claude: {response.get('response')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response['error']}")
                
        except KeyboardInterrupt:
            print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "interactive":
        interactive_mode()
    else:
        main()