#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ OAuth —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Claude Code CLI
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç refresh token –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ access token

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python3 auto_refresh_claude_oauth.py

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ cron:
    0 */6 * * * /usr/bin/python3 /root/auto_refresh_claude_oauth.py >> /var/log/claude-oauth-refresh.log 2>&1
"""

import json
import time
import sys
from pathlib import Path
from datetime import datetime, timedelta
import urllib.request
import urllib.error

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CREDENTIALS_PATH = Path.home() / ".claude" / ".credentials.json"
BACKUP_DIR = Path.home() / ".claude" / "backups"
OAUTH_TOKEN_URL = "https://api.anthropic.com/v1/oauth/token"
CLIENT_ID = "claude-code-cli"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π client_id –¥–ª—è Claude CLI

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤ –¥–Ω—è—Ö)
REFRESH_THRESHOLD_DAYS = 1

def log(message: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {message}")

def load_credentials() -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–µ credentials"""
    try:
        with open(CREDENTIALS_PATH, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        log(f"‚ùå Credentials file not found: {CREDENTIALS_PATH}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        log(f"‚ùå Invalid JSON in credentials file: {e}")
        sys.exit(1)

def save_credentials(data: dict):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å credentials —Å backup"""
    # –°–æ–∑–¥–∞—Ç—å backup
    BACKUP_DIR.mkdir(parents=True, exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d-%H%M%S")
    backup_path = BACKUP_DIR / f"credentials-{timestamp}.json"

    # Backup —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
    if CREDENTIALS_PATH.exists():
        with open(CREDENTIALS_PATH, 'r') as f:
            old_data = json.load(f)
        with open(backup_path, 'w') as f:
            json.dump(old_data, f, indent=2)
        log(f"üì¶ Backup saved: {backup_path}")

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π
    with open(CREDENTIALS_PATH, 'w') as f:
        json.dump(data, f, indent=2)
    log(f"‚úÖ Credentials saved: {CREDENTIALS_PATH}")

def check_token_expiry(credentials: dict) -> tuple[bool, float]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (needs_refresh, days_remaining)
    """
    oauth_data = credentials.get("claudeAiOauth", {})
    expires_at = oauth_data.get("expiresAt", 0)

    if expires_at == 0:
        log("‚ö†Ô∏è No expiration time found")
        return False, 0

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è milliseconds ‚Üí seconds
    expires_at_seconds = expires_at / 1000
    now = time.time()

    days_remaining = (expires_at_seconds - now) / 86400

    log(f"üìÖ Token expires in: {days_remaining:.2f} days")

    needs_refresh = days_remaining < REFRESH_THRESHOLD_DAYS
    return needs_refresh, days_remaining

def refresh_access_token(refresh_token: str) -> dict:
    """
    –û–±–Ω–æ–≤–∏—Ç—å access token –∏—Å–ø–æ–ª—å–∑—É—è refresh token

    Returns:
        dict: {"access_token": "...", "refresh_token": "...", "expires_in": 3600}
    """
    log(f"üîÑ Requesting new token from: {OAUTH_TOKEN_URL}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞
    data = {
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
        "client_id": CLIENT_ID
    }

    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON
    json_data = json.dumps(data).encode('utf-8')

    # HTTP –∑–∞–ø—Ä–æ—Å
    request = urllib.request.Request(
        OAUTH_TOKEN_URL,
        data=json_data,
        headers={
            "Content-Type": "application/json",
            "User-Agent": "Claude-Code-CLI-Auto-Refresh/1.0"
        },
        method="POST"
    )

    try:
        with urllib.request.urlopen(request, timeout=30) as response:
            response_data = json.loads(response.read().decode('utf-8'))
            log("‚úÖ Token refresh successful")
            return response_data

    except urllib.error.HTTPError as e:
        error_body = e.read().decode('utf-8')
        log(f"‚ùå HTTP Error {e.code}: {error_body}")
        raise
    except urllib.error.URLError as e:
        log(f"‚ùå URL Error: {e.reason}")
        raise
    except Exception as e:
        log(f"‚ùå Unexpected error: {e}")
        raise

def update_credentials_with_new_token(credentials: dict, token_response: dict) -> dict:
    """
    –û–±–Ω–æ–≤–∏—Ç—å credentials –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
    """
    oauth_data = credentials["claudeAiOauth"]

    # –û–±–Ω–æ–≤–∏—Ç—å access token
    if "access_token" in token_response:
        oauth_data["accessToken"] = token_response["access_token"]
        log(f"‚úÖ Access token updated")

    # –û–±–Ω–æ–≤–∏—Ç—å refresh token (–µ—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–æ–≤—ã–π)
    if "refresh_token" in token_response:
        oauth_data["refreshToken"] = token_response["refresh_token"]
        log(f"‚úÖ Refresh token updated")

    # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if "expires_in" in token_response:
        expires_in_seconds = token_response["expires_in"]
        new_expires_at = int((time.time() + expires_in_seconds) * 1000)
        oauth_data["expiresAt"] = new_expires_at

        days_valid = expires_in_seconds / 86400
        log(f"‚úÖ New token valid for: {days_valid:.2f} days")

    credentials["claudeAiOauth"] = oauth_data
    return credentials

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞"""
    log("=" * 60)
    log("üöÄ Claude OAuth Auto-Refresh Started")
    log("=" * 60)

    # 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
    log("üìñ Loading credentials...")
    credentials = load_credentials()

    oauth_data = credentials.get("claudeAiOauth", {})
    if not oauth_data:
        log("‚ùå No OAuth data found in credentials")
        sys.exit(1)

    subscription_type = oauth_data.get("subscriptionType", "unknown")
    log(f"üìä Subscription: {subscription_type}")

    # 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    needs_refresh, days_remaining = check_token_expiry(credentials)

    if not needs_refresh:
        log(f"‚úÖ Token is still valid ({days_remaining:.2f} days remaining)")
        log("‚ÑπÔ∏è No refresh needed")
        return

    log(f"‚ö†Ô∏è Token expiring soon! ({days_remaining:.2f} days remaining)")
    log(f"üîÑ Starting refresh process...")

    # 3. –ü–æ–ª—É—á–∏—Ç—å refresh token
    refresh_token = oauth_data.get("refreshToken")
    if not refresh_token:
        log("‚ùå No refresh token found!")
        log("‚ö†Ô∏è Manual re-login required: claude login")
        sys.exit(1)

    log(f"üîë Refresh token found: {refresh_token[:20]}...")

    # 4. –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    try:
        token_response = refresh_access_token(refresh_token)
    except Exception as e:
        log(f"‚ùå Failed to refresh token: {e}")
        log("‚ö†Ô∏è Manual re-login may be required: claude login")
        sys.exit(1)

    # 5. –û–±–Ω–æ–≤–∏—Ç—å credentials
    log("üíæ Updating credentials file...")
    updated_credentials = update_credentials_with_new_token(credentials, token_response)

    # 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
    save_credentials(updated_credentials)

    # 7. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    log("üîç Verifying updated credentials...")
    final_check = load_credentials()
    needs_refresh_after, days_remaining_after = check_token_expiry(final_check)

    if days_remaining_after > days_remaining:
        log(f"‚úÖ SUCCESS! Token refreshed successfully")
        log(f"üìÖ New expiration: {days_remaining_after:.2f} days from now")
    else:
        log(f"‚ö†Ô∏è WARNING: Token expiration did not increase as expected")

    log("=" * 60)
    log("‚úÖ Auto-Refresh Completed")
    log("=" * 60)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log("\n‚ö†Ô∏è Interrupted by user")
        sys.exit(130)
    except Exception as e:
        log(f"‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
