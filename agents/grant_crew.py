"""
Grant Crew - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤
"""
from typing import Dict, Any, List
import logging
import sys
import os
import asyncio
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService/shared')
sys.path.append('/var/GrantService/telegram-bot/services')
sys.path.append('/var/GrantService/agents')

try:
    from agents.researcher_agent import ResearcherAgent
    from agents.writer_agent import WriterAgent
    from agents.auditor_agent import AuditorAgent
    from agents.interviewer_agent import InterviewerAgent
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –∏–º–ø–æ—Ä—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    ResearcherAgent = None
    WriterAgent = None
    AuditorAgent = None
    InterviewerAgent = None

logger = logging.getLogger(__name__)

class GrantCrew:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ AGENTS_DATA_FLOW.md"""
    
    def __init__(self, db=None):
        self.db = db
        self.agents = {}
        self.workflow_results = {}
        self._initialize_agents()
    
    def _initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            if ResearcherAgent:
                self.agents['researcher'] = ResearcherAgent(self.db)
            if WriterAgent:
                self.agents['writer'] = WriterAgent(self.db)
            if AuditorAgent:
                self.agents['auditor'] = AuditorAgent(self.db)
            if InterviewerAgent:
                self.agents['interviewer'] = InterviewerAgent(self.db)
                
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–≥–µ–Ω—Ç—ã: {list(self.agents.keys())}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    async def execute_full_workflow_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ workflow —Å–æ–≥–ª–∞—Å–Ω–æ AGENTS_DATA_FLOW.md:
        Interviewer ‚Üí Analyst ‚Üí Researcher ‚Üí Writer ‚Üí Auditor
        """
        try:
            start_time = time.time()
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ workflow –∞–≥–µ–Ω—Ç–æ–≤")
            
            workflow_result = {
                'status': 'success',
                'stages': {},
                'final_application': None,
                'audit_results': None,
                'processing_time': 0,
                'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # –≠—Ç–∞–ø 1: Interviewer - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            if 'interviewer' in self.agents:
                logger.info("üìã –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (Interviewer)")
                interviewer_result = await self.agents['interviewer'].create_questions_async(input_data)
                workflow_result['stages']['interviewer'] = interviewer_result
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ
                input_data['interview_questions'] = interviewer_result.get('questions', {})
            
            # –≠—Ç–∞–ø 2: Analyst (–ø–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –∞–≥–µ–Ω—Ç –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
            logger.info("‚ö†Ô∏è –≠—Ç–∞–ø 2: Analyst (–ø—Ä–æ–ø—É—â–µ–Ω - –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)")
            workflow_result['stages']['analyst'] = {
                'status': 'skipped',
                'message': '–ê–≥–µ–Ω—Ç Analyst –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω'
            }
            
            # –≠—Ç–∞–ø 3: Researcher - –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
            if 'researcher' in self.agents:
                logger.info("üîç –≠—Ç–∞–ø 3: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (Researcher)")
                research_result = await self.agents['researcher'].research_grants_async(input_data)
                workflow_result['stages']['researcher'] = research_result
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ
                input_data['research_data'] = research_result.get('research_data', {})
                input_data['selected_grants'] = research_result.get('grants', [])
            
            # –≠—Ç–∞–ø 4: Writer - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            if 'writer' in self.agents:
                logger.info("‚úçÔ∏è –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (Writer)")
                writer_result = await self.agents['writer'].write_application_async(input_data)
                workflow_result['stages']['writer'] = writer_result
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∞–ª—å—à–µ
                input_data['application'] = writer_result.get('application', {})
                workflow_result['final_application'] = writer_result.get('application', {})
            
            # –≠—Ç–∞–ø 5: Auditor - –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏
            if 'auditor' in self.agents:
                logger.info("üîç –≠—Ç–∞–ø 5: –ê—É–¥–∏—Ç –∑–∞—è–≤–∫–∏ (Auditor)")
                audit_result = await self.agents['auditor'].audit_application_async(input_data)
                workflow_result['stages']['auditor'] = audit_result
                workflow_result['audit_results'] = audit_result
                
                # –ï—Å–ª–∏ –∞—É–¥–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–ª —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                if audit_result.get('final_application'):
                    workflow_result['final_application'] = audit_result['final_application']
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ workflow
            processing_time = time.time() - start_time
            workflow_result['processing_time'] = processing_time
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            failed_stages = [stage for stage, result in workflow_result['stages'].items() 
                           if result.get('status') == 'error']
            
            if failed_stages:
                workflow_result['status'] = 'partial_success'
                workflow_result['failed_stages'] = failed_stages
            
            logger.info(f"‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {processing_time:.2f}—Å")
            return workflow_result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'stages': getattr(self, 'workflow_results', {}),
                'processing_time': time.time() - start_time if 'start_time' in locals() else 0
            }
    
    def execute_full_workflow(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ workflow"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.execute_full_workflow_async(input_data))
        except RuntimeError:
            return asyncio.run(self.execute_full_workflow_async(input_data))
    
    async def execute_stage_async(self, stage_name: str, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ workflow"""
        try:
            if stage_name not in self.agents:
                return {
                    'status': 'error',
                    'message': f'–ê–≥–µ–Ω—Ç {stage_name} –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }
            
            agent = self.agents[stage_name]
            
            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ—Ç–æ–¥—É –∞–≥–µ–Ω—Ç–∞
            if stage_name == 'interviewer':
                return await agent.create_questions_async(input_data)
            elif stage_name == 'researcher':
                return await agent.research_grants_async(input_data)
            elif stage_name == 'writer':
                return await agent.write_application_async(input_data)
            elif stage_name == 'auditor':
                return await agent.audit_application_async(input_data)
            else:
                return await agent.process_async(input_data)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞ {stage_name}: {e}")
            return {
                'status': 'error',
                'message': str(e),
                'stage': stage_name
            }
    
    def execute_stage(self, stage_name: str, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
        try:
            loop = asyncio.get_event_loop()
            return loop.run_until_complete(self.execute_stage_async(stage_name, input_data))
        except RuntimeError:
            return asyncio.run(self.execute_stage_async(stage_name, input_data))
    
    def get_workflow_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ workflow"""
        return {
            'available_agents': list(self.agents.keys()),
            'workflow_stages': [
                'interviewer', 'analyst', 'researcher', 'writer', 'auditor'
            ],
            'implemented_stages': [stage for stage in ['interviewer', 'researcher', 'writer', 'auditor'] 
                                 if stage in self.agents],
            'missing_stages': ['analyst'],
            'last_results': getattr(self, 'workflow_results', {})
        }
    
    def create_questions(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é"""
        if 'interviewer' not in self.agents:
            return {'status': 'error', 'message': 'Interviewer agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        return self.agents['interviewer'].create_questions(input_data)
    
    def research_grants(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–æ–≤"""
        if 'researcher' not in self.agents:
            return {'status': 'error', 'message': 'Researcher agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        return self.agents['researcher'].research_grants(input_data)
    
    def write_application(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        if 'writer' not in self.agents:
            return {'status': 'error', 'message': 'Writer agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        return self.agents['writer'].write_application(input_data)
    
    def audit_application(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—É–¥–∏—Ç –∑–∞—è–≤–∫–∏"""
        if 'auditor' not in self.agents:
            return {'status': 'error', 'message': 'Auditor agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}
        
        return self.agents['auditor'].audit_application(input_data)
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å CrewAI (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
    def kickoff(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å CrewAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        return self.execute_full_workflow(inputs)
    
    def get_execution_logs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        return [
            f"Workflow status: {len(self.agents)} agents initialized",
            f"Available stages: {', '.join(self.agents.keys())}"
        ]

# –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è crew
def create_grant_crew(db=None) -> GrantCrew:
    """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ GrantCrew"""
    return GrantCrew(db)

# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class LegacyGrantCrew:
    """Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞"""
    
    def __init__(self, db=None):
        self.modern_crew = GrantCrew(db)
    
    def research_task(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        return self.modern_crew.research_grants(input_data)
    
    def writing_task(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        return self.modern_crew.write_application(input_data)
    
    def audit_task(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        return self.modern_crew.audit_application(input_data)
