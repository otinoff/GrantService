#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interactive Interviewer Agent V2 - Reference Points Framework

–ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
- Reference Points –≤–º–µ—Å—Ç–æ –∂—ë—Å—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
- –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∏–∞–ª–æ–≥–∞ (state machine)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Qdrant (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –§–ü–ì)
- –ë—é–¥–∂–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∞–∫—Å 5)

Flow:
1. INIT: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
2. EXPLORING: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–±–∞–∑–æ–≤—ã–µ RP)
3. DEEPENING: –£–≥–ª—É–±–ª–µ–Ω–∏–µ (–Ω–µ–ø–æ–ª–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ RP)
4. VALIDATING: –í–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è)
5. FINALIZING: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

Author: Grant Service Architect Agent
Created: 2025-10-20
Version: 2.0 (Reference Points Framework)
"""

import sys
import os
from pathlib import Path

# Cross-platform path setup
_project_root = Path(__file__).parent.parent
sys.path.insert(0, str(_project_root))
sys.path.insert(0, str(_project_root / "shared"))
sys.path.insert(0, str(_project_root / "agents"))

from typing import Dict, Any, List, Optional
import logging
import asyncio
import time
from datetime import datetime

from base_agent import BaseAgent
from auditor_agent import AuditorAgent

# Reference Points Framework
from reference_points import (
    ReferencePointManager,
    AdaptiveQuestionGenerator,
    ConversationFlowManager,
    ConversationState,
    TransitionType,
    UserExpertiseLevel,
    ProjectType
)

# LLM
try:
    from llm.unified_llm_client import UnifiedLLMClient
    from llm.config import AGENT_CONFIGS
    UNIFIED_CLIENT_AVAILABLE = True
except ImportError:
    UNIFIED_CLIENT_AVAILABLE = False
    print("[WARN] UnifiedLLMClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# Qdrant
try:
    from qdrant_client import QdrantClient
    QDRANT_AVAILABLE = True
except ImportError:
    QDRANT_AVAILABLE = False
    print("[WARN] Qdrant client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

logger = logging.getLogger(__name__)


class InteractiveInterviewerAgentV2(BaseAgent):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä —Å Reference Points Framework

    –û—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –æ—Ç V1:
    - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤–º–µ—Å—Ç–æ –∂—ë—Å—Ç–∫–∏—Ö
    - State machine –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Qdrant –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (P0-P3)
    - –ë—é–¥–∂–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–º–∞–∫—Å 5)

    Example:
        >>> agent = InteractiveInterviewerAgentV2(db, llm_provider="claude_code")
        >>> result = await agent.conduct_interview(user_data)
        >>> print(result['audit_score'])
    """

    def __init__(
        self,
        db,
        llm_provider: str = "claude_code",
        qdrant_host: str = "5.35.88.251",
        qdrant_port: int = 6333
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞

        Args:
            db: Database connection
            llm_provider: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä (claude_code, gigachat, openai)
            qdrant_host: –•–æ—Å—Ç Qdrant —Å–µ—Ä–≤–µ—Ä–∞
            qdrant_port: –ü–æ—Ä—Ç Qdrant
        """
        super().__init__("interactive_interviewer_v2", db, llm_provider)

        # Auditor –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        self.auditor = AuditorAgent(db, llm_provider)

        # Reference Points Manager
        self.rp_manager = ReferencePointManager()
        self.rp_manager.load_fpg_reference_points()  # –ó–∞–≥—Ä—É–∑–∏—Ç—å –§–ü–ì reference points

        # Adaptive Question Generator
        self.question_generator = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ LLM

        # Conversation Flow Manager
        self.flow_manager = ConversationFlowManager(self.rp_manager)

        # Qdrant –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        self.qdrant = None
        self.qdrant_collection = "knowledge_sections"

        if QDRANT_AVAILABLE:
            try:
                self.qdrant = QdrantClient(
                    host=qdrant_host,
                    port=qdrant_port,
                    timeout=10
                )
                logger.info(f"‚úÖ Qdrant connected ({qdrant_host}:{qdrant_port})")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Qdrant unavailable: {e}")
                self.qdrant = None
        else:
            logger.warning("‚ö†Ô∏è Qdrant client not installed")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
        self._init_llm()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Question Generator
        if self.llm:
            self.question_generator = AdaptiveQuestionGenerator(
                llm_client=self.llm,
                qdrant_client=self.qdrant,
                qdrant_collection=self.qdrant_collection
            )

        logger.info(f"‚úÖ InteractiveInterviewerAgentV2 initialized with {llm_provider}")

    def _init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –∫–ª–∏–µ–Ω—Ç–∞"""
        if not UNIFIED_CLIENT_AVAILABLE:
            logger.error("UnifiedLLMClient not available")
            self.llm = None
            return

        try:
            # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è interviewer
            config = AGENT_CONFIGS.get("interviewer", {})

            self.llm = UnifiedLLMClient(
                provider=self.llm_provider,
                model=config.get("model"),
                temperature=config.get("temperature", 0.7),
                max_tokens=config.get("max_tokens", 2000)
            )

            logger.info(f"‚úÖ LLM initialized: {self.llm_provider}")

        except Exception as e:
            logger.error(f"Failed to initialize LLM: {e}")
            self.llm = None

    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è BaseAgent)

        –î–ª—è V2 –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async –º–µ—Ç–æ–¥ conduct_interview()
        """
        raise NotImplementedError(
            "InteractiveInterviewerAgentV2 is async-only. "
            "Use: await agent.conduct_interview(user_data, callback)"
        )

    async def conduct_interview(
        self,
        user_data: Dict[str, Any],
        callback_ask_question: Optional[callable] = None
    ) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Reference Points Framework

        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id, username, grant_fund)
            callback_ask_question: Callback –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
                async def ask(question: str) -> str

        Returns:
            {
                'anketa': {...},  # –°–æ–±—Ä–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
                'audit_score': float,  # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ 0-100
                'audit_details': {...},  # –î–µ—Ç–∞–ª–∏ –∞—É–¥–∏—Ç–∞
                'questions_asked': int,  # –°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ
                'follow_ups_asked': int,  # –°–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö
                'processing_time': float,  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                'conversation_state': str  # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            }
        """
        start_time = time.time()

        logger.info("=" * 80)
        logger.info("–ù–ê–ß–ê–õ–û –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –ò–ù–¢–ï–†–í–¨–Æ V2 (REFERENCE POINTS)")
        logger.info("=" * 80)

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await self._send_greeting(user_data, callback_ask_question)

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        anketa = await self._conversation_loop(user_data, callback_ask_question)

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç
        logger.info("\n[–§–ò–ù–ê–õ–¨–ù–´–ô –ê–£–î–ò–¢] –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–∫–∏")
        audit_result = await self._final_audit(anketa)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        await self._save_to_db(user_data, anketa, audit_result)

        processing_time = time.time() - start_time

        logger.info("=" * 80)
        logger.info(f"–ò–ù–¢–ï–†–í–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û | Score: {audit_result['final_score']}/100 | "
                   f"Time: {processing_time:.1f}s")
        logger.info("=" * 80)

        return {
            'anketa': anketa,
            'audit_score': audit_result['final_score'],
            'audit_details': audit_result,
            'questions_asked': self.flow_manager.context.questions_asked,
            'follow_ups_asked': self.flow_manager.context.follow_ups_asked,
            'processing_time': processing_time,
            'conversation_state': self.flow_manager.context.current_state.value
        }

    async def _send_greeting(
        self,
        user_data: Dict[str, Any],
        callback: Optional[callable]
    ):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        greeting = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤.

–ú—ã –ø—Ä–æ–≤–µ–¥—ë–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã,
–∞ –≤—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–º.

–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - —è —Å–∞–º —Å–æ–±–µ—Ä—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? üöÄ
"""
        if callback:
            await callback(greeting)
        else:
            logger.info(f"GREETING: {greeting}")

    async def _conversation_loop(
        self,
        user_data: Dict[str, Any],
        callback_ask_question: Optional[callable]
    ) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            callback_ask_question: Callback –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            –°–æ–±—Ä–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞
        """
        last_answer = None
        turn = 1
        max_turns = 30  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞

        while turn <= max_turns:
            logger.info(f"\n--- Turn {turn} ---")

            # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            action = self.flow_manager.decide_next_action(last_answer=last_answer)

            logger.info(f"Action: {action['type']} | Transition: {action['transition'].value}")

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            if action['type'] == 'finalize':
                if callback_ask_question:
                    await callback_ask_question(action['message'])
                logger.info(action['message'])
                break

            # –ü–æ–ª—É—á–∏—Ç—å reference point
            rp = action['reference_point']
            logger.info(f"Current RP: {rp.id} ({rp.name}) [P{rp.priority.value}]")

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (–∫–∞–∂–¥—ã–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤)
            if turn % 5 == 1 and turn > 1:
                progress_msg = self.flow_manager.get_progress_message()
                if callback_ask_question:
                    await callback_ask_question(progress_msg)
                logger.info(progress_msg)

            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            question = await self._generate_question_for_rp(
                rp,
                action['transition']
            )

            if not question:
                # Skip - —É–∂–µ –æ—Ç–≤–µ—á–µ–Ω–æ
                logger.info(f"Skipping {rp.id} - already covered")
                turn += 1
                continue

            # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞
            if action.get('message'):
                full_question = f"{action['message']}\n\n{question}"
            else:
                full_question = question

            # –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            if callback_ask_question:
                answer = await callback_ask_question(full_question)
            else:
                # Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.info(f"QUESTION: {full_question}")
                answer = f"[Mock answer for {rp.name}]"
                logger.info(f"ANSWER: {answer}")

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç
            self.flow_manager.context.add_turn(
                question=question,
                answer=answer,
                rp_id=rp.id
            )

            # –û—Ç–º–µ—Ç–∏—Ç—å follow-up –µ—Å–ª–∏ —ç—Ç–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
            if action['transition'] in [TransitionType.DEEP_DIVE, TransitionType.LOOP_BACK]:
                self.flow_manager.add_follow_up()

            last_answer = answer
            turn += 1

        # –°–æ–±—Ä–∞—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ reference points
        anketa = self._build_anketa_from_rps()

        return anketa

    async def _generate_question_for_rp(
        self,
        rp,
        transition: TransitionType
    ) -> Optional[str]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è Reference Point

        Args:
            rp: ReferencePoint
            transition: –¢–∏–ø –ø–µ—Ä–µ—Ö–æ–¥–∞

        Returns:
            –í–æ–ø—Ä–æ—Å –∏–ª–∏ None –µ—Å–ª–∏ skip
        """
        if not self.question_generator:
            # Fallback - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å hints –∏–∑ RP
            logger.warning("Question generator not available, using fallback")
            return rp.question_hints[0] if rp.question_hints else f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ: {rp.name}"

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        context = {
            'collected_fields': {rp_id: rp.collected_data.get('text', '')
                               for rp_id, rp in self.rp_manager.reference_points.items()
                               if rp.collected_data},
            'covered_topics': self.flow_manager.context.covered_topics,
            **self.flow_manager.context.collected_data
        }

        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        question = await self.question_generator.generate_question(
            reference_point=rp,
            conversation_context=context,
            user_level=UserExpertiseLevel.INTERMEDIATE,  # TODO: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å
            project_type=ProjectType.UNKNOWN  # TODO: –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
        )

        return question

    def _build_anketa_from_rps(self) -> Dict[str, Any]:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ Reference Points

        Returns:
            –ê–Ω–∫–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –∞—É–¥–∏—Ç–∞
        """
        anketa = {}

        # –ú–∞–ø–ø–∏–Ω–≥ RP -> –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã
        rp_to_field_mapping = {
            'rp_001_project_essence': 'project_goal',
            'rp_002_problem': 'problem_description',
            'rp_003_target_audience': 'target_audience',
            'rp_004_methodology': 'methodology',
            'rp_005_budget': 'budget_total',
            'rp_006_budget_breakdown': 'budget_breakdown',
            'rp_007_results': 'expected_results',
            'rp_008_team': 'team_description',
            'rp_009_partners': 'partners',
            'rp_010_risks': 'risks',
            'rp_011_sustainability': 'sustainability',
            'rp_012_geography': 'region',
            'rp_013_timeline': 'project_duration_months'
        }

        for rp_id, field_name in rp_to_field_mapping.items():
            rp = self.rp_manager.get_reference_point(rp_id)
            if rp and rp.collected_data:
                anketa[field_name] = rp.collected_data.get('text', '')

        return anketa

    async def _final_audit(self, anketa: Dict[str, Any]) -> Dict[str, Any]:
        """
        –§–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã

        Args:
            anketa: –°–æ–±—Ä–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞
        """
        try:
            audit_result = await self.auditor.evaluate_anketa(anketa, grant_fund='fpg')

            # –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å score —Å —É—á—ë—Ç–æ–º Reference Points
            rp_progress = self.rp_manager.get_progress()

            # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è score –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–Ω–æ—Ç—ã RP
            completion_bonus = rp_progress.overall_completion * 10  # –î–æ +10 –±–∞–ª–ª–æ–≤

            final_score = min(100, audit_result.get('final_score', 0) + completion_bonus)

            return {
                **audit_result,
                'final_score': final_score,
                'rp_completion': rp_progress.overall_completion,
                'critical_completed': rp_progress.critical_completed,
                'important_completed': rp_progress.important_completed
            }

        except Exception as e:
            logger.error(f"Audit failed: {e}")
            return {
                'final_score': 50,
                'error': str(e)
            }

    async def _save_to_db(
        self,
        user_data: Dict[str, Any],
        anketa: Dict[str, Any],
        audit_result: Dict[str, Any]
    ):
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î

        Args:
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            anketa: –ê–Ω–∫–µ—Ç–∞
            audit_result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            logger.info(f"Saving to DB: user={user_data.get('telegram_id')}, "
                       f"score={audit_result['final_score']}")

        except Exception as e:
            logger.error(f"DB save failed: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    import asyncio

    logging.basicConfig(level=logging.INFO)

    async def main():
        # Mock DB
        db = None

        # –°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
        agent = InteractiveInterviewerAgentV2(
            db=db,
            llm_provider="claude_code",
            qdrant_host="5.35.88.251",
            qdrant_port=6333
        )

        # Mock user data
        user_data = {
            'telegram_id': 123456,
            'username': 'test_user',
            'grant_fund': 'fpg'
        }

        # Mock callback –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
        async def ask_question(question: str) -> str:
            print(f"\nü§ñ BOT: {question}")
            await asyncio.sleep(0.5)
            return f"Mock answer to: {question[:50]}..."

        # –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é
        result = await agent.conduct_interview(
            user_data=user_data,
            callback_ask_question=ask_question
        )

        print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
        print(f"Audit Score: {result['audit_score']:.1f}/100")
        print(f"Questions Asked: {result['questions_asked']}")
        print(f"Follow-ups: {result['follow_ups_asked']}")
        print(f"Processing Time: {result['processing_time']:.1f}s")
        print(f"Final State: {result['conversation_state']}")

    asyncio.run(main())
