#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Presidential Grants Researcher - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ResearcherAgentV2 –¥–ª—è –§–ü–ì

–û–¢–õ–ò–ß–ò–Ø –û–¢ –ë–ê–ó–û–í–û–ì–û ResearcherAgentV2:
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Ññ28: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤
- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã: prezidentskiegranty.ru, gov.ru
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ –§–ü–ì
- –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫

WebSearch –ø—Ä–æ–≤–∞–π–¥–µ—Ä: Perplexity API (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –†–§ –±–µ–∑ VPN)

Author: Grant Service Architect Agent
Created: 2025-10-12
Version: 1.0
"""

import sys
import os

# Cross-platform path setup
from pathlib import Path
_project_root = Path(__file__).parent.parent
sys.path.insert(0, str(_project_root))
sys.path.insert(0, str(_project_root / "shared"))
sys.path.insert(0, str(_project_root / "telegram-bot" / "services"))
sys.path.insert(0, str(_project_root / "web-admin"))
sys.path.insert(0, str(_project_root / "web-admin" / "utils"))
sys.path.insert(0, str(_project_root / "data" / "database"))
sys.path.insert(0, str(_project_root / "agents"))

from typing import Dict, Any, List, Optional

import logging
import asyncio
import time
from datetime import datetime
import json

# Add paths
current_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(current_dir)
sys.path.append(os.path.join(current_dir, 'web-admin'))

from agents.researcher_agent_v2 import ResearcherAgentV2

logger = logging.getLogger(__name__)


class PresidentialGrantsResearcher(ResearcherAgentV2):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤

    Workflow:
    1. –í—ã–ø–æ–ª–Ω–∏—Ç—å 27 –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—á–µ—Ä–µ–∑ ResearcherAgentV2)
    2. –í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Ññ28: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì
    3. –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ researcher_research.research_results (JSONB)
    """

    def __init__(
        self,
        db,
        llm_provider: str = "claude_code",
        websearch_provider: str = None,
        websearch_fallback: str = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ researcher

        Args:
            db: Database instance
            llm_provider: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä (default: claude_code)
            websearch_provider: WebSearch –ø—Ä–æ–≤–∞–π–¥–µ—Ä (default: perplexity)
            websearch_fallback: WebSearch fallback (default: claude_code)
        """
        super().__init__(
            db,
            llm_provider=llm_provider,
            websearch_provider=websearch_provider,
            websearch_fallback=websearch_fallback
        )

        logger.info("[PresidentialGrantsResearcher] Initialized with WebSearch for FPG")

    async def conduct_research_async(self, anketa_id: str) -> Dict[str, Any]:
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥:
        27 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ + 1 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –§–ü–ì

        Args:
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

        Returns:
            {
                'status': 'success',
                'research_results': {
                    'block_1': [...],  # 10 –ø—Ä–æ—Ñ–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    'block_2': [...],  # 10 –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    'block_3': [...],  # 7 —Ü–µ–ª–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                    'fund_requirements': {...}  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì (–∑–∞–ø—Ä–æ—Å ‚Ññ28)
                },
                'total_queries': 28,
                'metadata': {...}
            }
        """
        start_time = time.time()
        logger.info("=" * 80)
        logger.info("PRESIDENTIAL GRANTS RESEARCHER: START")
        logger.info("=" * 80)

        # –í—ã–∑–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ (27 –∑–∞–ø—Ä–æ—Å–æ–≤)
        logger.info("[1/2] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ 27 –±–∞–∑–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        base_result = await super().research_with_expert_prompts(anketa_id)

        if base_result['status'] != 'completed':
            logger.error("‚ùå –ë–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return base_result

        total_queries_base = base_result['research_results']['metadata']['total_queries']
        logger.info(f"‚úÖ –ë–∞–∑–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {total_queries_base} –∑–∞–ø—Ä–æ—Å–æ–≤")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –§–ü–ì
        logger.info("\n[2/2] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –§–ü–ì...")
        fund_data = await self._websearch_fund_requirements()

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        base_result['research_results']['fund_requirements'] = fund_data
        base_result['research_results']['metadata']['total_queries'] = 28
        base_result['research_results']['metadata']['fpg_specialized'] = True

        # –î–æ–±–∞–≤–ª—è–µ–º total_queries –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        base_result['total_queries'] = 28
        base_result['status'] = 'success'  # –ú–µ–Ω—è–µ–º –Ω–∞ 'success' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–µ—Å—Ç–æ–º

        # üî• CRITICAL: –û–±–Ω–æ–≤–∏—Ç—å –ë–î —Å fund_requirements!
        # –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fund_requirements
        research_id = base_result.get('research_id')
        if research_id:
            await self._update_research_results_with_fund_requirements(
                research_id=research_id,
                research_results=base_result['research_results'],
                total_queries=28
            )
            logger.info(f"üíæ Fund requirements —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î: {research_id}")

        processing_time = time.time() - start_time

        logger.info("=" * 80)
        logger.info(f"‚úÖ PRESIDENTIAL GRANTS RESEARCH COMPLETED ({processing_time:.1f}s)")
        logger.info(f"   Total queries: 28 (27 base + 1 FPG)")
        logger.info("=" * 80)

        return base_result

    async def _websearch_fund_requirements(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—Ä–æ—Å ‚Ññ28: –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤

        WebSearch query —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã:
        - prezidentskiegranty.ru
        - gov.ru
        - kremlin.ru

        Returns:
            {
                'directions': [...],  # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
                'criteria': [...],  # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏
                'indicators': [...],  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                'examples': [...],  # –ü—Ä–∏–º–µ—Ä—ã –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
                'sources': [...],  # –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                'timestamp': '...'
            }
        """
        logger.info("  [FPG Query] –ó–∞–ø—Ä–æ—Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤...")

        query = """
–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ 2025:

1. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è
2. –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–æ–∫
3. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞—è–≤–æ–∫
4. –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
5. –ü—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–ù—É–∂–Ω–∞ –¢–û–õ–¨–ö–û –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å —Å–∞–π—Ç–æ–≤ —Ñ–æ–Ω–¥–∞ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.
"""

        try:
            # WebSearchRouter —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ—Ä–µ–∑ self (–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç ResearcherAgentV2)
            from shared.llm.websearch_router import WebSearchRouter

            async with WebSearchRouter(self.db) as router:
                result = await router.websearch(
                    query=query,
                    allowed_domains=[
                        'prezidentskiegranty.ru',
                        'grants.gov.ru',
                        'gov.ru',
                        'kremlin.ru'
                    ],
                    max_results=10
                )

            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            parsed_data = self._parse_fund_requirements(result)

            logger.info(f"  ‚úÖ FPG —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã ({len(parsed_data.get('sources', []))} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)")

            return parsed_data

        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ FPG —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
            # Fallback: –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            return {
                'directions': [],
                'criteria': [],
                'indicators': [],
                'examples': [],
                'sources': [],
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def _parse_fund_requirements(self, websearch_result: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ WebSearch –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –§–ü–ì

        Args:
            websearch_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç WebSearchRouter

        Returns:
            –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö —Ñ–æ–Ω–¥–∞
        """
        logger.info("  [Parse] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ WebSearch –¥–ª—è –§–ü–ì...")

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            content = websearch_result.get('content', '')
            sources = websearch_result.get('sources', [])

            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ LLM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            # NOTE: –î–ª—è production –≤–µ—Ä—Å–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
            parsed = {
                'directions': self._extract_directions(content),
                'criteria': self._extract_criteria(content),
                'indicators': self._extract_indicators(content),
                'examples': self._extract_examples(content),
                'sources': sources,
                'raw_content': content[:5000],  # –ü–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                'timestamp': datetime.now().isoformat()
            }

            logger.info(f"    Directions: {len(parsed['directions'])}")
            logger.info(f"    Criteria: {len(parsed['criteria'])}")
            logger.info(f"    Indicators: {len(parsed['indicators'])}")
            logger.info(f"    Examples: {len(parsed['examples'])}")

            return parsed

        except Exception as e:
            logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return {
                'directions': [],
                'criteria': [],
                'indicators': [],
                'examples': [],
                'sources': [],
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }

    def _extract_directions(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        directions = []
        keywords = [
            '—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
            '–∫—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ',
            '—Å–ø–æ—Ä—Ç',
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            '–Ω–∞—É–∫–∞',
            '–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
            '–º–æ–ª–æ–¥—ë–∂–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞',
            '–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ',
            '—ç–∫–æ–ª–æ–≥–∏—è',
            '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –æ–±—â–µ—Å—Ç–≤–æ'
        ]

        content_lower = content.lower()

        for keyword in keywords:
            if keyword in content_lower:
                directions.append(keyword.capitalize())

        return directions[:10]  # –¢–æ–ø-10

    def _extract_criteria(self, content: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏"""
        # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –§–ü–ì (known)
        base_criteria = [
            {
                'name': '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞',
                'weight': '–≤—ã—Å–æ–∫–∏–π',
                'description': '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ü–µ–ª—è–º –∏ –∑–∞–¥–∞—á–∞–º –§–æ–Ω–¥–∞, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å'
            },
            {
                'name': '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞',
                'weight': '–≤—ã—Å–æ–∫–∏–π',
                'description': '–û–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤, –¥–æ—Å—Ç–∏–∂–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
            },
            {
                'name': '–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã',
                'weight': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–û–ø—ã—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'
            },
            {
                'name': '–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞',
                'weight': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–û–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤'
            },
            {
                'name': '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
                'weight': '—Å—Ä–µ–¥–Ω–∏–π',
                'description': '–ü–ª–∞–Ω –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞'
            }
        ]

        return base_criteria

    def _extract_indicators(self, content: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –¢–∏–ø–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤
        indicators = [
            {
                'category': '–û—Ö–≤–∞—Ç',
                'indicator': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤/–±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤',
                'measurement': '—á–µ–ª–æ–≤–µ–∫'
            },
            {
                'category': '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
                'indicator': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ–¥—ë–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π',
                'measurement': '—à—Ç—É–∫'
            },
            {
                'category': '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
                'indicator': '–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã—Ö —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
                'measurement': '%'
            },
            {
                'category': '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
                'indicator': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç',
                'measurement': '—á–µ–ª–æ–≤–µ–∫'
            }
        ]

        return indicators

    def _extract_examples(self, content: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–∏–º–µ—Ä—ã —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        # NOTE: –í production –≤–µ—Ä—Å–∏–∏ - –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        # –î–ª—è –ø–µ—Ä–≤–æ–π –≤–µ—Ä—Å–∏–∏ - placeholder
        examples = []

        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        if '–ø—Ä–æ–µ–∫—Ç' in content.lower():
            examples.append({
                'title': '[–ü—Ä–∏–º–µ—Ä –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞]',
                'description': '–£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ WebSearch',
                'source': 'prezidentskiegranty.ru'
            })

        return examples

    async def _update_research_results_with_fund_requirements(
        self,
        research_id: str,
        research_results: Dict,
        total_queries: int
    ):
        """
        –û–±–Ω–æ–≤–∏—Ç—å research_results –≤ –ë–î —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º fund_requirements

        Args:
            research_id: ID –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            research_results: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–≤–∫–ª—é—á–∞—è fund_requirements)
            total_queries: –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (28)
        """
        try:
            # –û–±–Ω–æ–≤–∏—Ç—å metadata.total_queries —Ç–æ–∂–µ
            research_results['metadata']['total_queries'] = total_queries

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
            results_json = json.dumps(research_results, ensure_ascii=False)

            with self.db.connect() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    UPDATE researcher_research
                    SET research_results = %s::jsonb
                    WHERE research_id = %s
                    """,
                    (results_json, research_id)
                )
                conn.commit()
                cursor.close()

            logger.info(f"üíæ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: fund_requirements –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ {research_id}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î —Å fund_requirements: {e}")


# –£–¥–æ–±–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
async def research_for_presidential_grant(
    db,
    anketa_id: str,
    websearch_provider: str = "perplexity"
) -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞

    Args:
        db: Database instance
        anketa_id: ID –∞–Ω–∫–µ—Ç—ã
        websearch_provider: WebSearch –ø—Ä–æ–≤–∞–π–¥–µ—Ä (default: perplexity)

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (27 + 1 –∑–∞–ø—Ä–æ—Å–æ–≤)
    """
    researcher = PresidentialGrantsResearcher(
        db,
        llm_provider="claude_code",
        websearch_provider=websearch_provider
    )

    return await researcher.conduct_research_async(anketa_id)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    print("PresidentialGrantsResearcher - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –§–ü–ì")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: test_archery_club_fpg_e2e.py –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∞")
