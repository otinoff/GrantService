#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Researcher Agent - –∞–≥–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º
"""
import sys
import os
from typing import Dict, Any, List
import logging
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService/shared')
sys.path.append('/var/GrantService/telegram-bot/services')

from .base_agent import BaseAgent

logger = logging.getLogger(__name__)

try:
    from llm.unified_llm_client import UnifiedLLMClient
    from llm.config import AGENT_CONFIGS
    UNIFIED_CLIENT_AVAILABLE = True
except ImportError:
    UNIFIED_CLIENT_AVAILABLE = False
    UnifiedLLMClient = None
    AGENT_CONFIGS = {}

try:
    from services.llm_router import LLMRouter, LLMProvider
    LLM_ROUTER_AVAILABLE = True
except ImportError:
    logger.warning("LLM Router not available")
    LLMRouter = None
    LLMProvider = None
    LLM_ROUTER_AVAILABLE = False

class ResearcherAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ –ø–æ–∏—Å–∫–∞ –≥—Ä–∞–Ω—Ç–æ–≤"""
    
    def __init__(self, db, llm_provider: str = "claude_code"):
        super().__init__("researcher", db, llm_provider)
        
        if UNIFIED_CLIENT_AVAILABLE:
            self.llm_client = UnifiedLLMClient()
            self.config = AGENT_CONFIGS.get("researcher", AGENT_CONFIGS.get("writer", {}))
        elif LLM_ROUTER_AVAILABLE:
            self.llm_router = LLMRouter()
        else:
            self.llm_client = None
            self.llm_router = None
            logger.warning("Researcher agent working without LLM services")
    
    def _get_goal(self) -> str:
        return "–ü—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"
    
    def _get_backstory(self) -> str:
        return """–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Ä—ã–Ω–∫–∞ —Å 15-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º –≤ –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞–Ω—Ç–æ–≤–æ–≥–æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è. 
        –¢—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. 
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ –≥—Ä–∞–Ω—Ç–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏."""
    
    async def research_grant_async(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            description = data.get('description', '')
            llm_provider = data.get('llm_provider', 'auto')
            model = data.get('model', 'auto')
            temperature = data.get('temperature', 0.3)
            max_tokens = data.get('max_tokens', 1000)
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {description[:100]}...")
            
            if UNIFIED_CLIENT_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedLLMClient
                config = AGENT_CONFIGS.get("researcher", AGENT_CONFIGS["writer"])
                
                async with UnifiedLLMClient(
                    provider=config["provider"],
                    model=config["model"],
                    temperature=config["temperature"]
                ) as client:
                    
                    prompt = f"""
                    –ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏:
                    
                    {description}
                    
                    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
                    1. –†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
                    2. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ä–µ–¥—É
                    3. –ì—Ä–∞–Ω—Ç–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
                    4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–∞—è–≤–∫–∏
                    
                    –î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
                    """
                    
                    result_text = await client.generate_text(prompt, config["max_tokens"])
                    
                    return {
                        'status': 'success',
                        'result': result_text,
                        'agent_type': 'researcher',
                        'provider_used': config["provider"],
                        'input_data': description,
                        'llm_settings': {
                            'provider': config["provider"],
                            'model': config["model"],
                            'temperature': config["temperature"],
                            'max_tokens': config["max_tokens"]
                        }
                    }
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                return self.research_grant(data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}",
                'agent_type': 'researcher',
                'provider_used': llm_provider if 'llm_provider' in locals() else 'unknown'
            }
    
    def research_grant(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (fallback)"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            description = data.get('description', '')
            llm_provider = data.get('llm_provider', 'auto')
            model = data.get('model', 'auto')
            temperature = data.get('temperature', 0.3)
            max_tokens = data.get('max_tokens', 1000)
            
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {description[:100]}...")
            
            if not UNIFIED_CLIENT_AVAILABLE:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if llm_provider == "auto":
                    target_provider = None  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
                elif llm_provider == "gigachat":
                    target_provider = LLMProvider.GIGACHAT
                elif llm_provider == "local":
                    target_provider = LLMProvider.LOCAL
                else:
                    target_provider = None
                
                # –ü—Ä–æ–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ LLM Router
                result = self.llm_router.analyze_grant_application(
                    application_text=description,
                    grant_criteria="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π",
                    preferred_provider=target_provider
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                result['agent_type'] = 'researcher'
                result['input_data'] = description
                result['llm_settings'] = {
                    'provider': llm_provider,
                    'model': model,
                    'temperature': temperature,
                    'max_tokens': max_tokens
                }
                
                logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', 'Unknown')}")
                
                return result
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                return asyncio.run(self.research_grant_async(data))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {str(e)}",
                'agent_type': 'researcher',
                'provider_used': llm_provider if 'llm_provider' in locals() else 'unknown'
            }
    
    def analyze_market(self, project_description: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            prompt = f"""
–ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:

{project_description}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π:
1. –†–∞–∑–º–µ—Ä —Ä—ã–Ω–∫–∞ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
2. –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ—Ç—Ä–∞—Å–ª–∏
3. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
4. –†—ã–Ω–æ—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

–î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã.
"""
            
            if UNIFIED_CLIENT_AVAILABLE:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedLLMClient
                config = AGENT_CONFIGS.get("researcher", AGENT_CONFIGS["writer"])
                
                async def analyze_async():
                    async with UnifiedLLMClient(
                        provider=config["provider"],
                        model=config["model"],
                        temperature=config["temperature"]
                    ) as client:
                        return await client.generate_text(prompt, config["max_tokens"])
                
                result_text = asyncio.run(analyze_async())
                
                return {
                    'status': 'success',
                    'result': result_text,
                    'agent_type': 'researcher',
                    'provider_used': config["provider"]
                }
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                result = self.llm_router.analyze_grant_application(
                    application_text=project_description,
                    grant_criteria="–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥—ã"
                )
                return result
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {e}")
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞: {str(e)}",
                'agent_type': 'researcher'
            }
    
    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.research_grant(data)
    
    def research_anketa(self, anketa_id: str) -> Dict[str, Any]:
        """
        –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Claude Code WebSearch

        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–º—Ç–∞–º —ç–∫—Å–ø–µ—Ä—Ç–∞:
        - –ë–ª–æ–∫ 1: –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (3 –∑–∞–ø—Ä–æ—Å–∞ - MVP)

        –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è 27 –∑–∞–ø—Ä–æ—Å–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ.
        """
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è {anketa_id}")

            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É
            anketa = self.db.get_session_by_anketa_id(anketa_id)

            if not anketa:
                return {
                    'status': 'error',
                    'message': f'–ê–Ω–∫–µ—Ç–∞ {anketa_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    'agent_type': 'researcher'
                }

            # –ò–∑–≤–ª–µ–∫–∞–µ–º placeholders
            placeholders = self._extract_placeholders_from_anketa(anketa)
            logger.info(f"üìã Placeholders: {placeholders}")

            # –ë–õ–û–ö 1 (MVP): –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (3 –∑–∞–ø—Ä–æ—Å–∞)
            block1_results = self._research_block1_mvp(placeholders)
            logger.info(f"‚úÖ –ë–ª–æ–∫ 1 –∑–∞–≤–µ—Ä—à—ë–Ω: {len(block1_results.get('queries', []))} –∑–∞–ø—Ä–æ—Å–æ–≤")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            research_results_data = {
                'block1': block1_results,
                'metadata': {
                    'total_queries': len(block1_results.get('queries', [])),
                    'sources_count': self._count_sources([block1_results]),
                    'version': 'MVP-1.0'
                }
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            from datetime import datetime
            research_data = {
                "anketa_id": anketa_id,
                "user_id": anketa.get('telegram_id'),
                "session_id": anketa.get('id'),
                "research_type": "comprehensive_websearch_mvp",
                "llm_provider": "claude_code",
                "model": "sonnet-4.5",
                "status": "completed",
                "completed_at": datetime.now(),
                "research_results": research_results_data,
                "metadata": {
                    "queries_executed": len(block1_results.get('queries', [])),
                    "processing_time": 0
                }
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ –ë–î
            research_id = self.db.save_research_results(research_data)

            logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ID: {research_id}")

            return {
                'status': 'success',
                'research_id': research_id,
                'anketa_id': anketa_id,
                'results': research_results_data,
                'agent_type': 'researcher',
                'provider_used': 'claude_code'
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã {anketa_id}: {e}", exc_info=True)
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã: {str(e)}",
                'agent_type': 'researcher'
            }

    def _extract_placeholders_from_anketa(self, anketa: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á—å placeholders –∏–∑ –∞–Ω–∫–µ—Ç—ã"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–µ–π
        return {
            '–†–ï–ì–ò–û–ù': anketa.get('geography', anketa.get('region', '–†–æ—Å—Å–∏—è')),
            '–ü–†–û–ë–õ–ï–ú–ê': anketa.get('problem', anketa.get('project_description', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞')),
            '–¶–ï–õ–ï–í–ê–Ø_–ì–†–£–ü–ü–ê': anketa.get('target_group', '—à–∏—Ä–æ–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'),
            '–°–§–ï–†–ê': anketa.get('sphere', anketa.get('category', '—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ñ–µ—Ä–∞')),
            '–ü–ï–†–ò–û–î': '2022-2025'
        }

    def _research_block1_mvp(self, p: Dict) -> Dict:
        """
        MVP: –ë–ª–æ–∫ 1 - –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (3 –∑–∞–ø—Ä–æ—Å–∞)

        –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç –∏–º–µ—Ç—å 10 –∑–∞–ø—Ä–æ—Å–æ–≤.
        """
        import requests
        import json

        results = {
            'block_name': '–ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å (MVP)',
            'queries': []
        }

        # –ü–æ–ª—É—á–∞–µ–º Claude Code –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        claude_api_key = os.getenv('CLAUDE_CODE_API_KEY', '1f79b062cf00b8d28546f5bd283dc59a1c6a7f9e9fe5a8e5ef25b0cc27aa0732')
        claude_base_url = os.getenv('CLAUDE_CODE_BASE_URL', 'http://178.236.17.55:8000')

        # –ó–∞–ø—Ä–æ—Å 1: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("üîç –ó–∞–ø—Ä–æ—Å 1: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        q1 = self._websearch_simple(
            query=f"–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {p['–ü–†–û–ë–õ–ï–ú–ê']} {p['–†–ï–ì–ò–û–ù']} 2022-2025",
            claude_api_key=claude_api_key,
            claude_base_url=claude_base_url,
            context="–ù–∞–π–¥–∏ —Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–†–æ—Å—Å—Ç–∞—Ç, –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞)"
        )
        results['queries'].append({
            'name': '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
            'query': q1['query'],
            'result': q1['result']
        })

        # –ó–∞–ø—Ä–æ—Å 2: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        logger.info("üîç –ó–∞–ø—Ä–æ—Å 2: –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
        q2 = self._websearch_simple(
            query=f"–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç—ã {p['–°–§–ï–†–ê']} {p['–ü–†–û–ë–õ–ï–ú–ê']} 2024-2025",
            claude_api_key=claude_api_key,
            claude_base_url=claude_base_url,
            context="–ù–∞–π–¥–∏ —Å–≤—è–∑—å —Å –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Ü–µ–ª–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"
        )
        results['queries'].append({
            'name': '–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
            'query': q2['query'],
            'result': q2['result']
        })

        # –ó–∞–ø—Ä–æ—Å 3: –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã
        logger.info("üîç –ó–∞–ø—Ä–æ—Å 3: –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã")
        q3 = self._websearch_simple(
            query=f"—É—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ä–µ—à–µ–Ω–∏–µ {p['–ü–†–û–ë–õ–ï–ú–ê']} {p['–†–ï–ì–ò–û–ù']} –ø—Ä–∏–º–µ—Ä—ã 2022-2025",
            claude_api_key=claude_api_key,
            claude_base_url=claude_base_url,
            context="–ù–∞–π–¥–∏ 2-3 —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–∞ —Å –∏–∑–º–µ—Ä–∏–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"
        )
        results['queries'].append({
            'name': '–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã',
            'query': q3['query'],
            'result': q3['result']
        })

        return results

    def _websearch_simple(self, query: str, claude_api_key: str, claude_base_url: str, context: str = "") -> Dict:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π WebSearch —á–µ—Ä–µ–∑ Claude Code /chat endpoint

        Claude Code –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebSearch tool –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        """
        import requests
        import json

        headers = {
            "Authorization": f"Bearer {claude_api_key}",
            "Content-Type": "application/json"
        }

        # –ü—Ä–æ–º–ø—Ç –¥–ª—è Claude —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSearch
        prompt = f"""
–í—ã–ø–æ–ª–Ω–∏ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "{query}"

–ó–∞–¥–∞—á–∞: {context}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π WebSearch –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º (rosstat.gov.ru, gov.ru, –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞)
- –î–∞–Ω–Ω—ã–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 3 –ª–µ—Ç (2022-2025)
- –í–µ—Ä–Ω–∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏
- –£–∫–∞–∂–∏ 1-2 –∏—Å—Ç–æ—á–Ω–∏–∫–∞

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–†–ï–ó–Æ–ú–ï: [–∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å —Ñ–∞–∫—Ç–∞–º–∏]
–ò–°–¢–û–ß–ù–ò–ö–ò: [—Å–ø–∏—Å–æ–∫ URL –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤]
"""

        payload = {
            "message": prompt,
            "model": "sonnet",
            "temperature": 0.3,
            "max_tokens": 1000
        }

        try:
            response = requests.post(
                f"{claude_base_url}/chat",
                headers=headers,
                json=payload,
                timeout=60
            )

            if response.status_code == 200:
                data = response.json()
                claude_response = data.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')

                return {
                    'query': query,
                    'result': {
                        'summary': claude_response,
                        'raw_response': claude_response
                    }
                }
            else:
                logger.error(f"Claude API error: {response.status_code}")
                return {
                    'query': query,
                    'result': {
                        'summary': f"–û—à–∏–±–∫–∞ API: {response.status_code}",
                        'raw_response': ''
                    }
                }

        except Exception as e:
            logger.error(f"‚ùå WebSearch –æ—à–∏–±–∫–∞: {e}")
            return {
                'query': query,
                'result': {
                    'summary': f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}",
                    'raw_response': ''
                }
            }

    def _count_sources(self, blocks: List[Dict]) -> int:
        """–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        total = 0
        for block in blocks:
            for query in block.get('queries', []):
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á—ë—Ç - –ø–æ–∑–∂–µ —É–ª—É—á—à–∏–º
                result = query.get('result', {}).get('summary', '')
                if 'http' in result or 'gov.ru' in result:
                    total += 1
        return total