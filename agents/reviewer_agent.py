#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Reviewer Agent (Final Auditor) - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω—Ç–∞ –∫ –ø–æ–¥–∞—á–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞—è–≤–∫—É –ø–æ—Å–ª–µ Writer Agent V2 –Ω–∞ –æ—Å–Ω–æ–≤–µ 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
"""
import sys
import os
from typing import Dict, Any, List, Optional
import logging
import asyncio
import time
import json
import re

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Windows –∏ Linux)
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(project_root, 'shared'))
sys.path.insert(0, os.path.join(project_root, 'telegram-bot', 'services'))
sys.path.insert(0, os.path.join(project_root, 'web-admin'))

# Initialize logger before any imports that might use it
logger = logging.getLogger(__name__)

try:
    from agents.base_agent import BaseAgent
except ImportError:
    # Fallback –µ—Å–ª–∏ BaseAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class BaseAgent:
        def __init__(self, name, db, llm_provider=None):
            self.name = name
            self.db = db
            self.llm_provider = llm_provider

# –ò–º–ø–æ—Ä—Ç Expert Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
try:
    sys.path.insert(0, os.path.join(project_root, 'expert_agent'))
    from expert_agent import ExpertAgent
    EXPERT_AGENT_AVAILABLE = True
except ImportError:
    EXPERT_AGENT_AVAILABLE = False
    ExpertAgent = None
    logger.warning("‚ö†Ô∏è ExpertAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - review –±—É–¥–µ—Ç –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")

# –ò–º–ø–æ—Ä—Ç DatabasePromptManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
try:
    from utils.prompt_manager import DatabasePromptManager, get_database_prompt_manager
    PROMPT_MANAGER_AVAILABLE = True
except ImportError:
    PROMPT_MANAGER_AVAILABLE = False
    DatabasePromptManager = None

try:
    from llm.unified_llm_client import UnifiedLLMClient
    from llm.config import AGENT_CONFIGS
    UNIFIED_CLIENT_AVAILABLE = True
except ImportError:
    UNIFIED_CLIENT_AVAILABLE = False
    UnifiedLLMClient = None
    AGENT_CONFIGS = {}

logger = logging.getLogger(__name__)

class ReviewerAgent(BaseAgent):
    """Final Auditor - –∞–≥–µ–Ω—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω—Ç–∞"""

    def __init__(self, db, llm_provider: str = "claude_code"):
        super().__init__("reviewer", db, llm_provider)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Expert Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
        self.expert_agent: Optional[ExpertAgent] = None
        if EXPERT_AGENT_AVAILABLE:
            try:
                self.expert_agent = ExpertAgent()
                logger.info("‚úÖ Reviewer Agent: Expert Agent –ø–æ–¥–∫–ª—é—á–µ–Ω (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Reviewer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Expert Agent: {e}")
                self.expert_agent = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabasePromptManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
        self.prompt_manager: Optional[DatabasePromptManager] = None
        if PROMPT_MANAGER_AVAILABLE:
            try:
                self.prompt_manager = get_database_prompt_manager()
                logger.info("‚úÖ Reviewer Agent: DatabasePromptManager –ø–æ–¥–∫–ª—é—á–µ–Ω (goal, backstory –∏–∑ –ë–î)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Reviewer: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PromptManager: {e}")

        if UNIFIED_CLIENT_AVAILABLE:
            # –ü–µ—Ä–µ–¥–∞–µ–º provider –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä UnifiedLLMClient
            self.llm_client = UnifiedLLMClient(provider=llm_provider)
            self.config = AGENT_CONFIGS.get("reviewer", AGENT_CONFIGS.get("auditor", {}))

        # –í–µ—Å–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏ (—Å—É–º–º–∞ = 100%)
        self.WEIGHTS = {
            'evidence_base': 0.40,      # 40% - –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞
            'structure': 0.30,           # 30% - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ø–æ–ª–Ω–æ—Ç–∞
            'matching': 0.20,            # 20% - –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥
            'economics': 0.10            # 10% - —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        }

    def _get_goal(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å goal –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î —Å fallback"""
        if self.prompt_manager:
            try:
                goal = self.prompt_manager.get_prompt('reviewer', 'goal')
                if goal:
                    logger.info("‚úÖ Reviewer: Goal –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î")
                    return goal
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Reviewer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ goal –∏–∑ –ë–î: {e}")

        # Fallback –Ω–∞ hardcoded
        logger.info("Reviewer: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hardcoded goal")
        return "–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω—Ç–∞ –∫ –ø–æ–¥–∞—á–µ –∏ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è (40-50%)"

    def _get_backstory(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å backstory –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î —Å fallback"""
        if self.prompt_manager:
            try:
                backstory = self.prompt_manager.get_prompt('reviewer', 'backstory')
                if backstory:
                    logger.info("‚úÖ Reviewer: Backstory –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î")
                    return backstory
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Reviewer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ backstory –∏–∑ –ë–î: {e}")

        # Fallback –Ω–∞ hardcoded
        logger.info("Reviewer: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hardcoded backstory")
        return """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-—Ä–µ–≤—å—é–µ—Ä –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Å 25-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏—è—Ö.
        –¢—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞—è–≤–æ–∫ –∫ –ø–æ–¥–∞—á–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ 4 –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤: –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ (40%),
        —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (30%), –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥ (20%), —ç–∫–æ–Ω–æ–º–∏–∫–∞ (10%). –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç
        –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."""

    async def _get_fpg_requirements_async(self) -> Dict[str, List[Dict]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —á–µ—Ä–µ–∑ Expert Agent"""
        requirements = {
            'evidence_base': [],
            'structure': [],
            'matching': [],
            'economics': []
        }

        if not self.expert_agent:
            logger.warning("‚ö†Ô∏è Expert Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
            return requirements

        try:
            logger.info("üìö Reviewer: –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î...")

            # –ó–∞–ø—Ä–æ—Å—ã –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é
            queries = {
                'evidence_base': "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑–µ –≤ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ? –¶–∏—Ç–∞—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
                'structure': "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –ø–æ–ª–Ω–æ—Ç–µ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏? –†–∞–∑–¥–µ–ª—ã, –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞",
                'matching': "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ü–µ–ª—è–º –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º –≤ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ? SMART-—Ü–µ–ª–∏, KPI",
                'economics': "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—é–¥–∂–µ—Ç—É –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–º—É –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—é –≤ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ?"
            }

            for criterion, query in queries.items():
                try:
                    results = self.expert_agent.query_knowledge(
                        question=query,
                        fund="fpg",
                        top_k=3,
                        min_score=0.4
                    )
                    requirements[criterion] = results
                    logger.info(f"‚úÖ Reviewer: {criterion} - –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                except Exception as e:
                    logger.error(f"‚ùå Reviewer: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {criterion}: {e}")

            total_requirements = sum(len(v) for v in requirements.values())
            logger.info(f"‚úÖ Reviewer: –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {total_requirements} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")

            return requirements

        except Exception as e:
            logger.error(f"‚ùå Reviewer: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π: {e}")
            return requirements

    async def review_grant_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≥—Ä–∞–Ω—Ç–∞"""
        try:
            start_time = time.time()
            logger.info("üîç Reviewer: –ù–∞—á–∏–Ω–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≥—Ä–∞–Ω—Ç–∞")

            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —á–µ—Ä–µ–∑ Expert Agent
            fpg_requirements = await self._get_fpg_requirements_async()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None (Iteration_58)
            grant_content = input_data.get('grant_content', {})
            research_results = input_data.get('research_results', {})
            user_answers = input_data.get('user_answers', {})
            citations = input_data.get('citations', []) or []  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            tables = input_data.get('tables', []) or []  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
            selected_grant = input_data.get('selected_grant', {})

            logger.info(f"üìä Reviewer: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - —Ü–∏—Ç–∞—Ç—ã: {len(citations)}, —Ç–∞–±–ª–∏—Ü—ã: {len(tables)}")

            # –ö—Ä–∏—Ç–µ—Ä–∏–π 1: –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ (40%)
            evidence_score = await self._evaluate_evidence_base_async(
                grant_content, research_results, citations, tables
            )

            # –ö—Ä–∏—Ç–µ—Ä–∏–π 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ø–æ–ª–Ω–æ—Ç–∞ (30%)
            structure_score = await self._evaluate_structure_async(
                grant_content, user_answers
            )

            # –ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥ (20%)
            matching_score = await self._evaluate_matching_async(
                grant_content, research_results, selected_grant
            )

            # –ö—Ä–∏—Ç–µ—Ä–∏–π 4: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (10%)
            economics_score = await self._evaluate_economics_async(
                grant_content, user_answers
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—É—é –æ—Ü–µ–Ω–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (0-10)
            readiness_score = (
                evidence_score['score'] * self.WEIGHTS['evidence_base'] +
                structure_score['score'] * self.WEIGHTS['structure'] +
                matching_score['score'] * self.WEIGHTS['matching'] +
                economics_score['score'] * self.WEIGHTS['economics']
            )

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è (0-100%)
            # –§–æ—Ä–º—É–ª–∞: base_probability + (readiness_score * multiplier)
            # –î–ª—è readiness_score = 8: 15 + (8 * 4.375) = 15 + 35 = 50%
            base_probability = 15  # –±–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –ª—é–±–æ–π –∑–∞—è–≤–∫–∏
            multiplier = 4.375     # –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (–º–∞–∫—Å 50% –ø—Ä–∏ score=8)
            approval_probability = min(100, base_probability + (readiness_score * multiplier))

            # –°–æ–±–∏—Ä–∞–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Å–ª–∞–±–æ—Å—Ç–∏
            strengths = self._collect_strengths(
                evidence_score, structure_score, matching_score, economics_score
            )
            weaknesses = self._collect_weaknesses(
                evidence_score, structure_score, matching_score, economics_score
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(
                evidence_score, structure_score, matching_score, economics_score, readiness_score
            )

            processing_time = time.time() - start_time

            result = {
                'status': 'success',
                'agent_type': 'reviewer',
                'readiness_score': round(readiness_score, 2),
                'approval_probability': round(approval_probability, 1),

                # Field aliases for compatibility with handler/file_generators (Iteration_57)
                'review_score': round(readiness_score, 2),  # Alias for readiness_score
                'final_status': (  # Derived from readiness_score
                    'approved' if readiness_score >= 7.0
                    else 'needs_revision' if readiness_score >= 5.0
                    else 'rejected'
                ),

                'fpg_requirements': fpg_requirements,  # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
                'criteria_scores': {
                    'evidence_base': {
                        'score': round(evidence_score['score'], 2),
                        'weight': self.WEIGHTS['evidence_base'],
                        'weighted_score': round(evidence_score['score'] * self.WEIGHTS['evidence_base'], 2),
                        'details': evidence_score
                    },
                    'structure': {
                        'score': round(structure_score['score'], 2),
                        'weight': self.WEIGHTS['structure'],
                        'weighted_score': round(structure_score['score'] * self.WEIGHTS['structure'], 2),
                        'details': structure_score
                    },
                    'matching': {
                        'score': round(matching_score['score'], 2),
                        'weight': self.WEIGHTS['matching'],
                        'weighted_score': round(matching_score['score'] * self.WEIGHTS['matching'], 2),
                        'details': matching_score
                    },
                    'economics': {
                        'score': round(economics_score['score'], 2),
                        'weight': self.WEIGHTS['economics'],
                        'weighted_score': round(economics_score['score'] * self.WEIGHTS['economics'], 2),
                        'details': economics_score
                    }
                },
                'strengths': strengths,
                'weaknesses': weaknesses,
                'recommendations': recommendations,
                'can_submit': readiness_score >= 7.0,  # –ü–æ—Ä–æ–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                'quality_tier': self._determine_quality_tier(readiness_score),
                'processing_time': round(processing_time, 2),
                'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
            }

            logger.info(f"‚úÖ Reviewer: –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - readiness: {readiness_score:.2f}/10, approval: {approval_probability:.1f}%")

            return result

        except Exception as e:
            logger.error(f"‚ùå Reviewer: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {str(e)}",
                'agent_type': 'reviewer'
            }

    async def _evaluate_evidence_base_async(self, grant_content: Dict, research_results: Dict,
                                           citations: List, tables: List) -> Dict[str, Any]:
        """–ö—Ä–∏—Ç–µ—Ä–∏–π 1: –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ (40% –≤–µ—Å–∞)"""
        logger.info("üìö Reviewer: –û—Ü–µ–Ω–∫–∞ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –±–∞–∑—ã...")

        score = 0.0  # 0-10
        details = {
            'official_stats': False,
            'gov_programs': False,
            'national_projects': False,
            'success_cases': False,
            'citations_count': len(citations),
            'tables_count': len(tables),
            'sources_count': 0
        }

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–†–æ—Å—Å—Ç–∞—Ç, –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞)
            official_sources = ['rosstat', '–º–∏–Ω—Å—Ç–∞—Ç', '–º–∏–Ω–∑–¥—Ä–∞–≤', '–º–∏–Ω–æ–±—Ä', '–º–∏–Ω—Å–ø–æ—Ä—Ç', 'fedstat']
            has_official = any(
                any(source.lower() in c.get('source', '').lower() for source in official_sources)
                for c in citations if isinstance(c, dict)  # Iteration_58: Type safety
            )
            details['official_stats'] = has_official
            if has_official:
                score += 2.0

            # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã
            gov_program_keywords = ['–Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç', '–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º', '–ø–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞', '—Å—Ç—Ä–∞—Ç–µ–≥–∏—è']
            has_gov_programs = False
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block1 = research_results.get('block1_problem', {})
                programs = block1.get('programs', [])
                has_gov_programs = len(programs) > 0
            details['gov_programs'] = has_gov_programs
            if has_gov_programs:
                score += 2.0

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ (–º–∏–Ω–∏–º—É–º 3)
            success_cases_count = 0
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block1 = research_results.get('block1_problem', {})
                success_cases_count = len(block1.get('success_cases', []))
            details['success_cases'] = success_cases_count >= 3
            if success_cases_count >= 3:
                score += 2.0
            elif success_cases_count >= 1:
                score += 1.0

            # 4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ç–∞—Ç (–º–∏–Ω–∏–º—É–º 10)
            if len(citations) >= 10:
                score += 2.0
            elif len(citations) >= 7:
                score += 1.5
            elif len(citations) >= 5:
                score += 1.0

            # 5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü (–º–∏–Ω–∏–º—É–º 2)
            if len(tables) >= 2:
                score += 1.5
            elif len(tables) >= 1:
                score += 0.75

            # 6. –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 5)
            unique_sources = set([c.get('source', '') for c in citations if isinstance(c, dict) and c.get('source')])  # Iteration_58: Type safety
            details['sources_count'] = len(unique_sources)
            if len(unique_sources) >= 5:
                score += 0.5

            logger.info(f"‚úÖ Reviewer Evidence: score={score:.2f}/10, —Ü–∏—Ç–∞—Ç—ã={len(citations)}, —Ç–∞–±–ª–∏—Ü—ã={len(tables)}, –∏—Å—Ç–æ—á–Ω–∏–∫–∏={len(unique_sources)}")

            return {
                'score': min(10.0, score),
                'details': details,
                'comments': f"–î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞: {len(citations)} —Ü–∏—Ç–∞—Ç, {len(tables)} —Ç–∞–±–ª–∏—Ü, {len(unique_sources)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"
            }

        except Exception as e:
            logger.error(f"‚ùå Reviewer Evidence: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {
                'score': 5.0,  # —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                'details': details,
                'comments': '–û—Ü–µ–Ω–∫–∞ —Å –æ—à–∏–±–∫–æ–π'
            }

    async def _evaluate_structure_async(self, grant_content: Dict, user_answers: Dict) -> Dict[str, Any]:
        """–ö—Ä–∏—Ç–µ—Ä–∏–π 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –ø–æ–ª–Ω–æ—Ç–∞ (30% –≤–µ—Å–∞)"""
        logger.info("üìê Reviewer: –û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –ø–æ–ª–Ω–æ—Ç—ã...")

        score = 0.0
        details = {
            'required_sections': 0,
            'total_sections': 0,
            'min_length_met': False,
            'logical_flow': True,
            'formatting': True
        }

        try:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
            required_sections = ['problem', 'geography', 'goals', 'solution', 'budget', 'timeline']
            present_sections = [s for s in required_sections if grant_content.get(s)]
            details['required_sections'] = len(present_sections)
            details['total_sections'] = len(required_sections)

            # 1. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if len(present_sections) == len(required_sections):
                score += 3.0
            elif len(present_sections) >= 4:
                score += 2.0
            elif len(present_sections) >= 2:
                score += 1.0

            # 2. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (15,000 —Å–∏–º–≤–æ–ª–æ–≤)
            full_text = grant_content.get('full_text', '')
            if not full_text:
                # –°–æ–±–∏—Ä–∞–µ–º –∏–∑ —Å–µ–∫—Ü–∏–π
                full_text = ' '.join([str(grant_content.get(s, '')) for s in required_sections])

            total_length = len(full_text)
            details['min_length_met'] = total_length >= 15000

            if total_length >= 15000:
                score += 3.0
            elif total_length >= 12000:
                score += 2.5
            elif total_length >= 10000:
                score += 2.0
            elif total_length >= 7000:
                score += 1.5
            elif total_length >= 5000:
                score += 1.0

            # 3. –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Writer V2
            metadata = grant_content.get('metadata', {})
            if metadata and metadata.get('plan_followed'):
                score += 2.0
            else:
                score += 1.0

            # 4. –î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–æ–≤
            avg_section_length = total_length / len(present_sections) if present_sections else 0
            if avg_section_length >= 2000:
                score += 1.0
            elif avg_section_length >= 1000:
                score += 0.5

            # 5. –ù–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ
            if grant_content.get('problem') and len(str(grant_content.get('problem', ''))) > 500:
                score += 0.5
            if grant_content.get('goals') and len(str(grant_content.get('goals', ''))) > 500:
                score += 0.5

            logger.info(f"‚úÖ Reviewer Structure: score={score:.2f}/10, —Å–µ–∫—Ü–∏–∏={len(present_sections)}/{len(required_sections)}, –¥–ª–∏–Ω–∞={total_length}")

            return {
                'score': min(10.0, score),
                'details': details,
                'comments': f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(present_sections)}/{len(required_sections)} —Ä–∞–∑–¥–µ–ª–æ–≤, {total_length} —Å–∏–º–≤–æ–ª–æ–≤"
            }

        except Exception as e:
            logger.error(f"‚ùå Reviewer Structure: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {
                'score': 6.0,
                'details': details,
                'comments': '–û—Ü–µ–Ω–∫–∞ —Å –æ—à–∏–±–∫–æ–π'
            }

    async def _evaluate_matching_async(self, grant_content: Dict, research_results: Dict,
                                      selected_grant: Dict) -> Dict[str, Any]:
        """–ö—Ä–∏—Ç–µ—Ä–∏–π 3: –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥ (20% –≤–µ—Å–∞)"""
        logger.info("üéØ Reviewer: –û—Ü–µ–Ω–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞...")

        score = 0.0
        details = {
            'smart_goals': False,
            'measurable_kpi': False,
            'regional_alignment': False,
            'national_projects_aligned': False
        }

        try:
            # 1. SMART-—Ü–µ–ª–∏ (–∏–∑ block3_goals)
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block3 = research_results.get('block3_goals', {})
                main_goals = block3.get('main_goal_variants', [])
                if main_goals and len(main_goals) > 0:
                    first_goal = main_goals[0]
                    if isinstance(first_goal, dict):  # Iteration_58: Type safety
                        smart_check = first_goal.get('smart_check', {})
                        if all(smart_check.values()):
                            details['smart_goals'] = True
                            score += 3.0
                        elif sum(smart_check.values()) >= 3:
                            details['smart_goals'] = True
                            score += 2.0

            # 2. –ò–∑–º–µ—Ä–∏–º—ã–µ KPI
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block3 = research_results.get('block3_goals', {})
                key_tasks = block3.get('key_tasks', [])
                has_kpi = any(task.get('kpi') for task in key_tasks if isinstance(task, dict))  # Iteration_58: Type safety
                details['measurable_kpi'] = has_kpi
                if has_kpi:
                    score += 2.5

            # 3. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block2 = research_results.get('block2_geography', {})
                target_audience = block2.get('target_audience', {})
                infrastructure = block2.get('infrastructure', {})
                has_regional = bool(target_audience or infrastructure)
                details['regional_alignment'] = has_regional
                if has_regional:
                    score += 2.5

            # 4. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç–∞–º
            if research_results and isinstance(research_results, dict):  # Iteration_58: Type safety
                block1 = research_results.get('block1_problem', {})
                programs = block1.get('programs', [])
                has_natproject = any('–Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç' in p.get('name', '').lower() for p in programs if isinstance(p, dict))  # Iteration_58: Type safety
                details['national_projects_aligned'] = has_natproject
                if has_natproject:
                    score += 2.0

            logger.info(f"‚úÖ Reviewer Matching: score={score:.2f}/10, SMART={details['smart_goals']}, KPI={details['measurable_kpi']}")

            return {
                'score': min(10.0, score),
                'details': details,
                'comments': f"–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—ã–π –º–∞—Ç—á–∏–Ω–≥: SMART-—Ü–µ–ª–∏={details['smart_goals']}, KPI={details['measurable_kpi']}"
            }

        except Exception as e:
            logger.error(f"‚ùå Reviewer Matching: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {
                'score': 6.0,
                'details': details,
                'comments': '–û—Ü–µ–Ω–∫–∞ —Å –æ—à–∏–±–∫–æ–π'
            }

    async def _evaluate_economics_async(self, grant_content: Dict, user_answers: Dict) -> Dict[str, Any]:
        """–ö—Ä–∏—Ç–µ—Ä–∏–π 4: –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ (10% –≤–µ—Å–∞)"""
        logger.info("üí∞ Reviewer: –û—Ü–µ–Ω–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∏...")

        score = 0.0
        details = {
            'budget_present': False,
            'budget_detailed': False,
            'efficiency': 'unknown',
            'sustainability': False
        }

        try:
            # 1. –ù–∞–ª–∏—á–∏–µ –±—é–¥–∂–µ—Ç–∞
            budget_text = grant_content.get('budget', '') or user_answers.get('budget', '')
            details['budget_present'] = bool(budget_text)
            if budget_text:
                score += 2.5

            # 2. –î–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –±—é–¥–∂–µ—Ç–∞ (–Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏)
            budget_keywords = ['—Å—Ç–∞—Ç—å—è', '—Ä–∞—Å—Ö–æ–¥', '—Å–º–µ—Ç–∞', '–∫–∞–ª—å–∫—É–ª—è—Ü–∏—è', '–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ']
            has_details = any(kw in str(budget_text).lower() for kw in budget_keywords)
            details['budget_detailed'] = has_details
            if has_details:
                score += 2.5

            # 3. –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞
            sustainability_text = grant_content.get('sustainability', '')
            details['sustainability'] = len(sustainability_text) > 100
            if len(sustainability_text) > 100:
                score += 2.5
            elif len(sustainability_text) > 50:
                score += 1.5

            # 4. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤ (–Ω–∞–ª–∏—á–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤/–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è)
            efficiency_keywords = ['–∞–Ω–∞–ª–æ–≥', '—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞', '–æ–±–æ—Å–Ω–æ–≤–∞–Ω', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω']
            has_efficiency = any(kw in str(budget_text).lower() for kw in efficiency_keywords)
            if has_efficiency:
                details['efficiency'] = 'justified'
                score += 2.5
            else:
                details['efficiency'] = 'not_justified'

            logger.info(f"‚úÖ Reviewer Economics: score={score:.2f}/10, –±—é–¥–∂–µ—Ç={details['budget_present']}, –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å={details['budget_detailed']}")

            return {
                'score': min(10.0, score),
                'details': details,
                'comments': f"–≠–∫–æ–Ω–æ–º–∏–∫–∞: –±—é–¥–∂–µ—Ç={'–µ—Å—Ç—å' if details['budget_present'] else '–Ω–µ—Ç'}, –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å={details['budget_detailed']}"
            }

        except Exception as e:
            logger.error(f"‚ùå Reviewer Economics: –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return {
                'score': 6.0,
                'details': details,
                'comments': '–û—Ü–µ–Ω–∫–∞ —Å –æ—à–∏–±–∫–æ–π'
            }

    def _collect_strengths(self, evidence: Dict, structure: Dict, matching: Dict, economics: Dict) -> List[str]:
        """–°–æ–±—Ä–∞—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞—è–≤–∫–∏"""
        strengths = []

        # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞
        if evidence['score'] >= 8:
            strengths.append("–°–∏–ª—å–Ω–∞—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
        if evidence['details'].get('citations_count', 0) >= 10:
            strengths.append(f"–ú–Ω–æ–≥–æ —Ü–∏—Ç–∞—Ç –∏–∑ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ ({evidence['details']['citations_count']})")
        if evidence['details'].get('tables_count', 0) >= 2:
            strengths.append(f"–ù–∞–≥–ª—è–¥–Ω—ã–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ({evidence['details']['tables_count']})")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        if structure['score'] >= 8:
            strengths.append("–ü–æ–ª–Ω–∞—è –∏ –ª–æ–≥–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏")
        if structure['details'].get('min_length_met'):
            strengths.append("–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ (15,000+ —Å–∏–º–≤–æ–ª–æ–≤)")

        # –ú–∞—Ç—á–∏–Ω–≥
        if matching['details'].get('smart_goals'):
            strengths.append("–ß–µ—Ç–∫–∏–µ SMART-—Ü–µ–ª–∏")
        if matching['details'].get('national_projects_aligned'):
            strengths.append("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º")

        # –≠–∫–æ–Ω–æ–º–∏–∫–∞
        if economics['details'].get('budget_detailed'):
            strengths.append("–î–µ—Ç–∞–ª—å–Ω—ã–π –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç")

        return strengths

    def _collect_weaknesses(self, evidence: Dict, structure: Dict, matching: Dict, economics: Dict) -> List[str]:
        """–°–æ–±—Ä–∞—Ç—å —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∑–∞—è–≤–∫–∏"""
        weaknesses = []

        # –î–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞
        if evidence['details'].get('citations_count', 0) < 10:
            weaknesses.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–∏—Ç–∞—Ç ({evidence['details']['citations_count']}, –Ω—É–∂–Ω–æ 10+)")
        if evidence['details'].get('tables_count', 0) < 2:
            weaknesses.append(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü ({evidence['details']['tables_count']}, –Ω—É–∂–Ω–æ 2+)")
        if not evidence['details'].get('official_stats'):
            weaknesses.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–†–æ—Å—Å—Ç–∞—Ç, –º–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–∞)")

        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞
        if not structure['details'].get('min_length_met'):
            weaknesses.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞ (–Ω—É–∂–Ω–æ 15,000+ —Å–∏–º–≤–æ–ª–æ–≤)")
        if structure['details']['required_sections'] < structure['details']['total_sections']:
            missing = structure['details']['total_sections'] - structure['details']['required_sections']
            weaknesses.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç {missing} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∞")

        # –ú–∞—Ç—á–∏–Ω–≥
        if not matching['details'].get('smart_goals'):
            weaknesses.append("–¶–µ–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç SMART-–∫—Ä–∏—Ç–µ—Ä–∏—è–º")
        if not matching['details'].get('measurable_kpi'):
            weaknesses.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–∑–º–µ—Ä–∏–º—ã–µ KPI")

        # –≠–∫–æ–Ω–æ–º–∏–∫–∞
        if not economics['details'].get('budget_present'):
            weaknesses.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞")
        if not economics['details'].get('sustainability'):
            weaknesses.append("–ù–µ –æ–ø–∏—Å–∞–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞")

        return weaknesses

    def _generate_recommendations(self, evidence: Dict, structure: Dict, matching: Dict,
                                 economics: Dict, overall_score: float) -> List[str]:
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []

        if overall_score >= 8.0:
            recommendations.append("‚úÖ –ó–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–¥–∞—á–µ! –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
        elif overall_score >= 7.0:
            recommendations.append("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫.")
        else:
            recommendations.append("‚ùå –ó–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π.")

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        if evidence['score'] < 7:
            recommendations.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤")
        if structure['score'] < 7:
            recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞")
        if matching['score'] < 7:
            recommendations.append("–£—Ç–æ—á–Ω–∏—Ç–µ SMART-—Ü–µ–ª–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–∑–º–µ—Ä–∏–º—ã–µ KPI")
        if economics['score'] < 7:
            recommendations.append("–î–µ—Ç–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –±—é–¥–∂–µ—Ç –∏ –æ–±–æ—Å–Ω—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å—Ö–æ–¥–æ–≤")

        return recommendations

    def _determine_quality_tier(self, readiness_score: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏"""
        if readiness_score >= 8.5:
            return "Excellent"
        elif readiness_score >= 7.5:
            return "Good"
        elif readiness_score >= 6.5:
            return "Acceptable"
        elif readiness_score >= 5.0:
            return "Needs Improvement"
        else:
            return "Poor"

    def review_grant(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (wrapper –¥–ª—è async)"""
        return asyncio.run(self.review_grant_async(input_data))

    async def review_and_save_grant_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≥—Ä–∞–Ω—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î –∏ —ç–∫—Å–ø–æ—Ä—Ç–æ–º MD/PDF

        Review - —ç—Ç–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–µ —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–æ–º –≥—Ä–∞–Ω—Ç–µ.
        Review –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç –≥—Ä–∞–Ω—Ç, –∞ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–æ—á–Ω—É—é –∑–∞–ø–∏—Å—å.

        Args:
            input_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏:
                - anketa_id: ID –∞–Ω–∫–µ—Ç—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                - grant_id: ID –≥—Ä–∞–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                - grant_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä–∞–Ω—Ç–∞
                - research_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã research
                - user_answers: –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                - citations: –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
                - tables: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
                - selected_grant: –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥—Ä–∞–Ω—Ç
                - export_formats: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ ['md', 'pdf'] (optional, default: ['md', 'pdf'])
                - output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (optional, default: 'reports')

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ review, review_id –∏ –ø—É—Ç—è–º–∏ –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            anketa_id = input_data.get('anketa_id')
            grant_id = input_data.get('grant_id')

            if not anketa_id or not grant_id:
                raise ValueError("anketa_id and grant_id are required")

            # –í—ã–ø–æ–ª–Ω—è–µ–º review
            review_results = await self.review_grant_async(input_data)

            if review_results.get('status') != 'success':
                logger.error(f"Review failed: {review_results.get('message')}")
                return review_results

            # –î–æ–±–∞–≤–ª—è–µ–º anketa_id –∏ grant_id –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            review_results['anketa_id'] = anketa_id
            review_results['grant_id'] = grant_id

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º review_id –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            review_id = self.db.generate_review_id(anketa_id)
            review_results['review_id'] = review_id

            # –≠–∫—Å–ø–æ—Ä—Ç MD –∏ PDF
            export_formats = input_data.get('export_formats', ['md', 'pdf'])
            output_dir = input_data.get('output_dir', 'reports')

            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ArtifactSaver
                sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
                from utils.artifact_saver import ArtifactSaver

                saver = ArtifactSaver(output_dir=output_dir)

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: review_id –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ #
                filename = review_id.replace('#', '')

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
                saved_files = await saver.save_artifact(
                    data=review_results,
                    filename=filename,
                    artifact_type='review',
                    formats=export_formats
                )

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if 'md' in saved_files:
                    review_results['review_md_path'] = str(saved_files['md'])
                    logger.info(f"üìÑ Review MD saved: {saved_files['md']}")

                if 'pdf' in saved_files:
                    review_results['review_pdf_path'] = str(saved_files['pdf'])
                    logger.info(f"üìÑ Review PDF saved: {saved_files['pdf']}")

            except Exception as export_error:
                logger.error(f"‚ö†Ô∏è Export failed: {export_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î (—Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º)
            saved_review_id = self.db.save_review_results(review_results)

            if saved_review_id:
                logger.info(f"‚úÖ Review saved to database: {saved_review_id}")
            else:
                logger.warning("‚ö†Ô∏è Review completed but not saved to database")

            return review_results

        except Exception as e:
            logger.error(f"‚ùå Review and save failed: {e}")
            import traceback
            traceback.print_exc()
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ review –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}",
                'agent_type': 'reviewer'
            }

    def review_and_save_grant(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è review_and_save_grant_async"""
        return asyncio.run(self.review_and_save_grant_async(input_data))

    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.review_grant(data)
