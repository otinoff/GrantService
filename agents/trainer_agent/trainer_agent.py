#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Trainer Agent - –ê–≥–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤

–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
- –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ (–∑–∞–ø—É—Å–∫, –æ—à–∏–±–∫–∏, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
- –ù–ï —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç Reviewer Agent)

–í–µ—Ä—Å–∏—è: 1.0 MVP
"""
import sys
import os
import json
import time
import asyncio
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '../..'))

try:
    from agents.base_agent import BaseAgent
except ImportError:
    # Fallback –µ—Å–ª–∏ BaseAgent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class BaseAgent:
        def __init__(self, name, db, llm_provider=None):
            self.name = name
            self.db = db

logger = logging.getLogger(__name__)


class TrainerAgent(BaseAgent):
    """
    –ê–≥–µ–Ω—Ç-—Ç—Ä–µ–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤

    MVP —Ñ—É–Ω–∫—Ü–∏–∏:
    - test_writer_functionality() - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç Writer Agent V2
    - generate_test_anketa() - —Å–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    - validate_writer_result() - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """

    def __init__(self, db):
        super().__init__("trainer", db, llm_provider=None)
        logger.info("‚úÖ Trainer Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # ========================================
    # –ë–ê–ó–û–í–´–ô –ú–ï–¢–û–î (–¢–†–ï–ë–£–ï–¢–°–Ø BaseAgent)
    # ========================================

    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è BaseAgent)

        –î–ª—è Trainer Agent –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é:
        - test_writer_functionality()
        - test_researcher_functionality()
        """
        test_type = data.get('test_type', 'writer')

        if test_type == 'writer':
            return asyncio.run(self.test_writer_functionality(
                test_case=data.get('test_case'),
                use_real_llm=data.get('use_real_llm', False)
            ))
        else:
            return {
                'status': 'error',
                'message': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞: {test_type}'
            }

    # ========================================
    # –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –¢–ï–°–¢ WRITER AGENT
    # ========================================

    async def test_writer_functionality(self,
                                       test_case: Optional[Dict] = None,
                                       use_real_llm: bool = False) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Writer Agent V2

        –ü—Ä–æ–≤–µ—Ä–∫–∏:
        1. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Writer Agent
        2. ‚úÖ Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω
        3. ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞ –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        4. ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω (–≤—Å–µ –ø–æ–ª—è)
        5. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        6. ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ

        Args:
            test_case: –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            use_real_llm: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π LLM –∏–ª–∏ mock

        Returns:
            {
                'status': 'passed' | 'failed',
                'test_id': 'TR-20251017-001',
                'agent': 'writer_v2',
                'execution_time': 125.3,
                'checks': {...},
                'checks_passed': 6,
                'checks_total': 6,
                'errors': [],
                'warnings': [],
                'result_preview': {...}
            }
        """
        logger.info("üß™ Trainer: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Writer Agent V2")

        start_time = time.time()
        test_id = f"TR-{datetime.now().strftime('%Y%m%d-%H%M%S')}"

        checks = {
            'can_initialize_writer': False,
            'has_expert_agent': False,
            'can_generate_grant': False,
            'result_is_valid': False,
            'saved_to_db': False,
            'execution_time_ok': False
        }

        errors = []
        warnings = []
        result_data = None

        try:
            # –ü–†–û–í–ï–†–ö–ê 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Writer Agent
            logger.info("  [1/6] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Writer Agent...")
            try:
                from agents.writer_agent_v2 import WriterAgentV2
                # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º claude_code (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), –ù–ï gigachat
                writer = WriterAgentV2(self.db, llm_provider="claude_code")
                checks['can_initialize_writer'] = True
                logger.info("  ‚úÖ Writer Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (claude_code)")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Writer: {e}")
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                raise

            # –ü–†–û–í–ï–†–ö–ê 2: Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω
            logger.info("  [2/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ Expert Agent...")
            if writer.expert_agent:
                checks['has_expert_agent'] = True
                logger.info("  ‚úÖ Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω")
            else:
                warnings.append("Expert Agent –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Writer")
                logger.warning("  ‚ö†Ô∏è  Expert Agent –ù–ï –ø–æ–¥–∫–ª—é—á—ë–Ω")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if test_case is None:
                logger.info("  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                test_case = self.generate_test_anketa(project_type="sport")

            anketa_id = test_case['anketa_id']
            logger.info(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º anketa_id: {anketa_id}")

            # –°–æ–∑–¥–∞—ë–º research_results –¥–ª—è —Ç–µ—Å—Ç–∞
            research_results = self.generate_test_research_results(test_case)
            self._save_research_results_to_db(anketa_id, research_results)

            # –ü–†–û–í–ï–†–ö–ê 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞
            logger.info("  [3/6] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞...")

            input_data = {
                'anketa_id': anketa_id,
                'user_answers': test_case['user_answers'],
                'selected_grant': test_case['selected_grant'],
                'requested_amount': test_case.get('requested_amount', 2000000),
                'project_duration': test_case.get('project_duration', 12),
                'admin_user': 'trainer_test'
            }

            try:
                if use_real_llm:
                    result_data = await writer.write_application_async(input_data)
                else:
                    # Mock —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
                    logger.info("  üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ LLM)")
                    result_data = self._mock_writer_result(input_data)

                checks['can_generate_grant'] = True
                logger.info("  ‚úÖ –ì—Ä–∞–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞: {e}")
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
                raise

            # –ü–†–û–í–ï–†–ö–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info("  [4/6] –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            is_valid, validation_errors = self.validate_writer_result(result_data)
            if is_valid:
                checks['result_is_valid'] = True
                logger.info("  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω")
            else:
                errors.extend(validation_errors)
                logger.error(f"  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {validation_errors}")

            # –ü–†–û–í–ï–†–ö–ê 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ mock)
            logger.info("  [5/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î...")
            if result_data.get('application_number'):
                checks['saved_to_db'] = True
                logger.info(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result_data['application_number']}")
            else:
                if use_real_llm:
                    warnings.append("–ó–∞—è–≤–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
                    logger.warning("  ‚ö†Ô∏è  –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
                else:
                    # –í mock —Ä–µ–∂–∏–º–µ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    checks['saved_to_db'] = True
                    logger.info("  ‚úÖ Mock —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î")

            # –ü–†–û–í–ï–†–ö–ê 6: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            logger.info(f"  [6/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

            if use_real_llm:
                # –†–µ–∞–ª—å–Ω—ã–π LLM: –æ–∂–∏–¥–∞–µ–º –¥–æ 5 –º–∏–Ω—É—Ç
                if execution_time < 300:
                    checks['execution_time_ok'] = True
                    logger.info(f"  ‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å (< 5 –º–∏–Ω)")
                else:
                    warnings.append(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {execution_time:.1f}—Å (> 5 –º–∏–Ω)")
                    logger.warning(f"  ‚ö†Ô∏è  –î–æ–ª–≥–æ: {execution_time:.1f}—Å")
            else:
                # Mock —Ä–µ–∂–∏–º: –æ–∂–∏–¥–∞–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
                checks['execution_time_ok'] = True
                logger.info(f"  ‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å (mock —Ä–µ–∂–∏–º)")

        except Exception as e:
            errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        checks_passed = sum(checks.values())
        checks_total = len(checks)
        status = 'passed' if checks_passed == checks_total and not errors else 'failed'

        execution_time = time.time() - start_time

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_result = {
            'status': status,
            'test_id': test_id,
            'agent': 'writer_v2',
            'test_type': 'functionality',
            'execution_time': round(execution_time, 2),
            'checks': checks,
            'checks_passed': checks_passed,
            'checks_total': checks_total,
            'errors': errors,
            'warnings': warnings,
            'timestamp': datetime.now().isoformat(),
            'use_real_llm': use_real_llm
        }

        # –î–æ–±–∞–≤–ª—è–µ–º preview —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result_data:
            test_result['result_preview'] = {
                'status': result_data.get('status'),
                'application_number': result_data.get('application_number'),
                'quality_score': result_data.get('quality_score', 0),
                'citations_count': len(result_data.get('citations', [])),
                'tables_count': len(result_data.get('tables', [])),
                'has_application': 'application' in result_data
            }

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥
        if status == 'passed':
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù: {checks_passed}/{checks_total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        else:
            logger.error(f"‚ùå –¢–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù: {checks_passed}/{checks_total} –ø—Ä–æ–≤–µ—Ä–æ–∫, {len(errors)} –æ—à–∏–±–æ–∫")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        self._save_test_report(test_result)

        return test_result

    # ========================================
    # –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –¢–ï–°–¢ REVIEWER AGENT
    # ========================================

    async def test_reviewer_functionality(self,
                                         test_case: Optional[Dict] = None,
                                         use_real_llm: bool = False) -> Dict:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Reviewer Agent

        –ü—Ä–æ–≤–µ—Ä–∫–∏:
        1. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reviewer Agent
        2. ‚úÖ Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –§–ü–ì)
        3. ‚úÖ Review –±–µ–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        4. ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω (–≤—Å–µ –ø–æ–ª—è)
        5. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        6. ‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–µ–º–ª–µ–º–æ

        Args:
            test_case: –¢–µ—Å—Ç–æ–≤—ã–π –∫–µ–π—Å –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            use_real_llm: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π LLM –∏–ª–∏ mock

        Returns:
            {
                'status': 'passed' | 'failed',
                'test_id': 'TR-20251017-001',
                'agent': 'reviewer',
                'execution_time': 45.3,
                'checks': {...},
                'checks_passed': 6,
                'checks_total': 6,
                'errors': [],
                'warnings': [],
                'result_preview': {...}
            }
        """
        logger.info("üß™ Trainer: –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Reviewer Agent")

        start_time = time.time()
        test_id = f"TR-{datetime.now().strftime('%Y%m%d-%H%M%S')}"

        checks = {
            'can_initialize_reviewer': False,
            'has_expert_agent': False,
            'can_review_grant': False,
            'result_is_valid': False,
            'saved_to_db': False,
            'execution_time_ok': False
        }

        errors = []
        warnings = []
        result_data = None

        try:
            # –ü–†–û–í–ï–†–ö–ê 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reviewer Agent
            logger.info("  [1/6] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Reviewer Agent...")
            try:
                from agents.reviewer_agent import ReviewerAgent
                # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º claude_code (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                reviewer = ReviewerAgent(self.db, llm_provider="claude_code")
                checks['can_initialize_reviewer'] = True
                logger.info("  ‚úÖ Reviewer Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (claude_code)")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Reviewer: {e}")
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                raise

            # –ü–†–û–í–ï–†–ö–ê 2: Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω
            logger.info("  [2/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ Expert Agent...")
            if reviewer.expert_agent:
                checks['has_expert_agent'] = True
                logger.info("  ‚úÖ Expert Agent –ø–æ–¥–∫–ª—é—á—ë–Ω")
            else:
                warnings.append("Expert Agent –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ Reviewer")
                logger.warning("  ‚ö†Ô∏è  Expert Agent –ù–ï –ø–æ–¥–∫–ª—é—á—ë–Ω")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è review)
            if test_case is None:
                logger.info("  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
                test_case = self.generate_test_anketa(project_type="sport")

            anketa_id = test_case['anketa_id']
            logger.info(f"  –ò—Å–ø–æ–ª—å–∑—É–µ–º anketa_id: {anketa_id}")

            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è review
            grant_content = self._generate_test_grant_content(test_case)
            research_results = self.generate_test_research_results(test_case)
            citations = self._generate_test_citations()
            tables = self._generate_test_tables()

            # –ü–†–û–í–ï–†–ö–ê 3: Review –≥—Ä–∞–Ω—Ç–∞
            logger.info("  [3/6] –ó–∞–ø—É—Å–∫ review...")

            input_data = {
                'anketa_id': anketa_id,
                'grant_id': f"{anketa_id}-GR-001",
                'grant_content': grant_content,
                'research_results': research_results,
                'user_answers': test_case['user_answers'],
                'citations': citations,
                'tables': tables,
                'selected_grant': test_case['selected_grant']
            }

            try:
                if use_real_llm:
                    result_data = await reviewer.review_and_save_grant_async(input_data)
                else:
                    # Mock —Ä–µ–∂–∏–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
                    logger.info("  üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º mock —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ LLM)")
                    result_data = self._mock_reviewer_result(input_data)

                checks['can_review_grant'] = True
                logger.info("  ‚úÖ Review –≤—ã–ø–æ–ª–Ω–µ–Ω")
            except Exception as e:
                errors.append(f"–û—à–∏–±–∫–∞ review: {e}")
                logger.error(f"  ‚ùå –û—à–∏–±–∫–∞ review: {e}")
                raise

            # –ü–†–û–í–ï–†–ö–ê 4: –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            logger.info("  [4/6] –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
            is_valid, validation_errors = self.validate_reviewer_result(result_data)
            if is_valid:
                checks['result_is_valid'] = True
                logger.info("  ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–µ–Ω")
            else:
                errors.extend(validation_errors)
                logger.error(f"  ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {validation_errors}")

            # –ü–†–û–í–ï–†–ö–ê 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ mock)
            logger.info("  [5/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î...")
            if result_data.get('review_id'):
                checks['saved_to_db'] = True
                logger.info(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result_data['review_id']}")
            else:
                if use_real_llm:
                    warnings.append("Review –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
                    logger.warning("  ‚ö†Ô∏è  –ù–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
                else:
                    # –í mock —Ä–µ–∂–∏–º–µ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                    checks['saved_to_db'] = True
                    logger.info("  ‚úÖ Mock —Ä–µ–∂–∏–º: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ë–î")

            # –ü–†–û–í–ï–†–ö–ê 6: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = time.time() - start_time
            logger.info(f"  [6/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")

            if use_real_llm:
                # –†–µ–∞–ª—å–Ω—ã–π LLM: –æ–∂–∏–¥–∞–µ–º –¥–æ 2 –º–∏–Ω—É—Ç
                if execution_time < 120:
                    checks['execution_time_ok'] = True
                    logger.info(f"  ‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å (< 2 –º–∏–Ω)")
                else:
                    warnings.append(f"Review –∑–∞–Ω—è–ª {execution_time:.1f}—Å (> 2 –º–∏–Ω)")
                    logger.warning(f"  ‚ö†Ô∏è  –î–æ–ª–≥–æ: {execution_time:.1f}—Å")
            else:
                # Mock —Ä–µ–∂–∏–º: –æ–∂–∏–¥–∞–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
                checks['execution_time_ok'] = True
                logger.info(f"  ‚úÖ –í—Ä–µ–º—è: {execution_time:.1f}—Å (mock —Ä–µ–∂–∏–º)")

        except Exception as e:
            errors.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

        # –ü–æ–¥—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        checks_passed = sum(checks.values())
        checks_total = len(checks)
        status = 'passed' if checks_passed == checks_total and not errors else 'failed'

        execution_time = time.time() - start_time

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        test_result = {
            'status': status,
            'test_id': test_id,
            'agent': 'reviewer',
            'test_type': 'functionality',
            'execution_time': round(execution_time, 2),
            'checks': checks,
            'checks_passed': checks_passed,
            'checks_total': checks_total,
            'errors': errors,
            'warnings': warnings,
            'timestamp': datetime.now().isoformat(),
            'use_real_llm': use_real_llm
        }

        # –î–æ–±–∞–≤–ª—è–µ–º preview —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if result_data:
            test_result['result_preview'] = {
                'status': result_data.get('status'),
                'review_id': result_data.get('review_id'),
                'readiness_score': result_data.get('readiness_score', 0),
                'approval_probability': result_data.get('approval_probability', 0),
                'can_submit': result_data.get('can_submit', False),
                'fpg_requirements_count': len(result_data.get('fpg_requirements', {}).get('evidence_base', [])) +
                                         len(result_data.get('fpg_requirements', {}).get('structure', [])) +
                                         len(result_data.get('fpg_requirements', {}).get('matching', [])) +
                                         len(result_data.get('fpg_requirements', {}).get('economics', []))
            }

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥
        if status == 'passed':
            logger.info(f"‚úÖ –¢–µ—Å—Ç –ü–†–û–ô–î–ï–ù: {checks_passed}/{checks_total} –ø—Ä–æ–≤–µ—Ä–æ–∫")
        else:
            logger.error(f"‚ùå –¢–µ—Å—Ç –ü–†–û–í–ê–õ–ï–ù: {checks_passed}/{checks_total} –ø—Ä–æ–≤–µ—Ä–æ–∫, {len(errors)} –æ—à–∏–±–æ–∫")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        self._save_test_report(test_result)

        return test_result

    # ========================================
    # –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•
    # ========================================

    def generate_test_anketa(self,
                            project_type: str = "sport",
                            difficulty: str = "medium") -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É

        Args:
            project_type: "sport", "education", "culture"
            difficulty: "easy", "medium", "hard"
        """
        logger.info(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã: {project_type} ({difficulty})")

        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞
        if project_type == "sport":
            anketa = {
                'anketa_id': f"#AN-{datetime.now().strftime('%Y%m%d')}-test_trainer-001",
                'user_answers': {
                    'project_name': '–®–∫–æ–ª–∞ –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞ "–ú–µ—Ç–∫–∏–π –ª—É—á–Ω–∏–∫"',
                    'description': '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–æ–ª—ã –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞',
                    'problem': '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –≤ –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏',
                    'solution': '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∫–æ–ª—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º',
                    'target_group': '–î–µ—Ç–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ 10-18 –ª–µ—Ç',
                    'geography': '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - –ö—É–∑–±–∞—Å—Å',
                    'budget': '2000000',
                    'timeline': '12'
                },
                'selected_grant': {
                    'name': '–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤',
                    'max_amount': 3000000
                },
                'requested_amount': 2000000,
                'project_duration': 12
            }
        else:
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
            anketa = self.generate_test_anketa(project_type="sport")

        logger.info(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞: {anketa['anketa_id']}")
        return anketa

    def generate_test_research_results(self, test_case: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ research_results –¥–ª—è —Ç–µ—Å—Ç–∞"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö research_results")

        return {
            'metadata': {
                'sources_count': 27,
                'quotes_count': 45,
                'created_at': datetime.now().isoformat()
            },
            'block1_problem': {
                'summary': '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ',
                'key_facts': [
                    {'fact': '–†–µ–≥–∏–æ–Ω –∑–∞–Ω–∏–º–∞–µ—Ç 45 –º–µ—Å—Ç–æ –ø–æ –°–®–û–†', 'source': '–ú–∏–Ω—Å–ø–æ—Ä—Ç', 'date': '2024'},
                    {'fact': '–¢–æ–ª—å–∫–æ 2 —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞', 'source': '–î–µ–ø—Å–ø–æ—Ä—Ç', 'date': '2024'}
                ],
                'programs': [
                    {'name': '–°–ø–æ—Ä—Ç - –Ω–æ—Ä–º–∞ –∂–∏–∑–Ω–∏', 'kpi': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ 70% –∫ 2030'}
                ],
                'success_cases': [
                    {'name': '–°–®–û–† –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'result': '5 –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞'}
                ]
            },
            'block2_geography': {
                'summary': '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, 2.6 –º–ª–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
                'key_facts': [
                    {'fact': '–ù–∞—Å–µ–ª–µ–Ω–∏–µ: 2.6 –º–ª–Ω', 'source': '–†–æ—Å—Å—Ç–∞—Ç'},
                    {'fact': '–î–µ—Ç–∏ 10-18 –ª–µ—Ç: 312 —Ç—ã—Å', 'source': '–†–æ—Å—Å—Ç–∞—Ç'}
                ]
            },
            'block3_goals': {
                'summary': '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 50 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –∑–∞ 3 –≥–æ–¥–∞',
                'main_goal_variants': [
                    {'text': '–°–æ–∑–¥–∞—Ç—å –°–®–û–† –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å 50 —Ä–∞–∑—Ä—è–¥–Ω–∏–∫–æ–≤ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤'}
                ]
            }
        }

    # ========================================
    # –í–ê–õ–ò–î–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
    # ========================================

    def validate_writer_result(self, result: Dict) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Writer Agent

        Returns:
            (is_valid, errors)
        """
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—Ç–∞—Ç—É—Å
        if result.get('status') != 'success':
            errors.append(f"–°—Ç–∞—Ç—É—Å –Ω–µ success: {result.get('status')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ application
        if 'application' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'application'")
            return False, errors

        application = result['application']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –í—Å–µ 9 —Ä–∞–∑–¥–µ–ª–æ–≤
        required_sections = [
            'section_1_brief', 'section_2_problem', 'section_3_goal',
            'section_4_results', 'section_5_tasks', 'section_6_partners',
            'section_7_info', 'section_8_future', 'section_9_calendar'
        ]

        for section in required_sections:
            if section not in application or not application[section]:
                errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–∞–∑–¥–µ–ª: {section}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: Quality score
        if 'quality_score' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç quality_score")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: Citations
        if 'citations' not in result or len(result['citations']) == 0:
            errors.append("–ù–µ—Ç —Ü–∏—Ç–∞—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: Tables
        if 'tables' not in result or len(result['tables']) == 0:
            errors.append("–ù–µ—Ç —Ç–∞–±–ª–∏—Ü")

        is_valid = len(errors) == 0
        return is_valid, errors

    def validate_reviewer_result(self, result: Dict) -> Tuple[bool, List[str]]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Reviewer Agent

        Returns:
            (is_valid, errors)
        """
        errors = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –°—Ç–∞—Ç—É—Å
        if result.get('status') != 'success':
            errors.append(f"–°—Ç–∞—Ç—É—Å –Ω–µ success: {result.get('status')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–∞–ª–∏—á–∏–µ readiness_score
        if 'readiness_score' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç readiness_score")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ù–∞–ª–∏—á–∏–µ approval_probability
        if 'approval_probability' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç approval_probability")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ù–∞–ª–∏—á–∏–µ criteria_scores
        if 'criteria_scores' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç criteria_scores")
        else:
            required_criteria = ['evidence_base', 'structure', 'matching', 'economics']
            for criterion in required_criteria:
                if criterion not in result['criteria_scores']:
                    errors.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏–π: {criterion}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ù–∞–ª–∏—á–∏–µ strengths –∏ weaknesses
        if 'strengths' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç strengths")
        if 'weaknesses' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç weaknesses")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ù–∞–ª–∏—á–∏–µ recommendations
        if 'recommendations' not in result:
            errors.append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç recommendations")

        is_valid = len(errors) == 0
        return is_valid, errors

    # ========================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # ========================================

    def _generate_test_grant_content(self, test_case: Dict) -> Dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è review"""
        logger.info("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≥—Ä–∞–Ω—Ç–∞")

        return {
            'problem': '–í –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞. ' * 50,
            'geography': '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - –ö—É–∑–±–∞—Å—Å, 2.6 –º–ª–Ω –Ω–∞—Å–µ–ª–µ–Ω–∏—è',
            'goals': '–°–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å 50 —Ä–∞–∑—Ä—è–¥–Ω–∏–∫–æ–≤ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤',
            'solution': '–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∫–æ–ª—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏',
            'budget': '2,000,000 —Ä—É–±–ª–µ–π: –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 1,500,000, –∑–∞—Ä–ø–ª–∞—Ç—ã 300,000, –∞—Ä–µ–Ω–¥–∞ 200,000',
            'timeline': '12 –º–µ—Å—è—Ü–µ–≤: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ 3 –º–µ—Å, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è 9 –º–µ—Å',
            'full_text': ' '.join([
                '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...' * 200,
                '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–µ–∫—Ç–∞...' * 100,
                '–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏...' * 100,
                '–†–µ—à–µ–Ω–∏–µ...' * 150,
                '–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞...' * 50
            ])
        }

    def _generate_test_citations(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ü–∏—Ç–∞—Ç—ã"""
        logger.info("üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–∏—Ç–∞—Ç")

        return [
            {'text': '–ü–æ –¥–∞–Ω–Ω—ã–º –†–æ—Å—Å—Ç–∞—Ç–∞', 'source': '–†–æ—Å—Å—Ç–∞—Ç', 'url': 'https://rosstat.gov.ru'},
            {'text': '–°–æ–≥–ª–∞—Å–Ω–æ –ú–∏–Ω—Å–ø–æ—Ä—Ç—É –†–§', 'source': '–ú–∏–Ω—Å–ø–æ—Ä—Ç', 'url': ''},
            {'text': '–ù–∞—Ü–ø—Ä–æ–µ–∫—Ç "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è"', 'source': '–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ –†–§', 'url': ''},
            {'text': '–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ø–æ—Ä—Ç–∞ –¥–æ 2030', 'source': '–ú–∏–Ω—Å–ø–æ—Ä—Ç', 'url': ''},
            {'text': '–£—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å –°–®–û–† –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', 'source': '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'url': ''},
            {'text': '–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è 2021', 'source': '–†–æ—Å—Å—Ç–∞—Ç', 'url': ''},
            {'text': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –°–®–û–† –≤ —Ä–µ–≥–∏–æ–Ω–∞—Ö', 'source': '–ú–∏–Ω—Å–ø–æ—Ä—Ç', 'url': ''},
            {'text': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ "–°–ø–æ—Ä—Ç - –Ω–æ—Ä–º–∞ –∂–∏–∑–Ω–∏"', 'source': '–ù–∞—Ü–ø—Ä–æ–µ–∫—Ç', 'url': ''},
            {'text': '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∫ –ø—Ä–æ–µ–∫—Ç–∞–º', 'source': '–§–ü–ì', 'url': ''},
            {'text': '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞', 'source': '–ú–∏–Ω—Å–ø–æ—Ä—Ç', 'url': ''}
        ]

    def _generate_test_tables(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü")

        return [
            {
                'title': '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –°–®–û–† –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º',
                'content': '| –†–µ–≥–∏–æ–Ω | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –°–®–û–† | –ú–∞—Å—Ç–µ—Ä–æ–≤ —Å–ø–æ—Ä—Ç–∞ |\n|--------|----------------|----------------|\n| –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ | 15 | 45 |\n| –ö–µ–º–µ—Ä–æ–≤–æ | 8 | 12 |'
            },
            {
                'title': '–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤',
                'content': '| –°—Ç–∞—Ç—å—è | –°—É–º–º–∞ (—Ä—É–±) | –î–æ–ª—è |\n|--------|-------------|------|\n| –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ | 1,500,000 | 75% |\n| –ó–∞—Ä–ø–ª–∞—Ç—ã | 300,000 | 15% |'
            }
        ]

    def _mock_reviewer_result(self, input_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞—ë—Ç mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç Reviewer Agent –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        return {
            'status': 'success',
            'agent_type': 'reviewer',
            'readiness_score': 7.5,
            'approval_probability': 47.8,
            'fpg_requirements': {
                'evidence_base': [],
                'structure': [],
                'matching': [],
                'economics': []
            },
            'criteria_scores': {
                'evidence_base': {
                    'score': 7.5,
                    'weight': 0.40,
                    'weighted_score': 3.0,
                    'details': {}
                },
                'structure': {
                    'score': 8.0,
                    'weight': 0.30,
                    'weighted_score': 2.4,
                    'details': {}
                },
                'matching': {
                    'score': 7.0,
                    'weight': 0.20,
                    'weighted_score': 1.4,
                    'details': {}
                },
                'economics': {
                    'score': 6.5,
                    'weight': 0.10,
                    'weighted_score': 0.65,
                    'details': {}
                }
            },
            'strengths': [
                '–°–∏–ª—å–Ω–∞—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞',
                '–õ–æ–≥–∏—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
                'SMART-—Ü–µ–ª–∏'
            ],
            'weaknesses': [
                '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü',
                '–ú–æ–∂–Ω–æ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç'
            ],
            'recommendations': [
                '–ó–∞—è–≤–∫–∞ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞',
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –ø–æ–¥–∞—á–µ'
            ],
            'can_submit': True,
            'quality_tier': 'Good',
            'processing_time': 2.5,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

    def _save_research_results_to_db(self, anketa_id: str, research_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ research_results –≤ –ë–î"""
        try:
            with self.db.connect() as conn:
                cursor = conn.cursor()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏
                cursor.execute(
                    "SELECT id FROM researcher_research WHERE anketa_id = %s",
                    (anketa_id,)
                )
                existing = cursor.fetchone()

                if existing:
                    cursor.execute("""
                        UPDATE researcher_research
                        SET research_results = %s, status = 'completed', completed_at = NOW()
                        WHERE anketa_id = %s
                    """, (json.dumps(research_results), anketa_id))
                else:
                    cursor.execute("""
                        INSERT INTO researcher_research
                        (anketa_id, research_id, research_results, status, completed_at, user_id, llm_provider)
                        VALUES (%s, %s, %s, 'completed', NOW(), 1, 'mock_test')
                    """, (anketa_id, f"{anketa_id}-RS-001", json.dumps(research_results)))

                conn.commit()
                logger.info(f"‚úÖ Research results —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {anketa_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è research_results: {e}")

    def _mock_writer_result(self, input_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞—ë—Ç mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç Writer Agent –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        return {
            'status': 'success',
            'application': {
                'section_1_brief': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...',
                'section_2_problem': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã... ' * 100,
                'section_3_goal': 'SMART —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞',
                'section_4_results': '–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
                'section_5_tasks': '1. –ó–∞–¥–∞—á–∞ 1\n2. –ó–∞–¥–∞—á–∞ 2',
                'section_6_partners': '–ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞',
                'section_7_info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ',
                'section_8_future': '–î–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ',
                'section_9_calendar': '| –ú–µ—Å—è—Ü | –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ |\n|-------|-------------|',
                'full_text': '–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏...' * 500
            },
            'quality_score': 8.0,
            'citations': [{'text': '–¶–∏—Ç–∞—Ç–∞ 1'}, {'text': '–¶–∏—Ç–∞—Ç–∞ 2'}],
            'tables': [{'title': '–¢–∞–±–ª–∏—Ü–∞ 1'}, {'title': '–¢–∞–±–ª–∏—Ü–∞ 2'}],
            'research_used': True,
            'agent_type': 'writer_v2_mock'
        }

    def _save_test_report(self, test_result: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á—ë—Ç –æ —Ç–µ—Å—Ç–µ"""
        try:
            reports_dir = os.path.join(os.path.dirname(__file__), 'reports')
            os.makedirs(reports_dir, exist_ok=True)

            filename = f"{test_result['test_id']}.json"
            filepath = os.path.join(reports_dir, filename)

            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(test_result, f, ensure_ascii=False, indent=2)

            logger.info(f"üíæ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filepath}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞: {e}")

    # ========================================
    # –°–ò–ù–•–†–û–ù–ù–ê–Ø –û–ë–Å–†–¢–ö–ê
    # ========================================

    def test_writer(self, test_case: Optional[Dict] = None, use_real_llm: bool = False) -> Dict:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è test_writer_functionality"""
        return asyncio.run(self.test_writer_functionality(test_case, use_real_llm))
