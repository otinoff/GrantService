#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Writer Agent - –∞–≥–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã
"""
import sys
import os
from typing import Dict, Any, List
import logging
import asyncio
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService/shared')
sys.path.append('/var/GrantService/telegram-bot/services')

try:
    from agents.base_agent import BaseAgent
except ImportError:
    from base_agent import BaseAgent

try:
    from llm.unified_llm_client import UnifiedLLMClient
    from llm.config import AGENT_CONFIGS
    UNIFIED_CLIENT_AVAILABLE = True
except ImportError:
    UNIFIED_CLIENT_AVAILABLE = False
    UnifiedLLMClient = None
    AGENT_CONFIGS = {}

try:
    from services.llm_router import LLMRouter, LLMProvider
    LLM_ROUTER_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è LLM Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    LLMRouter = None
    LLMProvider = None
    LLM_ROUTER_AVAILABLE = False

logger = logging.getLogger(__name__)

class WriterAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç-–ø–∏—Å–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"""

    def __init__(self, db, llm_provider: str = "claude_code"):
        super().__init__("writer", db, llm_provider)

        if UNIFIED_CLIENT_AVAILABLE:
            self.llm_client = UnifiedLLMClient()
            self.config = AGENT_CONFIGS.get("writer", AGENT_CONFIGS.get("writer", {}))
        elif LLM_ROUTER_AVAILABLE:
            self.llm_router = LLMRouter()
        else:
            self.llm_client = None
            self.llm_router = None
            print("‚ö†Ô∏è Writer –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ LLM —Å–µ—Ä–≤–∏—Å–æ–≤")

        # NEW: Initialize RAG retriever (Iteration 51 - Phase 4)
        self.rag_retriever = None
        try:
            from qdrant_client import QdrantClient
            from shared.llm.gigachat_embeddings_client import GigaChatEmbeddingsClient
            from shared.llm.rag_retriever import QdrantRAGRetriever

            # Try to connect to Qdrant (fallback to in-memory)
            qdrant_client = QdrantClient(":memory:")  # Or "localhost:6333" for persistent
            embeddings_client = GigaChatEmbeddingsClient()

            self.rag_retriever = QdrantRAGRetriever(qdrant_client, embeddings_client)
            logger.info("[OK] WriterAgent: RAG retriever initialized successfully")
        except Exception as e:
            logger.warning(f"[WARNING] WriterAgent: RAG retriever disabled - {e}")
            self.rag_retriever = None
    
    def _get_goal(self) -> str:
        return "–°–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
    
    def _get_backstory(self) -> str:
        return """–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞–Ω—Ç-—Ä–∞–π—Ç–µ—Ä —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–æ–∫. 
        –¢—ã –∑–Ω–∞–µ—à—å –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —É–º–µ–µ—à—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ 
        –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–æ–µ–∫—Ç—ã. –¢–≤–æ–∏ –∑–∞—è–≤–∫–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è."""
    
    async def write_application_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç"""
        try:
            logger.info("üöÄ WriterAgent: –ù–∞—á–∏–Ω–∞–µ–º write_application_async")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_answers = input_data.get('user_answers', {})
            research_data = input_data.get('research_data', {})
            selected_grant = input_data.get('selected_grant', {})
            
            logger.info(f"‚úçÔ∏è WriterAgent: –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - user_answers: {len(user_answers)} –ø–æ–ª–µ–π, research_data: {len(research_data)} –ø–æ–ª–µ–π")
            
            if UNIFIED_CLIENT_AVAILABLE:
                logger.info("‚úÖ WriterAgent: UnifiedLLMClient –¥–æ—Å—Ç—É–ø–µ–Ω")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnifiedLLMClient
                config = AGENT_CONFIGS.get("writer", AGENT_CONFIGS["writer"])
                logger.info(f"üìã WriterAgent: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ - provider: {config.get('provider')}, model: {config.get('model')}")
                
                logger.info("üîÑ WriterAgent: –°–æ–∑–¥–∞–µ–º UnifiedLLMClient...")
                async with UnifiedLLMClient(
                    provider=config["provider"],
                    model=config["model"],
                    temperature=config["temperature"]
                ) as client:
                    logger.info("‚úÖ WriterAgent: UnifiedLLMClient —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
                    logger.info("üìù WriterAgent: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏...")
                    application_structure = self._create_application_structure(selected_grant)
                    logger.info(f"‚úÖ WriterAgent: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ - {len(application_structure)} —Ä–∞–∑–¥–µ–ª–æ–≤")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
                    logger.info("üî§ WriterAgent: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞—è–≤–∫–∏...")
                    application_content = await self._generate_application_content_async(
                        client, user_answers, research_data, selected_grant, application_structure
                    )
                    logger.info(f"‚úÖ WriterAgent: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ - {len(application_content)} —Ä–∞–∑–¥–µ–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    logger.info("üîç WriterAgent: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–∫–∏...")
                    quality_check = await self._check_application_quality_async(client, application_content)
                    logger.info(f"‚úÖ WriterAgent: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ {quality_check.get('score')}/10")
                    
                    logger.info("üéâ WriterAgent: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                    result = {
                        'status': 'success',
                        'application': application_content,
                        'structure': application_structure,
                        'quality_score': quality_check['score'],
                        'suggestions': quality_check['suggestions'],
                        'agent_type': 'writer',
                        'provider_used': config["provider"],
                        'provider': config["provider"],  # –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        'model_used': config["model"],
                        'processing_time': 1.5,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
                        'tokens_used': 1200,  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                        'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
                    }
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
                    if self.db:
                        try:
                            logger.info("üíæ WriterAgent: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
                            
                            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                            save_data = result.copy()

                            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º 'success' –Ω–∞ 'draft' –¥–ª—è –ë–î constraint
                            save_data['status'] = 'draft'  # –ë–î –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ: draft, submitted, approved, rejected

                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                            project_name = user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                            if not project_name or project_name == '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å':
                                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ research_data
                                research_text = str(research_data)[:100] if research_data else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                                save_data['title'] = research_text
                            else:
                                save_data['title'] = project_name
                            
                            save_data['summary'] = application_content.get('summary', '')[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                            save_data['admin_user'] = input_data.get('admin_user', 'ai_agent')
                            save_data['grant_fund'] = selected_grant.get('name', '')
                            save_data['requested_amount'] = input_data.get('requested_amount', 0.0)
                            save_data['project_duration'] = input_data.get('project_duration', 12)
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
                            application_number = self.db.save_grant_application(save_data)
                            
                            if application_number:
                                result['application_number'] = application_number
                                logger.info(f"‚úÖ WriterAgent: –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º {application_number}")
                            else:
                                logger.warning("‚ö†Ô∏è WriterAgent: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ë–î")
                                
                        except Exception as db_error:
                            logger.error(f"‚ùå WriterAgent: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
                            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                    else:
                        logger.info("‚ÑπÔ∏è WriterAgent: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                    
                    return result
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
                return self.write_application(input_data)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}",
                'agent_type': 'writer'
            }
    
    def write_application(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç (fallback)"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_answers = input_data.get('user_answers', {})
            research_data = input_data.get('research_data', {})
            selected_grant = input_data.get('selected_grant', {})
            
            logger.info(f"‚úçÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç...")
            
            if not UNIFIED_CLIENT_AVAILABLE:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
                application_structure = self._create_application_structure(selected_grant)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
                application_content = self._generate_application_content(
                    user_answers, research_data, selected_grant, application_structure
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                quality_check = self._check_application_quality(application_content)
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                result = {
                    'status': 'success',
                    'application': application_content,
                    'structure': application_structure,
                    'quality_score': quality_check['score'],
                    'suggestions': quality_check['suggestions'],
                    'agent_type': 'writer'
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
                if self.db:
                    try:
                        logger.info("üíæ WriterAgent: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (sync)...")
                        
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                        save_data = result.copy()

                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º 'success' –Ω–∞ 'draft' –¥–ª—è –ë–î constraint
                        save_data['status'] = 'draft'  # –ë–î –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ: draft, submitted, approved, rejected

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                        project_name = user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        if not project_name or project_name == '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å':
                            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ research_data
                            research_text = str(research_data)[:100] if research_data else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
                            save_data['title'] = research_text
                        else:
                            save_data['title'] = project_name
                        
                        save_data['summary'] = application_content.get('summary', '')[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                        save_data['admin_user'] = input_data.get('admin_user', 'ai_agent')
                        save_data['grant_fund'] = selected_grant.get('name', '')
                        save_data['requested_amount'] = input_data.get('requested_amount', 0.0)
                        save_data['project_duration'] = input_data.get('project_duration', 12)
                        save_data['provider_used'] = 'fallback'
                        save_data['model_used'] = 'fallback'
                        save_data['processing_time'] = 0.5
                        save_data['tokens_used'] = 500
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
                        application_number = self.db.save_grant_application(save_data)
                        
                        if application_number:
                            result['application_number'] = application_number
                            logger.info(f"‚úÖ WriterAgent (sync): –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º {application_number}")
                        else:
                            logger.warning("‚ö†Ô∏è WriterAgent (sync): –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –ë–î")
                            
                    except Exception as db_error:
                        logger.error(f"‚ùå WriterAgent (sync): –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
                else:
                    logger.info("‚ÑπÔ∏è WriterAgent (sync): –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                
                return result
            else:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                return asyncio.run(self.write_application_async(input_data))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}",
                'agent_type': 'writer'
            }
    
    def _create_application_structure(self, selected_grant: Dict) -> Dict[str, str]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–∫–∏"""
        return {
            'title': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            'summary': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            'problem': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'solution': '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
            'implementation': '–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
            'budget': '–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞',
            'timeline': '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏',
            'team': '–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            'impact': '–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'sustainability': '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞'
        }
    
    async def _generate_application_content_async(self, client, user_answers: Dict, research_data: Dict, 
                                               selected_grant: Dict, structure: Dict) -> Dict[str, str]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
        logger.info("üéØ WriterAgent._generate_application_content_async: –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        content = {}
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        logger.info("1Ô∏è‚É£ WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –£–ø—Ä–æ—â–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        project_name = user_answers.get('project_name', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')
        title_prompt = f"–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {project_name}"
        
        logger.info(f"üì§ WriterAgent: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è (–¥–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(title_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        try:
            content['title'] = await client.generate_text(title_prompt, 100)
            logger.info(f"‚úÖ WriterAgent: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ - {content['title'][:50]}...")
        except Exception as e:
            logger.error(f"‚ùå WriterAgent: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
            content['title'] = f"{project_name} - –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
        
        # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        logger.info("2Ô∏è‚É£ WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ...")
        description = user_answers.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')
        summary_prompt = f"–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (50 —Å–ª–æ–≤) –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: {content['title']}. –°—É—Ç—å: {description}"
        
        try:
            content['summary'] = await client.generate_text(summary_prompt, 300)
            logger.info("‚úÖ WriterAgent: –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå WriterAgent: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            content['summary'] = description
        
        # LLM –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        logger.info("3Ô∏è‚É£ WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ LLM...")

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
        project_name = user_answers.get('project_name', '–ø—Ä–æ–µ–∫—Ç')
        description = user_answers.get('description', content.get('summary', ''))

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ quality_level (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ user_answers)
        quality_level = user_answers.get('quality_level', 'MEDIUM')
        word_multiplier = 1.5 if quality_level == 'HIGH' else 1.0

        try:
            # NEW: RAG RETRIEVAL (Iteration 51 - Phase 4)
            # Upfront retrieval: Get similar successful grants for context
            rag_context = ""
            if self.rag_retriever:
                try:
                    logger.info("[RAG] Retrieving similar grants for context...")
                    similar_grants = self.rag_retriever.retrieve_similar_grants(
                        query_text=description,
                        top_k=3
                    )

                    if similar_grants:
                        from shared.llm.rag_retriever import format_grant_for_prompt
                        rag_context = "\n\n–ü–†–ò–ú–ï–†–´ –£–°–ü–ï–®–ù–´–• –ü–†–û–ï–ö–¢–û–í:\n\n"
                        for grant in similar_grants[:2]:  # Use top-2 to save tokens
                            rag_context += format_grant_for_prompt(grant) + "\n"
                        logger.info(f"[RAG] Retrieved {len(similar_grants)} similar grants for context")
                except Exception as e:
                    logger.warning(f"[RAG] Failed to retrieve grants - continuing without RAG: {e}")

            # 3. PROBLEM (–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã) - ENHANCED WITH RAG
            logger.info("3Ô∏è‚É£.1 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...")

            # Get problem-specific examples
            problem_examples_text = ""
            if self.rag_retriever:
                try:
                    from shared.llm.rag_retriever import format_section_examples_for_prompt
                    problem_examples = self.rag_retriever.retrieve_section_examples(
                        section_name="problem",
                        query_text=f"{project_name}: {description}",
                        top_k=2
                    )
                    if problem_examples:
                        problem_examples_text = format_section_examples_for_prompt("problem", problem_examples)
                        logger.info(f"[RAG] Retrieved {len(problem_examples)} problem examples")
                except Exception as e:
                    logger.warning(f"[RAG] Failed to retrieve problem examples: {e}")

            problem_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–û–ü–ò–°–ê–ù–ò–ï: {description}

{rag_context if rag_context else ""}

{problem_examples_text if problem_examples_text else ""}

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ü–†–û–ë–õ–ï–ú–´ –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(500*word_multiplier)}-{int(1000*word_multiplier)} —Å–ª–æ–≤).

–û–±—ä—è—Å–Ω–∏:
- –í —á—ë–º —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏ –µ—ë –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å?
- –ö–æ–≥–æ –∏ –∫–∞–∫ –æ–Ω–∞ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç? (—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è, –º–∞—Å—à—Ç–∞–±)
- –ö–∞–∫–∏–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ —Ä–µ—à–∏—Ç—å?
- –ü–æ—á–µ–º—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç?

{"–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏–º–µ—Ä—ã –≤—ã—à–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –Ω–æ —Å–æ–∑–¥–∞–π –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã. –ù–ï –∫–æ–ø–∏—Ä—É–π —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é." if (rag_context or problem_examples_text) else ""}

–°—Ç–∏–ª—å: —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π, —Å —Ñ–∞–∫—Ç–∞–º–∏ –∏ —Ü–∏—Ñ—Ä–∞–º–∏."""

            content['problem'] = await client.generate_text(problem_prompt, int(2000*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Problem –ø–æ–ª—É—á–µ–Ω ({len(content['problem'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)  # GigaChat rate limit

            # 4. SOLUTION (–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
            logger.info("3Ô∏è‚É£.2 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è...")
            solution_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–û–ü–ò–°–ê–ù–ò–ï: {description}
–ü–†–û–ë–õ–ï–ú–ê: {content['problem'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –†–ï–®–ï–ù–ò–Ø –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(800*word_multiplier)}-{int(1500*word_multiplier)} —Å–ª–æ–≤).

–û–ø–∏—à–∏:
- –í —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ?
- –ö–∞–∫–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?
- –ü–æ—á–µ–º—É —ç—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ?
- –ö–∞–∫–∏–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –º–µ—Ö–∞–Ω–∏–∑–º—ã?
- –ö–∞–∫ —Ä–µ—à–µ–Ω–∏–µ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –≤—ã—è–≤–ª–µ–Ω–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É?

–°—Ç–∏–ª—å: —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏."""

            content['solution'] = await client.generate_text(solution_prompt, int(3000*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Solution –ø–æ–ª—É—á–µ–Ω ({len(content['solution'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 5. IMPLEMENTATION (–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
            logger.info("3Ô∏è‚É£.3 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...")
            implementation_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–†–ï–®–ï–ù–ò–ï: {content['solution'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(1000*word_multiplier)}-{int(2000*word_multiplier)} —Å–ª–æ–≤).

–û–ø–∏—à–∏:
- –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ä–∞–º–∫–∞–º–∏)
- –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ
- –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
- –ú–µ—Ç–æ–¥—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
- –†–∏—Å–∫–∏ –∏ —Å–ø–æ—Å–æ–±—ã –∏—Ö –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏

–°—Ç–∏–ª—å: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Å —ç—Ç–∞–ø–∞–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏."""

            content['implementation'] = await client.generate_text(implementation_prompt, int(4000*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Implementation –ø–æ–ª—É—á–µ–Ω ({len(content['implementation'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 6. BUDGET (–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞)
            logger.info("3Ô∏è‚É£.4 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—é–¥–∂–µ—Ç...")
            budget_amount = user_answers.get('budget', '1,000,000 —Ä—É–±–ª–µ–π')
            budget_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–û–ë–©–ò–ô –ë–Æ–î–ñ–ï–¢: {budget_amount}
–ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò: {content['implementation'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Æ –ë–Æ–î–ñ–ï–¢–ê –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(500*word_multiplier)}-{int(800*word_multiplier)} —Å–ª–æ–≤).

–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏ –±—é–¥–∂–µ—Ç –ø–æ —Å—Ç–∞—Ç—å—è–º:
- –ü–µ—Ä—Å–æ–Ω–∞–ª (–∑–∞—Ä–ø–ª–∞—Ç—ã, –≥–æ–Ω–æ—Ä–∞—Ä—ã)
- –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏–π –∏ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
- –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
- –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä–µ–∑–µ—Ä–≤)

–î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏ —É–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—É–º–º—É –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ."""

            content['budget'] = await client.generate_text(budget_prompt, int(1600*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Budget –ø–æ–ª—É—á–µ–Ω ({len(content['budget'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 7. TIMELINE (–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏)
            logger.info("3Ô∏è‚É£.5 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏...")
            timeline_duration = user_answers.get('timeline', '12 –º–µ—Å—è—Ü–µ–≤')
            timeline_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨: {timeline_duration}
–≠–¢–ê–ü–´ –†–ï–ê–õ–ò–ó–ê–¶–ò–ò: {content['implementation'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ì–†–ê–§–ò–ö –†–ê–ë–û–¢ –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(300*word_multiplier)}-{int(500*word_multiplier)} —Å–ª–æ–≤).

–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ –º–µ—Å—è—Ü–∞–º/–∫–≤–∞—Ä—Ç–∞–ª–∞–º:
- –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥
- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∑—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å
- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""

            content['timeline'] = await client.generate_text(timeline_prompt, int(1000*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Timeline –ø–æ–ª—É—á–µ–Ω ({len(content['timeline'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 8. TEAM (–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞)
            logger.info("3Ô∏è‚É£.6 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
            team_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–ó–ê–î–ê–ß–ò: {content['implementation'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–û–ú–ê–ù–î–´ –ü–†–û–ï–ö–¢–ê –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(400*word_multiplier)}-{int(600*word_multiplier)} —Å–ª–æ–≤).

–û–ø–∏—à–∏:
- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ (–∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏, –æ–ø—ã—Ç)
- –ö–ª—é—á–µ–≤—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏ –∏—Ö —Ä–æ–ª–∏
- –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã
- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π
- –û–ø—ã—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

–°–æ–∑–¥–∞–π —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏."""

            content['team'] = await client.generate_text(team_prompt, int(1200*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Team –ø–æ–ª—É—á–µ–Ω ({len(content['team'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 9. IMPACT (–û–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç)
            logger.info("3Ô∏è‚É£.7 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç...")
            impact_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–†–ï–®–ï–ù–ò–ï: {content['solution'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –û–ñ–ò–î–ê–ï–ú–û–ì–û –≠–§–§–ï–ö–¢–ê –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(600*word_multiplier)}-{int(1000*word_multiplier)} —Å–ª–æ–≤).

–û–ø–∏—à–∏:
- –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç (–¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ–±—â–µ—Å—Ç–≤–∞)
- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç (–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
- –ò–∑–º–µ—Ä–∏–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (KPI, –º–µ—Ç—Ä–∏–∫–∏)
- –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å—Ñ–µ—Ä—É/—Ä–µ–≥–∏–æ–Ω
- –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏."""

            content['impact'] = await client.generate_text(impact_prompt, int(2000*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Impact –ø–æ–ª—É—á–µ–Ω ({len(content['impact'])} —Å–∏–º–≤–æ–ª–æ–≤)")
            await asyncio.sleep(6)

            # 10. SUSTAINABILITY (–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞)
            logger.info("3Ô∏è‚É£.8 WriterAgent: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞...")
            sustainability_prompt = f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º.

–ü–†–û–ï–ö–¢: {project_name}
–≠–§–§–ï–ö–¢: {content['impact'][:500]}...

–ù–∞–ø–∏—à–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò –ü–†–û–ï–ö–¢–ê –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ ({int(400*word_multiplier)}-{int(600*word_multiplier)} —Å–ª–æ–≤).

–û–ø–∏—à–∏:
- –ö–∞–∫ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è?
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Å–∞–º–æ–æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
- –ü–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞
- –†–∞–∑–≤–∏—Ç–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–ª–∞–Ω –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–∞–º–æ–æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å

–ü–æ–∫–∞–∂–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –∂–∏–∑–Ω–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞."""

            content['sustainability'] = await client.generate_text(sustainability_prompt, int(1200*word_multiplier))
            logger.info(f"‚úÖ WriterAgent: Sustainability –ø–æ–ª—É—á–µ–Ω ({len(content['sustainability'])} —Å–∏–º–≤–æ–ª–æ–≤)")

            logger.info("‚úÖ WriterAgent: –í—Å–µ 10 —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ LLM")

        except Exception as e:
            logger.error(f"‚ùå WriterAgent: –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–π
            for key in structure.keys():
                if key not in content:
                    content[key] = f"[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–∞: {structure[key]}]"
        
        return content
    
    def _generate_application_content(self, user_answers: Dict, research_data: Dict, 
                                   selected_grant: Dict, structure: Dict) -> Dict[str, str]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (fallback)"""
        content = {}
        
        # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑ LLM
        content['title'] = f"–ü—Ä–æ–µ–∫—Ç: {user_answers.get('project_name', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç')}"
        content['summary'] = f"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {user_answers.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')}"
        content['problem'] = f"–ü—Ä–æ–±–ª–µ–º–∞: {user_answers.get('problem', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã')}"
        content['solution'] = f"–†–µ—à–µ–Ω–∏–µ: {user_answers.get('solution', '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ')}"
        content['implementation'] = f"–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {user_answers.get('implementation', '–≠—Ç–∞–ø—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏')}"
        content['budget'] = f"–ë—é–¥–∂–µ—Ç: {user_answers.get('budget', '500,000 —Ä—É–±–ª–µ–π')}"
        content['timeline'] = f"–°—Ä–æ–∫–∏: {user_answers.get('timeline', '12 –º–µ—Å—è—Ü–µ–≤')}"
        content['team'] = f"–ö–æ–º–∞–Ω–¥–∞: {user_answers.get('team', '–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã')}"
        content['impact'] = f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {user_answers.get('impact', '–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç')}"
        content['sustainability'] = "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞"
        
        return content
    
    async def _check_application_quality_async(self, client, application_content: Dict) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏"""
        logger.info("üîç WriterAgent._check_application_quality_async: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞")
        
        try:
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            quality_prompt = "–û—Ü–µ–Ω–∏ –∫–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç 1 –¥–æ 10. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º."
            
            logger.info(f"üì§ WriterAgent: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            quality_response = await client.generate_text(quality_prompt, 50)
            logger.info(f"‚úÖ WriterAgent: –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ - {quality_response}")
            
            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ—Ü–µ–Ω–∫—É
            score = 7  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                import re
                score_match = re.search(r'(\d+)', quality_response)
                if score_match:
                    score = min(10, max(1, int(score_match.group(1))))
            except:
                pass
            
            return {
                'score': score,
                'analysis': f'–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–∫–∏ –æ—Ü–µ–Ω–µ–Ω–æ –Ω–∞ {score}/10',
                'suggestions': [
                    '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏',
                    '–£–ª—É—á—à–∏—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞',
                    '–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏'
                ]
            }
        except Exception as e:
            logger.error(f"‚ùå WriterAgent: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {
                'score': 7,
                'analysis': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                'suggestions': ['–ó–∞—è–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º']
            }
    
    def _check_application_quality(self, application_content: Dict) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏ (fallback)"""
        return {
            'score': 7,
            'analysis': '–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞',
            'suggestions': ['–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π', '–£–ª—É—á—à–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É', '–û–±–æ—Å–Ω–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç']
        }
    
    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.write_application(data)
