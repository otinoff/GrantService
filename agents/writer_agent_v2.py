#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Writer Agent V2 - –∞–≥–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DatabasePromptManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ goal/backstory –∏–∑ –ë–î
–í–µ—Ä—Å–∏—è 2.1
"""
import sys
import os
from typing import Dict, Any, List, Optional
import logging
import asyncio
import time
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Windows –∏ Linux)
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, os.path.join(project_root, 'shared'))
sys.path.insert(0, os.path.join(project_root, 'telegram-bot', 'services'))
sys.path.insert(0, os.path.join(project_root, 'web-admin'))

try:
    from agents.base_agent import BaseAgent
except ImportError:
    from base_agent import BaseAgent

# –ò–º–ø–æ—Ä—Ç DatabasePromptManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
try:
    from utils.prompt_manager import DatabasePromptManager, get_database_prompt_manager
    PROMPT_MANAGER_AVAILABLE = True
except ImportError:
    PROMPT_MANAGER_AVAILABLE = False
    DatabasePromptManager = None

try:
    from llm.unified_llm_client import UnifiedLLMClient
    from llm.config import AGENT_CONFIGS
    UNIFIED_CLIENT_AVAILABLE = True
except ImportError:
    UNIFIED_CLIENT_AVAILABLE = False
    UnifiedLLMClient = None
    AGENT_CONFIGS = {}

try:
    from services.llm_router import LLMRouter, LLMProvider
    LLM_ROUTER_AVAILABLE = True
except ImportError:
    print("[WARN] LLM Router –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    LLMRouter = None
    LLMProvider = None
    LLM_ROUTER_AVAILABLE = False

logger = logging.getLogger(__name__)

class WriterAgentV2(BaseAgent):
    """–ê–≥–µ–Ω—Ç-–ø–∏—Å–∞—Ç–µ–ª—å V2 –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º research_results"""

    def __init__(self, db, llm_provider: str = "claude_code"):
        super().__init__("writer", db, llm_provider)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DatabasePromptManager –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î
        self.prompt_manager: Optional[DatabasePromptManager] = None
        if PROMPT_MANAGER_AVAILABLE:
            try:
                self.prompt_manager = get_database_prompt_manager()
                logger.info("‚úÖ Writer V2 Agent: DatabasePromptManager –ø–æ–¥–∫–ª—é—á–µ–Ω (goal, backstory, stage prompts –∏–∑ –ë–î)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Writer V2: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PromptManager: {e}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Expert Agent –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –§–ü–ì
        self.expert_agent = None
        try:
            sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
            from expert_agent import ExpertAgent
            self.expert_agent = ExpertAgent()
            logger.info("‚úÖ Writer V2 Agent: Expert Agent –ø–æ–¥–∫–ª—é—á–µ–Ω (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –§–ü–ì)")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Writer V2: Expert Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        if UNIFIED_CLIENT_AVAILABLE:
            # –ü–µ—Ä–µ–¥–∞–µ–º provider –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä UnifiedLLMClient
            self.llm_client = UnifiedLLMClient(provider=llm_provider)
            self.config = AGENT_CONFIGS.get("writer", AGENT_CONFIGS.get("writer", {}))
        elif LLM_ROUTER_AVAILABLE:
            self.llm_router = LLMRouter()
        else:
            self.llm_client = None
            self.llm_router = None
            print("[WARN] Writer –∞–≥–µ–Ω—Ç V2 —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ LLM —Å–µ—Ä–≤–∏—Å–æ–≤")

    def _get_goal(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å goal –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î —Å fallback"""
        if self.prompt_manager:
            try:
                goal = self.prompt_manager.get_prompt('writer_v2', 'goal')
                if goal:
                    logger.info("‚úÖ Writer V2: Goal –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î")
                    return goal
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Writer V2: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ goal –∏–∑ –ë–î: {e}")

        # Fallback –Ω–∞ hardcoded
        logger.info("Writer V2: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hardcoded goal")
        return "–°–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (27 –∑–∞–ø—Ä–æ—Å–æ–≤), –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ç–∞—Ç –∏ 2 —Ç–∞–±–ª–∏—Ü—ã"

    def _get_backstory(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å backstory –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î —Å fallback"""
        if self.prompt_manager:
            try:
                backstory = self.prompt_manager.get_prompt('writer_v2', 'backstory')
                if backstory:
                    logger.info("‚úÖ Writer V2: Backstory –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ë–î")
                    return backstory
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Writer V2: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ backstory –∏–∑ –ë–î: {e}")

        # Fallback –Ω–∞ hardcoded
        logger.info("Writer V2: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hardcoded backstory")
        return """–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        –¢—ã —Å–æ–∑–¥–∞–µ—à—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª—è–º–∏. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–º–∏ –∏ –æ—Å–Ω–æ–≤–∞–Ω—ã
        –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –¢–≤–æ–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –≤–∫–ª—é—á–∞—é—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ü–∏—Ç–∞—Ç—ã –∏–∑ –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º,
        —É—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã - –≤—Å—ë –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""

    def _get_fpg_requirements(self, section: str = "") -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –∏–∑ Expert Agent –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É"""
        try:
            if not self.expert_agent:
                logger.warning("‚ö†Ô∏è WriterV2: Expert Agent –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                return []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–¥–µ–ª–∞
            questions = {
                "problem": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–∑–¥–µ–ª—É '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã' –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –≥—Ä–∞–Ω—Ç –§–ü–ì?",
                "goal": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞—è–≤–∫–µ –§–ü–ì?",
                "results": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞—è–≤–∫–µ –§–ü–ì?",
                "general": "–ö–∞–∫–∏–µ –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç –§–ü–ì?"
            }

            question = questions.get(section, questions["general"])

            logger.info(f"üîç WriterV2: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì - '{question[:50]}...'")

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Expert Agent
            results = self.expert_agent.query_knowledge(
                question=question,
                fund="fpg",
                top_k=3,
                min_score=0.4
            )

            if results:
                logger.info(f"‚úÖ WriterV2: –ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç Expert Agent")
                return results
            else:
                logger.warning("‚ö†Ô∏è WriterV2: Expert Agent –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")
                return []

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –æ—Ç Expert Agent: {e}")
            return []

    async def _fetch_research_results(self, anketa_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ë–î –ø–æ anketa_id"""
        try:
            logger.info(f"üìö WriterV2: –ó–∞–≥—Ä—É–∂–∞–µ–º research_results –¥–ª—è anketa_id={anketa_id}")

            if not self.db:
                logger.warning("‚ö†Ô∏è WriterV2: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return None

            # –ü–æ–ª—É—á–∞–µ–º research_results –∏–∑ researcher_research —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
            with self.db.connect() as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT research_results, status, metadata
                    FROM researcher_research
                    WHERE anketa_id = %s AND status = 'completed'
                    ORDER BY completed_at DESC
                    LIMIT 1
                """, (anketa_id,))

                row = cursor.fetchone()
                cursor.close()

                if row:
                    research_results = row[0] if isinstance(row, tuple) else row.get('research_results')

                    # –ï—Å–ª–∏ research_results - —Å—Ç—Ä–æ–∫–∞ JSON, –ø–∞—Ä—Å–∏–º
                    if isinstance(research_results, str):
                        research_results = json.loads(research_results)

                    logger.info(f"‚úÖ WriterV2: Research results –∑–∞–≥—Ä—É–∂–µ–Ω—ã - {len(research_results)} –±–ª–æ–∫–æ–≤")
                    return research_results
                else:
                    logger.warning(f"‚ö†Ô∏è WriterV2: –ù–µ –Ω–∞–π–¥–µ–Ω—ã research_results –¥–ª—è anketa_id={anketa_id}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ research_results: {e}")
            return None

    def _format_citations(self, research_results: Dict[str, Any], min_count: int = 10) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ—á—å –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ research_results"""
        citations = []

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ block1_problem
            block1 = research_results.get('block1_problem', {})
            for fact in block1.get('key_facts', [])[:5]:
                citations.append({
                    'text': fact.get('fact', ''),
                    'source': fact.get('source', ''),
                    'date': fact.get('date', ''),
                    'type': '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
                })

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ success_cases
            for case in block1.get('success_cases', [])[:3]:
                citations.append({
                    'text': case.get('quote', case.get('result', '')),
                    'source': case.get('source', ''),
                    'type': '—É—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å'
                })

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ programs
            for program in block1.get('programs', [])[:2]:
                citations.append({
                    'text': program.get('kpi', ''),
                    'source': program.get('name', ''),
                    'type': '–≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º–∞'
                })

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ block2_geography
            block2 = research_results.get('block2_geography', {})
            for fact in block2.get('key_facts', [])[:3]:
                citations.append({
                    'text': fact.get('fact', ''),
                    'source': fact.get('source', ''),
                    'date': fact.get('date', ''),
                    'type': '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è'
                })

            logger.info(f"‚úÖ WriterV2: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(citations)} —Ü–∏—Ç–∞—Ç")

            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –º–∏–Ω–∏–º—É–º min_count —Ü–∏—Ç–∞—Ç
            if len(citations) < min_count:
                logger.warning(f"‚ö†Ô∏è WriterV2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ü–∏—Ç–∞—Ç ({len(citations)} < {min_count})")

            return citations[:min_count]

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–∏—Ç–∞—Ç: {e}")
            return []

    def _format_tables(self, research_results: Dict[str, Any], min_count: int = 2) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á—å –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –∏–∑ research_results"""
        tables = []

        try:
            # –¢–∞–±–ª–∏—Ü–∞ 1: Dynamics table –∏–∑ block1
            block1 = research_results.get('block1_problem', {})
            dynamics_table = block1.get('dynamics_table', {})
            if dynamics_table and dynamics_table.get('indicators'):
                tables.append({
                    'title': '–î–∏–Ω–∞–º–∏–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π',
                    'type': 'dynamics',
                    'data': dynamics_table,
                    'source': '–ë–ª–æ–∫ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã'
                })

            # –¢–∞–±–ª–∏—Ü–∞ 2: Comparison table –∏–∑ block2
            block2 = research_results.get('block2_geography', {})
            comparison_table = block2.get('comparison_table', {})
            if comparison_table:
                tables.append({
                    'title': '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –†–µ–≥–∏–æ–Ω vs –†–§ vs –õ–∏–¥–µ—Ä',
                    'type': 'comparison',
                    'data': comparison_table,
                    'source': '–ë–ª–æ–∫ 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'
                })

            # –¢–∞–±–ª–∏—Ü–∞ 3: Target audience –∏–∑ block2 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è)
            target_audience = block2.get('target_audience', {})
            if target_audience:
                tables.append({
                    'title': '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
                    'type': 'target_audience',
                    'data': target_audience,
                    'source': '–ë–ª–æ–∫ 2: –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'
                })

            logger.info(f"‚úÖ WriterV2: –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(tables)} —Ç–∞–±–ª–∏—Ü")

            if len(tables) < min_count:
                logger.warning(f"‚ö†Ô∏è WriterV2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–∞–±–ª–∏—Ü ({len(tables)} < {min_count})")

            return tables[:min_count + 1]  # –ë–µ—Ä–µ–º —á—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è –∑–∞–ø–∞—Å–∞

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            return []

    async def _stage1_planning_async(self, client, user_answers: Dict, research_results: Dict,
                                    selected_grant: Dict) -> Dict[str, Any]:
        """Stage 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ research_results"""
        logger.info("üìã WriterV2 Stage 1: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞–Ω—Ç–∞")

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì –æ—Ç Expert Agent
            fpg_requirements_general = self._get_fpg_requirements("general")
            fpg_requirements_problem = self._get_fpg_requirements("problem")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            fpg_knowledge = "\n".join([
                f"- {req['section_name']}: {req['content'][:200]}..."
                for req in (fpg_requirements_general + fpg_requirements_problem)[:4]
            ])

            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            metadata = research_results.get('metadata', {})
            block1_summary = research_results.get('block1_problem', {}).get('summary', '')
            block2_summary = research_results.get('block2_geography', {}).get('summary', '')
            block3_summary = research_results.get('block3_goals', {}).get('summary', '')

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            block1 = research_results.get('block1_problem', {})
            block2 = research_results.get('block2_geography', {})
            block3 = research_results.get('block3_goals', {})

            key_facts_count = len(block1.get('key_facts', []))
            programs_count = len(block1.get('programs', []))
            success_cases_count = len(block1.get('success_cases', []))

            planning_prompt = f"""–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∑–∞—è–≤–æ–∫ –Ω–∞ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã –†–§. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –§–ü–ì.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –§–ü–ì (–∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π):
{fpg_knowledge if fpg_knowledge else "–ò—Å–ø–æ–ª—å–∑—É–π –æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–∞–º –Ω–∞ –≥—Ä–∞–Ω—Ç—ã"}

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
–ù–∞–∑–≤–∞–Ω–∏–µ: {user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç')}
–û–ø–∏—Å–∞–Ω–∏–µ: {user_answers.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')}
–ü—Ä–æ–±–ª–µ–º–∞: {user_answers.get('problem', '')}
–†–µ—à–µ–Ω–∏–µ: {user_answers.get('solution', '')}
–ë—é–¥–∂–µ—Ç: {user_answers.get('budget', '1,000,000')} —Ä—É–±–ª–µ–π
–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {user_answers.get('timeline', '12')} –º–µ—Å—è—Ü–µ–≤
–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {user_answers.get('target_group', '')}
–ì–µ–æ–≥—Ä–∞—Ñ–∏—è: {user_answers.get('geography', '')}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø (27 –∑–∞–ø—Ä–æ—Å–æ–≤):
–ë–ª–æ–∫ 1 - –ü—Ä–æ–±–ª–µ–º–∞: {block1_summary[:800]}...
–ë–ª–æ–∫ 2 - –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: {block2_summary[:800]}...
–ë–ª–æ–∫ 3 - –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏: {block3_summary[:800]}...

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {metadata.get('sources_count', 0)}
- –í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç –∏ –¥–∞–Ω–Ω—ã—Ö: {metadata.get('quotes_count', 0)}
- –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø—Ä–æ–±–ª–µ–º–µ: {key_facts_count}
- –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–π–¥–µ–Ω—ã: {programs_count}
- –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã –Ω–∞–π–¥–µ–Ω—ã: {success_cases_count}

–°–¢–†–£–ö–¢–£–†–ê –ó–ê–Ø–í–ö–ò –ù–ê –ü–†–ï–ó–ò–î–ï–ù–¢–°–ö–ò–ô –ì–†–ê–ù–¢:
–ó–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–ª–µ–¥–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –§–ü–ì (–§–æ–Ω–¥ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –ì—Ä–∞–Ω—Ç–æ–≤) –∏ –≤–∫–ª—é—á–∞—Ç—å 9 –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û:
- –†–∞–∑–¥–µ–ª 2 "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã" –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2-4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã (8000+ —Å–∏–º–≤–æ–ª–æ–≤) - —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π —Ä–∞–∑–¥–µ–ª
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–°–ï key_facts –∏–∑ block1_problem (–≤—Å–µ–≥–æ {key_facts_count} —Ñ–∞–∫—Ç–æ–≤)
- –í–∫–ª—é—á–∏—Ç—å –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã: dynamics_table –∏ comparison_table
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, —Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ, –±–µ–∑ "–º—ã/–Ω–∞—à"
- –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

–ó–ê–î–ê–ß–ê:
–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 9 —Ä–∞–∑–¥–µ–ª–æ–≤:

1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï (0.5-1 —Å—Ç—Ä, ~2000 —Å–∏–º–≤–æ–ª–æ–≤)
2. –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ (2-4 —Å—Ç—Ä, ~8000 —Å–∏–º–≤–æ–ª–æ–≤) - –°–ê–ú–´–ô –í–ê–ñ–ù–´–ô
   - –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤:
     –∞) –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç—ã, –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã)
     –±) –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ (comparison_table)
     –≤) –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ (–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
     –≥) –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã (dynamics_table)
     –¥) –£—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç (success_cases)
3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê (1 –∞–±–∑–∞—Ü, ~500 —Å–∏–º–≤–æ–ª–æ–≤, SMART)
4. –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ + –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è)
5. –ó–ê–î–ê–ß–ò (3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á)
6. –ü–ê–†–¢–ù–ï–†–´ (–∏–∑ programs)
7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï
8. –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï
9. –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù (—Ç–∞–±–ª–∏—Ü–∞ 4-8 —Å—Ç—Ä–æ–∫)

–î–ª—è —Ä–∞–∑–¥–µ–ª–∞ 2 (–ü—Ä–æ–±–ª–µ–º–∞) —Ä–∞—Å–ø–∏—à–∏ –î–ï–¢–ê–õ–¨–ù–û:
- –ö–∞–∫–∏–µ key_facts –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–∏–Ω–¥–µ–∫—Å—ã)
- –ö–∞–∫–∏–µ programs —É–ø–æ–º—è–Ω—É—Ç—å
- –ì–¥–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã
- –ö–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å 8000+ —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—Ç –¥–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
  "section_1_brief": {{
    "content_plan": "–ü–ª–∞–Ω –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è",
    "length_chars": 2000
  }},
  "section_2_problem": {{
    "subsections": [
      {{
        "title": "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
        "content_plan": "–ß—Ç–æ –≤–∫–ª—é—á–∏—Ç—å",
        "key_facts_indices": [0, 1, 2],
        "programs_indices": [0],
        "citations_count": 3
      }},
      {{
        "title": "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞",
        "content_plan": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞",
        "key_facts_indices": [3, 4],
        "tables": ["comparison_table"],
        "citations_count": 2
      }},
      {{
        "title": "–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞",
        "content_plan": "–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –¶–ê",
        "key_facts_indices": [5, 6],
        "citations_count": 2
      }},
      {{
        "title": "–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã",
        "content_plan": "–¢—Ä–µ–Ω–¥—ã",
        "key_facts_indices": [7, 8],
        "tables": ["dynamics_table"],
        "citations_count": 3
      }},
      {{
        "title": "–£—Å–ø–µ—à–Ω—ã–π –æ–ø—ã—Ç",
        "content_plan": "–ö–µ–π—Å—ã",
        "success_cases_indices": [0, 1, 2]
      }}
    ],
    "total_length_chars": 8000,
    "total_citations": 10
  }},
  "section_3_goal": {{
    "goal_text": "–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ SMART —Ü–µ–ª–∏"
  }},
  "section_4_results": {{
    "quantitative": ["–†–µ–∑—É–ª—å—Ç–∞—Ç 1: —á–∏—Å–ª–æ", "–†–µ–∑—É–ª—å—Ç–∞—Ç 2: —á–∏—Å–ª–æ"],
    "qualitative": [{{"result": "–†–µ–∑—É–ª—å—Ç–∞—Ç", "measurement": "–ú–µ—Ç–æ–¥ –∏–∑–º–µ—Ä–µ–Ω–∏—è"}}]
  }},
  "section_5_tasks": ["–ó–∞–¥–∞—á–∞ 1", "–ó–∞–¥–∞—á–∞ 2", "–ó–∞–¥–∞—á–∞ 3"],
  "section_6_partners": [{{"name": "–ü–∞—Ä—Ç–Ω–µ—Ä", "support_types": ["–¢–∏–ø"]}}],
  "section_7_info": "–ü–ª–∞–Ω –∏–Ω—Ñ–æ-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è",
  "section_8_future": "–†–∞–∑–≤–∏—Ç–∏–µ –ø–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞",
  "section_9_calendar": {{
    "rows": [
      {{
        "task_number": 1,
        "event": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ",
        "start": "01.03.2025",
        "end": "31.03.2025",
        "result": "–†–µ–∑—É–ª—å—Ç–∞—Ç"
      }}
    ]
  }},
  "total_chars": 25000,
  "style": "official_third_person"
}}
"""

            logger.info(f"üì§ WriterV2 Stage 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç: {len(planning_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            plan_response = await client.generate_text(planning_prompt, 2000)

            logger.info(f"‚úÖ WriterV2 Stage 1: –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω - {len(plan_response)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ ```json...```)
                import re
                json_match = re.search(r'\{[\s\S]*\}', plan_response)
                if json_match:
                    plan = json.loads(json_match.group(0))
                else:
                    # Fallback: —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω
                    plan = self._create_fallback_plan()
            except:
                plan = self._create_fallback_plan()

            logger.info(f"üìä WriterV2 Stage 1: –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç {len(plan.get('sections', []))} —Ä–∞–∑–¥–µ–ª–æ–≤")

            return plan

        except Exception as e:
            logger.error(f"‚ùå WriterV2 Stage 1: –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return self._create_fallback_plan()

    def _create_fallback_plan(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        return {
            'sections': [
                {
                    'name': '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã',
                    'key_elements': ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ì–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã', '–¢–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏–∫–∏'],
                    'research_blocks': ['block1'],
                    'citations_count': 4,
                    'tables_count': 1
                },
                {
                    'name': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
                    'key_elements': ['–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤', '–¶–ê', '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
                    'research_blocks': ['block2'],
                    'citations_count': 3,
                    'tables_count': 1
                },
                {
                    'name': '–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞',
                    'key_elements': ['SMART-—Ü–µ–ª–∏', 'KPI', '–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã'],
                    'research_blocks': ['block3'],
                    'citations_count': 3,
                    'tables_count': 0
                }
            ],
            'total_length_estimate': 15000,
            'total_citations': 10,
            'total_tables': 2
        }

    async def _stage2_writing_async(self, client, user_answers: Dict, research_results: Dict,
                                   selected_grant: Dict, plan: Dict, citations: List, tables: List) -> Dict[str, str]:
        """Stage 2: –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏ –∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
        logger.info("‚úçÔ∏è WriterV2 Stage 2: –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏")

        content = {}

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            block1 = research_results.get('block1_problem', {})
            block2 = research_results.get('block2_geography', {})
            block3 = research_results.get('block3_goals', {})

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            citations_text = "\n".join([
                f"[{i+1}] {c['text']} (–ò—Å—Ç–æ—á–Ω–∏–∫: {c['source']}, {c.get('date', '')})"
                for i, c in enumerate(citations[:10])
            ])

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
            tables_text = "\n".join([
                f"–¢–∞–±–ª–∏—Ü–∞ {i+1}: {t['title']}\n–¢–∏–ø: {t['type']}\n–î–∞–Ω–Ω—ã–µ: {str(t['data'])[:200]}..."
                for i, t in enumerate(tables[:2])
            ])

            # –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
            writing_prompt = f"""–ü–æ–º–æ–≥–∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

–í–ê–ñ–ù–û: –≠—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è - –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ –§–ü–ì (–§–æ–Ω–¥ –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –ì—Ä–∞–Ω—Ç–æ–≤).

–°–¢–ò–õ–¨ –ù–ê–ü–ò–°–ê–ù–ò–Ø:
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π —Å—Ç–∏–ª—å
‚úÖ –¢—Ä–µ—Ç—å–µ –ª–∏—Ü–æ –í–°–ï–ì–î–ê ("–ø—Ä–æ–µ–∫—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞...", "–ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è...", "–±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ...")
‚úÖ –ù–ï–¢ –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–º—ã", "–Ω–∞—à", "–Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞")
‚úÖ –°–ª–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –≤–≤–æ–¥–Ω—ã–º–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
‚úÖ –ë–µ–∑—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (—Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã, —Å—Å—ã–ª–∫–∏)
‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä (–í–û–ó, –í–¶–ò–û–ú, –ú–∏–Ω–ó–¥—Ä–∞–≤, –†–æ—Å—Å—Ç–∞—Ç –∏ —Ç.–¥.)

–§–û–†–ú–ê–¢ –¶–ò–¢–ò–†–û–í–ê–ù–ò–Ø (–∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ research_results):
"–ü–æ –¥–∞–Ω–Ω—ã–º [–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è] [—Ñ–∞–∫—Ç —Å —Ç–æ—á–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏]. [–í—ã–≤–æ–¥]"

–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞:
- "–ü–æ –¥–∞–Ω–Ω—ã–º –í–û–ó –†–æ—Å—Å–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ —É—Ä–æ–≤–Ω—é —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–ª–æ–¥–µ–∂–∏ –Ω–∞ 98 –º–µ—Å—Ç–µ."
- "–°–æ–≥–ª–∞—Å–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é –í–¶–ò–û–ú 11% —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—É –∫–∞–∫ —Ç—è–∂–µ–ª—É—é –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å."

–î–ê–ù–ù–´–ï –ü–†–û–ï–ö–¢–ê:
–ù–∞–∑–≤–∞–Ω–∏–µ: {user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç')}
–û–ø–∏—Å–∞–Ω–∏–µ: {user_answers.get('description', '')}
–ü—Ä–æ–±–ª–µ–º–∞: {user_answers.get('problem', '')}
–†–µ—à–µ–Ω–∏–µ: {user_answers.get('solution', '')}
–¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {user_answers.get('target_group', '')}
–ì–µ–æ–≥—Ä–∞—Ñ–∏—è: {user_answers.get('geography', '')}
–ë—é–¥–∂–µ—Ç: {user_answers.get('budget', '1,000,000')} —Ä—É–±–ª–µ–π
–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: {user_answers.get('timeline', '12')} –º–µ—Å—è—Ü–µ–≤

–°–¢–†–£–ö–¢–£–†–ê (9 —Ä–∞–∑–¥–µ–ª–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞):
–†–∞–∑–¥–µ–ª 1: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (~2000 —Å–∏–º–≤–æ–ª–æ–≤)
–†–∞–∑–¥–µ–ª 2: –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (~8000 —Å–∏–º–≤–æ–ª–æ–≤) - –°–ê–ú–´–ô –í–ê–ñ–ù–´–ô, –≤–∫–ª—é—á–∞–µ—Ç comparison_table –∏ dynamics_table
–†–∞–∑–¥–µ–ª—ã 3-9: –¶–µ–ª—å, –†–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ó–∞–¥–∞—á–∏, –ü–∞—Ä—Ç–Ω–µ—Ä—ã, –ò–Ω—Ñ–æ-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ, –†–∞–∑–≤–∏—Ç–∏–µ, –ö–∞–ª–µ–Ω–¥–∞—Ä—å

–¶–ò–¢–ê–¢–´ –ò –ò–°–¢–û–ß–ù–ò–ö–ò (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ):
{citations_text}

–¢–ê–ë–õ–ò–¶–´ (–º–∏–Ω–∏–º—É–º 2 –≤–∫–ª—é—á–∏—Ç—å):
{tables_text}

–î–ê–ù–ù–´–ï –ò–ó –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:

–ë–õ–û–ö 1 - –ü–†–û–ë–õ–ï–ú–ê:
–†–µ–∑—é–º–µ: {block1.get('summary', '')[:500]}

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–π –≤ —Ä–∞–∑–¥–µ–ª–µ 2):
{chr(10).join([f"  ‚Ä¢ {f.get('fact', '')} (–ò—Å—Ç–æ—á–Ω–∏–∫: {f.get('source', '')}, {f.get('date', '')})" for f in block1.get('key_facts', [])[:5]])}

–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
{chr(10).join([f"  ‚Ä¢ {p.get('name', '')}: {p.get('kpi', '')}" for p in block1.get('programs', [])[:3]])}

–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã:
{chr(10).join([f"  ‚Ä¢ {c.get('name', '')}: {c.get('result', '')}" for c in block1.get('success_cases', [])[:3]])}

–ë–õ–û–ö 2 - –ì–ï–û–ì–†–ê–§–ò–Ø:
–†–µ–∑—é–º–µ: {block2.get('summary', '')[:500]}

–§–∞–∫—Ç—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏:
{chr(10).join([f"  ‚Ä¢ {f.get('fact', '')}" for f in block2.get('key_facts', [])[:4]])}

–ë–õ–û–ö 3 - –¶–ï–õ–ò:
–†–µ–∑—é–º–µ: {block3.get('summary', '')[:500]}

–í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–µ–π (SMART):
{chr(10).join([f"  ‚Ä¢ {g.get('text', '')[:200]}" for g in block3.get('main_goal_variants', [])[:2]])}

–ó–ê–î–ê–ù–ò–ï:
–°–æ—Å—Ç–∞–≤—å —á–µ—Ä–Ω–æ–≤–∏–∫ –∑–∞—è–≤–∫–∏ (15,000+ —Å–∏–º–≤–æ–ª–æ–≤), –≤–∫–ª—é—á–∞—é—â–∏–π –í–°–ï 9 —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö:

1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï (~1500 —Å–∏–º–≤–æ–ª–æ–≤, —Å—É—Ç—å + –¶–ê + –≥–µ–æ–≥—Ä–∞—Ñ–∏—è)

2. –û–ë–û–°–ù–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ (~6000 —Å–∏–º–≤–æ–ª–æ–≤) - –°–ê–ú–´–ô –í–ê–ñ–ù–´–ô
   - –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç—ã, –≥–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã)
   - –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –†–§, —Ç–∞–±–ª–∏—Ü–∞ comparison_table)
   - –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ (–¥–µ–º–æ–≥—Ä–∞—Ñ–∏—è)
   - –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã (—Ç–∞–±–ª–∏—Ü–∞ dynamics_table, —Ç—Ä–µ–Ω–¥—ã)
   - –£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã

3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê (~500 —Å–∏–º–≤–æ–ª–æ–≤, SMART —Ñ–æ—Ä–º–∞—Ç)

4. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ (~2500 —Å–∏–º–≤–æ–ª–æ–≤)
   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (—Ç–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã)
   - –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (—Å –º–µ—Ç–æ–¥–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è)

5. –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê (3-5 –∑–∞–¥–∞—á, bullet list)

6. –ü–ê–†–¢–ù–ï–†–´ –ü–†–û–ï–ö–¢–ê (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ + —Ç–∏–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏)

7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï (—Å–æ—Ü—Å–µ—Ç–∏, –°–ú–ò)

8. –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï (–ø–ª–∞–Ω—ã –ø–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞)

9. –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù (Markdown —Ç–∞–±–ª–∏—Ü–∞, 4-8 —Å—Ç—Ä–æ–∫)

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
‚úÖ –û–±—â–∏–π –æ–±—ä–µ–º: 15,000+ —Å–∏–º–≤–æ–ª–æ–≤
‚úÖ –†–∞–∑–¥–µ–ª 2 "–ü—Ä–æ–±–ª–µ–º–∞": 6,000+ —Å–∏–º–≤–æ–ª–æ–≤ (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
‚úÖ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, —Ç—Ä–µ—Ç—å–µ –ª–∏—Ü–æ
‚úÖ 2 —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (comparison_table + dynamics_table)
‚úÖ –ù–ï –ü–†–ò–î–£–ú–´–í–ê–ô –¥–∞–Ω–Ω—ã–µ - –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ research_results

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ JSON-–æ–±—ä–µ–∫—Ç–æ–º. –ù–ï —Å–æ–∑–¥–∞–≤–∞–π —Ñ–∞–π–ª—ã. –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–∏ JSON –∫–∞–∫ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (JSON-–æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞):
{{
  "section_1_brief": "–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ 1...",
  "section_2_problem": "–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ 2 (8000+ —Å–∏–º–≤–æ–ª–æ–≤)...",
  "section_3_goal": "–¢–µ–∫—Å—Ç —Ü–µ–ª–∏...",
  "section_4_results": "–¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
  "section_5_tasks": "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á...",
  "section_6_partners": "–¢–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤...",
  "section_7_info": "–¢–µ–∫—Å—Ç –∏–Ω—Ñ–æ-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è...",
  "section_8_future": "–¢–µ–∫—Å—Ç —Ä–∞–∑–≤–∏—Ç–∏—è...",
  "section_9_calendar": "Markdown —Ç–∞–±–ª–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...",
  "metadata": {{
    "total_chars": 25000,
    "citations_used": 12,
    "tables_included": 2,
    "style": "official_third_person"
  }}
}}

–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ—Ç JSON, –∑–∞–ø–æ–ª–Ω–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ research_results –∏ –≤–µ—Ä–Ω–∏ –º–Ω–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç.
"""

            logger.info(f"üì§ WriterV2 Stage 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ (–ø—Ä–æ–º–ø—Ç: {len(writing_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ (–±–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤)
            application_text = await client.generate_text(writing_prompt, 8000)

            logger.info(f"‚úÖ WriterV2 Stage 2: –¢–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω - {len(application_text)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å 9 —Å–µ–∫—Ü–∏—è–º–∏
            try:
                import re
                json_match = re.search(r'\{[\s\S]*\}', application_text)
                if json_match:
                    grant_json = json.loads(json_match.group(0))

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º 9 —Å–µ–∫—Ü–∏–π –∏–∑ JSON
                    content['section_1_brief'] = grant_json.get('section_1_brief', '')
                    content['section_2_problem'] = grant_json.get('section_2_problem', '')
                    content['section_3_goal'] = grant_json.get('section_3_goal', '')
                    content['section_4_results'] = grant_json.get('section_4_results', '')
                    content['section_5_tasks'] = grant_json.get('section_5_tasks', '')
                    content['section_6_partners'] = grant_json.get('section_6_partners', '')
                    content['section_7_info'] = grant_json.get('section_7_info', '')
                    content['section_8_future'] = grant_json.get('section_8_future', '')
                    content['section_9_calendar'] = grant_json.get('section_9_calendar', '')

                    # –°–æ–±–∏—Ä–∞–µ–º full_text –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
                    content['full_text'] = '\n\n'.join([
                        f"## 1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê\n{content['section_1_brief']}",
                        f"## 2. –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–û–¶–ò–ê–õ–¨–ù–û–ô –ó–ù–ê–ß–ò–ú–û–°–¢–ò\n{content['section_2_problem']}",
                        f"## 3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê\n{content['section_3_goal']}",
                        f"## 4. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´\n{content['section_4_results']}",
                        f"## 5. –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê\n{content['section_5_tasks']}",
                        f"## 6. –ü–ê–†–¢–ù–ï–†–´ –ü–†–û–ï–ö–¢–ê\n{content['section_6_partners']}",
                        f"## 7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï\n{content['section_7_info']}",
                        f"## 8. –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï\n{content['section_8_future']}",
                        f"## 9. –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù\n{content['section_9_calendar']}"
                    ])

                    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º
                    content['metadata'] = grant_json.get('metadata', {})
                    content['metadata']['citations_used'] = content['metadata'].get('citations_used', len(citations))
                    content['metadata']['tables_included'] = content['metadata'].get('tables_included', len(tables))
                    content['metadata']['total_chars'] = len(content['full_text'])
                    content['metadata']['style'] = content['metadata'].get('style', 'official_third_person')
                    content['metadata']['format'] = 'fpg_9_sections'

                    logger.info(f"‚úÖ WriterV2 Stage 2: JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —É—Å–ø–µ—à–Ω–æ - 9 —Å–µ–∫—Ü–∏–π, {len(content['full_text'])} —Å–∏–º–≤–æ–ª–æ–≤")

                else:
                    raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")

            except Exception as parse_error:
                logger.warning(f"‚ö†Ô∏è WriterV2 Stage 2: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON ({parse_error}), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ø–∞—Ä—Å–∏–Ω–≥")

                # Fallback: —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
                content['full_text'] = application_text
                content['section_1_brief'] = application_text[:2000] if len(application_text) > 2000 else application_text
                content['section_2_problem'] = application_text[2000:10000] if len(application_text) > 10000 else application_text[2000:]
                content['section_3_goal'] = self._extract_section(application_text, '–¶–µ–ª—å')
                content['section_4_results'] = self._extract_section(application_text, '–†–µ–∑—É–ª—å—Ç–∞—Ç')
                content['section_5_tasks'] = self._extract_section(application_text, '–ó–∞–¥–∞—á–∏')
                content['section_6_partners'] = self._extract_section(application_text, '–ü–∞—Ä—Ç–Ω–µ—Ä')
                content['section_7_info'] = self._extract_section(application_text, '–ò–Ω—Ñ–æ—Ä–º')
                content['section_8_future'] = self._extract_section(application_text, '–†–∞–∑–≤–∏—Ç–∏–µ')
                content['section_9_calendar'] = self._extract_section(application_text, '–ö–∞–ª–µ–Ω–¥–∞—Ä–Ω')

                content['metadata'] = {
                    'citations_used': len(citations),
                    'tables_included': len(tables),
                    'total_chars': len(application_text),
                    'format': 'fallback_parsing',
                    'style': 'unknown'
                }

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø–æ–ª—è–º–∏
            content['title'] = user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç')
            content['summary'] = content.get('section_1_brief', '')[:500]
            content['problem'] = content.get('section_2_problem', '')
            content['goals'] = content.get('section_3_goal', '')
            content['solution'] = user_answers.get('solution', '')
            content['implementation'] = content.get('section_9_calendar', '')
            content['budget'] = f"–ë—é–¥–∂–µ—Ç: {user_answers.get('budget', '1,000,000')} —Ä—É–±–ª–µ–π"
            content['timeline'] = user_answers.get('timeline', '12 –º–µ—Å—è—Ü–µ–≤')
            content['team'] = user_answers.get('team', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
            content['impact'] = content.get('section_4_results', '')
            content['sustainability'] = content.get('section_8_future', '')

            total_length = len(content.get('full_text', ''))
            logger.info(f"‚úÖ WriterV2 Stage 2: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ - {total_length} —Å–∏–º–≤–æ–ª–æ–≤, {len(citations)} —Ü–∏—Ç–∞—Ç, {len(tables)} —Ç–∞–±–ª–∏—Ü")

            return content

        except Exception as e:
            logger.error(f"‚ùå WriterV2 Stage 2: –û—à–∏–±–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∑–∞—è–≤–∫—É
            return self._create_fallback_content(user_answers, research_results)

    def _extract_section(self, text: str, section_name: str) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ä–∞–∑–¥–µ–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        try:
            # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            import re
            pattern = f"#{section_name}|{section_name}:"
            match = re.search(pattern, text, re.IGNORECASE)
            if match:
                start = match.end()
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                next_section = re.search(r'\n#|\n\d+\.', text[start:])
                if next_section:
                    end = start + next_section.start()
                    return text[start:end].strip()
                else:
                    return text[start:start+2000].strip()
            return ''
        except:
            return ''

    def _create_fallback_content(self, user_answers: Dict, research_results: Dict) -> Dict[str, str]:
        """–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é –∑–∞—è–≤–∫—É –µ—Å–ª–∏ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        block1 = research_results.get('block1_problem', {})
        block2 = research_results.get('block2_geography', {})
        block3 = research_results.get('block3_goals', {})

        return {
            'title': user_answers.get('project_name', '–ü—Ä–æ–µ–∫—Ç'),
            'summary': block1.get('summary', '')[:500],
            'problem': block1.get('summary', ''),
            'geography': block2.get('summary', ''),
            'goals': block3.get('summary', ''),
            'solution': user_answers.get('solution', ''),
            'implementation': f"–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ {user_answers.get('timeline', '12')} –º–µ—Å—è—Ü–µ–≤",
            'budget': f"–ë—é–¥–∂–µ—Ç: {user_answers.get('budget', '1,000,000')} —Ä—É–±–ª–µ–π",
            'timeline': user_answers.get('timeline', '12 –º–µ—Å—è—Ü–µ–≤'),
            'team': user_answers.get('team', '–ö–æ–º–∞–Ω–¥–∞'),
            'impact': '–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'sustainability': '–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å',
            'metadata': {
                'citations_used': 0,
                'tables_used': 0,
                'fallback': True
            }
        }

    def _generate_grant_report_md(
        self,
        grant_number: str,
        anketa_id: str,
        application_content: Dict[str, str],
        citations: List[Dict[str, str]],
        tables: List[Dict[str, Any]],
        quality_score: float
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ MD –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏

        Args:
            grant_number: –ù–æ–º–µ—Ä –≥—Ä–∞–Ω—Ç–∞
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã
            application_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏ (9 —Å–µ–∫—Ü–∏–π)
            citations: –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
            tables: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            quality_score: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (0-10)

        Returns:
            str: Markdown –æ—Ç—á–µ—Ç
        """
        md_lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
        md_lines.append(f"# üìã –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ {grant_number}")
        md_lines.append("")
        md_lines.append(f"**üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {time.strftime('%Y-%m-%d %H:%M:%S')}")
        md_lines.append(f"**üÜî ID –∞–Ω–∫–µ—Ç—ã:** {anketa_id}")
        md_lines.append(f"**‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {quality_score:.1f}/10")
        md_lines.append(f"**üìä –¶–∏—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:** {len(citations)}")
        md_lines.append(f"**üìà –¢–∞–±–ª–∏—Ü –≤–∫–ª—é—á–µ–Ω–æ:** {len(tables)}")
        md_lines.append(f"**üìù –û–±—â–∏–π –æ–±—ä–µ–º:** {len(application_content.get('full_text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        md_lines.append("")
        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 1: –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        md_lines.append("## 1Ô∏è‚É£ –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê")
        md_lines.append("")
        section_1 = application_content.get('section_1_brief', '')
        if section_1:
            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º
            paragraphs = section_1.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 2: –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ (—Å–∞–º—ã–π –±–æ–ª—å—à–æ–π)
        md_lines.append("## 2Ô∏è‚É£ –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–û–¶–ò–ê–õ–¨–ù–û–ô –ó–ù–ê–ß–ò–ú–û–°–¢–ò / –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        md_lines.append("")
        md_lines.append("> *–°–∞–º—ã–π –≤–∞–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∑–∞—è–≤–∫–∏ - 8000+ —Å–∏–º–≤–æ–ª–æ–≤*")
        md_lines.append("")

        section_2 = application_content.get('section_2_problem', '')
        if section_2:
            paragraphs = section_2.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 3: –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
        md_lines.append("## 3Ô∏è‚É£ –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê")
        md_lines.append("")
        md_lines.append("> *SMART-—Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞*")
        md_lines.append("")

        section_3 = application_content.get('section_3_goal', '')
        if section_3:
            md_lines.append(f"**üéØ –¶–µ–ª—å:**")
            md_lines.append("")
            md_lines.append(section_3.strip())
            md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 4: –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        md_lines.append("## 4Ô∏è‚É£ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        md_lines.append("")

        section_4 = application_content.get('section_4_results', '')
        if section_4:
            paragraphs = section_4.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 5: –ó–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞
        md_lines.append("## 5Ô∏è‚É£ –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê")
        md_lines.append("")

        section_5 = application_content.get('section_5_tasks', '')
        if section_5:
            paragraphs = section_5.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 6: –ü–∞—Ä—Ç–Ω–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
        md_lines.append("## 6Ô∏è‚É£ –ü–ê–†–¢–ù–ï–†–´ –ü–†–û–ï–ö–¢–ê")
        md_lines.append("")

        section_6 = application_content.get('section_6_partners', '')
        if section_6:
            paragraphs = section_6.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 7: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
        md_lines.append("## 7Ô∏è‚É£ –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï")
        md_lines.append("")

        section_7 = application_content.get('section_7_info', '')
        if section_7:
            paragraphs = section_7.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 8: –î–∞–ª—å–Ω–µ–π—à–µ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ
        md_lines.append("## 8Ô∏è‚É£ –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï –ü–†–û–ï–ö–¢–ê")
        md_lines.append("")

        section_8 = application_content.get('section_8_future', '')
        if section_8:
            paragraphs = section_8.split('\n\n')
            for para in paragraphs:
                if para.strip():
                    md_lines.append(para.strip())
                    md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –†–ê–ó–î–ï–õ 9: –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
        md_lines.append("## 9Ô∏è‚É£ –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù")
        md_lines.append("")
        md_lines.append("> *–¢–∞–±–ª–∏—Ü–∞ —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –∏ —Å—Ä–æ–∫–∞–º–∏*")
        md_lines.append("")

        section_9 = application_content.get('section_9_calendar', '')
        if section_9:
            md_lines.append(section_9.strip())
            md_lines.append("")
        else:
            md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*")
            md_lines.append("")

        md_lines.append("---")
        md_lines.append("")

        # –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 1: –¶–∏—Ç–∞—Ç—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        md_lines.append("## üìö –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 1: –¶–ò–¢–ê–¢–´ –ò –ò–°–¢–û–ß–ù–ò–ö–ò")
        md_lines.append("")
        md_lines.append(f"**–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ü–∏—Ç–∞—Ç:** {len(citations)}")
        md_lines.append("")

        if citations:
            for i, citation in enumerate(citations[:15], 1):  # –¢–æ–ø 15 —Ü–∏—Ç–∞—Ç
                md_lines.append(f"### üîñ –¶–∏—Ç–∞—Ç–∞ {i}")
                md_lines.append("")
                md_lines.append(f"**–¢–∏–ø:** {citation.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                md_lines.append("")
                md_lines.append(f"**–¢–µ–∫—Å—Ç:**")
                md_lines.append("")
                md_lines.append(f"> {citation.get('text', '')}")
                md_lines.append("")

                if citation.get('source'):
                    md_lines.append(f"**üìñ –ò—Å—Ç–æ—á–Ω–∏–∫:** {citation['source']}")
                    md_lines.append("")

                if citation.get('date'):
                    md_lines.append(f"**üìÖ –î–∞—Ç–∞:** {citation['date']}")
                    md_lines.append("")

                md_lines.append("---")
                md_lines.append("")
        else:
            md_lines.append("*–¶–∏—Ç–∞—Ç –Ω–µ—Ç*")
            md_lines.append("")

        # –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 2: –¢–∞–±–ª–∏—Ü—ã
        md_lines.append("## üìä –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 2: –¢–ê–ë–õ–ò–¶–´ –ò –î–ê–ù–ù–´–ï")
        md_lines.append("")
        md_lines.append(f"**–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü:** {len(tables)}")
        md_lines.append("")

        if tables:
            for i, table in enumerate(tables, 1):
                md_lines.append(f"### üìà –¢–∞–±–ª–∏—Ü–∞ {i}: {table.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                md_lines.append("")
                md_lines.append(f"**–¢–∏–ø:** {table.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                md_lines.append("")
                md_lines.append(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {table.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                md_lines.append("")

                # –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                table_data = table.get('data', {})
                if isinstance(table_data, dict):
                    md_lines.append("**–î–∞–Ω–Ω—ã–µ:**")
                    md_lines.append("")
                    for key, value in list(table_data.items())[:5]:  # –ü–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π
                        md_lines.append(f"- **{key}:** {str(value)[:100]}")
                    md_lines.append("")

                md_lines.append("---")
                md_lines.append("")
        else:
            md_lines.append("*–¢–∞–±–ª–∏—Ü –Ω–µ—Ç*")
            md_lines.append("")

        # –§—É—Ç–µ—Ä
        md_lines.append("---")
        md_lines.append("")
        md_lines.append("*üìÑ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Writer Agent V2*")
        md_lines.append("")
        md_lines.append(f"*ü§ñ Generated with GrantService AI*")
        md_lines.append("")

        return '\n'.join(md_lines)

    async def _send_grant_pdf_to_admin(
        self,
        grant_number: str,
        anketa_id: str,
        application_content: Dict[str, str],
        citations: List[Dict[str, str]],
        tables: List[Dict[str, Any]],
        quality_score: float
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        –û–ë–ù–û–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ç–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ—Ç MD —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ PDF

        Args:
            grant_number: –ù–æ–º–µ—Ä –≥—Ä–∞–Ω—Ç–∞
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã
            application_content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏ (9 —Å–µ–∫—Ü–∏–π)
            citations: –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
            tables: –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            quality_score: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (0-10)
        """
        try:
            logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é grant MD –∏ PDF –¥–ª—è {grant_number}")

            # –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD –æ—Ç—á–µ—Ç–∞
            logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è MD –æ—Ç—á–µ—Ç–∞...")
            md_report = self._generate_grant_report_md(
                grant_number=grant_number,
                anketa_id=anketa_id,
                application_content=application_content,
                citations=citations,
                tables=tables,
                quality_score=quality_score
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ MD —Ñ–∞–π–ª–∞
            current_dir = os.path.dirname(__file__)
            reports_dir = os.path.join(os.path.dirname(current_dir), 'reports')
            os.makedirs(reports_dir, exist_ok=True)

            md_filename = f"{grant_number.replace('#', '')}.md"
            md_filepath = os.path.join(reports_dir, md_filename)

            with open(md_filepath, 'w', encoding='utf-8') as f:
                f.write(md_report)

            md_filesize = os.path.getsize(md_filepath)
            logger.info(f"‚úÖ MD –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {md_filepath} ({md_filesize} –±–∞–π—Ç)")

            # –®–ê–ì 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF
            logger.info("üìÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF...")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF
            grant_data = {
                'grant_number': grant_number,
                'anketa_id': anketa_id,
                'completed_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                'quality_score': quality_score,
                'total_chars': len(application_content.get('full_text', '')),
                'citations_count': len(citations),
                'tables_count': len(tables),
                'sections': {
                    'section_1_brief': application_content.get('section_1_brief', '')[:500],
                    'section_2_problem': application_content.get('section_2_problem', '')[:800],
                    'section_3_goal': application_content.get('section_3_goal', ''),
                    'section_4_results': application_content.get('section_4_results', '')[:400],
                    'section_5_tasks': application_content.get('section_5_tasks', '')[:400],
                    'section_6_partners': application_content.get('section_6_partners', '')[:300],
                    'section_7_info': application_content.get('section_7_info', '')[:300],
                    'section_8_future': application_content.get('section_8_future', '')[:300],
                    'section_9_calendar': application_content.get('section_9_calendar', '')[:400]
                },
                'citations': citations[:5],  # –ü–µ—Ä–≤—ã–µ 5 —Ü–∏—Ç–∞—Ç –¥–ª—è PDF
                'tables': [{'title': t['title'], 'type': t['type']} for t in tables[:2]]
            }

            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è PDF –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {grant_data['total_chars']} —Å–∏–º–≤–æ–ª–æ–≤, {len(citations)} —Ü–∏—Ç–∞—Ç")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ telegram-bot/utils
            telegram_bot_utils = os.path.join(os.path.dirname(__file__), '..', 'telegram-bot', 'utils')
            if telegram_bot_utils not in sys.path:
                sys.path.insert(0, telegram_bot_utils)

            from stage_report_generator import generate_stage_pdf

            pdf_bytes = generate_stage_pdf('grant', grant_data)
            logger.info(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(pdf_bytes)} bytes")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
            from admin_notifications import AdminNotifier

            bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
            if not bot_token:
                logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return

            notifier = AdminNotifier(bot_token)

            await notifier.send_stage_completion_pdf(
                stage='grant',
                pdf_bytes=pdf_bytes,
                filename=f"{grant_number}_GRANT.pdf",
                caption=f"‚úçÔ∏è –ì—Ä–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω\n–û—Ü–µ–Ω–∫–∞: {quality_score:.1f}/10\n{len(citations)} —Ü–∏—Ç–∞—Ç, {len(tables)} —Ç–∞–±–ª–∏—Ü\nID: {grant_number}",
                anketa_id=anketa_id
            )

            logger.info(f"‚úÖ Grant PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {grant_number}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ grant PDF –¥–ª—è {grant_number}: {e}")
            import traceback
            traceback.print_exc()
            raise

    async def write_application_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º research_results"""
        try:
            logger.info("üöÄ WriterV2: –ù–∞—á–∏–Ω–∞–µ–º write_application_async")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_answers = input_data.get('user_answers', {})
            anketa_id = input_data.get('anketa_id', '')
            selected_grant = input_data.get('selected_grant', {})

            logger.info(f"üìã WriterV2: anketa_id={anketa_id}")

            # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç—å research_results –∏–∑ –ë–î
            research_results = await self._fetch_research_results(anketa_id)

            if not research_results:
                logger.warning("‚ö†Ô∏è WriterV2: research_results –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ research
                return await self._fallback_write_async(input_data)

            # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á—å —Ü–∏—Ç–∞—Ç—ã –∏ —Ç–∞–±–ª–∏—Ü—ã
            citations = self._format_citations(research_results, min_count=10)
            tables = self._format_tables(research_results, min_count=2)

            logger.info(f"üìä WriterV2: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(citations)} —Ü–∏—Ç–∞—Ç –∏ {len(tables)} —Ç–∞–±–ª–∏—Ü")

            if UNIFIED_CLIENT_AVAILABLE:
                logger.info("‚úÖ WriterV2: UnifiedLLMClient –¥–æ—Å—Ç—É–ø–µ–Ω")
                config = AGENT_CONFIGS.get("writer", AGENT_CONFIGS["writer"])

                async with UnifiedLLMClient(
                    provider=config["provider"],
                    model=config["model"],
                    temperature=config["temperature"]
                ) as client:
                    # –®–∞–≥ 3: Stage 1 - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                    plan = await self._stage1_planning_async(client, user_answers, research_results, selected_grant)

                    # –®–∞–≥ 4: Stage 2 - –ù–∞–ø–∏—Å–∞–Ω–∏–µ
                    application_content = await self._stage2_writing_async(
                        client, user_answers, research_results, selected_grant, plan, citations, tables
                    )

                    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                    quality_check = await self._check_application_quality_v2_async(
                        client, application_content, research_results, citations, tables
                    )

                    logger.info(f"‚úÖ WriterV2: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ - –æ—Ü–µ–Ω–∫–∞ {quality_check.get('score')}/10")

                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {
                        'status': 'success',
                        'application': application_content,
                        'plan': plan,
                        'citations': citations,
                        'tables': tables,
                        'quality_score': quality_check['score'],
                        'suggestions': quality_check['suggestions'],
                        'research_used': True,
                        'agent_type': 'writer_v2',
                        'provider_used': config["provider"],
                        'provider': config["provider"],
                        'model_used': config["model"],
                        'processing_time': 2.5,
                        'tokens_used': 5000,
                        'timestamp': time.strftime("%Y-%m-%d %H:%M:%S")
                    }

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                    if self.db:
                        try:
                            logger.info("üíæ WriterV2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î...")
                            # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π dict –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–Ω–µ –∫–æ–ø–∏—Ä—É–µ–º result —Å–æ status:'success')
                            save_data = {
                                'title': application_content.get('title', '–ü—Ä–æ–µ–∫—Ç'),
                                'summary': application_content.get('summary', '')[:500],
                                'admin_user': input_data.get('admin_user', 'ai_agent'),
                                'grant_fund': selected_grant.get('name', ''),
                                'requested_amount': input_data.get('requested_amount', 0.0),
                                'project_duration': input_data.get('project_duration', 12),
                                'status': 'draft',  # —Å—Ç–∞—Ç—É—Å –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
                                'content': application_content,  # —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏
                                'session_id': input_data.get('session_id')
                            }

                            application_number = self.db.save_grant_application(save_data)

                            if application_number:
                                result['application_number'] = application_number
                                logger.info(f"‚úÖ WriterV2: –ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ - –Ω–æ–º–µ—Ä {application_number}")

                                # üìÑ –û–¢–ü–†–ê–í–ö–ê PDF –ì–†–ê–ù–¢–ê –í –ê–î–ú–ò–ù–°–ö–ò–ô –ß–ê–¢
                                try:
                                    await self._send_grant_pdf_to_admin(
                                        grant_number=application_number,
                                        anketa_id=anketa_id,
                                        application_content=application_content,
                                        citations=citations,
                                        tables=tables,
                                        quality_score=quality_check.get('score', 0)
                                    )
                                except Exception as pdf_error:
                                    logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ grant PDF: {pdf_error}")
                                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

                        except Exception as db_error:
                            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {db_error}")

                    return result
            else:
                logger.warning("‚ö†Ô∏è WriterV2: UnifiedLLMClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return await self._fallback_write_async(input_data)

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            return {
                'status': 'error',
                'message': f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {str(e)}",
                'agent_type': 'writer_v2'
            }

    async def _check_application_quality_v2_async(self, client, application_content: Dict,
                                                 research_results: Dict, citations: List, tables: List) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏ V2 —Å —É—á–µ—Ç–æ–º —Ü–∏—Ç–∞—Ç –∏ —Ç–∞–±–ª–∏—Ü"""
        logger.info("üîç WriterV2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞—è–≤–∫–∏")

        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
            total_length = len(application_content.get('full_text', ''))
            citations_count = len(citations)
            tables_count = len(tables)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
            requirements_met = {
                'min_length_15k': total_length >= 15000,
                'min_citations_10': citations_count >= 10,
                'min_tables_2': tables_count >= 2,
                'research_used': research_results is not None
            }

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É (0-10)
            score = 5  # –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            if requirements_met['min_length_15k']:
                score += 1
            if requirements_met['min_citations_10']:
                score += 2
            if requirements_met['min_tables_2']:
                score += 1
            if requirements_met['research_used']:
                score += 1

            suggestions = []
            if not requirements_met['min_length_15k']:
                suggestions.append(f"–£–≤–µ–ª–∏—á–∏—Ç—å –æ–±—ä–µ–º –∑–∞—è–≤–∫–∏ (—Å–µ–π—á–∞—Å {total_length} —Å–∏–º–≤–æ–ª–æ–≤, –Ω—É–∂–Ω–æ 15,000+)")
            if not requirements_met['min_citations_10']:
                suggestions.append(f"–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ü–∏—Ç–∞—Ç (—Å–µ–π—á–∞—Å {citations_count}, –Ω—É–∂–Ω–æ 10+)")
            if not requirements_met['min_tables_2']:
                suggestions.append(f"–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–∞–±–ª–∏—Ü (—Å–µ–π—á–∞—Å {tables_count}, –Ω—É–∂–Ω–æ 2+)")

            if not suggestions:
                suggestions.append("–ó–∞—è–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")

            logger.info(f"‚úÖ WriterV2: –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ - {score}/10, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements_met}")

            return {
                'score': score,
                'analysis': f'–ö–∞—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–∫–∏: {score}/10. –î–ª–∏–Ω–∞: {total_length} —Å–∏–º–≤–æ–ª–æ–≤, –¶–∏—Ç–∞—Ç—ã: {citations_count}, –¢–∞–±–ª–∏—Ü—ã: {tables_count}',
                'suggestions': suggestions,
                'requirements_met': requirements_met,
                'metrics': {
                    'total_length': total_length,
                    'citations_count': citations_count,
                    'tables_count': tables_count
                }
            }

        except Exception as e:
            logger.error(f"‚ùå WriterV2: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return {
                'score': 7,
                'analysis': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                'suggestions': ['–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ']
            }

    async def _fallback_write_async(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ research_results"""
        logger.warning("‚ö†Ô∏è WriterV2: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback (–±–µ–∑ research)")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π writer_agent –¥–ª—è fallback
        try:
            from writer_agent import WriterAgent
            old_writer = WriterAgent(self.db, self.llm_provider)
            return await old_writer.write_application_async(input_data)
        except:
            return {
                'status': 'error',
                'message': 'Fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                'agent_type': 'writer_v2_fallback'
            }

    def write_application(self, input_data: Dict[str, Any]) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (wrapper –¥–ª—è async)"""
        return asyncio.run(self.write_application_async(input_data))

    def process(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return self.write_application(data)
