#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞ –≤ Qdrant
"""
import requests

QDRANT_HOST = "5.35.88.251"
QDRANT_PORT = 6333
COLLECTION_NAME = "knowledge_sections"

print("=" * 80)
print("–¢–ï–°–¢ –ü–û–ò–°–ö–ê –§–ò–õ–û–°–û–§–ò–ò –ò–ù–¢–ï–†–í–¨–Æ–ï–†–ê")
print("=" * 80)

# Load model
try:
    from sentence_transformers import SentenceTransformer
    print("\n[1/2] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    print("      ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    exit(1)

print(f"\n[2/2] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")

# Test queries
test_queries = [
    "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?",
    "–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–æ–ø—Ä–æ—Å—á–∏–∫–æ–º –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º?",
    "–ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?",
    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∞–±—ã–π?",
    "–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω—É–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –ø–æ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ?"
]

for idx, query in enumerate(test_queries, 1):
    print(f"\n{'='*80}")
    print(f"–ó–ê–ü–†–û–° {idx}/{len(test_queries)}: {query}")
    print(f"{'='*80}")

    # Generate embedding
    query_embedding = model.encode(query, convert_to_tensor=False)

    # Search
    response = requests.post(
        f"http://{QDRANT_HOST}:{QDRANT_PORT}/collections/{COLLECTION_NAME}/points/search",
        json={
            "vector": query_embedding.tolist(),
            "limit": 2,
            "with_payload": True,
            "filter": {
                "must": [
                    {"key": "type", "match": {"value": "philosophy"}}
                ]
            }
        }
    )

    if response.status_code == 200:
        data = response.json()
        results = data.get('result', [])

        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏:\n")

        for i, hit in enumerate(results, 1):
            payload = hit.get('payload', {})
            score = hit.get('score', 0)

            if score >= 0.7:
                score_emoji = "üî•"
            elif score >= 0.6:
                score_emoji = "‚≠ê"
            else:
                score_emoji = "‚úîÔ∏è"

            print(f"{i}. [{score_emoji}] Score: {score:.3f}")
            print(f"   üìÇ {payload.get('section_name', 'Unknown')}")
            print(f"   üìÑ {payload.get('content', '')[:150]}...")
            print()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

print("\n" + "=" * 80)
print("‚úÖ –§–ò–õ–û–°–û–§–ò–Ø –î–û–°–¢–£–ü–ù–ê –î–õ–Ø –ê–ì–ï–ù–¢–û–í!")
print("–ê–≥–µ–Ω—Ç—ã –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞")
print("=" * 80)
