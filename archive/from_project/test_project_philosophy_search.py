#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ GrantService –≤ Qdrant
"""
import requests

QDRANT_HOST = "5.35.88.251"
QDRANT_PORT = 6333
COLLECTION_NAME = "knowledge_sections"

print("=" * 80)
print("–¢–ï–°–¢ –ü–û–ò–°–ö–ê –§–ò–õ–û–°–û–§–ò–ò –ü–†–û–ï–ö–¢–ê GRANTSERVICE")
print("=" * 80)

# Load model
try:
    from sentence_transformers import SentenceTransformer
    print("\n[1/2] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    print("      ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    exit(1)

print(f"\n[2/2] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")

# Test queries for project philosophy
test_queries = [
    {
        "agent": "ALL",
        "query": "–ö–∞–∫–∞—è –≥–ª–∞–≤–Ω–∞—è –∏–¥–µ—è –ø—Ä–æ–µ–∫—Ç–∞ GrantService?",
        "expected": "–ö–æ–Ω–≤–µ–π–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞, –ø—Ä–µ–≤—Ä–∞—â–∞—é—â–∏–π –∏–¥–µ—é –≤ –∑–∞—è–≤–∫—É"
    },
    {
        "agent": "Interviewer",
        "query": "–ö–∞–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∞–ø –∏–Ω—Ç–µ—Ä–≤—å—é?",
        "expected": "–ê—É–¥–∏—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞, –Ω–µ –≤ –∫–æ–Ω—Ü–µ"
    },
    {
        "agent": "Researcher",
        "query": "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç researcher agent? –ö–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã?",
        "expected": "27 WebSearch –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–∏—Ä–∞"
    },
    {
        "agent": "Writer",
        "query": "–ö–∞–∫ –ø–∏—Å–∞—Ç—å –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É? –°–∫–æ–ª—å–∫–æ —Ü–∏—Ç–∞—Ç –Ω—É–∂–Ω–æ?",
        "expected": "–ú–∏–Ω–∏–º—É–º 10 —Ü–∏—Ç–∞—Ç, —Å–∏–Ω—Ç–µ–∑ –∏–¥–µ–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
    },
    {
        "agent": "Reviewer",
        "query": "–ö–∞–∫ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏ –∫ –ø–æ–¥–∞—á–µ?",
        "expected": "4 –∫—Ä–∏—Ç–µ—Ä–∏—è, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è 15-50%"
    },
    {
        "agent": "ALL",
        "query": "–í —á–µ–º –æ—Ç–ª–∏—á–∏–µ GrantService –æ—Ç –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º?",
        "expected": "–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ —Ö–æ–¥—É, –∞ –Ω–µ –≤ –∫–æ–Ω—Ü–µ"
    }
]

for idx, test in enumerate(test_queries, 1):
    print(f"\n{'='*80}")
    print(f"–ó–ê–ü–†–û–° {idx}/{len(test_queries)} [{test['agent']}]: {test['query']}")
    print(f"{'='*80}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º: {test['expected']}")

    # Generate embedding
    query_embedding = model.encode(test['query'], convert_to_tensor=False)

    # Search in project philosophy only
    response = requests.post(
        f"http://{QDRANT_HOST}:{QDRANT_PORT}/collections/{COLLECTION_NAME}/points/search",
        json={
            "vector": query_embedding.tolist(),
            "limit": 2,
            "with_payload": True,
            "filter": {
                "must": [
                    {"key": "type", "match": {"value": "project_philosophy"}}
                ]
            }
        }
    )

    if response.status_code == 200:
        data = response.json()
        results = data.get('result', [])

        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n")

        for i, hit in enumerate(results, 1):
            payload = hit.get('payload', {})
            score = hit.get('score', 0)

            if score >= 0.7:
                score_emoji = "üî•"
            elif score >= 0.6:
                score_emoji = "‚≠ê"
            else:
                score_emoji = "‚úîÔ∏è"

            print(f"{i}. [{score_emoji}] Score: {score:.3f}")
            print(f"   üìÇ {payload.get('section_name', 'Unknown')}")
            print(f"   üìÑ {payload.get('content', '')[:200]}...")
            print()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")

print("\n" + "=" * 80)
print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
print("=" * 80)

# Get collection stats
response = requests.get(f"http://{QDRANT_HOST}:{QDRANT_PORT}/collections/{COLLECTION_NAME}")
if response.status_code == 200:
    data = response.json()
    result = data.get('result', {})

    print(f"\nüìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME}")
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {result.get('points_count', 0)}")
    print(f"   ‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –§–ü–ì: 31")
    print(f"   ‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞: 5")
    print(f"   ‚Ä¢ –§–∏–ª–æ—Å–æ—Ñ–∏—è –ø—Ä–æ–µ–∫—Ç–∞: 10")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
    print(f"   ‚Ä¢ Vector —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 384d (multilingual-MiniLM-L12-v2)")

print("\n" + "=" * 80)
print("‚úÖ –§–ò–õ–û–°–û–§–ò–Ø –ü–†–û–ï–ö–¢–ê –î–û–°–¢–£–ü–ù–ê –î–õ–Ø –í–°–ï–• –ê–ì–ï–ù–¢–û–í!")
print("–ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –∑–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–æ–ª—å –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
print("=" * 80)
