#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test semantic search in Qdrant knowledge base
"""
import requests
import json

QDRANT_HOST = "5.35.88.251"
QDRANT_PORT = 6333
COLLECTION_NAME = "knowledge_sections"

print("=" * 80)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô –§–ü–ì")
print("=" * 80)

# Load model locally for generating query embeddings
try:
    from sentence_transformers import SentenceTransformer
    print("\n[1/2] –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
    print("      ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    print("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install sentence-transformers")
    exit(1)

print(f"\n[2/2] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant ({QDRANT_HOST}:{QDRANT_PORT})...")

# Test queries
test_queries = [
    {
        "name": "–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞",
        "query": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±—é–¥–∂–µ—Ç—É? –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–º–µ—Ç—É —Ä–∞—Å—Ö–æ–¥–æ–≤?",
        "expected": "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å —Ä–∞–∑–¥–µ–ª—ã –æ –±—é–¥–∂–µ—Ç–µ, —Å–º–µ—Ç–µ, —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏"
    },
    {
        "name": "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞",
        "query": "–ö—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞? –ö–∞–∫–æ–π –æ–ø—ã—Ç –Ω—É–∂–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–∞–º?",
        "expected": "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å —Ä–∞–∑–¥–µ–ª—ã –æ –∫–æ–º–∞–Ω–¥–µ, –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏, –æ–ø—ã—Ç–µ"
    },
    {
        "name": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
        "query": "–ö–∞–∫ –æ–ø–∏—Å–∞—Ç—å —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é? –ö—Ç–æ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞?",
        "expected": "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å —Ä–∞–∑–¥–µ–ª—ã –æ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞—Ö"
    },
    {
        "name": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞",
        "query": "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã? –ö–∞–∫ –∏–∑–º–µ—Ä–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç?",
        "expected": "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å —Ä–∞–∑–¥–µ–ª—ã –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö, KPI"
    },
    {
        "name": "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞",
        "query": "–ö–∞–∫ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞?",
        "expected": "–î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏—Å—å —Ä–∞–∑–¥–µ–ª—ã –æ–± —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏, –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏"
    }
]

print("\n" + "=" * 80)
print("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í–´–• –ó–ê–ü–†–û–°–û–í")
print("=" * 80)

for idx, test in enumerate(test_queries, 1):
    print(f"\n{'='*80}")
    print(f"–¢–ï–°–¢ {idx}/{len(test_queries)}: {test['name']}")
    print(f"{'='*80}")
    print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {test['query']}")
    print(f"üéØ –û–∂–∏–¥–∞–µ–º: {test['expected']}\n")

    # Generate embedding for query
    query_embedding = model.encode(test['query'], convert_to_tensor=False)

    # Search in Qdrant
    response = requests.post(
        f"http://{QDRANT_HOST}:{QDRANT_PORT}/collections/{COLLECTION_NAME}/points/search",
        json={
            "vector": query_embedding.tolist(),
            "limit": 3,
            "with_payload": True
        }
    )

    if response.status_code == 200:
        data = response.json()
        results = data.get('result', [])

        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")

        for i, hit in enumerate(results, 1):
            payload = hit.get('payload', {})
            score = hit.get('score', 0)
            section_name = payload.get('section_name', 'Unknown')
            content = payload.get('content', '')

            # Score interpretation
            if score >= 0.8:
                score_emoji = "üî• –û—Ç–ª–∏—á–Ω–æ"
            elif score >= 0.7:
                score_emoji = "‚≠ê –•–æ—Ä–æ—à–æ"
            elif score >= 0.6:
                score_emoji = "‚úîÔ∏è –ù–æ—Ä–º–∞–ª—å–Ω–æ"
            else:
                score_emoji = "‚ö†Ô∏è –°–ª–∞–±–æ"

            print(f"{i}. [{score_emoji}] Score: {score:.3f}")
            print(f"   üìÇ –†–∞–∑–¥–µ–ª: {section_name}")
            print(f"   üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {content[:200]}...")
            print()
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")

print("\n" + "=" * 80)
print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("=" * 80)

# Get collection stats
response = requests.get(f"http://{QDRANT_HOST}:{QDRANT_PORT}/collections/{COLLECTION_NAME}")
if response.status_code == 200:
    data = response.json()
    result = data.get('result', {})

    print(f"\nüìä –ö–æ–ª–ª–µ–∫—Ü–∏—è: {COLLECTION_NAME}")
    print(f"   ‚Ä¢ –¢–æ—á–µ–∫ (—Ä–∞–∑–¥–µ–ª–æ–≤): {result.get('points_count', 0)}")
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {result.get('status', 'unknown')}")
    print(f"   ‚Ä¢ Vector —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: 384d (multilingual-MiniLM-L12-v2)")
    print(f"\n‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –†–ê–ë–û–¢–ê–ï–¢!")
    print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –§–ü–ì –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞–≥–µ–Ω—Ç–∞–º–∏")

print("\n" + "=" * 80)
print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
print("=" * 80)
