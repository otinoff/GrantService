#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç InteractiveInterviewerAgentV2

–ù–ï –¢–†–ï–ë–£–ï–¢ TELEGRAM UI!

–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é.

Usage:
    python test_interactive_interviewer_automated.py
"""

import asyncio
import sys
from pathlib import Path

# Add project paths
_project_root = Path(__file__).parent
sys.path.insert(0, str(_project_root))
sys.path.insert(0, str(_project_root / "shared"))
sys.path.insert(0, str(_project_root / "agents"))

from agents.interactive_interviewer_agent_v2 import InteractiveInterviewerAgentV2
from data.database.models import GrantServiceDatabase


# –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
SIMULATED_ANSWERS = {
    1: "–õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –≤ –ö–µ–º–µ—Ä–æ–≤–æ –¥–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤",
    2: "–•–æ—Ç–∏–º —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—å–±—É –∏–∑ –ª—É–∫–∞ –∫–∞–∫ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞, –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è",
    3: "–í –ö–µ–º–µ—Ä–æ–≤–æ –º–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –¥–ª—è –¥–µ—Ç–µ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞",
    4: "–î–µ—Ç–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ 10-17 –ª–µ—Ç, –∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–∏",
    5: "–ö–µ–º–µ—Ä–æ–≤–æ, –ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    6: "–ó–∞–∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –æ–±—É—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Å—Ç–∏ 3 —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è",
    7: "–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Ä–∞–∑ –≤ –∫–≤–∞—Ä—Ç–∞–ª",
    8: "100 –¥–µ—Ç–µ–π –ø—Ä–æ–π–¥—É—Ç –æ–±—É—á–µ–Ω–∏–µ, 3 —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å —É—á–∞—Å—Ç–∏–µ–º 200+ —á–µ–ª–æ–≤–µ–∫",
    9: "500,000 —Ä—É–±–ª–µ–π",
    10: "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 300–∫, –∑–∞—Ä–ø–ª–∞—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞ 150–∫, –∞—Ä–µ–Ω–¥–∞ –∑–∞–ª–∞ 50–∫",
    11: "–û–ø—ã—Ç–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å 10-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –≤–æ–ª–æ–Ω—Ç–µ—Ä—ã-–ø–æ–º–æ—â–Ω–∏–∫–∏",
    12: "–®–∫–æ–ª–∞ ‚Ññ5, —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å '–û–ª–∏–º–ø'",
    13: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è - –∑–∞–∫—É–ø–∏–º –∑–∞–ø–∞—Å, –Ω–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å - –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞",
    14: "–†–æ–¥–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é –∞–±–æ–Ω–ø–ª–∞—Ç—É, —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    15: "12 –º–µ—Å—è—Ü–µ–≤",
    # –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    16: "–î–∞, —É–∂–µ –µ—Å—Ç—å –∑–∞–ª –≤ —à–∫–æ–ª–µ ‚Ññ5, –¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º",
    17: "–ë—É–¥—É—Ç –∫–∞–∫ –Ω–æ–≤–∏—á–∫–∏, —Ç–∞–∫ –∏ –¥–µ—Ç–∏ —Å –æ–ø—ã—Ç–æ–º –≤ –¥—Ä—É–≥–∏—Ö –≤–∏–¥–∞—Ö —Å–ø–æ—Ä—Ç–∞",
    18: "–ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞—á–∞—Ç—å –≤ —Å–µ–Ω—Ç—è–±—Ä–µ 2025",
    19: "–¢—Ä–µ–Ω–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —Ñ–µ–¥–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞",
    20: "–†–æ–¥–∏—Ç–µ–ª–∏ –æ—á–µ–Ω—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã, –ø—Ä–æ–≤–µ–ª–∏ –æ–ø—Ä–æ—Å - 80+ –∑–∞—è–≤–æ–∫"
}


class InterviewSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, answers: dict):
        self.answers = answers
        self.question_count = 0

    async def ask_question(self, question: str) -> str:
        """
        Callback –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç

        Args:
            question: –í–æ–ø—Ä–æ—Å –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞

        Returns:
            –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.question_count += 1

        print(f"\n{'='*70}")
        print(f"[Q{self.question_count}] {question}")
        print(f"{'='*70}")

        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        answer = self.answers.get(self.question_count, f"[–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {self.question_count}]")

        print(f"[A{self.question_count}] {answer}\n")

        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        await asyncio.sleep(0.1)

        return answer


async def test_interview_automated():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–≤—å—é

    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –±–µ–∑ Telegram UI
    """
    print("="*80)
    print("–ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ InteractiveInterviewerAgentV2")
    print("="*80)
    print()

    # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    print("[1/4] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    db = GrantServiceDatabase()
    print("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
    print("\n[2/4] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InteractiveInterviewerAgentV2...")
    agent = InteractiveInterviewerAgentV2(
        db=db,
        llm_provider="claude_code",
        qdrant_host="5.35.88.251",
        qdrant_port=6333
    )
    print("‚úÖ –ê–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print("\n[3/4] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    user_data = {
        'telegram_id': 999999999,  # Test user
        'username': 'test_archery_user',
        'first_name': '–¢–µ—Å—Ç–æ–≤—ã–π',
        'last_name': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'email': 'test@example.com',
        'phone': '+7999000111',
        'grant_fund': '–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤'
    }
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω")

    # 4. –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
    print("\n[4/4] –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("-"*80)

    simulator = InterviewSimulator(SIMULATED_ANSWERS)

    try:
        result = await agent.conduct_interview(
            user_data=user_data,
            callback_ask_question=simulator.ask_question
        )

        print("\n" + "="*80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ù–¢–ï–†–í–¨–Æ")
        print("="*80)
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        print(f"üìä –û—Ü–µ–Ω–∫–∞: {result['audit_score']}/100")
        print(f"‚ùì –ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {result['questions_asked']}")
        print(f"üîç –£—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {result['follow_ups_asked']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {result['processing_time']:.1f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {result['conversation_state']}")
        print()

        # –î–µ—Ç–∞–ª–∏ –∞—É–¥–∏—Ç–∞
        if 'audit_details' in result:
            audit = result['audit_details']
            print("üìã –î–µ—Ç–∞–ª–∏ –∞—É–¥–∏—Ç–∞:")
            print(f"   - –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {audit.get('final_score', 'N/A')}/100")
            print(f"   - –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {audit.get('readiness_status', 'N/A')}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        print("\n" + "="*80)
        print("–ü–†–û–í–ï–†–ö–ò")
        print("="*80)

        checks = []

        # Check 1: –ú–∏–Ω–∏–º—É–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        min_questions = result['questions_asked'] >= 10
        checks.append(('–ó–∞–¥–∞–Ω–æ ‚â•10 –≤–æ–ø—Ä–æ—Å–æ–≤', min_questions))

        # Check 2: –û—Ü–µ–Ω–∫–∞ > 0
        has_score = result['audit_score'] > 0
        checks.append(('–û—Ü–µ–Ω–∫–∞ > 0', has_score))

        # Check 3: –ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        has_anketa = bool(result.get('anketa'))
        checks.append(('–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞', has_anketa))

        # Check 4: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑—É–º–Ω–æ–µ
        reasonable_time = 10 < result['processing_time'] < 120
        checks.append(('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è OK', reasonable_time))

        for check_name, passed in checks:
            status = '‚úÖ' if passed else '‚ùå'
            print(f"{status} {check_name}")

        all_passed = all(check[1] for check in checks)

        print()
        if all_passed:
            print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
            return True
        else:
            print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–í–ê–õ–ï–ù–´")
            return False

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = asyncio.run(test_interview_automated())

    sys.exit(0 if success else 1)
