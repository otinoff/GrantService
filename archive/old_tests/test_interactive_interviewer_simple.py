#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞ —Å –º–æ–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
–ü—Ä–æ–µ–∫—Ç: –ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è
"""

import sys
import os
import io
from pathlib import Path
import logging
import asyncio
import json

# Fix UTF-8 for Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Setup paths
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "data" / "database"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

print("=" * 80)
print("üß™ –¢–ï–°–¢: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
print("=" * 80)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è (–º–æ–∏ –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
TEST_DATA = {
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "telegram_id": 111222333,
    "username": "coffee_inclusive",
    "first_name": "–ú–∞—Ä–∏—è",
    "last_name": "–°–º–∏—Ä–Ω–æ–≤–∞",
    "email": "maria@coffee.ru",
    "phone": "+79995554433",
    "grant_fund": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤",

    # –ë–õ–û–ö 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–µ–ª–∞—é –æ—Ç–≤–µ—Ç—ã —Ä–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)

    "block_1_q1": "–ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è",  # –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç - –∫–æ—Ä–æ—Ç–∫–∏–π

    "block_1_q2": "–°–æ–∑–¥–∞—Ç—å –∫–æ—Ñ–µ–π–Ω—é –≥–¥–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ª—é–¥–∏ —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é",  # –°–†–ï–î–ù–ò–ô –æ—Ç–≤–µ—Ç

    "block_1_q3": """–í –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ª—é–¥—è–º —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É.
–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–∏ –Ω–µ —Ö–æ—Ç—è—Ç –∏—Ö –Ω–∞–Ω–∏–º–∞—Ç—å –∏–∑-–∑–∞ –ø—Ä–µ–¥—Ä–∞—Å—Å—É–¥–∫–æ–≤.
–ü–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ç–æ–ª—å–∫–æ 15% –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω—ã.
–≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ –∏ –±–µ–¥–Ω–æ—Å—Ç–∏.""",  # –•–û–†–û–®–ò–ô –æ—Ç–≤–µ—Ç - –¥–µ—Ç–∞–ª—å–Ω—ã–π

    "block_1_q4": "–õ—é–¥–∏ —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é 18-45 –ª–µ—Ç",  # –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç - –º–∞–ª–æ –¥–µ—Ç–∞–ª–µ–π

    "block_1_q5": "–ú–æ—Å–∫–≤–∞",  # –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç - —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥

    # –ë–õ–û–ö 2: –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –±—é–¥–∂–µ—Ç

    "block_2_q1": """1. –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ñ–µ–π–Ω—é
2. –ù–∞–Ω—è—Ç—å –ª—é–¥–µ–π
3. –û–±—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª
4. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—É""",  # –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç - –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã

    "block_2_q2": """–ú—ã –∞—Ä–µ–Ω–¥—É–µ–º –ø–æ–º–µ—â–µ–Ω–∏–µ 80 –∫–≤.–º –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.
–ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –µ–≥–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–ø–∞–Ω–¥—É—Å—ã, —à–∏—Ä–æ–∫–∏–µ –ø—Ä–æ—Ö–æ–¥—ã).
–ö—É–ø–∏–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏.
–û–±—É—á–∏–º 8 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–µ –±–∞—Ä–∏—Å—Ç–∞.
–ó–∞–ø—É—Å—Ç–∏–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö.""",  # –•–û–†–û–®–ò–ô –æ—Ç–≤–µ—Ç

    "block_2_q3": """1. –¢—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω–æ 8 —á–µ–ª–æ–≤–µ–∫ —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é
2. –û–±—Å–ª—É–∂–µ–Ω–æ 5000+ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –∑–∞ –≥–æ–¥
3. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ 35000 —Ä—É–±–ª–µ–π
4. –°–æ–∑–¥–∞–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é
5. –ü—Ä–æ–≤–µ–¥–µ–Ω–æ 12 –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –ø–æ –∫–æ—Ñ–µ""",  # –•–û–†–û–®–ò–ô –æ—Ç–≤–µ—Ç - –∏–∑–º–µ—Ä–∏–º–æ

    "block_2_q4": "500000",  # –°–õ–ê–ë–´–ô - —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞

    "block_2_q5": """–ê—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è: 150000
–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: 200000
–û–±—É—á–µ–Ω–∏–µ: 50000
–†–µ–∫–ª–∞–º–∞: 100000""",  # –°–†–ï–î–ù–ò–ô –æ—Ç–≤–µ—Ç - –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –Ω–æ –∫—Ä–∞—Ç–∫–æ

    # –ë–õ–û–ö 3: –ö–æ–º–∞–Ω–¥–∞, –ø–∞—Ä—Ç–Ω—ë—Ä—ã, —Ä–∏—Å–∫–∏

    "block_3_q1": "–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, –µ—Å—Ç—å –±—É—Ö–≥–∞–ª—Ç–µ—Ä –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥",  # –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç

    "block_3_q2": """–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–µ –æ–±—â–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–ª–∏–¥–æ–≤ - –ø–æ–º–æ—â—å –≤ –ø–æ–¥–±–æ—Ä–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–æ—Ü–∑–∞—â–∏—Ç—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
–£—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä –ö–æ—Ñ–µ–º–∞–Ω–∏—è - –æ–±—É—á–µ–Ω–∏–µ –±–∞—Ä–∏—Å—Ç–∞""",  # –•–û–†–û–®–ò–ô –æ—Ç–≤–µ—Ç

    "block_3_q3": "–†–∏—Å–∫ —á—Ç–æ –Ω–µ –±—É–¥–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤",  # –û–ß–ï–ù–¨ –°–õ–ê–ë–´–ô –æ—Ç–≤–µ—Ç

    "block_3_q4": """–ü–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞ –∫–æ—Ñ–µ–π–Ω—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —Å–∞–º–æ–æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏.
–í—ã—Ä—É—á–∫–∞ –æ—Ç –ø—Ä–æ–¥–∞–∂–∏ –∫–æ—Ñ–µ –ø–æ–∫—Ä–æ–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã –∏ –∞—Ä–µ–Ω–¥—É.
–°—Ä–µ–¥–Ω–∏–π —á–µ–∫ 300 —Ä—É–±–ª–µ–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º 50-70 —á–µ–∫–æ–≤ –≤ –¥–µ–Ω—å.""",  # –•–û–†–û–®–ò–ô –æ—Ç–≤–µ—Ç

    "block_3_q5": "12 –º–µ—Å—è—Ü–µ–≤"  # –û–ö
}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""

    print("\nüì¶ –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
    try:
        from models import GrantServiceDatabase
        from interactive_interviewer_agent import InteractiveInterviewerAgent
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

    print("\nüóÑÔ∏è  –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    try:
        db = GrantServiceDatabase()
        print("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

    print("\nü§ñ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ InteractiveInterviewerAgent...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude Code –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        agent = InteractiveInterviewerAgent(db, llm_provider="claude_code")
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (LLM: Claude Code / Sonnet 4.5)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

    print("\nüé§ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("   –¢–µ–º–∞: –ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è")
    print("   –û—Ç–≤–µ—Ç—ã: –†–∞–∑–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–æ—Ç —Å–ª–∞–±—ã—Ö –¥–æ —Ö–æ—Ä–æ—à–∏—Ö)")
    print("   (–≠—Ç–æ –∑–∞–π–º–µ—Ç ~2-3 –º–∏–Ω—É—Ç—ã, –∏–¥—É—Ç –≤—ã–∑–æ–≤—ã LLM –∫ wrapper 178.236.17.55:8000)...")

    try:
        result = await agent.conduct_interview_with_audit(user_data=TEST_DATA)
        print("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        import traceback
        traceback.print_exc()
        return False

    print("\nüìä –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open('test_interactive_result.json', 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_interactive_result.json")

    # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –¥–∏–∞–ª–æ–≥–∞
    dialog_dump = create_dialog_dump(result)
    with open('test_interactive_dialog.txt', 'w', encoding='utf-8') as f:
        f.write(dialog_dump)
    print("‚úÖ –î–∞–º–ø –¥–∏–∞–ª–æ–≥–∞: test_interactive_dialog.txt")

    print("\n" + "=" * 80)
    print("üìã –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 80)
    print(f"–°—Ç–∞—Ç—É—Å:        {result['status']}")
    print(f"Anketa ID:     {result['anketa_id']}")
    print(f"Audit Score:   {result['audit_score']}/100")
    print(f"–í—Ä–µ–º—è:         {result.get('processing_time', 'N/A'):.1f} —Å–µ–∫")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤
    feedback = result.get('interactive_feedback', [])
    print(f"\nüîç –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –ê–£–î–ò–¢–´ ({len(feedback)}):")
    for block in feedback:
        print(f"  –ë–ª–æ–∫ {block['block']}: score={block['audit_score']}/10, —É—Ç–æ—á–Ω–µ–Ω–∏–π={len(block.get('clarifications', {}))}")

    print("\n" + "=" * 80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 80)

    return True

def create_dialog_dump(result):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –¥–∞–º–ø –¥–∏–∞–ª–æ–≥–∞"""
    from interactive_interviewer_agent import INTERVIEW_QUESTIONS

    dump = []
    dump.append("=" * 80)
    dump.append("–î–ê–ú–ü –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ì–û –î–ò–ê–õ–û–ì–ê")
    dump.append("=" * 80)
    dump.append("")
    dump.append(f"–ü—Ä–æ–µ–∫—Ç: –ò–Ω–∫–ª—é–∑–∏–≤–Ω–∞—è –∫–æ—Ñ–µ–π–Ω—è")
    dump.append(f"Anketa ID: {result['anketa_id']}")
    dump.append(f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {result['audit_score']}/100")
    dump.append("")

    anketa = result['anketa']

    # –ë–õ–û–ö 1
    dump.append("=" * 80)
    dump.append("–ë–õ–û–ö 1: –ë–ê–ó–û–í–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
    dump.append("=" * 80)
    dump.append("")

    block1_questions = INTERVIEW_QUESTIONS["block_1"]
    block1_answers = [
        anketa.get('project_name', ''),
        anketa.get('project_goal', ''),
        anketa.get('problem_statement', ''),
        anketa.get('target_audience', ''),
        anketa.get('geography', '')
    ]

    for i, (q, a) in enumerate(zip(block1_questions, block1_answers), 1):
        dump.append(f"‚ùì –í–û–ü–†–û–° {i}: {q}")
        dump.append("")
        dump.append(f"üí¨ –û–¢–í–ï–¢ {i}:")
        dump.append(a)
        dump.append("")
        dump.append("-" * 80)
        dump.append("")

    # –ë–õ–û–ö 2
    dump.append("=" * 80)
    dump.append("–ë–õ–û–ö 2: –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –ò –ë–Æ–î–ñ–ï–¢")
    dump.append("=" * 80)
    dump.append("")

    block2_questions = INTERVIEW_QUESTIONS["block_2"]
    block2_answers = [
        anketa.get('project_tasks', ''),
        anketa.get('methodology', ''),
        anketa.get('expected_results', ''),
        anketa.get('budget', ''),
        anketa.get('budget_breakdown', '')
    ]

    for i, (q, a) in enumerate(zip(block2_questions, block2_answers), 6):
        dump.append(f"‚ùì –í–û–ü–†–û–° {i}: {q}")
        dump.append("")
        dump.append(f"üí¨ –û–¢–í–ï–¢ {i}:")
        dump.append(a)
        dump.append("")
        dump.append("-" * 80)
        dump.append("")

    # –ë–õ–û–ö 3
    dump.append("=" * 80)
    dump.append("–ë–õ–û–ö 3: –ö–û–ú–ê–ù–î–ê, –ü–ê–†–¢–ù–Å–†–´, –†–ò–°–ö–ò")
    dump.append("=" * 80)
    dump.append("")

    block3_questions = INTERVIEW_QUESTIONS["block_3"]
    block3_answers = [
        anketa.get('team_experience', ''),
        anketa.get('partnerships', ''),
        anketa.get('risk_management', ''),
        anketa.get('sustainability', ''),
        anketa.get('project_duration', '')
    ]

    for i, (q, a) in enumerate(zip(block3_questions, block3_answers), 11):
        dump.append(f"‚ùì –í–û–ü–†–û–° {i}: {q}")
        dump.append("")
        dump.append(f"üí¨ –û–¢–í–ï–¢ {i}:")
        dump.append(a)
        dump.append("")
        dump.append("-" * 80)
        dump.append("")

    # –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –ê–£–î–ò–¢–´
    dump.append("=" * 80)
    dump.append("–ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –ê–£–î–ò–¢–´")
    dump.append("=" * 80)
    dump.append("")

    feedback = result.get('interactive_feedback', [])
    for block_feedback in feedback:
        block_num = block_feedback['block']
        score = block_feedback['audit_score']
        clarifications = block_feedback.get('clarifications', {})

        dump.append(f"üîç –ë–õ–û–ö {block_num} - –û—Ü–µ–Ω–∫–∞: {score}/10")
        dump.append("")

        if clarifications:
            dump.append("üí° –£—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:")
            for key, value in clarifications.items():
                dump.append(f"  - {key}: {value}")
        else:
            dump.append("‚úÖ –£—Ç–æ—á–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

        dump.append("")
        dump.append("-" * 80)
        dump.append("")

    # –§–ò–ù–ê–õ
    dump.append("=" * 80)
    dump.append("–§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê")
    dump.append("=" * 80)
    dump.append("")
    dump.append(f"Audit Score: {result['audit_score']}/100")
    dump.append("")

    recommendations = result.get('recommendations', [])
    if recommendations:
        dump.append("üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        for i, rec in enumerate(recommendations, 1):
            dump.append(f"{i}. {rec}")

    dump.append("")
    dump.append("=" * 80)
    dump.append("–ö–æ–Ω–µ—Ü –¥–∞–º–ø–∞")
    dump.append("=" * 80)

    return "\n".join(dump)

if __name__ == "__main__":
    try:
        success = asyncio.run(main())

        if success:
            print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
            sys.exit(0)
        else:
            print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
