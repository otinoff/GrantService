#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SMOKE TEST: InteractiveInterviewerAgent
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–¢–µ—Å—Ç:
1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç InteractiveInterviewerAgent
2. –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
3. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ —Ç–µ–º—É "–õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –ö–µ–º–µ—Ä–æ–≤–æ"
4. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç: anketa_id, audit_score
5. –í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å

Author: Claude Code
Date: 2025-10-20
"""

import sys
import os
import io
from pathlib import Path
import logging
import asyncio

# Fix UTF-8 for Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Setup paths
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "data" / "database"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "telegram-bot" / "services"))
sys.path.insert(0, str(project_root / "web-admin"))

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

print("=" * 80)
print("üß™ SMOKE TEST: InteractiveInterviewerAgent")
print("=" * 80)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –ö–µ–º–µ—Ä–æ–≤–æ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
TEST_DATA = {
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    "telegram_id": 999888777,
    "username": "test_archery",
    "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
    "last_name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "email": "test@example.com",
    "phone": "+79001234567",
    "grant_fund": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤",

    # –ë–õ–û–ö 1
    "block_1_q1": "–†–∞–∑–≤–∏—Ç–∏–µ —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞ –≤ –ö–µ–º–µ—Ä–æ–≤–æ",
    "block_1_q2": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ –ª—É—á–Ω—ã—Ö –∫–ª—É–±–æ–≤ –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –º–æ–ª–æ–¥—ë–∂–∏ –≤ —Å–ø–æ—Ä—Ç",
    "block_1_q3": "–í –ö–µ–º–µ—Ä–æ–≤–æ –Ω–µ—Ç –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏–π —Å—Ç—Ä–µ–ª—å–±–æ–π –∏–∑ –ª—É–∫–∞. –ú–æ–ª–æ–¥—ë–∂–∏ –Ω–µ–≥–¥–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è.",
    "block_1_q4": "–ú–æ–ª–æ–¥—ë–∂—å 14-25 –ª–µ—Ç, —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏",
    "block_1_q5": "–ö–µ–º–µ—Ä–æ–≤–æ, –ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",

    # –ë–õ–û–ö 2
    "block_2_q1": "–û—Ç–∫—Ä—ã—Ç—å 3 –ª—É—á–Ω—ã—Ö –∫–ª—É–±–∞, –æ–±—É—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è",
    "block_2_q2": "–ê—Ä–µ–Ω–¥–∞ –ø–ª–æ—â–∞–¥–æ–∫, –∑–∞–∫—É–ø–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –æ–±—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
    "block_2_q3": "500+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, 3 –∫–ª—É–±–∞, 5 —Ç—Ä–µ–Ω–µ—Ä–æ–≤, 10 –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
    "block_2_q4": "800000",
    "block_2_q5": "–ê—Ä–µ–Ω–¥–∞ 300k, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ 250k, –æ–±—É—á–µ–Ω–∏–µ 100k, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è 100k, –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ 50k",

    # –ë–õ–û–ö 3
    "block_3_q1": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, 5 —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å –æ–ø—ã—Ç–æ–º —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞",
    "block_3_q2": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–ø–æ—Ä—Ç–∞ –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –ö–µ–º–ì–£, –∫–ª—É–± —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
    "block_3_q3": "–†–∏—Å–∫ –Ω–∏–∑–∫–æ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ - –º–∏—Ç–∏–≥–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ä–µ–∫–ª–∞–º—É. –†–∏—Å–∫ —Ç—Ä–∞–≤–º - —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂.",
    "block_3_q4": "–ß–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã 300 —Ä—É–±/–º–µ—Å—è—Ü, –ø–ª–∞—Ç–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ —Å –¥–µ–ø—Å–ø–æ—Ä—Ç–∞",
    "block_3_q5": "12 –º–µ—Å—è—Ü–µ–≤"
}

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""

    print("\nüì¶ –®–∞–≥ 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
    try:
        from models import GrantServiceDatabase
        from interactive_interviewer_agent import InteractiveInterviewerAgent
        print("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

    print("\nüóÑÔ∏è  –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
    try:
        db = GrantServiceDatabase()
        print("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

    print("\nü§ñ –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ InteractiveInterviewerAgent...")
    try:
        # –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude Code –¥–ª—è –ê–î–ê–ü–¢–ò–í–ù–û–ì–û –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞
        agent = InteractiveInterviewerAgent(db, llm_provider="claude_code")
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω (LLM: Claude Code / Sonnet 4.5)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

    print("\nüé§ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("   –¢–µ–º–∞: –õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –ö–µ–º–µ—Ä–æ–≤–æ")
    print("   LLM: Claude Code (Sonnet 4.5)")
    print("   (–≠—Ç–æ –∑–∞–π–º–µ—Ç ~2-3 –º–∏–Ω—É—Ç—ã, –∏–¥—É—Ç –≤—ã–∑–æ–≤—ã LLM –∫ wrapper 178.236.17.55:8000)...")

    try:
        result = await agent.conduct_interview_with_audit(user_data=TEST_DATA)
        print("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")
        import traceback
        traceback.print_exc()
        return False

    print("\nüìä –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    required_fields = ['status', 'anketa', 'anketa_id', 'audit_score']
    missing = [f for f in required_fields if f not in result]

    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è: {missing}")
        return False

    if result['status'] != 'success':
        print(f"‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ success: {result.get('status')}")
        return False

    print(f"‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")

    print("\n" + "=" * 80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê")
    print("=" * 80)
    print(f"–°—Ç–∞—Ç—É—Å:        {result['status']}")
    print(f"Anketa ID:     {result['anketa_id']}")
    print(f"Audit Score:   {result['audit_score']}/100")
    print(f"–í—Ä–µ–º—è:         {result.get('processing_time', 'N/A')} —Å–µ–∫")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã
    anketa = result['anketa']
    print(f"\nüìù –ê–ù–ö–ï–¢–ê:")
    print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ:    {anketa.get('project_name', 'N/A')[:50]}...")
    print(f"  –¶–µ–ª—å:        {anketa.get('project_goal', 'N/A')[:50]}...")
    print(f"  –ì–µ–æ–≥—Ä–∞—Ñ–∏—è:   {anketa.get('geography', 'N/A')}")
    print(f"  –ë—é–¥–∂–µ—Ç:      {anketa.get('budget', 'N/A')}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = result.get('recommendations', [])
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(recommendations)}):")
    for i, rec in enumerate(recommendations[:3], 1):
        print(f"  {i}. {rec[:80]}...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∞—É–¥–∏—Ç–æ–≤
    feedback = result.get('interactive_feedback', [])
    print(f"\nüîç –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–´–ï –ê–£–î–ò–¢–´ ({len(feedback)}):")
    for block in feedback:
        print(f"  –ë–ª–æ–∫ {block['block']}: score={block['audit_score']}/10, —É—Ç–æ—á–Ω–µ–Ω–∏–π={len(block.get('clarifications', {}))}")

    print("\n" + "=" * 80)
    print("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 80)

    return True

if __name__ == "__main__":
    try:
        success = asyncio.run(main())

        if success:
            print("\nüéâ SMOKE TEST PASSED")
            print("‚úÖ InteractiveInterviewerAgent –ì–û–¢–û–í –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            sys.exit(0)
        else:
            print("\n‚ùå SMOKE TEST FAILED")
            print("‚ö†Ô∏è  InteractiveInterviewerAgent –ù–ï –ì–û–¢–û–í")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
