#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω—Ç–µ–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è WebSearch
–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª–µ 'content' —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
"""

import asyncio
import sys
import os

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'shared'))

from shared.llm.claude_code_websearch_client import ClaudeCodeWebSearchClient

async def test_content_synthesis():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–µ–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""

    print("=" * 80)
    print("–¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø CONTENT SYNTHESIS")
    print("=" * 80)

    async with ClaudeCodeWebSearchClient(
        base_url="http://178.236.17.55:8000",
        timeout=120
    ) as client:

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞ –∫–∞–∫ –≤–∏–¥–µ —Å–ø–æ—Ä—Ç–∞ –≤ –†–æ—Å—Å–∏–∏"

        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–¥–æ 120 —Å–µ–∫—É–Ω–¥)...\n")

        result = await client.websearch(
            query=query,
            allowed_domains=['rosstat.gov.ru', 'gov.ru', 'minsport.gov.ru'],
            max_results=5
        )

        print("=" * 80)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢")
        print("=" * 80)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status = result.get('status', 'unknown')
        print(f"\n‚úì Status: {status}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ results
        results_count = result.get('total_results', 0)
        print(f"‚úì Results: {results_count}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ sources
        sources = result.get('sources', [])
        print(f"‚úì Sources: {len(sources)}")
        for i, source in enumerate(sources, 1):
            print(f"  {i}. {source}")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–∞–ª–∏—á–∏–µ content
        content = result.get('content', '')

        print(f"\n{'=' * 80}")
        print("üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: CONTENT")
        print("=" * 80)

        if content:
            print(f"‚úÖ CONTENT –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢!")
            print(f"‚úÖ –î–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"\nüìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:\n")
            print("-" * 80)
            print(content[:500])
            print("-" * 80)

            if len(content) >= 500:
                print(f"\n‚úÖ SUCCESS: Content synthesis –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                print(f"‚úÖ –û—Ç—á—ë—Ç—ã —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–ª–Ω—ã–º–∏ –∫–∞–∫ –≤ EKATERINA")
                return True
            else:
                print(f"\n‚ö†Ô∏è  WARNING: Content —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"‚ö†Ô∏è  –û–∂–∏–¥–∞–ª–æ—Å—å: 500-1000 —Å–ª–æ–≤")
                return False
        else:
            print(f"‚ùå FAIL: CONTENT –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            print(f"‚ùå –ü–æ–ª–µ 'content' –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è:")
            for key in result.keys():
                print(f"  - {key}: {type(result[key]).__name__}")
            return False

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"  - Search time: {result.get('search_time', 0):.2f}s")
        if 'cost' in result:
            print(f"  - Cost: ${result.get('cost', 0):.4f}")
        if 'usage' in result:
            usage = result.get('usage', {})
            print(f"  - Tokens: {usage.get('total_tokens', 0)}")

if __name__ == "__main__":
    print("\n" + "=" * 80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û CONTENT SYNTHESIS")
    print("=" * 80)
    print("\n–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ wrapper server —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ 'content'")
    print("      —Å –ø–æ–ª–Ω—ã–º —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –∫–∞–∫ –≤ EKATERINA\n")

    try:
        success = asyncio.run(test_content_synthesis())

        print("\n" + "=" * 80)
        if success:
            print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Content synthesis —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print("=" * 80)
            sys.exit(0)
        else:
            print("‚ö†Ô∏è  –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: Content synthesis —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            print("=" * 80)
            sys.exit(1)

    except Exception as e:
        print("\n" + "=" * 80)
        print(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        print("=" * 80)
        import traceback
        traceback.print_exc()
        sys.exit(2)
