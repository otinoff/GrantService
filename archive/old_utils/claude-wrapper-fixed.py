#!/usr/bin/env python3
"""
Claude Code Wrapper Server
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP API –¥–ª—è Claude CLI headless mode
Includes WebSearch support with content synthesis
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import subprocess
import json
import asyncio
from typing import Optional, List, Dict, Any
import logging
import time

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

class ChatRequest(BaseModel):
    message: str
    model: Optional[str] = "sonnet"
    temperature: Optional[float] = 0.7
    max_tokens: Optional[int] = 2000

class WebSearchRequest(BaseModel):
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    allowed_domains: Optional[List[str]] = Field(None, description="–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
    blocked_domains: Optional[List[str]] = Field(None, description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
    max_results: Optional[int] = Field(5, ge=1, le=20, description="–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {
        "status": "healthy",
        "service": "Claude Code Wrapper",
        "server": "178.236.17.55",
        "oauth": "max_subscription"
    }

@app.post("/chat")
async def chat(request: ChatRequest):
    """–ß–∞—Ç —Å Claude —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π CLI"""
    try:
        logger.info(f"üì® Request: {len(request.message)} chars, model={request.model}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            "claude",
            "-p",
            "--output-format", "json",
            request.message
        ]

        logger.info(f"üöÄ Starting Claude CLI...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ subprocess
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        timeout = max(15, min(request.max_tokens / 5, 180)) if request.max_tokens else 60

        try:
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=timeout
            )
        except asyncio.TimeoutError:
            process.kill()
            raise HTTPException(status_code=504, detail="Claude CLI timeout")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if process.returncode != 0:
            error_msg = stderr.decode("utf-8") if stderr else "Unknown error"
            logger.error(f"‚ùå CLI error: {error_msg}")
            raise HTTPException(status_code=500, detail=f"CLI error: {error_msg}")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        output = stdout.decode("utf-8")
        response_data = json.loads(output)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response_data.get("type") == "result" and response_data.get("subtype") == "success":
            result = response_data.get("result", "").strip()

            logger.info(f"‚úÖ Response: {len(result)} chars, ${response_data.get('total_cost_usd', 0):.4f}")

            return {
                "response": result,
                "model": request.model,
                "session_id": None,
                "usage": response_data.get("usage", {}),
                "cost": response_data.get("total_cost_usd", 0),
                "duration_ms": response_data.get("duration_ms", 0)
            }
        else:
            error = response_data.get("error", "Unknown error")
            raise HTTPException(status_code=500, detail=f"Claude error: {error}")

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON parse error: {e}")
        raise HTTPException(status_code=500, detail=f"Invalid JSON: {e}")

    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/websearch")
async def websearch(request: WebSearchRequest):
    """
    WebSearch —á–µ—Ä–µ–∑ Claude CLI with web search tool

    Two-step process:
    1. Search for information using WebSearch tool
    2. Synthesize comprehensive answer based on search results

    Returns:
    - content: Synthesized answer (500-1000 words)
    - results: List of sources with snippets
    - sources: List of unique domains
    - cost: Total cost for search + synthesis
    - usage: Token usage statistics
    """

    try:
        logger.info(f"üîç WebSearch: {request.query[:60]}... (max_results={request.max_results})")

        start_time = time.time()

        # STEP 1: WebSearch + Synthesis –≤ –æ–¥–Ω–æ–º –≤—ã–∑–æ–≤–µ
        # ============================================
        search_prompt = f"""Use the WebSearch tool to search for the following query and provide comprehensive answer:

Query: {request.query}

Please search for relevant information and then provide a detailed, synthesized answer (500-1000 words) based on the sources you find.

Requirements:
- Use WebSearch tool to find {request.max_results} most relevant sources
- Synthesize information into coherent, well-structured answer
- Include specific facts, data, and examples from sources
- Reference sources in text using [1], [2] format
- Organize answer with clear paragraphs or bullet points if needed"""

        if request.allowed_domains:
            domains_str = ", ".join(request.allowed_domains)
            search_prompt += f"\n- Only search in these domains: {domains_str}"

        if request.blocked_domains:
            blocked_str = ", ".join(request.blocked_domains)
            search_prompt += f"\n- Exclude these domains: {blocked_str}"

        search_prompt += """

At the end of your answer, provide the sources in JSON format:
```json
{
    "sources": [
        {
            "title": "Source title",
            "url": "Full URL",
            "snippet": "Brief relevant excerpt",
            "source": "domain.com"
        }
    ]
}
```"""

        # –ó–∞–ø—É—Å–∫–∞–µ–º Claude CLI —Å WebSearch
        cmd = [
            "claude",
            "-p",
            "--output-format", "json",
            search_prompt
        ]

        logger.info(f"üöÄ Starting Claude CLI for WebSearch + Synthesis...")

        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è WebSearch + Synthesis (180 —Å–µ–∫—É–Ω–¥)
        timeout = 180

        try:
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=timeout
            )
        except asyncio.TimeoutError:
            process.kill()
            logger.error(f"‚è±Ô∏è WebSearch timeout ({timeout}s)")
            raise HTTPException(status_code=504, detail="WebSearch timeout")

        if process.returncode != 0:
            error_msg = stderr.decode("utf-8") if stderr else "Unknown error"
            logger.error(f"‚ùå CLI error: {error_msg}")
            raise HTTPException(status_code=500, detail=f"CLI error: {error_msg}")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Claude
        output = stdout.decode("utf-8")
        response_data = json.loads(output)

        search_time = time.time() - start_time

        if response_data.get("type") == "result" and response_data.get("subtype") == "success":
            result_text = response_data.get("result", "").strip()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
            content = ""
            sources_data = []

            # –ò—â–µ–º JSON —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞
            if "```json" in result_text:
                # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ JSON –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                json_start = result_text.find("```json")
                content = result_text[:json_start].strip()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
                json_block_start = json_start + 7
                json_block_end = result_text.find("```", json_block_start)
                if json_block_end == -1:
                    json_block_end = len(result_text)
                json_text = result_text[json_block_start:json_block_end].strip()

                try:
                    sources_json = json.loads(json_text)
                    sources_data = sources_json.get("sources", [])
                    logger.info(f"üìö Extracted {len(sources_data)} sources from JSON")
                except json.JSONDecodeError as e:
                    logger.warning(f"‚ö†Ô∏è Could not parse sources JSON: {e}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç JSON –±–ª–æ–∫–∞, –≤–µ—Å—å —Ç–µ–∫—Å—Ç - —ç—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç
                content = result_text
                logger.warning("‚ö†Ô∏è No JSON sources block found, using full text as content")

            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π (–Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            if not content:
                content = result_text

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
            unique_sources = list(set([s.get("source", "") for s in sources_data if s.get("source")]))

            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            final_result = {
                "query": request.query,
                "content": content,  # –ì–õ–ê–í–ù–û–ï: —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                "results": sources_data,
                "sources": unique_sources,
                "total_results": len(sources_data),
                "session_id": request.session_id,
                "usage": response_data.get("usage", {}),
                "cost": response_data.get("total_cost_usd", 0),
                "search_time": round(search_time, 2),
                "status": "success"
            }

            logger.info(f"‚úÖ WebSearch complete: {len(content)} chars content, {len(sources_data)} sources, ${final_result['cost']:.4f}, {search_time:.1f}s")

            return final_result

        else:
            error = response_data.get("error", "Unknown error")
            logger.error(f"‚ùå Claude error: {error}")
            raise HTTPException(status_code=500, detail=f"Claude error: {error}")

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON parse error: {e}")
        raise HTTPException(status_code=500, detail=f"Invalid JSON: {e}")

    except Exception as e:
        logger.error(f"‚ùå WebSearch error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
