#!/usr/bin/env python3
"""
Claude Code Wrapper Server
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç HTTP API –¥–ª—è Claude CLI headless mode
Includes WebSearch support
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import subprocess
import json
import asyncio
from typing import Optional, List, Dict, Any
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

class ChatRequest(BaseModel):
    message: str
    model: Optional[str] = "sonnet"
    temperature: Optional[float] = 0.7
    max_tokens: Optional[int] = 2000

class WebSearchRequest(BaseModel):
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    allowed_domains: Optional[List[str]] = Field(None, description="–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
    blocked_domains: Optional[List[str]] = Field(None, description="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã")
    max_results: Optional[int] = Field(5, ge=1, le=20, description="–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    session_id: Optional[str] = Field(None, description="ID —Å–µ—Å—Å–∏–∏")

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    return {
        "status": "healthy",
        "service": "Claude Code Wrapper",
        "server": "178.236.17.55",
        "oauth": "max_subscription"
    }

@app.post("/chat")
async def chat(request: ChatRequest):
    """–ß–∞—Ç —Å Claude —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π CLI"""
    try:
        logger.info(f"üì® Request: {len(request.message)} chars, model={request.model}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            "claude",
            "-p",
            "--output-format", "json",
            request.message
        ]

        logger.info(f"üöÄ Starting Claude CLI...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ subprocess
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
        timeout = max(15, min(request.max_tokens / 5, 180)) if request.max_tokens else 60

        try:
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=timeout
            )
        except asyncio.TimeoutError:
            process.kill()
            raise HTTPException(status_code=504, detail="Claude CLI timeout")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if process.returncode != 0:
            error_msg = stderr.decode("utf-8") if stderr else "Unknown error"
            logger.error(f"‚ùå CLI error: {error_msg}")
            raise HTTPException(status_code=500, detail=f"CLI error: {error_msg}")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        output = stdout.decode("utf-8")
        response_data = json.loads(output)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response_data.get("type") == "result" and response_data.get("subtype") == "success":
            result = response_data.get("result", "").strip()

            logger.info(f"‚úÖ Response: {len(result)} chars, ${response_data.get('total_cost_usd', 0):.4f}")

            return {
                "response": result,
                "model": request.model,
                "session_id": None,
                "usage": response_data.get("usage", {}),
                "cost": response_data.get("total_cost_usd", 0),
                "duration_ms": response_data.get("duration_ms", 0)
            }
        else:
            error = response_data.get("error", "Unknown error")
            raise HTTPException(status_code=500, detail=f"Claude error: {error}")

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON parse error: {e}")
        raise HTTPException(status_code=500, detail=f"Invalid JSON: {e}")

    except Exception as e:
        logger.error(f"‚ùå Error: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/websearch")
async def websearch(request: WebSearchRequest):
    """
    WebSearch —á–µ—Ä–µ–∑ Claude CLI with web search tool

    Claude CLI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebSearch tool –∫–æ–≥–¥–∞ –≤–∏–¥–∏—Ç –∑–∞–ø—Ä–æ—Å
    —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º "search for" –∏–ª–∏ "find information"
    """
    try:
        logger.info(f"üîç WebSearch: {request.query[:60]}... (max_results={request.max_results})")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Claude —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebSearch
        search_prompt = f"""Use the WebSearch tool to search for the following query:

Query: {request.query}

Search Parameters:
- Maximum results: {request.max_results}"""

        if request.allowed_domains:
            domains_str = ", ".join(request.allowed_domains)
            search_prompt += f"\n- Only search in these domains: {domains_str}"

        if request.blocked_domains:
            blocked_str = ", ".join(request.blocked_domains)
            search_prompt += f"\n- Exclude these domains: {blocked_str}"

        search_prompt += """

Return the search results in the following JSON format:
{
    "query": "the original query",
    "results": [
        {
            "title": "Result title",
            "url": "Full URL",
            "snippet": "Content snippet or summary",
            "source": "domain.com",
            "date": "Publication date if available"
        }
    ],
    "sources": ["unique list of domains"],
    "total_results": 5
}

IMPORTANT: Use WebSearch tool to perform actual web search. Do not make up results."""

        # –ó–∞–ø—É—Å–∫–∞–µ–º Claude CLI —Å WebSearch prompt
        cmd = [
            "claude",
            "-p",
            "--output-format", "json",
            search_prompt
        ]

        logger.info(f"üöÄ Starting Claude CLI for WebSearch...")

        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è WebSearch (120 —Å–µ–∫—É–Ω–¥)
        timeout = 120

        try:
            stdout, stderr = await asyncio.wait_for(
                process.communicate(),
                timeout=timeout
            )
        except asyncio.TimeoutError:
            process.kill()
            logger.error(f"‚è±Ô∏è WebSearch timeout ({timeout}s)")
            raise HTTPException(status_code=504, detail="WebSearch timeout")

        if process.returncode != 0:
            error_msg = stderr.decode("utf-8") if stderr else "Unknown error"
            logger.error(f"‚ùå CLI error: {error_msg}")
            raise HTTPException(status_code=500, detail=f"CLI error: {error_msg}")

        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç –æ—Ç Claude
        output = stdout.decode("utf-8")
        response_data = json.loads(output)

        if response_data.get("type") == "result" and response_data.get("subtype") == "success":
            result_text = response_data.get("result", "").strip()

            # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            try:
                # Claude –º–æ–∂–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å JSON –≤ markdown –∫–æ–¥
                if "```json" in result_text:
                    # –ò–∑–≤–ª–µ—á—å JSON –∏–∑ markdown –±–ª–æ–∫–∞
                    json_start = result_text.find("```json") + 7
                    json_end = result_text.find("```", json_start)
                    result_text = result_text[json_start:json_end].strip()
                elif "```" in result_text:
                    # –ò–∑–≤–ª–µ—á—å –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞
                    json_start = result_text.find("```") + 3
                    json_end = result_text.find("```", json_start)
                    result_text = result_text[json_start:json_end].strip()

                search_results = json.loads(result_text)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                if not isinstance(search_results, dict):
                    raise ValueError("Result is not a dictionary")

                if "results" not in search_results:
                    search_results["results"] = []

                if "query" not in search_results:
                    search_results["query"] = request.query

                # –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                search_results["session_id"] = request.session_id
                search_results["usage"] = response_data.get("usage", {})
                search_results["cost"] = response_data.get("total_cost_usd", 0)
                search_results["status"] = "success"

                logger.info(f"‚úÖ WebSearch: {len(search_results.get('results', []))} results found, ${search_results['cost']:.4f}")

                return search_results

            except (json.JSONDecodeError, ValueError) as e:
                logger.error(f"‚ö†Ô∏è Could not parse search results as JSON: {e}")
                logger.error(f"Raw result: {result_text[:500]}")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                return {
                    "query": request.query,
                    "results": [],
                    "raw_text": result_text,
                    "sources": [],
                    "total_results": 0,
                    "session_id": request.session_id,
                    "usage": response_data.get("usage", {}),
                    "cost": response_data.get("total_cost_usd", 0),
                    "status": "parsed_as_text",
                    "error": f"Could not parse JSON: {str(e)}"
                }
        else:
            error = response_data.get("error", "Unknown error")
            logger.error(f"‚ùå Claude error: {error}")
            raise HTTPException(status_code=500, detail=f"Claude error: {error}")

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå JSON parse error: {e}")
        raise HTTPException(status_code=500, detail=f"Invalid JSON: {e}")

    except Exception as e:
        logger.error(f"‚ùå WebSearch error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
