#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 check_remote_db.py
"""

import subprocess
import sys

def run_remote_command(host, command):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    try:
        cmd = ['ssh', f'root@{host}', command]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        return result.returncode, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return -1, "", "Timeout"
    except Exception as e:
        return -1, "", str(e)

def check_remote_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ"""
    host = "5.35.88.251"
    db_path = "/var/GrantService/data/grant_service.db"
    
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {host}")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ë–î...")
    code, out, err = run_remote_command(host, f"ls -la {db_path}")
    if code == 0:
        print(f"‚úÖ –§–∞–π–ª –ë–î –Ω–∞–π–¥–µ–Ω:")
        print(out.strip())
    else:
        print(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω: {err}")
        return False
    
    print()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("2Ô∏è‚É£ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è...")
    code, out, err = run_remote_command(host, f"stat {db_path}")
    if code == 0:
        print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:")
        for line in out.split('\n'):
            if 'Modify:' in line or 'Size:' in line:
                print(f"  {line.strip()}")
    
    print()
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë–î
    print("3Ô∏è‚É£ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    sql_cmd = f"sqlite3 {db_path} \"SELECT COUNT(*) FROM questions WHERE is_active = 1;\""
    code, out, err = run_remote_command(host, sql_cmd)
    if code == 0:
        active_questions = out.strip()
        print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {active_questions}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {err}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    sql_cmd = f"sqlite3 {db_path} \"SELECT COUNT(*) FROM questions WHERE hint_text IS NOT NULL AND hint_text != '';\""
    code, out, err = run_remote_command(host, sql_cmd)
    if code == 0:
        hints_count = out.strip()
        print(f"üí° –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {hints_count}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {err}")
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    sql_cmd = f"sqlite3 {db_path} \"SELECT COUNT(*) FROM questions;\""
    code, out, err = run_remote_command(host, sql_cmd)
    if code == 0:
        total_questions = out.strip()
        print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {err}")
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    sql_cmd = f"sqlite3 {db_path} \"SELECT COUNT(*) FROM grant_applications;\""
    code, out, err = run_remote_command(host, sql_cmd)
    if code == 0:
        apps_count = out.strip()
        print(f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {apps_count}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞—è–≤–æ–∫: {err}")
    
    print()
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
    print("4Ô∏è‚É£ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    code, out, err = run_remote_command(host, "pgrep -f main.py")
    if code == 0 and out.strip():
        pids = out.strip().split('\n')
        print(f"ü§ñ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: {', '.join(pids)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for pid in pids:
            code2, out2, err2 = run_remote_command(host, f"ps -o pid,etime,cmd -p {pid}")
            if code2 == 0:
                print(f"  PID {pid}:")
                lines = out2.strip().split('\n')
                if len(lines) > 1:
                    print(f"    {lines[1]}")
    else:
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print()
    
    # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
    sql_cmd = f"sqlite3 {db_path} \"SELECT question_number, question_text, CASE WHEN hint_text IS NOT NULL AND hint_text != '' THEN '–î–ê' ELSE '–ù–ï–¢' END as has_hint FROM questions WHERE is_active = 1 ORDER BY question_number LIMIT 3;\""
    code, out, err = run_remote_command(host, sql_cmd)
    if code == 0:
        lines = out.strip().split('\n')
        for line in lines:
            if '|' in line:
                parts = line.split('|')
                if len(parts) >= 3:
                    q_num = parts[0]
                    q_text = parts[1][:50] + "..." if len(parts[1]) > 50 else parts[1]
                    has_hint = parts[2]
                    print(f"  {q_num}. {q_text} | –ü–æ–¥—Å–∫–∞–∑–∫–∞: {has_hint}")
    
    print()
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    return True

def check_github_actions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö GitHub Actions"""
    print("\nüîÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GitHub Actions:")
    print("–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è –∑–∞–π–¥–∏—Ç–µ –Ω–∞:")
    print("https://github.com/otinoff/GrantService/actions")
    print("–¢–∞–º –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:")
    print("- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–ø–ª–æ—è")
    print("- –õ–æ–≥ –¥–µ–ø–ª–æ—è")
    print("- –ï—Å—Ç—å –ª–∏ –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")

if __name__ == "__main__":
    try:
        success = check_remote_database()
        check_github_actions()
        
        if success:
            print("\nüí° –ï—Å–ª–∏ –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π: ssh root@5.35.88.251 'pkill -f main.py && cd /var/GrantService/telegram-bot && nohup python3 main.py &'")
            print("2. –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ GitHub Actions")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")