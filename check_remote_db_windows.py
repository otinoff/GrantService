#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å Windows
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç paramiko –¥–ª—è SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

try:
    import paramiko
except ImportError:
    print("‚ùå –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ paramiko")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install paramiko")
    exit(1)

import sys
import time

class RemoteDBChecker:
    def __init__(self, host, username, password=None, key_file=None):
        self.host = host
        self.username = username
        self.password = password
        self.key_file = key_file
        self.client = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            if self.key_file:
                print(f"üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.host} —Å –∫–ª—é—á–æ–º...")
                self.client.connect(self.host, username=self.username, key_filename=self.key_file)
            elif self.password:
                print(f"üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.host} —Å –ø–∞—Ä–æ–ª–µ–º...")
                self.client.connect(self.host, username=self.username, password=self.password)
            else:
                print(f"üîë –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.host} (–ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ –ø–∞—Ä–æ–ª—è)...")
                self.client.connect(self.host, username=self.username)
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def run_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            stdin, stdout, stderr = self.client.exec_command(command)
            stdout_data = stdout.read().decode('utf-8')
            stderr_data = stderr.read().decode('utf-8')
            exit_code = stdout.channel.recv_exit_status()
            
            return exit_code, stdout_data, stderr_data
            
        except Exception as e:
            return -1, "", str(e)
    
    def find_database_files(self):
        """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ë–î –ø–æ –∫–æ–¥—É
        main_db_path = "/var/GrantService/data/grantservice.db"
        print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ë–î: {main_db_path}")
        code, out, err = self.run_command(f"ls -la '{main_db_path}' 2>/dev/null")
        
        db_files = []
        if code == 0:
            db_files.append(main_db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        alternative_paths = [
            "/var/GrantService/data/grant_service.db",  # —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
            "/var/GrantService/grantservice.db",       # –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
            "/var/GrantService/grant_service.db"       # –≤ –∫–æ—Ä–Ω–µ —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º
        ]
        
        for alt_path in alternative_paths:
            print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: {alt_path}")
            code, out, err = self.run_command(f"ls -la '{alt_path}' 2>/dev/null")
            if code == 0 and alt_path not in db_files:
                db_files.append(alt_path)
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤—Å–µ .db —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ
        if not db_files:
            print("   –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .db —Ñ–∞–π–ª–æ–≤ –≤ /var/GrantService...")
            code, out, err = self.run_command("find /var/GrantService -name '*.db' 2>/dev/null")
            if code == 0 and out.strip():
                files = out.strip().split('\n')
                for file in files:
                    if file.strip():
                        db_files.append(file.strip())
        
        if db_files:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –ë–î:")
            for i, db_file in enumerate(db_files, 1):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                code, out, err = self.run_command(f"ls -la '{db_file}'")
                if code == 0:
                    print(f"   {i}. {db_file}")
                    print(f"      {out.strip()}")
        else:
            print("‚ùå –§–∞–π–ª—ã –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return db_files
    
    def check_database(self, db_path=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {self.host}")
        print("=" * 60)
        
        # 1. –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –ë–î
        if not db_path:
            db_files = self.find_database_files()
            if not db_files:
                return False
            
            if len(db_files) == 1:
                db_path = db_files[0]
                print(f"üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –ë–î: {db_path}")
            else:
                print("\nü§î –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ë–î:")
                for i, db_file in enumerate(db_files, 1):
                    print(f"   {i}. {db_file}")
                
                try:
                    choice = int(input("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ")) - 1
                    if 0 <= choice < len(db_files):
                        db_path = db_files[choice]
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                        return False
                except (ValueError, IndexError):
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
                    return False
        
        print(f"\nüìã –ê–Ω–∞–ª–∏–∑ –ë–î: {db_path}")
        print("-" * 40)
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        code, out, err = self.run_command(f"ls -la '{db_path}'")
        if code != 0:
            print(f"‚ùå –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {err}")
            return False
        
        print("‚úÖ –§–∞–π–ª –ë–î:")
        print(f"   {out.strip()}")
        
        print()
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("2Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ...")
        code, out, err = self.run_command(f"stat {db_path} | grep -E 'Size|Modify'")
        if code == 0:
            print("‚úÖ –í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(f"   {out.strip()}")
        
        print()
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë–î
        print("3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ë–î...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –≤ –ë–î
        code, out, err = self.run_command(f"sqlite3 {db_path} \".tables\"")
        if code == 0:
            tables = out.strip()
            print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {tables}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        table_name = "interview_questions"  # –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        code, out, err = self.run_command(f"sqlite3 {db_path} \"SELECT COUNT(*) FROM {table_name} WHERE is_active = 1;\"")
        if code == 0:
            active_questions = out.strip()
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {active_questions}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {err}")
        
        # –í–æ–ø—Ä–æ—Å—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        code, out, err = self.run_command(f"sqlite3 {db_path} \"SELECT COUNT(*) FROM {table_name} WHERE hint_text IS NOT NULL AND hint_text != '';\"")
        if code == 0:
            hints_count = out.strip()
            print(f"üí° –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {hints_count}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {err}")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        code, out, err = self.run_command(f"sqlite3 {db_path} \"SELECT COUNT(*) FROM {table_name};\"")
        if code == 0:
            total_questions = out.strip()
            print(f"üìù –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        
        # –ó–∞—è–≤–∫–∏
        code, out, err = self.run_command(f"sqlite3 {db_path} \"SELECT COUNT(*) FROM grant_applications;\"")
        if code == 0:
            apps_count = out.strip()
            print(f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {apps_count}")
        
        print()
        
        # 4. –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
        print("4Ô∏è‚É£ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞...")
        code, out, err = self.run_command("pgrep -f main.py")
        if code == 0 and out.strip():
            pids = out.strip().split('\n')
            print(f"ü§ñ –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: {', '.join(pids)}")
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            for pid in pids:
                code2, out2, err2 = self.run_command(f"ps -o pid,etime,cmd -p {pid} | tail -1")
                if code2 == 0:
                    print(f"   PID {pid}: {out2.strip()}")
        else:
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        print()
        
        # 5. –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
        print("5Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤...")
        code, out, err = self.run_command(f"sqlite3 {db_path} \"SELECT question_number || '. ' || substr(question_text, 1, 40) || '...' || ' [–ü–æ–¥—Å–∫–∞–∑–∫–∞: ' || CASE WHEN hint_text IS NOT NULL AND hint_text != '' THEN '–î–ê' ELSE '–ù–ï–¢' END || ']' FROM {table_name} WHERE is_active = 1 ORDER BY question_number LIMIT 3;\"")
        if code == 0:
            examples = out.strip().split('\n')
            for example in examples:
                if example.strip():
                    print(f"   {example}")
        
        print()
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ systemd —Å–µ—Ä–≤–∏—Å"""
        print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ systemd...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã –µ—Å—Ç—å
        print("   –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ GrantService...")
        code, out, err = self.run_command("systemctl list-units --type=service | grep -i grant")
        if code == 0 and out.strip():
            print(f"   –ù–∞–π–¥–µ–Ω—ã —Å–µ—Ä–≤–∏—Å—ã: {out.strip()}")
        
        # –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        service_names = ["grantservice", "grant-service", "telegram-bot", "grantservice-bot"]
        
        for service_name in service_names:
            print(f"   –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å: {service_name}")
            code, out, err = self.run_command(f"systemctl status {service_name}")
            
            if code == 0:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {service_name}")
                
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
                print(f"   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å {service_name}...")
                code, out, err = self.run_command(f"systemctl restart {service_name}")
                
                if code == 0:
                    print(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
                    time.sleep(3)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                    code, out, err = self.run_command(f"systemctl is-active {service_name}")
                    if code == 0 and "active" in out:
                        print(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –∞–∫—Ç–∏–≤–µ–Ω")
                        return True
                    else:
                        print(f"‚ùå –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω: {out}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {err}")
        
        # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        print("   –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        code, out, err = self.run_command("pkill -f 'python.*main.py'")
        time.sleep(3)
        
        code, out, err = self.run_command("cd /var/GrantService/telegram-bot && nohup python3 main.py > /dev/null 2>&1 &")
        time.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        code, out, err = self.run_command("pgrep -f main.py")
        if code == 0 and out.strip():
            print(f"‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é, PID: {out.strip()}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ"""
        if self.client:
            self.client.close()
            print("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")

def main():
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host = "5.35.88.251"
    username = "root"
    
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GrantService")
    print("=" * 60)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print("1. –ü–æ –ø–∞—Ä–æ–ª—é")
    print("2. –ü–æ SSH –∫–ª—é—á—É")
    print("3. –ë–µ–∑ –ø–∞—Ä–æ–ª—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–æ—Å—Ç—É–ø)")
    
    choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
    
    checker = None
    
    if choice == "1":
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
        checker = RemoteDBChecker(host, username, password=password)
    elif choice == "2":
        key_path = input("–ü—É—Ç—å –∫ SSH –∫–ª—é—á—É (Enter –¥–ª—è ~/.ssh/id_rsa): ").strip()
        if not key_path:
            key_path = None  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        checker = RemoteDBChecker(host, username, key_file=key_path)
    elif choice == "3":
        checker = RemoteDBChecker(host, username)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    try:
        if checker.connect():
            checker.check_database()
            
            print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:")
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            print("‚ùå –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏ (19 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 15)")
            print("üí° –ù—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            restart = input("\nü§ñ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö? (Y/n): ").lower()
            if restart != 'n':
                print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
                checker.restart_bot()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if checker:
            checker.disconnect()

if __name__ == "__main__":
    main()