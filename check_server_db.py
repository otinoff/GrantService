#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import os
import sqlite3
import json
from datetime import datetime

def check_database_details():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "data/grant_service.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        print("=" * 60)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        stat = os.stat(db_path)
        mod_time = datetime.fromtimestamp(stat.st_mtime)
        size_mb = stat.st_size / (1024 * 1024)
        
        print(f"üìÅ –§–∞–π–ª –ë–î:")
        print(f"  - –ü—É—Ç—å: {os.path.abspath(db_path)}")
        print(f"  - –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
        print(f"  - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {mod_time}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = [row[0] for row in cursor.fetchall()]
        print(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î: {', '.join(tables)}")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        if 'questions' in tables:
            print("‚ùì –ê–ù–ê–õ–ò–ó –í–û–ü–†–û–°–û–í:")
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            cursor.execute("SELECT COUNT(*) FROM questions")
            total_questions = cursor.fetchone()[0]
            print(f"  - –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            cursor.execute("SELECT COUNT(*) FROM questions WHERE is_active = 1")
            active_questions = cursor.fetchone()[0]
            print(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {active_questions}")
            
            # –í–æ–ø—Ä–æ—Å—ã —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
            cursor.execute("SELECT COUNT(*) FROM questions WHERE hint_text IS NOT NULL AND hint_text != ''")
            questions_with_hints = cursor.fetchone()[0]
            print(f"  - –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {questions_with_hints}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã questions
            cursor.execute("PRAGMA table_info(questions)")
            columns = [row[1] for row in cursor.fetchall()]
            print(f"  - –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(columns)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            cursor.execute("""
                SELECT question_number, question_text, hint_text, is_active 
                FROM questions 
                WHERE is_active = 1 
                ORDER BY question_number 
                LIMIT 5
            """)
            active_sample = cursor.fetchall()
            
            print("  - –ü–µ—Ä–≤—ã–µ 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
            for q_num, q_text, hint, active in active_sample:
                hint_status = "‚úÖ" if hint else "‚ùå"
                print(f"    {q_num}. {q_text[:50]}... | –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_status}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏
        if 'grant_applications' in tables:
            print("üìã –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö:")
            cursor.execute("SELECT COUNT(*) FROM grant_applications")
            total_apps = cursor.fetchone()[0]
            print(f"  - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_apps}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
            cursor.execute("""
                SELECT application_number, title, created_at 
                FROM grant_applications 
                ORDER BY created_at DESC 
                LIMIT 3
            """)
            recent_apps = cursor.fetchall()
            print("  - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:")
            for app_num, title, created in recent_apps:
                print(f"    {app_num}: {title} ({created})")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'users' in tables:
            print("üë• –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:")
            cursor.execute("SELECT COUNT(*) FROM users")
            total_users = cursor.fetchone()[0]
            print(f"  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
            print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏–∏
        if 'sessions' in tables:
            print("üîÑ –ê–ù–ê–õ–ò–ó –°–ï–°–°–ò–ô:")
            cursor.execute("SELECT COUNT(*) FROM sessions")
            total_sessions = cursor.fetchone()[0]
            print(f"  - –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}")
            
            cursor.execute("SELECT COUNT(*) FROM sessions WHERE status = 'completed'")
            completed_sessions = cursor.fetchone()[0]
            print(f"  - –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {completed_sessions}")
            print()
        
        conn.close()
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    check_database_details()