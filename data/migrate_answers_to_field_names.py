#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ sessions.interview_data/collected_data —Å –∫–ª—é—á–µ–π –ø–æ –Ω–æ–º–µ—Ä—É –≤–æ–ø—Ä–æ—Å–∞
–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ field_name. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–µ–Ω (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–µ–Ω).
"""

import os
import json
import sqlite3
from datetime import datetime

DB_PATH = "/var/GrantService/data/grantservice.db"


def fetch_question_number_to_field_map(conn: sqlite3.Connection) -> dict:
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT question_number, field_name
        FROM interview_questions
        WHERE is_active = 1
        ORDER BY question_number
        """
    )
    mapping: dict[int, str] = {}
    for qn, field in cursor.fetchall():
        if field:
            mapping[int(qn)] = str(field)
    return mapping


def migrate_sessions(conn: sqlite3.Connection, qn_to_field: dict) -> int:
    cursor = conn.cursor()
    cursor.execute(
        """
        SELECT id, interview_data, collected_data
        FROM sessions
        ORDER BY id
        """
    )
    rows = cursor.fetchall()

    updated_count = 0
    now_iso = datetime.now().isoformat()

    for session_id, interview_data, collected_data in rows:
        changed = False

        def migrate_payload(payload_str: str) -> tuple[str, bool]:
            nonlocal changed
            if not payload_str:
                return payload_str, changed
            try:
                data = json.loads(payload_str)
                if not isinstance(data, dict):
                    return payload_str, changed
            except Exception:
                return payload_str, changed

            new_data: dict[str, str] = {}
            # –°–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ field_name –∫–∞–∫ –µ—Å—Ç—å
            for key, value in data.items():
                if isinstance(key, str) and not key.isdigit():
                    new_data[key] = value

            # –ü–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–ª—é—á–∏ ‚Üí field_name
            for key, value in data.items():
                qn = None
                if isinstance(key, int):
                    qn = key
                elif isinstance(key, str) and key.isdigit():
                    try:
                        qn = int(key)
                    except Exception:
                        qn = None

                if qn is not None and qn in qn_to_field:
                    field_name = qn_to_field[qn]
                    # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ field_name
                    if field_name not in new_data or (not new_data[field_name] and value):
                        new_data[field_name] = value

            # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            # –ï—Å–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–ª—é—á–∞—Ö –±—ã–ª–∏ —Ç–æ–ª—å–∫–æ field_name, –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            if new_data != data:
                changed = True
            return json.dumps(new_data, ensure_ascii=False), changed

        new_interview, changed = migrate_payload(interview_data)
        new_collected, changed = migrate_payload(collected_data)

        if changed:
            cursor.execute(
                """
                UPDATE sessions
                SET interview_data = ?, collected_data = ?, last_activity = ?
                WHERE id = ?
                """,
                (new_interview, new_collected, now_iso, session_id),
            )
            updated_count += 1

    conn.commit()
    return updated_count


def main() -> int:
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ë–î: {DB_PATH}")
        return 1

    try:
        with sqlite3.connect(DB_PATH) as conn:
            print("üîç –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç—É –≤–æ–ø—Ä–æ—Å ‚Üí field_name...")
            qn_to_field = fetch_question_number_to_field_map(conn)
            if not qn_to_field:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                return 0

            print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(qn_to_field)}")
            print("üîÅ –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–π...")
            updated = migrate_sessions(conn, qn_to_field)
            print(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—Å–∏–π: {updated}")
            return 0
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 2


if __name__ == "__main__":
    raise SystemExit(main())

