#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GrantService
–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import sqlite3
import os
import sys
from datetime import datetime

def upgrade_database():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "/var/GrantService/data/grantservice.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ sessions
        cursor.execute("PRAGMA table_info(sessions)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É sessions
        new_columns = [
            ('progress_percentage', 'INTEGER DEFAULT 0'),
            ('questions_answered', 'INTEGER DEFAULT 0'),
            ('total_questions', 'INTEGER DEFAULT 24'),
            ('last_question_number', 'INTEGER DEFAULT 1'),
            ('answers_data', 'TEXT'),
            ('session_duration_minutes', 'INTEGER DEFAULT 0'),
            ('completion_status', 'VARCHAR(20) DEFAULT "in_progress"')
        ]
        
        for column_name, column_type in new_columns:
            if column_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE sessions ADD COLUMN {column_name} {column_type}")
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {column_name}")
                except sqlite3.OperationalError as e:
                    print(f"‚ö†Ô∏è –ü–æ–ª–µ {column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_answers
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_answers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_id INTEGER NOT NULL,
                question_id INTEGER NOT NULL,
                answer_text TEXT NOT NULL,
                answer_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                validation_status VARCHAR(20) DEFAULT 'valid',
                FOREIGN KEY (session_id) REFERENCES sessions(id),
                FOREIGN KEY (question_id) REFERENCES interview_questions(id)
            )
        """)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_answers —Å–æ–∑–¥–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–±–æ—Ç—ã
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_answers_session ON user_answers(session_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_user_answers_question ON user_answers(question_id)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_sessions_progress ON sessions(progress_percentage)")
        cursor.execute("CREATE INDEX IF NOT EXISTS idx_sessions_status ON sessions(completion_status)")
        print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ—Å—Å–∏–∏
        cursor.execute("""
            UPDATE sessions 
            SET completion_status = CASE 
                WHEN status = 'completed' THEN 'completed'
                ELSE 'in_progress'
            END
            WHERE completion_status IS NULL
        """)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Å—Å–∏–π
        cursor.execute("""
            UPDATE sessions 
            SET questions_answered = (
                SELECT COUNT(*) 
                FROM user_answers ua 
                WHERE ua.session_id = sessions.id
            )
        """)
        
        cursor.execute("""
            UPDATE sessions 
            SET progress_percentage = CASE 
                WHEN total_questions > 0 THEN (questions_answered * 100) / total_questions
                ELSE 0
            END
        """)
        
        print("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
        conn.commit()
        conn.close()
        
        print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def show_database_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "/var/GrantService/data/grantservice.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –î–ê–ù–ù–´–•:")
        print("=" * 50)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ sessions
        cursor.execute("PRAGMA table_info(sessions)")
        columns = cursor.fetchall()
        print(f"\nüìã –¢–∞–±–ª–∏—Ü–∞ 'sessions' ({len(columns)} –ø–æ–ª–µ–π):")
        for column in columns:
            print(f"  ‚Ä¢ {column[1]} ({column[2]}) - {column[3]}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ user_answers
        cursor.execute("PRAGMA table_info(user_answers)")
        columns = cursor.fetchall()
        print(f"\nüìù –¢–∞–±–ª–∏—Ü–∞ 'user_answers' ({len(columns)} –ø–æ–ª–µ–π):")
        for column in columns:
            print(f"  ‚Ä¢ {column[1]} ({column[2]}) - {column[3]}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM sessions")
        sessions_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM user_answers")
        answers_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"  ‚Ä¢ –°–µ—Å—Å–∏–π: {sessions_count}")
        print(f"  ‚Ä¢ –û—Ç–≤–µ—Ç–æ–≤: {answers_count}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    print("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö GrantService")
    print("=" * 50)
    
    if upgrade_database():
        show_database_info()
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ") 