#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é GrantService –≤ Qdrant
–ü–∞—Ä–æ–ª–∏, API keys, –∫–æ–º–∞–Ω–¥—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
"""

import sys
from pathlib import Path
import uuid

# –ü—É—Ç–∏
project_root = Path(__file__).parent.parent.parent.parent.parent / "GrantService"
sys.path.insert(0, str(project_root))

from qdrant_client import QdrantClient
from sentence_transformers import SentenceTransformer

def add_tech_docs():
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"""

    # Initialize
    print("üîå Connecting to Qdrant...")
    client = QdrantClient(host="5.35.88.251", port=6333)

    print("ü§ñ Loading embedding model...")
    model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')

    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    documents = [
        # ===== POSTGRESQL =====
        {
            "text": """
PostgreSQL Database - GrantService

PRODUCTION (5.35.88.251):
Host: 5.35.88.251
Port: 5434
Database: grantservice
User: grantservice
Password: jPsGn%Nt%q#THnUB&&cqo*1Q

–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
psql -h 5.35.88.251 -p 5434 -U grantservice -d grantservice

Environment variables:
export PGHOST=5.35.88.251
export PGPORT=5434
export PGDATABASE=grantservice
export PGUSER=grantservice
export PGPASSWORD='jPsGn%Nt%q#THnUB&&cqo*1Q'

Python:
import psycopg2
conn = psycopg2.connect(
    host='5.35.88.251',
    port=5434,
    database='grantservice',
    user='grantservice',
    password='jPsGn%Nt%q#THnUB&&cqo*1Q'
)

–õ–û–ö–ê–õ–¨–ù–û (Windows):
PostgreSQL 18.0
Path: C:\\Program Files\\PostgreSQL\\18
psql: C:\\Program Files\\PostgreSQL\\18\\bin\\psql.exe
            """,
            "title": "PostgreSQL - –î–æ—Å—Ç—É–ø—ã –∏ –ø–∞—Ä–æ–ª–∏",
            "category": "database",
            "importance": "critical",
            "tags": ["postgresql", "database", "password", "credentials"]
        },

        # ===== API KEYS =====
        {
            "text": """
API Keys - GrantService

GIGACHAT (–°–±–µ—Ä):
API Key: OTY3MzMwZDQtZTVhYi00ZmNhLWE4ZTgtMTJhN2Q1MTBkMjQ5Ojk4MmM0NjIyLTU3OWQtNDYxNi04YzVlLWIyMTY3YTZlNzI0NQ==
Model: GigaChat-Max (–¥–ª—è –±—É—Ç–∫—ç–º–ø–∞)
–¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã: 2,000,000 (–∏–∑ –ø–∞–∫–µ—Ç–∞)
Dashboard: https://developers.sber.ru/

Environment:
export GIGACHAT_API_KEY="OTY3MzMwZDQtZTVhYi00ZmNhLWE4ZTgtMTJhN2Q1MTBkMjQ5Ojk4MmM0NjIyLTU3OWQtNDYxNi04YzVlLWIyMTY3YTZlNzI0NQ=="

PERPLEXITY (WebSearch):
API Key: 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
Usage: Researcher Agent (27 –∑–∞–ø—Ä–æ—Å–æ–≤)

Environment:
export PERPLEXITY_API_KEY="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"

TELEGRAM BOT:
Token: 7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo
            """,
            "title": "API Keys - GigaChat, Perplexity, Telegram",
            "category": "credentials",
            "importance": "critical",
            "tags": ["api", "keys", "gigachat", "perplexity", "telegram"]
        },

        # ===== –ö–û–ú–ê–ù–î–´ –ó–ê–ü–£–°–ö–ê =====
        {
            "text": """
–ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ - GrantService

PRODUCTION (5.35.88.251):

SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
ssh -i "C:\\Users\\–ê–Ω–¥—Ä–µ–π\\.ssh\\id_rsa" root@5.35.88.251

Telegram Bot:
systemctl status grantservice-bot
systemctl restart grantservice-bot
systemctl stop grantservice-bot
systemctl start grantservice-bot

–õ–æ–≥–∏:
journalctl -u grantservice-bot -f
tail -f /var/GrantService/logs/bot.log

Web Admin:
systemctl status grantservice-admin
cd /var/GrantService/web-admin
streamlit run main_admin.py

–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:
ps aux | grep python
ps aux | grep grantservice

–õ–û–ö–ê–õ–¨–ù–û (Windows):

Telegram Bot:
cd C:\\SnowWhiteAI\\GrantService\\telegram-bot
python main.py

Web Admin:
cd C:\\SnowWhiteAI\\GrantService\\web-admin
streamlit run main_admin.py

E2E Test:
cd C:\\SnowWhiteAI\\GrantService_Project\\01_Projects\\2025-10-20_Bootcamp_GrantService\\scripts
python run_e2e_local_windows.py
            """,
            "title": "–ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞ - Production –∏ Local",
            "category": "commands",
            "importance": "high",
            "tags": ["commands", "systemctl", "ssh", "bot", "admin"]
        },

        # ===== –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê =====
        {
            "text": """
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ - GrantService

PRODUCTION (/var/GrantService):
/var/GrantService/
‚îú‚îÄ‚îÄ agents/
‚îÇ   ‚îú‚îÄ‚îÄ researcher_agent_v2.py      ‚Üê 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ writer_agent_v2.py          ‚Üê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GigaChat
‚îÇ   ‚îú‚îÄ‚îÄ interactive_interviewer_agent_v2.py
‚îÇ   ‚îî‚îÄ‚îÄ auditor_agent_v2.py
‚îú‚îÄ‚îÄ telegram-bot/
‚îÇ   ‚îú‚îÄ‚îÄ main.py                     ‚Üê Telegram bot entry point
‚îÇ   ‚îî‚îÄ‚îÄ handlers/
‚îú‚îÄ‚îÄ web-admin/
‚îÇ   ‚îú‚îÄ‚îÄ main_admin.py               ‚Üê Streamlit admin panel
‚îÇ   ‚îî‚îÄ‚îÄ pages/
‚îú‚îÄ‚îÄ shared/
‚îÇ   ‚îú‚îÄ‚îÄ llm/                        ‚Üê UnifiedLLMClient
‚îÇ   ‚îî‚îÄ‚îÄ database/                   ‚Üê DB utils
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îî‚îÄ‚îÄ database/                   ‚Üê Database models
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ .env                        ‚Üê Environment variables
‚îî‚îÄ‚îÄ tests/
    ‚îú‚îÄ‚îÄ run_e2e_simple.py           ‚Üê E2E —Ç–µ—Å—Ç
    ‚îî‚îÄ‚îÄ run_e2e_with_env.sh

–õ–û–ö–ê–õ–¨–ù–û (C:\\SnowWhiteAI\\GrantService):
–¢–∞–∫–∞—è –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ dev —Ñ–∞–π–ª—ã

–ü–†–û–ï–ö–¢ –ë–£–¢–ö–≠–ú–ü–ê:
C:\\SnowWhiteAI\\GrantService_Project\\01_Projects\\2025-10-20_Bootcamp_GrantService/
‚îú‚îÄ‚îÄ test_data/
‚îÇ   ‚îî‚îÄ‚îÄ natalia_anketa_20251012.json
‚îú‚îÄ‚îÄ scripts/
‚îÇ   ‚îú‚îÄ‚îÄ run_e2e_local_windows.py
‚îÇ   ‚îú‚îÄ‚îÄ search_bootcamp.py
‚îÇ   ‚îî‚îÄ‚îÄ add_tech_docs.py             ‚Üê –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç
‚îú‚îÄ‚îÄ test_results/
‚îî‚îÄ‚îÄ .env.local
            """,
            "title": "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ - –§–∞–π–ª—ã –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏",
            "category": "structure",
            "importance": "high",
            "tags": ["structure", "files", "directories", "project"]
        },

        # ===== QDRANT =====
        {
            "text": """
Qdrant Vector Database - GrantService

SERVER:
Host: 5.35.88.251
Port: 6333
Web UI: http://5.35.88.251:6333/dashboard

–ö–û–õ–õ–ï–ö–¶–ò–ò:

1. sber500_bootcamp (15 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
   - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—É—Ç–∫—ç–º–ø–µ
   - –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤
   - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¢–û–ü50
   - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è

2. grantservice_tech_docs (–Ω–æ–≤–∞—è)
   - –ü–∞—Ä–æ–ª–∏ –∏ –¥–æ—Å—Ç—É–ø—ã
   - API keys
   - –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
   - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞

Python –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
from qdrant_client import QdrantClient
client = QdrantClient(host="5.35.88.251", port=6333)

–ü–æ–∏—Å–∫ –ø–æ –±—É—Ç–∫—ç–º–ø—É:
python scripts/search_bootcamp.py "—Ç–æ–∫–µ–Ω—ã gigachat"

–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
python scripts/add_tech_docs.py
            """,
            "title": "Qdrant - –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "category": "qdrant",
            "importance": "high",
            "tags": ["qdrant", "vector", "database", "search"]
        },

        # ===== –ò–¢–ï–†–ê–¶–ò–ò =====
        {
            "text": """
–ò—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ - GrantService

–¢–ï–ö–£–©–ê–Ø: –ò—Ç–µ—Ä–∞—Ü–∏—è 27
Status: –í –ø—Ä–æ—Ü–µ—Å—Å–µ
–ó–∞–¥–∞—á–∞: E2E —Ç–µ—Å—Ç —Å GigaChat-Max –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞

–°–õ–ï–î–£–Æ–©–ê–Ø: –ò—Ç–µ—Ä–∞—Ü–∏—è 28
–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∞

–ü–û–°–õ–ï–î–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–ù–´–ï:

Iteration 26.3 (2025-10-23):
- Instant Interview Start
- Performance: -99% latency
- User feedback: "—Å—É–ø–µ—Ä –º–µ–≥–∞!!!"
- Deploy 5 –Ω–∞ production

Iteration 26 (2025-10-20):
- Interview V2 improvements
- UX enhancements

Iteration 25 (2025-10-15):
- Researcher Agent V2
- 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

–ò–°–¢–û–†–ò–Ø:
.claude/README.md                    ‚Üê –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
Strategy/02_Completed_Iterations/    ‚Üê –ê—Ä—Ö–∏–≤
Strategy/03_Planned_Sessions/        ‚Üê Backlog (1000+)
            """,
            "title": "–ò—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ - –ò—Å—Ç–æ—Ä–∏—è –∏ –ø–ª–∞–Ω—ã",
            "category": "iterations",
            "importance": "medium",
            "tags": ["iterations", "history", "planning", "versions"]
        },

        # ===== –ë–£–¢–ö–≠–ú–ü SBER500 =====
        {
            "text": """
Sber500 Bootcamp - –ö–ª—é—á–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

TARGET: –ü–æ–ø–∞—Å—Ç—å –≤ –¢–û–ü50

–¢–û–ö–ï–ù–´:
- –î–æ—Å—Ç—É–ø–Ω–æ: 6,000,000 (GigaChat)
- –ú–æ–¥–µ–ª—å: GigaChat-Max (2M –∏–∑ –ø–∞–∫–µ—Ç–∞)
- Target –¥–ª—è –Ω–µ–¥–µ–ª–∏: 1,000,000
- –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞: ~18,500 —Ç–æ–∫–µ–Ω–æ–≤
- –ù—É–∂–Ω–æ: ~54 –∑–∞—è–≤–∫–∏

DEADLINE: 2025-10-30 (—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é!)

–ö–†–ò–¢–ï–†–ò–ò –û–¢–ë–û–†–ê:
1. –û–±—ä—ë–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
2. –ó—Ä–µ–ª–æ—Å—Ç—å –∫–µ–π—Å–∞
3. –ö–∞—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
4. –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:
‚úì Real use case (production bot)
‚úì Multi-agent (4 –∞–≥–µ–Ω—Ç–∞)
‚úì High consumption (50-80k –Ω–∞ –∑–∞—è–≤–∫—É)
‚úì Social impact
‚úì Scalability

–ü–õ–ê–ù:
Week 1: 1M —Ç–æ–∫–µ–Ω–æ–≤ (intensive testing)
Week 2-3: 2M —Ç–æ–∫–µ–Ω–æ–≤ (scale)
Week 4: 1M —Ç–æ–∫–µ–Ω–æ–≤ (quality demos)

–ü–û–†–¢–ê–õ: https://sber500.2080vc.io
LOGIN: otinoff@gmail.com

–î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –í QDRANT:
–ö–æ–ª–ª–µ–∫—Ü–∏—è: sber500_bootcamp
–ü–æ–∏—Å–∫: python scripts/search_bootcamp.py
            """,
            "title": "Sber500 Bootcamp - –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ —Ü–µ–ª–∏",
            "category": "bootcamp",
            "importance": "critical",
            "tags": ["bootcamp", "sber500", "gigachat", "strategy", "top50"]
        }
    ]

    # –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
    print(f"\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(documents)} —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...\n")

    for i, doc in enumerate(documents, 1):
        # Generate embedding
        embedding = model.encode(doc["text"]).tolist()

        # Upload to Qdrant
        client.upsert(
            collection_name="grantservice_tech_docs",
            points=[
                {
                    "id": str(uuid.uuid4()),
                    "vector": embedding,
                    "payload": doc
                }
            ]
        )

        importance_emoji = {
            "critical": "üî•",
            "high": "‚ö°",
            "medium": "üìå",
            "low": "üìÑ"
        }.get(doc.get("importance", "medium"), "üìÑ")

        print(f"{i}. {importance_emoji} {doc['title']}")
        print(f"   Category: {doc['category']} | Tags: {', '.join(doc.get('tags', []))}")
        print()

    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

    # Get collection info
    collection_info = client.get_collection(collection_name="grantservice_tech_docs")
    print(f"\nüìä –ö–æ–ª–ª–µ–∫—Ü–∏—è 'grantservice_tech_docs' —Å–æ–¥–µ—Ä–∂–∏—Ç {collection_info.points_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    # –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞
    print("\n" + "="*80)
    print("üîç –ü–†–ò–ú–ï–†–´ –ü–û–ò–°–ö–ê")
    print("="*80)
    print("python search_tech_docs.py '–ø–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'")
    print("python search_tech_docs.py 'api key gigachat'")
    print("python search_tech_docs.py '–∫–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'")
    print("python search_tech_docs.py 'postgresql –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'")
    print("python search_tech_docs.py '–±—É—Ç–∫—ç–º–ø deadline'")
    print("="*80)

if __name__ == "__main__":
    add_tech_docs()
