#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
E2E Test –¥–ª—è Sber500 Bootcamp —Å GigaChat-Max

–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª:
1. Researcher Agent (WebSearch —á–µ—Ä–µ–∑ Perplexity)
2. Writer Agent (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GigaChat-Max)
3. –°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞

–ê–Ω–∫–µ—Ç–∞: –ù–∞—Ç–∞–ª—å—è (#AN-20251012-Natalia_bruzzzz-001)
–ü—Ä–æ–µ–∫—Ç: –°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞ - —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ-–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ
"""

import sys
import os
from pathlib import Path
import asyncio
import json
import time
from datetime import datetime

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent.parent.parent / "GrantService"
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

# –ò–º–ø–æ—Ä—Ç—ã
from agents.researcher_agent_v2 import ResearcherAgentV2
from agents.writer_agent_v2 import WriterAgentV2
from shared.database.db_utils import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞
ANKETA_ID = "#AN-20251012-Natalia_bruzzzz-001"
GIGACHAT_MODEL = "GigaChat-Max"  # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú MAX –¥–ª—è –ø–∞–∫–µ—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤!
LLM_PROVIDER = "gigachat"

# –ú–µ—Ç—Ä–∏–∫–∏
metrics = {
    "start_time": None,
    "end_time": None,
    "anketa_id": ANKETA_ID,
    "model": GIGACHAT_MODEL,
    "stages": {}
}

def log(message: str, emoji: str = "üìå"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{emoji} [{timestamp}] {message}")

async def run_researcher(db, anketa_id: str):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å Researcher Agent

    NOTE: Researcher –∏—Å–ø–æ–ª—å–∑—É–µ—Ç WebSearch (Perplexity), –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat-Max
    """
    log("–ó–∞–ø—É—Å–∫ Researcher Agent (WebSearch —á–µ—Ä–µ–∑ Perplexity)", "üîç")
    start = time.time()

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ (websearch —á–µ—Ä–µ–∑ Perplexity)
        researcher = ResearcherAgentV2(
            db=db,
            llm_provider="claude_code",  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ)
            websearch_provider="perplexity"
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        log(f"–ò—Å—Å–ª–µ–¥—É–µ–º –∞–Ω–∫–µ—Ç—É: {anketa_id}", "üìä")
        result = await researcher.run_research(anketa_id)

        elapsed = time.time() - start

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics["stages"]["researcher"] = {
            "status": "success" if result else "failed",
            "duration_seconds": round(elapsed, 2),
            "queries_count": 27,  # 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            "provider": "Perplexity API"
        }

        log(f"Researcher –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}s", "‚úÖ")
        return result

    except Exception as e:
        elapsed = time.time() - start
        log(f"–û–®–ò–ë–ö–ê Researcher: {e}", "‚ùå")
        metrics["stages"]["researcher"] = {
            "status": "error",
            "duration_seconds": round(elapsed, 2),
            "error": str(e)
        }
        return None

async def run_writer(db, anketa_id: str):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å Writer Agent —Å GigaChat-Max

    üî• –≠–¢–û –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø GIGACHAT-MAX –¢–û–ö–ï–ù–û–í!
    """
    log(f"–ó–∞–ø—É—Å–∫ Writer Agent —Å {GIGACHAT_MODEL}", "‚úçÔ∏è")
    start = time.time()

    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å GigaChat-Max
        writer = WriterAgentV2(
            db=db,
            llm_provider=LLM_PROVIDER
        )

        # –í–ê–ñ–ù–û: –ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å –≤ UnifiedLLMClient
        if hasattr(writer, 'llm_client') and writer.llm_client:
            writer.llm_client.model = GIGACHAT_MODEL
            log(f"–ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {GIGACHAT_MODEL}", "üéØ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞—è–≤–∫–∏
        log(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è: {anketa_id}", "üìù")
        result = await writer.write_grant_application(anketa_id)

        elapsed = time.time() - start

        # –û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        if result and 'application_text' in result:
            text_length = len(result['application_text'])
            estimated_tokens = text_length * 1.3  # ~1.3 —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Å–∏–º–≤–æ–ª –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
        else:
            estimated_tokens = 0

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics["stages"]["writer"] = {
            "status": "success" if result else "failed",
            "duration_seconds": round(elapsed, 2),
            "estimated_tokens": int(estimated_tokens),
            "provider": LLM_PROVIDER,
            "model": GIGACHAT_MODEL,
            "application_length": text_length if result else 0
        }

        log(f"Writer –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}s", "‚úÖ")
        log(f"–û—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: ~{int(estimated_tokens):,}", "üí∞")
        return result

    except Exception as e:
        elapsed = time.time() - start
        log(f"–û–®–ò–ë–ö–ê Writer: {e}", "‚ùå")
        metrics["stages"]["writer"] = {
            "status": "error",
            "duration_seconds": round(elapsed, 2),
            "error": str(e)
        }
        return None

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è E2E —Ç–µ—Å—Ç–∞"""
    log("="*80, "")
    log("E2E TEST –¥–ª—è Sber500 Bootcamp", "üöÄ")
    log("="*80, "")

    metrics["start_time"] = datetime.now().isoformat()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...", "üîå")
    try:
        db = DatabaseManager()
        log("PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω", "‚úÖ")
    except Exception as e:
        log(f"–û–®–ò–ë–ö–ê –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}", "‚ùå")
        return

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–∫–µ—Ç–µ
    log(f"–ê–Ω–∫–µ—Ç–∞: {ANKETA_ID}", "üìã")
    log(f"–ü—Ä–æ–µ–∫—Ç: –°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞ - —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ-–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ", "üéØ")
    log(f"–ú–æ–¥–µ–ª—å: {GIGACHAT_MODEL} (–ø–∞–∫–µ—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã!)", "üî•")
    log("")

    # –≠–¢–ê–ü 1: Research (WebSearch)
    log("--- –≠–¢–ê–ü 1: –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï ---", "üîç")
    research_result = await run_researcher(db, ANKETA_ID)

    if not research_result:
        log("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–µ—Ä—ã–≤–∞–µ–º", "‚ùå")
        return

    log("")

    # –≠–¢–ê–ü 2: Write (GigaChat-Max)
    log("--- –≠–¢–ê–ü 2: –ù–ê–ü–ò–°–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ---", "‚úçÔ∏è")
    write_result = await run_writer(db, ANKETA_ID)

    if not write_result:
        log("–ó–∞—è–≤–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞", "‚ùå")

    log("")

    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫
    metrics["end_time"] = datetime.now().isoformat()
    metrics["total_duration_seconds"] = sum(
        stage.get("duration_seconds", 0)
        for stage in metrics["stages"].values()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞
    output_dir = Path(__file__).parent.parent / "test_results"
    output_dir.mkdir(exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    metrics_file = output_dir / f"e2e_metrics_{timestamp}.json"

    with open(metrics_file, 'w', encoding='utf-8') as f:
        json.dump(metrics, f, ensure_ascii=False, indent=2)

    log("="*80, "")
    log("–û–¢–ß–ï–¢ –î–õ–Ø –ë–£–¢–ö–≠–ú–ü–ê", "üìä")
    log("="*80, "")
    log(f"–ú–æ–¥–µ–ª—å: {GIGACHAT_MODEL}", "üéØ")
    log(f"–ê–Ω–∫–µ—Ç–∞: {ANKETA_ID}", "üìã")

    if "researcher" in metrics["stages"]:
        r = metrics["stages"]["researcher"]
        log(f"Researcher: {r['status']} ({r['duration_seconds']}s)", "üîç")

    if "writer" in metrics["stages"]:
        w = metrics["stages"]["writer"]
        log(f"Writer: {w['status']} ({w['duration_seconds']}s)", "‚úçÔ∏è")
        if 'estimated_tokens' in w:
            log(f"–¢–æ–∫–µ–Ω—ã GigaChat-Max: ~{w['estimated_tokens']:,}", "üí∞")

    log(f"–û–±—â–µ–µ –≤—Ä–µ–º—è: {metrics['total_duration_seconds']:.1f}s", "‚è±Ô∏è")
    log(f"–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {metrics_file}", "üíæ")
    log("="*80, "")

    log("E2E Test –∑–∞–≤–µ—Ä—à–µ–Ω!", "‚úÖ")

if __name__ == "__main__":
    asyncio.run(main())
