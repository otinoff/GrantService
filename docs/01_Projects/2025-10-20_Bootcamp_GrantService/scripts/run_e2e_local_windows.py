#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–õ–æ–∫–∞–ª—å–Ω—ã–π E2E Test –¥–ª—è Windows - Sber500 Bootcamp

–ó–∞–ø—É—Å–∫–∞–µ—Ç:
1. Researcher V2 (27 –∑–∞–ø—Ä–æ—Å–æ–≤)
2. Writer V2 —Å GigaChat-Max
3. –°–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞

–ê–Ω–∫–µ—Ç–∞: –ù–∞—Ç–∞–ª—å—è (#AN-20251012-Natalia_bruzzzz-001)
"""

import sys
import os
from pathlib import Path
import asyncio
import json
import time
from datetime import datetime

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É (Windows)
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

print(f"üìÅ Project root: {project_root}", flush=True)

# –ó–∞–≥—Ä—É–∑–∫–∞ .env.local –¥–ª—è credentials
env_file = Path(__file__).parent.parent / ".env.local"
if env_file.exists():
    print(f"üîê Loading credentials from: {env_file}", flush=True)
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()
    print("‚úÖ Credentials loaded", flush=True)
else:
    print(f"‚ö†Ô∏è  .env.local not found: {env_file}", flush=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ANKETA_ID = "#AN-20251012-Natalia_bruzzzz-001"
GIGACHAT_MODEL = "GigaChat-2-Max"  # GigaChat 2.0 (second generation)
LLM_PROVIDER = "gigachat"

# –ü—É—Ç—å –∫ –∞–Ω–∫–µ—Ç–µ
ANKETA_FILE = Path(r"C:\SnowWhiteAI\GrantService_Project\01_Projects\2025-10-20_Bootcamp_GrantService\test_data\natalia_anketa_20251012.json")

# –ú–µ—Ç—Ä–∏–∫–∏
metrics = {
    "start_time": None,
    "end_time": None,
    "anketa_id": ANKETA_ID,
    "model": GIGACHAT_MODEL,
    "stages": {}
}

def log(message: str, emoji: str = "üìå"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{emoji} [{timestamp}] {message}", flush=True)

def log_request(stage: str, request_type: str, details: str = ""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    print(f"‚Üí [{timestamp}] [{stage}] {request_type}: {details}", flush=True)

def log_response(stage: str, response_type: str, details: str = "", success: bool = True):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    emoji = "‚úì" if success else "‚úó"
    print(f"‚Üê [{timestamp}] [{stage}] {emoji} {response_type}: {details}", flush=True)

def load_anketa():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏–∑ JSON"""
    log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã: {ANKETA_FILE}", "üìã")

    if not ANKETA_FILE.exists():
        log(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ANKETA_FILE}", "‚ùå")
        return None

    with open(ANKETA_FILE, 'r', encoding='utf-8') as f:
        anketa = json.load(f)

    log(f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {anketa.get('project_info', {}).get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...", "‚úÖ")
    return anketa

def check_credentials():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ credentials"""
    log("–ü—Ä–æ–≤–µ—Ä–∫–∞ credentials...", "üîë")

    required = {
        "GIGACHAT_API_KEY": "GigaChat API",
        "PERPLEXITY_API_KEY": "Perplexity API (–¥–ª—è Researcher)"
    }

    missing = []
    for env_var, name in required.items():
        if not os.getenv(env_var):
            missing.append(f"  ‚ùå {env_var} ({name})")
        else:
            log(f"  ‚úÖ {name}", "")

    if missing:
        log("–û–¢–°–£–¢–°–¢–í–£–Æ–¢ CREDENTIALS:", "‚ö†Ô∏è")
        for m in missing:
            print(m)
        log("", "")
        log("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", "üí°")
        log("  set GIGACHAT_API_KEY=<your_key>", "")
        log("  set PERPLEXITY_API_KEY=<your_key>", "")
        log("", "")
        log("–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª", "üí°")
        return False

    return True

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log("="*80, "")
    log("E2E TEST - Sber500 Bootcamp (–õ–æ–∫–∞–ª—å–Ω–æ)", "üöÄ")
    log("="*80, "")

    metrics["start_time"] = datetime.now().isoformat()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials
    if not check_credentials():
        log("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ credentials", "‚ö†Ô∏è")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã
    anketa = load_anketa()
    if not anketa:
        return

    log("", "")
    log("–ü–õ–ê–ù:", "üìù")
    log("  1. Researcher V2: 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (Perplexity)", "üîç")
    log("  2. Writer V2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ (GigaChat-Max)", "‚úçÔ∏è")
    log("  3. –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±—É—Ç–∫—ç–º–ø–∞", "üìä")
    log("", "")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î...", "üîå")
    os.environ['PGHOST'] = 'localhost'
    os.environ['PGPORT'] = '5432'
    os.environ['PGDATABASE'] = 'grantservice'
    os.environ['PGUSER'] = 'postgres'
    os.environ['PGPASSWORD'] = 'root'
    log("  ‚úÖ –ë–î: localhost:5432/grantservice", "")
    log("", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ DB instance
    from data.database import get_db
    db = get_db()
    log(f"‚úÖ Database instance created", "")
    log("", "")

    # STAGE 1: Researcher V2
    try:
        log("STAGE 1: Researcher V2", "üîç")
        log("-" * 80, "")
        stage_start = time.time()

        log_request("RESEARCHER", "INIT", "Creating ResearcherAgentV2 instance")
        from researcher_agent_v2 import ResearcherAgentV2
        researcher = ResearcherAgentV2(
            db=db,
            llm_provider='gigachat',  # GigaChat –¥–ª—è —Ç—Ä–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤!
            websearch_provider='gigachat'  # GigaChat –≤–º–µ—Å—Ç–æ Perplexity!
        )
        log_response("RESEARCHER", "INIT", "ResearcherAgentV2 created", success=True)

        log_request("RESEARCHER", "START", f"Anketa: {ANKETA_ID}, Queries: 27, Provider: GigaChat-2-Max")
        log(f"üöÄ –ó–∞–ø—É—Å–∫ 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ GigaChat-2-Max... (–±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤!)", "")

        result = await researcher.research_with_expert_prompts(ANKETA_ID)

        if result:
            log_response("RESEARCHER", "COMPLETE", f"27 queries completed", success=True)
        else:
            log_response("RESEARCHER", "COMPLETE", "Result is None or False", success=False)

        stage_duration = time.time() - stage_start

        metrics["stages"]["researcher"] = {
            "status": "success" if result else "failed",
            "duration_seconds": round(stage_duration, 2),
            "queries": 27,
            "provider": "GigaChat-2-Max",
            "tokens_used": "~27 requests x tokens"
        }

        log(f"‚úÖ Researcher –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {stage_duration:.1f} —Å–µ–∫—É–Ω–¥", "")
        log("", "")

    except Exception as e:
        log_response("RESEARCHER", "ERROR", str(e), success=False)
        log(f"‚ùå –û–®–ò–ë–ö–ê Researcher: {e}", "")
        import traceback
        print("\n" + "="*80, flush=True)
        print("RESEARCHER TRACEBACK:", flush=True)
        print("="*80, flush=True)
        traceback.print_exc()
        print("="*80 + "\n", flush=True)

        metrics["stages"]["researcher"] = {
            "status": "error",
            "error": str(e),
            "traceback": traceback.format_exc()
        }

    # STAGE 2: Writer V2
    try:
        log("STAGE 2: Writer V2 (GigaChat-2-Max)", "‚úçÔ∏è")
        log("-" * 80, "")
        stage_start = time.time()

        log_request("WRITER", "INIT", "Creating WriterAgentV2 instance")
        from writer_agent_v2 import WriterAgentV2
        writer = WriterAgentV2(
            db=db,
            llm_provider='gigachat'
        )
        log_response("WRITER", "INIT", "WriterAgentV2 created", success=True)

        # Prepare input_data for Writer V2
        input_data = {
            "anketa_id": ANKETA_ID,
            "user_answers": anketa.get("interview_data", {}),
            "selected_grant": {}
        }

        log_request("WRITER", "START", f"Anketa: {ANKETA_ID}, Model: {GIGACHAT_MODEL}")
        log(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GigaChat-2-Max...", "")

        result = await writer.write_application_async(input_data)

        if result:
            log_response("WRITER", "COMPLETE", f"Application generated", success=True)
        else:
            log_response("WRITER", "COMPLETE", "Result is None or False", success=False)

        stage_duration = time.time() - stage_start

        metrics["stages"]["writer"] = {
            "status": "success" if result else "failed",
            "duration_seconds": round(stage_duration, 2),
            "estimated_tokens": 18500,
            "model": GIGACHAT_MODEL
        }

        log(f"‚úÖ Writer –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {stage_duration:.1f} —Å–µ–∫—É–Ω–¥", "")
        log("", "")

    except Exception as e:
        log_response("WRITER", "ERROR", str(e), success=False)
        log(f"‚ùå –û–®–ò–ë–ö–ê Writer: {e}", "")
        import traceback
        print("\n" + "="*80, flush=True)
        print("WRITER TRACEBACK:", flush=True)
        print("="*80, flush=True)
        traceback.print_exc()
        print("="*80 + "\n", flush=True)

        metrics["stages"]["writer"] = {
            "status": "error",
            "error": str(e),
            "traceback": traceback.format_exc()
        }

    # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    metrics["end_time"] = datetime.now().isoformat()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    output_dir = Path(r"C:\SnowWhiteAI\GrantService_Project\01_Projects\2025-10-20_Bootcamp_GrantService\test_results")
    output_dir.mkdir(exist_ok=True)

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    metrics_file = output_dir / f"e2e_metrics_local_{timestamp}.json"

    with open(metrics_file, 'w', encoding='utf-8') as f:
        json.dump(metrics, f, ensure_ascii=False, indent=2)

    log("="*80, "")
    log("–ì–û–¢–û–í–û", "‚úÖ")
    log(f"–ú–µ—Ç—Ä–∏–∫–∏: {metrics_file}", "üíæ")
    log("="*80, "")

    log("", "")
    log("–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:", "üéØ")
    log("  1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—É—é)", "")
    log("  2. –ó–∞–ø—É—Å—Ç–∏—Ç—å Researcher (27 –∑–∞–ø—Ä–æ—Å–æ–≤)", "")
    log("  3. –ó–∞–ø—É—Å—Ç–∏—Ç—å Writer —Å GigaChat-Max", "")
    log("  4. –°–æ–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤", "")
    log("  5. –î–µ–ø–ª–æ–π 6 –Ω–∞ production", "")

if __name__ == "__main__":
    asyncio.run(main())
