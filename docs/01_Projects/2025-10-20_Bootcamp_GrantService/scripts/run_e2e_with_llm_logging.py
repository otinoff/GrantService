#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
E2E Test —Å –î–ï–¢–ê–õ–¨–ù–´–ú –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º LLM –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤/–æ—Ç–≤–µ—Ç–æ–≤
"""
import sys
import os
from pathlib import Path
import asyncio
import json
import time
from datetime import datetime

# Fix Windows console encoding
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ llm_logger
sys.path.insert(0, str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∑–∫–∞ .env.local
env_file = Path(__file__).parent.parent / ".env.local"
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ANKETA_ID = "#AN-20251012-Natalia_bruzzzz-001"
GIGACHAT_MODEL = "GigaChat-2-Max"

# –ü—É—Ç—å –∫ –∞–Ω–∫–µ—Ç–µ
ANKETA_FILE = Path(__file__).parent.parent / "test_data" / "natalia_anketa_20251012.json"

# Import LLM Logger
from llm_logger import get_llm_logger

def log(message: str, emoji: str = "üìå"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{emoji} [{timestamp}] {message}", flush=True)

def load_anketa():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã: {ANKETA_FILE}", "üìã")
    with open(ANKETA_FILE, 'r', encoding='utf-8') as f:
        anketa = json.load(f)
    log(f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {anketa.get('project_info', {}).get('name', '')[:50]}...", "‚úÖ")
    return anketa

# Monkey-patch UnifiedLLMClient –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def patch_unified_llm_client():
    """–ü–∞—Ç—á–∏–º UnifiedLLMClient —á—Ç–æ–±—ã –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã"""
    from llm.unified_llm_client import UnifiedLLMClient

    original_generate_gigachat = UnifiedLLMClient._generate_gigachat

    async def logged_generate_gigachat(self, prompt: str, temperature: float = None, max_tokens: int = None) -> str:
        """–û–±—ë—Ä—Ç–∫–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        llm_logger = get_llm_logger()

        llm_logger.log_request(
            agent="writer",
            stage="gigachat_call",
            prompt=prompt,
            model=self.model,
            temperature=temperature or self.temperature,
            max_tokens=max_tokens
        )

        try:
            response = await original_generate_gigachat(self, prompt, temperature, max_tokens)

            llm_logger.log_response(
                agent="writer",
                stage="gigachat_call",
                response=response,
                success=True
            )

            return response
        except Exception as e:
            llm_logger.log_error(
                agent="writer",
                stage="gigachat_call",
                error=str(e)
            )
            raise

    UnifiedLLMClient._generate_gigachat = logged_generate_gigachat
    log("‚úÖ UnifiedLLMClient patched –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "üîß")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log("="*80, "")
    log("E2E TEST - –° –î–ï–¢–ê–õ–¨–ù–´–ú LLM –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú", "üöÄ")
    log("="*80, "")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM Logger
    llm_logger = get_llm_logger()

    # –ü–∞—Ç—á–∏–º UnifiedLLMClient
    patch_unified_llm_client()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã
    anketa = load_anketa()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î...", "üîå")
    os.environ['PGHOST'] = 'localhost'
    os.environ['PGPORT'] = '5432'
    os.environ['PGDATABASE'] = 'grantservice'
    os.environ['PGUSER'] = 'postgres'
    os.environ['PGPASSWORD'] = 'root'
    log("  ‚úÖ –ë–î: localhost:5432/grantservice", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ DB instance
    from data.database import get_db
    db = get_db()
    log(f"‚úÖ Database instance created", "")

    log("", "")
    log("–ó–ê–ü–£–°–ö–ê–ï–ú –¢–û–õ–¨–ö–û WRITER (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM)", "‚úçÔ∏è")
    log("", "")

    # WRITER V2
    try:
        log("STAGE: Writer V2 (GigaChat-2-Max)", "‚úçÔ∏è")
        log("-" * 80, "")

        from writer_agent_v2 import WriterAgentV2
        writer = WriterAgentV2(
            db=db,
            llm_provider='gigachat'
        )

        input_data = {
            "anketa_id": ANKETA_ID,
            "user_answers": anketa.get("interview_data", {}),
            "selected_grant": {}
        }

        log(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GigaChat-2-Max...", "")
        log(f"   User answers length: {len(str(input_data['user_answers']))} chars", "")
        log("", "")

        result = await writer.write_application_async(input_data)

        if result:
            log(f"‚úÖ Writer –∑–∞–≤–µ—Ä—à—ë–Ω", "")
            log(f"   Application length: {len(str(result.get('application', '')))} chars", "")
        else:
            log(f"‚ùå Writer –≤–µ—Ä–Ω—É–ª None", "")

    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê Writer: {e}", "")
        import traceback
        traceback.print_exc()

    # SUMMARY
    log("", "")
    log("="*80, "")
    log("LLM LOGGING SUMMARY", "üìä")
    log("="*80, "")

    summary = llm_logger.get_summary()
    print(json.dumps(summary, indent=2, ensure_ascii=False))

    log("", "")
    log(f"üìÑ –õ–æ–≥ —Ñ–∞–π–ª: {llm_logger.log_file}", "")
    log("="*80, "")

if __name__ == "__main__":
    asyncio.run(main())
