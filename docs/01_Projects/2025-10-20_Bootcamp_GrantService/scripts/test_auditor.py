#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç Auditor Agent - –æ—Ü–µ–Ω–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
Iteration 27 - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫—É GA-20251023-42EC3885
"""
import sys
import os
from pathlib import Path
import asyncio
import json
import time
from datetime import datetime

# Fix Windows console encoding
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

# –ó–∞–≥—Ä—É–∑–∫–∞ .env.local
env_file = Path(__file__).parent.parent / ".env.local"
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ANKETA_ID = "#AN-20251012-Natalia_bruzzzz-001"
APPLICATION_FILE = Path(r"C:\SnowWhiteAI\GrantService\reports\GA-20251023-42EC3885.md")
ANKETA_FILE = Path(__file__).parent.parent / "test_data" / "natalia_anketa_20251012.json"

def log(message: str, emoji: str = "üìå"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{emoji} [{timestamp}] {message}", flush=True)

def load_application():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É"""
    log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–∫–∏: {APPLICATION_FILE}", "üìÑ")
    with open(APPLICATION_FILE, 'r', encoding='utf-8') as f:
        content = f.read()
    log(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤", "")
    return content

def load_anketa():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã: {ANKETA_FILE}", "üìã")
    with open(ANKETA_FILE, 'r', encoding='utf-8') as f:
        anketa = json.load(f)
    log(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞", "")
    return anketa

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log("="*80, "")
    log("–¢–ï–°–¢ AUDITOR AGENT - –û—Ü–µ–Ω–∫–∞ –∑–∞—è–≤–∫–∏", "üîç")
    log("="*80, "")

    start_time = time.time()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    application_text = load_application()
    anketa = load_anketa()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î...", "üîå")
    os.environ['PGHOST'] = 'localhost'
    os.environ['PGPORT'] = '5432'
    os.environ['PGDATABASE'] = 'grantservice'
    os.environ['PGUSER'] = 'postgres'
    os.environ['PGPASSWORD'] = 'root'
    log("  ‚úÖ –ë–î: localhost:5432/grantservice", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ DB instance
    from data.database import get_db
    db = get_db()
    log(f"‚úÖ Database instance created", "")
    log("", "")

    # AUDITOR
    try:
        log("–ó–ê–ü–£–°–ö–ê–ï–ú AUDITOR —Å GigaChat", "üîç")
        log("-" * 80, "")

        from auditor_agent import AuditorAgent

        log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Auditor...", "")
        auditor = AuditorAgent(
            db=db,
            llm_provider='gigachat'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        )
        log("‚úÖ Auditor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "")

        input_data = {
            "anketa_id": ANKETA_ID,
            "application": application_text,  # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
            "user_answers": anketa.get("interview_data", {}),
            "research_data": {},  # –ù–µ—Ç research –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ
            "selected_grant": {}
        }

        log("", "")
        log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç —á–µ—Ä–µ–∑ GigaChat...", "")
        log("   (–∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º)", "")
        log("", "")

        result = await auditor.audit_application_async(input_data)

        duration = time.time() - start_time

        if result:
            log(f"‚úÖ Auditor –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥", "")
            log("", "")
            log("="*80, "")
            log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê", "")
            log("="*80, "")
            log(f"   Status: {result.get('status')}", "")
            log(f"   Overall Score: {result.get('overall_score', 0)*100:.1f}%", "")
            log(f"   Completeness Score: {result.get('completeness_score', 0)}/10", "")
            log(f"   Quality Score: {result.get('quality_score', 0)}/10", "")
            log(f"   Compliance Score: {result.get('compliance_score', 0)}/10", "")
            log(f"   Readiness Status: {result.get('readiness_status')}", "")
            log(f"   Can Submit: {'‚úÖ –î–ê' if result.get('can_submit') else '‚ùå –ù–ï–¢'}", "")
            log("", "")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = result.get('recommendations', [])
            if recommendations:
                log("üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:", "")
                log("-" * 80, "")
                for i, rec in enumerate(recommendations[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
                    log(f"   {i}. {rec}", "")
                if len(recommendations) > 5:
                    log(f"   ... –∏ –µ—â—ë {len(recommendations)-5} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π", "")
                log("", "")

            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            analysis = result.get('analysis', {})
            if analysis:
                log("üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:", "")
                log("-" * 80, "")

                structure = analysis.get('structure', {})
                if structure:
                    log(f"   üìê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (score: {structure.get('score', 0)*10:.1f}/10):", "")
                    for issue in structure.get('issues', [])[:3]:
                        log(f"      ‚Ä¢ {issue}", "")

                content = analysis.get('content', {})
                if content:
                    log(f"   üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (score: {content.get('score', 0)*10:.1f}/10):", "")
                    for issue in content.get('issues', [])[:3]:
                        log(f"      ‚Ä¢ {issue}", "")

                compliance = analysis.get('compliance', {})
                if compliance:
                    log(f"   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (score: {compliance.get('score', 0)*10:.1f}/10):", "")
                    for issue in compliance.get('issues', [])[:3]:
                        log(f"      ‚Ä¢ {issue}", "")

                log("", "")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            output_file = Path(__file__).parent.parent / "test_results" / f"audit_report_{ANKETA_ID.replace('#', '').replace('-', '_')}.json"
            output_file.parent.mkdir(parents=True, exist_ok=True)

            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)

            log(f"üíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}", "")

        else:
            log(f"‚ùå Auditor –≤–µ—Ä–Ω—É–ª None", "")

        log("", "")
        log("="*80, "")
        log("–ü–†–û–í–ï–†–¨–¢–ï –ê–î–ú–ò–ù–ö–£ GIGACHAT!", "üéØ")
        log("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤", "")
        log("="*80, "")

    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê Auditor: {e}", "")
        import traceback
        print("\n" + "="*80)
        print("TRACEBACK:")
        print("="*80)
        traceback.print_exc()
        print("="*80 + "\n")

if __name__ == "__main__":
    asyncio.run(main())
