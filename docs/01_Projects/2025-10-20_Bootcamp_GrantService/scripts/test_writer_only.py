#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¢–û–õ–¨–ö–û Writer —Å GigaChat-2-Max
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ research results –∏–∑ –ë–î
"""
import sys
import os
from pathlib import Path
import asyncio
import json
import time
from datetime import datetime

# Fix Windows console encoding
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "agents"))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "web-admin"))

# –ó–∞–≥—Ä—É–∑–∫–∞ .env.local
env_file = Path(__file__).parent.parent / ".env.local"
if env_file.exists():
    with open(env_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key.strip()] = value.strip()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
ANKETA_ID = "#AN-20251012-Natalia_bruzzzz-001"
GIGACHAT_MODEL = "GigaChat-2-Max"

# –ü—É—Ç—å –∫ –∞–Ω–∫–µ—Ç–µ
ANKETA_FILE = Path(__file__).parent.parent / "test_data" / "natalia_anketa_20251012.json"

def log(message: str, emoji: str = "üìå"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"{emoji} [{timestamp}] {message}", flush=True)

def load_anketa():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∫–µ—Ç—É"""
    log(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã: {ANKETA_FILE}", "üìã")
    with open(ANKETA_FILE, 'r', encoding='utf-8') as f:
        anketa = json.load(f)
    log(f"–ê–Ω–∫–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {anketa.get('project_info', {}).get('name', '')[:50]}...", "‚úÖ")
    return anketa

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    log("="*80, "")
    log("–¢–ï–°–¢ WRITER ONLY - GigaChat-2-Max", "‚úçÔ∏è")
    log("="*80, "")

    start_time = time.time()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–∫–µ—Ç—ã
    anketa = load_anketa()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    log("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î...", "üîå")
    os.environ['PGHOST'] = 'localhost'
    os.environ['PGPORT'] = '5432'
    os.environ['PGDATABASE'] = 'grantservice'
    os.environ['PGUSER'] = 'postgres'
    os.environ['PGPASSWORD'] = 'root'
    log("  ‚úÖ –ë–î: localhost:5432/grantservice", "")

    # –°–æ–∑–¥–∞–Ω–∏–µ DB instance
    from data.database import get_db
    db = get_db()
    log(f"‚úÖ Database instance created", "")
    log("", "")

    # WRITER V2
    try:
        log("–ó–ê–ü–£–°–ö–ê–ï–ú WRITER V2 —Å GigaChat-2-Max", "‚úçÔ∏è")
        log("-" * 80, "")

        from writer_agent_v2 import WriterAgentV2

        log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Writer V2...", "")
        writer = WriterAgentV2(
            db=db,
            llm_provider='gigachat'  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º GigaChat
        )
        log("‚úÖ Writer V2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "")

        input_data = {
            "anketa_id": ANKETA_ID,
            "user_answers": anketa.get("interview_data", {}),
            "selected_grant": {}
        }

        log(f"User answers length: {len(str(input_data['user_answers']))} chars", "üìä")
        log("", "")
        log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ GigaChat-2-Max...", "")
        log("   (–¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å –ª–æ–≥–∏ –∏–∑ Writer –∏ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ GigaChat)", "")
        log("", "")

        result = await writer.write_application_async(input_data)

        duration = time.time() - start_time

        if result:
            log(f"‚úÖ Writer –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥", "")
            log(f"   Status: {result.get('status')}", "")
            log(f"   Provider used: {result.get('provider_used')}", "")
            log(f"   Model used: {result.get('model_used')}", "")
            log(f"   Application length: {len(str(result.get('application', '')))} chars", "")
            log(f"   Quality score: {result.get('quality_score')}/10", "")

            if result.get('application_number'):
                log(f"   Application number: {result.get('application_number')}", "")
        else:
            log(f"‚ùå Writer –≤–µ—Ä–Ω—É–ª None", "")

        log("", "")
        log("="*80, "")
        log("–ü–†–û–í–ï–†–¨–¢–ï –ê–î–ú–ò–ù–ö–£ GIGACHAT!", "üéØ")
        log("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å—Ö–æ–¥ —Ç–æ–∫–µ–Ω–æ–≤ –µ—Å–ª–∏ GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç", "")
        log("="*80, "")

    except Exception as e:
        log(f"‚ùå –û–®–ò–ë–ö–ê Writer: {e}", "")
        import traceback
        print("\n" + "="*80)
        print("TRACEBACK:")
        print("="*80)
        traceback.print_exc()
        print("="*80 + "\n")

if __name__ == "__main__":
    asyncio.run(main())
