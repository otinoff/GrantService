#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Adaptive Interviewer with Question Bank
–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä —Å –±–∞–Ω–∫–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤

–§–∏–ª–æ—Å–æ—Ñ–∏—è: LLM –≤—ã–±–∏—Ä–∞–µ—Ç –ü–û–†–Ø–î–û–ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤,
–∞ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã —Å –Ω—É–ª—è.

Version: 1.0 (Dev/Local)
Date: 2025-10-22
"""

import json
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class AdaptiveInterviewerWithQuestionBank:
    """
    –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä —Å –±–∞–Ω–∫–æ–º –∏–∑ 10 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    LLM –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.
    """

    # –ë–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
    QUESTION_BANK = {
        "Q1": {
            "text": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–µ–∫—Ç?",
            "priority": "P0",  # –ö—Ä–∏—Ç–∏—á–Ω—ã–π
            "category": "basic"
        },
        "Q2": {
            "text": "–ö–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç?",
            "priority": "P0",
            "category": "basic"
        },
        "Q3": {
            "text": "–ö—Ç–æ –≤–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è? (–≤–æ–∑—Ä–∞—Å—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ä–µ–≥–∏–æ–Ω)",
            "priority": "P0",
            "category": "basic"
        },
        "Q4": {
            "text": "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞? (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è, –∏–∑–º–µ—Ä–∏–º–∞—è)",
            "priority": "P0",
            "category": "basic"
        },
        "Q5": {
            "text": "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏?",
            "priority": "P1",
            "category": "methodology"
        },
        "Q6": {
            "text": "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –≤–∞–º –Ω—É–∂–µ–Ω? –†–∞—Å—à–∏—Ñ—Ä—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.",
            "priority": "P1",
            "category": "budget"
        },
        "Q7": {
            "text": "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å? (—Å —Ü–∏—Ñ—Ä–∞–º–∏)",
            "priority": "P1",
            "category": "results"
        },
        "Q8": {
            "text": "–ö—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–æ–µ–∫—Ç–∞? –ö–∞–∫–æ–π —É –Ω–∏—Ö –æ–ø—ã—Ç?",
            "priority": "P2",
            "category": "team"
        },
        "Q9": {
            "text": "–ï—Å—Ç—å –ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã? –ö—Ç–æ –æ–Ω–∏ –∏ –∫–∞–∫ –ø–æ–º–æ–≥—É—Ç?",
            "priority": "P2",
            "category": "partners"
        },
        "Q10": {
            "text": "–ö–∞–∫ –ø—Ä–æ–µ–∫—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞?",
            "priority": "P2",
            "category": "sustainability"
        }
    }

    def __init__(self, llm_client=None, llm_provider="claude_code"):
        """
        Args:
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è LLM (UnifiedLLMClient –∏–ª–∏ mock –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
            llm_provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "claude_code")
                         –í–ê–ñ–ù–û: Claude Code - –æ—Å–Ω–æ–≤–Ω–æ–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä!
                         GigaChat - —Ç–æ–ª—å–∫–æ –º–∞–Ω—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, –ù–ï fallback!
        """
        self.llm_client = llm_client
        self.llm_provider = llm_provider
        self.conversation_history = []
        self.asked_questions = []
        self.skipped_questions = []  # –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Å–≤–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—ã
        self.clarification_count = {}  # –°—á–µ—Ç—á–∏–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É

        logger.info(f"ü§ñ Adaptive Interviewer initialized with LLM provider: {llm_provider}")

    def _get_base_prompt(self) -> str:
        """–ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM"""
        return """–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ (–§–ü–ì).

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –∑–∞—è–≤–∏—Ç–µ–ª–µ–º, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –≤ –£–ú–ù–û–ô –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤.

---

–ë–ê–ù–ö –í–û–ü–†–û–°–û–í (10 –≤–æ–ø—Ä–æ—Å–æ–≤):

{question_bank}

---

–ü–†–ê–í–ò–õ–ê –í–´–ë–û–†–ê –°–õ–ï–î–£–Æ–©–ï–ì–û –í–û–ü–†–û–°–ê:

1. –í–°–ï–ì–î–ê –Ω–∞—á–∏–Ω–∞–µ–º —Å [Q1] (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)

2. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ê–ù–ê–õ–ò–ó–ò–†–£–ô:
   - –ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–æ–Ω –æ—Ç–≤–µ—Ç? (1-10 –±–∞–ª–ª–æ–≤)
   - –ö–∞–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –≤–∞–∂–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π?
   - –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∫–æ—Å–≤–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ?

3. –í–´–ë–ò–†–ê–ô —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ª–æ–≥–∏–∫–µ:
   - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∞–±—ã–π (–∫–∞—á–µ—Å—Ç–≤–æ < 6/10) ‚Üí –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–ù–ï –∏–∑ –±–∞–Ω–∫–∞, —Ç–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π)
   - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–∏–ª—å–Ω—ã–π (–∫–∞—á–µ—Å—Ç–≤–æ ‚â• 6/10) ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É

4. –ü–†–ò–û–†–ò–¢–ï–¢–´ –≤–æ–ø—Ä–æ—Å–æ–≤:
   - P0 (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ): –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´ (Q1, Q2, Q3, Q4)
   - P1 (–≤–∞–∂–Ω—ã–µ): –ñ–µ–ª–∞—Ç–µ–ª—å–Ω—ã (Q5, Q6, Q7)
   - P2 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ): –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è (Q8, Q9, Q10)

5. –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨:
   - –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —á–µ–ª–æ–≤–µ–∫ –£–ñ–ï —Ä–∞—Å–∫—Ä—ã–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥—Ä—É–≥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ ‚Üí –ü–†–û–ü–£–°–¢–ò —Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
   - –ü—Ä–∏–º–µ—Ä: –í Q2 (–ø—Ä–æ–±–ª–µ–º–∞) —É–ø–æ–º—è–Ω—É–ª –∞—É–¥–∏—Ç–æ—Ä–∏—é ‚Üí –º–æ–∂–Ω–æ –ü–†–û–ü–£–°–¢–ò–¢–¨ Q3
   - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π ‚Üí –∑–∞–¥–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–π –ü–ï–†–ï–î –ø–µ—Ä–µ—Ö–æ–¥–æ–º

6. –õ–ò–ú–ò–¢–´:
   - –ú–∞–∫—Å–∏–º—É–º 2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ –æ–¥–∏–Ω –±–∞–∑–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
   - –ï—Å–ª–∏ —É–∂–µ –∑–∞–¥–∞–ª–∏ –≤—Å–µ P0 + P1 –≤–æ–ø—Ä–æ—Å—ã ‚Üí –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∞—Ç—å

---

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON):

{{
  "analysis": {{
    "answer_quality": 7,
    "completeness": 0.8,
    "missing_info": ["–º–∞—Å—à—Ç–∞–± –ø—Ä–æ–±–ª–µ–º—ã"],
    "covered_questions": ["Q3"]
  }},
  "next_action": "ask_from_bank",
  "next_question": {{
    "id": "Q4",
    "text": "–ö–∞–∫–æ–≤–∞ —Ü–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞?",
    "reason": "–ù—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–∑–º–µ—Ä–∏–º–∞—è —Ü–µ–ª—å"
  }},
  "should_finish": false
}}

---

–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
{conversation_history}

---

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å: {last_question}
- –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_answer}
- –£–∂–µ –∑–∞–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {asked_questions}
- –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ (—Ä–∞—Å–∫—Ä—ã—Ç—ã –∫–æ—Å–≤–µ–Ω–Ω–æ): {skipped_questions}
- –û—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã: {remaining_questions}

---

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∏ –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.
"""

    def _format_question_bank(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–Ω–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        lines = []
        for qid, data in self.QUESTION_BANK.items():
            lines.append(f"[{qid}] {data['text']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {data['priority']})")
        return "\n".join(lines)

    def _get_remaining_questions(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤"""
        all_questions = set(self.QUESTION_BANK.keys())
        asked = set(self.asked_questions)
        skipped = set(self.skipped_questions)
        return list(all_questions - asked - skipped)

    async def ask_next_question(self, user_answer: Optional[str] = None) -> Dict[str, Any]:
        """
        –ó–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_answer: –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å (None –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞)

        Returns:
            {
                'question_id': 'Q1',
                'question_text': '...',
                'is_clarifying': False,
                'should_finish': False,
                'analysis': {...}
            }
        """

        # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å - –≤—Å–µ–≥–¥–∞ Q1 (hardcoded)
        if len(self.conversation_history) == 0:
            logger.info("üéØ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: Q1 (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞)")
            self.asked_questions.append("Q1")

            # –î–æ–±–∞–≤–ª—è–µ–º Q1 –≤ –∏—Å—Ç–æ—Ä–∏—é —Å—Ä–∞–∑—É (–æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—ã–∑–æ–≤–µ)
            self.conversation_history.append({
                'question_id': 'Q1',
                'question_text': self.QUESTION_BANK['Q1']['text'],
                'is_clarifying': False
            })

            return {
                'question_id': 'Q1',
                'question_text': self.QUESTION_BANK['Q1']['text'],
                'is_clarifying': False,
                'should_finish': False,
                'analysis': None
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é (–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å)
        if self.conversation_history:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç
            self.conversation_history[-1]['answer'] = user_answer
            self.conversation_history[-1]['timestamp'] = datetime.now().isoformat()
            last_question = self.conversation_history[-1]['question_id']
        else:
            # –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            last_question = "Q1"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        prompt = self._get_base_prompt().format(
            question_bank=self._format_question_bank(),
            conversation_history=json.dumps(self.conversation_history, ensure_ascii=False, indent=2),
            last_question=last_question,
            user_answer=user_answer,
            asked_questions=json.dumps(self.asked_questions),
            skipped_questions=json.dumps(self.skipped_questions),
            remaining_questions=json.dumps(self._get_remaining_questions())
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—Ç LLM
        if self.llm_client:
            llm_response = await self._call_llm(prompt)
        else:
            # Mock –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ LLM
            llm_response = self._mock_llm_response(user_answer)

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
        try:
            decision = json.loads(llm_response)
        except json.JSONDecodeError:
            logger.error(f"‚ùå LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {llm_response}")
            # Fallback: –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø–æ—Ä—è–¥–∫—É
            decision = self._fallback_next_question()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
        if decision.get('should_finish', False):
            logger.info("‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–≤—Å–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã)")
            return {
                'question_id': None,
                'question_text': None,
                'is_clarifying': False,
                'should_finish': True,
                'analysis': decision.get('analysis')
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º skipped_questions
        covered = decision.get('analysis', {}).get('covered_questions', [])
        for q in covered:
            if q not in self.skipped_questions and q not in self.asked_questions:
                self.skipped_questions.append(q)
                logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {q} (—É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç –≤ –æ—Ç–≤–µ—Ç–µ)")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if decision['next_action'] == 'ask_clarifying':
            # –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–Ω–µ –∏–∑ –±–∞–Ω–∫–∞)
            clarifying_q = decision.get('clarifying_question', {})

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π
            clarification_key = last_question
            self.clarification_count[clarification_key] = self.clarification_count.get(clarification_key, 0) + 1

            if self.clarification_count[clarification_key] > 2:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π –¥–ª—è {last_question}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ")
                decision = self._fallback_next_question()
                next_q_id = decision['next_question']['id']
                next_q_text = self.QUESTION_BANK[next_q_id]['text']
                is_clarifying = False
            else:
                next_q_id = f"{last_question}_clarify_{self.clarification_count[clarification_key]}"
                next_q_text = clarifying_q.get('text', '–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞...')
                is_clarifying = True
        else:
            # –í–æ–ø—Ä–æ—Å –∏–∑ –±–∞–Ω–∫–∞
            next_q_id = decision['next_question']['id']
            next_q_text = self.QUESTION_BANK[next_q_id]['text']
            is_clarifying = False

            if next_q_id not in self.asked_questions:
                self.asked_questions.append(next_q_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        self.conversation_history.append({
            'question_id': next_q_id,
            'question_text': next_q_text,
            'is_clarifying': is_clarifying
        })

        logger.info(f"‚ùì –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {next_q_id} {'(—É—Ç–æ—á–Ω–µ–Ω–∏–µ)' if is_clarifying else ''}")

        return {
            'question_id': next_q_id,
            'question_text': next_q_text,
            'is_clarifying': is_clarifying,
            'should_finish': False,
            'analysis': decision.get('analysis')
        }

    async def _call_llm(self, prompt: str) -> str:
        """–í—ã–∑–æ–≤ LLM (UnifiedLLMClient –∏–ª–∏ –¥—Ä—É–≥–æ–π)"""
        # TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å UnifiedLLMClient
        response = await self.llm_client.generate_async(
            prompt=prompt,
            temperature=0.3,
            max_tokens=800
        )
        return response.get('content', '{}')

    def _mock_llm_response(self, user_answer: str) -> str:
        """Mock LLM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ LLM"""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π (<20 —Å–∏–º–≤–æ–ª–æ–≤) ‚Üí —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        remaining = self._get_remaining_questions()

        if len(user_answer or '') < 20:
            # –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç ‚Üí —É—Ç–æ—á–Ω–µ–Ω–∏–µ
            return json.dumps({
                "analysis": {
                    "answer_quality": 4,
                    "completeness": 0.3,
                    "missing_info": ["–¥–µ—Ç–∞–ª–∏"],
                    "covered_questions": []
                },
                "next_action": "ask_clarifying",
                "clarifying_question": {
                    "text": "–í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–æ–∫. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
                    "after_clarification_go_to": remaining[0] if remaining else "Q10"
                },
                "should_finish": False
            })
        else:
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–Ω–∫–∞
            if not remaining:
                return json.dumps({
                    "analysis": {
                        "answer_quality": 8,
                        "completeness": 0.9,
                        "missing_info": [],
                        "covered_questions": []
                    },
                    "next_action": "finish",
                    "should_finish": True
                })

            next_q = remaining[0]
            return json.dumps({
                "analysis": {
                    "answer_quality": 7,
                    "completeness": 0.7,
                    "missing_info": [],
                    "covered_questions": []
                },
                "next_action": "ask_from_bank",
                "next_question": {
                    "id": next_q,
                    "text": self.QUESTION_BANK[next_q]['text'],
                    "reason": f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ {next_q}"
                },
                "should_finish": False
            })

    def _fallback_next_question(self) -> Dict[str, Any]:
        """Fallback: –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        remaining = self._get_remaining_questions()

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority_order = {'P0': 0, 'P1': 1, 'P2': 2}
        remaining_sorted = sorted(
            remaining,
            key=lambda q: (priority_order[self.QUESTION_BANK[q]['priority']], q)
        )

        if remaining_sorted:
            next_q = remaining_sorted[0]
            return {
                "next_action": "ask_from_bank",
                "next_question": {
                    "id": next_q,
                    "text": self.QUESTION_BANK[next_q]['text'],
                    "reason": "Fallback - —Å–ª–µ–¥—É—é—â–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"
                },
                "should_finish": False
            }
        else:
            return {
                "next_action": "finish",
                "should_finish": True
            }

    def get_anketa(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞

        Returns:
            {
                'project_name': '...',
                'problem_statement': '...',
                ...
            }
        """
        anketa = {}

        # –ú–∞–ø–ø–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã
        mapping = {
            'Q1': 'project_name',
            'Q2': 'problem_statement',
            'Q3': 'target_audience',
            'Q4': 'project_goal',
            'Q5': 'project_tasks',
            'Q6': 'budget',
            'Q7': 'expected_results',
            'Q8': 'team_description',
            'Q9': 'partners',
            'Q10': 'sustainability'
        }

        for entry in self.conversation_history:
            if 'answer' in entry:
                q_id = entry['question_id']
                if q_id in mapping:
                    anketa[mapping[q_id]] = entry['answer']

        return anketa


# ============================================================================
# –î–ï–ú–û / –¢–ï–°–¢
# ============================================================================

async def demo_adaptive_interview():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞"""

    print("=" * 80)
    print("DEMO: Adaptive Interviewer with Question Bank (Claude Code)")
    print("=" * 80)

    # –í–ê–ñ–ù–û: Claude Code - –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ù–ï GigaChat!
    interviewer = AdaptiveInterviewerWithQuestionBank(
        llm_client=None,  # Mock —Ä–µ–∂–∏–º –¥–ª—è –¥–µ–º–æ
        llm_provider="claude_code"
    )

    # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
    test_answers = [
        "–õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –ö–µ–º–µ—Ä–æ–≤–æ",  # Q1
        "–í –ö–µ–º–µ—Ä–æ–≤–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞ –¥–ª—è –º–æ–ª–æ–¥—ë–∂–∏ 14-25 –ª–µ—Ç",  # Q2
        "500+ –º–æ–ª–æ–¥—ã—Ö –ª—é–¥–µ–π, –æ—Ç–∫—Ä—ã—Ç—å 3 –∫–ª—É–±–∞, —Ä–∞–±–æ—Ç–∞—Ç—å 2 –≥–æ–¥–∞",  # Q4 (Q3 –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—Å—è)
        "–ó–∞–¥–∞—á–∏: –Ω–∞–π—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏—è, –∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤",  # Q5
        "800 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π: 300–∫ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, 200–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É, 300–∫ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã",  # Q6
        "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: 500 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, 3 –∫–ª—É–±–∞, 20 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ–¥",  # Q7
        "–ö–æ–º–∞–Ω–¥–∞: —è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å, 3 —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –æ–ø—ã—Ç–æ–º 5+ –ª–µ—Ç",  # Q8
        "–ü–∞—Ä—Ç–Ω—ë—Ä—ã: –≥–æ—Ä–æ–¥—Å–∫–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è, —à–∫–æ–ª—ã",  # Q9
        "–ü–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã 1000—Ä/–º–µ—Å"  # Q10
    ]

    answer_idx = 0

    # –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    result = await interviewer.ask_next_question()
    print(f"\n[{result['question_id']}] {result['question_text']}")

    # –¶–∏–∫–ª –∏–Ω—Ç–µ—Ä–≤—å—é
    while not result['should_finish'] and answer_idx < len(test_answers):
        user_answer = test_answers[answer_idx]
        print(f"USER: {user_answer}")

        answer_idx += 1

        result = await interviewer.ask_next_question(user_answer)

        if result['analysis']:
            print(f"ANALYSIS: quality {result['analysis']['answer_quality']}/10, "
                  f"completeness {result['analysis']['completeness']}")

        if not result['should_finish']:
            clarify = " (CLARIFYING)" if result.get('is_clarifying') else ""
            print(f"\n[{result['question_id']}] {result['question_text']}{clarify}")

    print("\n" + "=" * 80)
    print("INTERVIEW COMPLETED")
    print("=" * 80)

    anketa = interviewer.get_anketa()
    print("\nFINAL ANKETA:")
    print(json.dumps(anketa, ensure_ascii=False, indent=2))

    print(f"\nSTATISTICS:")
    print(f"   - Asked questions: {len(interviewer.asked_questions)}")
    print(f"   - Skipped questions: {len(interviewer.skipped_questions)}")
    print(f"   - Total in bank: {len(interviewer.QUESTION_BANK)}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(demo_adaptive_interview())
