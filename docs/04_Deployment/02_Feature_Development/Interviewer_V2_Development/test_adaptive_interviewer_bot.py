#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å Adaptive Interviewer

–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è (–∏–∑ GrantService):
1. –ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start_adaptive_interview
3. –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
5. –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
6. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
7. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞

–í–ê–ñ–ù–û: Claude Code - –æ—Å–Ω–æ–≤–Ω–æ–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä!
"""

import requests
import time
import json
import sys

# TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
TEST_PROJECT_ANSWERS = {
    "Q1": "–õ—É—á–Ω—ã–µ –∫–ª—É–±—ã –ö–µ–º–µ—Ä–æ–≤–æ",
    "Q2": "–í –ö–µ–º–µ—Ä–æ–≤–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞ –¥–ª—è –º–æ–ª–æ–¥—ë–∂–∏ 14-25 –ª–µ—Ç",
    "Q3": "500+ –º–æ–ª–æ–¥—ã—Ö –ª—é–¥–µ–π 14-25 –ª–µ—Ç –≤ –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
    "Q4": "–°–æ–∑–¥–∞—Ç—å —Å–µ—Ç—å –∏–∑ 3 –ª—É—á–Ω—ã—Ö –∫–ª—É–±–æ–≤ –∏ –≤–æ–≤–ª–µ—á—å 500+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ 2 –≥–æ–¥–∞",
    "Q5": "–ó–∞–¥–∞—á–∏: –Ω–∞–π—Ç–∏ –ø–æ–º–µ—â–µ–Ω–∏—è, –∫—É–ø–∏—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –Ω–∞–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–æ–≤, –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "Q6": "800 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π: 300–∫ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, 200–∫ –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏–π, 300–∫ –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã —Ç—Ä–µ–Ω–µ—Ä–æ–≤",
    "Q7": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: 500 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, 3 –∫–ª—É–±–∞, 20 –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ–¥, —Ä–æ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –∫ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞",
    "Q8": "–ö–æ–º–∞–Ω–¥–∞: —è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å –æ–ø—ã—Ç–æ–º 10 –ª–µ—Ç, 3 —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –æ–ø—ã—Ç–æ–º 5+ –ª–µ—Ç, –±—É—Ö–≥–∞–ª—Ç–µ—Ä",
    "Q9": "–ü–∞—Ä—Ç–Ω—ë—Ä—ã: –≥–æ—Ä–æ–¥—Å–∫–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ö–µ–º–µ—Ä–æ–≤–æ, —à–∫–æ–ª—ã ‚Ññ5 –∏ ‚Ññ12, —Ñ–µ–¥–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞",
    "Q10": "–ü–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —á–ª–µ–Ω—Å–∫–∏–µ –≤–∑–Ω–æ—Å—ã 1000—Ä/–º–µ—Å, –∞—Ä–µ–Ω–¥–∞ —Ç–∏—Ä–∞ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
}


def get_latest_chat_id():
    """–ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    response = requests.get(f"{BASE_URL}/getUpdates")
    data = response.json()

    if data['ok'] and data['result']:
        last_update = data['result'][-1]
        if 'message' in last_update:
            chat_id = last_update['message']['chat']['id']
            username = last_update['message']['chat'].get('username', 'Unknown')
            return chat_id, username
    return None, None


def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    response = requests.post(f"{BASE_URL}/sendMessage", json={
        'chat_id': chat_id,
        'text': text
    })
    return response.json()


def get_bot_messages(offset):
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞"""
    params = {'timeout': 5}
    if offset:
        params['offset'] = offset

    response = requests.get(f"{BASE_URL}/getUpdates", params=params)
    data = response.json()

    bot_messages = []
    new_offset = offset

    if data['ok'] and data['result']:
        for update in data['result']:
            if 'message' in update:
                msg = update['message']
                # –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
                if msg.get('from', {}).get('is_bot'):
                    bot_messages.append(msg.get('text', ''))

                # –û–±–Ω–æ–≤–ª—è–µ–º offset
                new_offset = update['update_id'] + 1

    return bot_messages, new_offset


def extract_question_id(message):
    """–ò–∑–≤–ª–µ—á—å ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω [Q1], [Q2], etc.
    import re
    match = re.search(r'\[Q(\d+)\]', message)
    if match:
        return f"Q{match.group(1)}"

    # –ò–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω "–í–æ–ø—Ä–æ—Å 1/10"
    match = re.search(r'–í–æ–ø—Ä–æ—Å (\d+)/10', message)
    if match:
        return f"Q{match.group(1)}"

    return None


def main():
    print("=" * 80)
    print("üß™ –¢–ï–°–¢: Adaptive Interviewer Bot (Claude Code)")
    print("=" * 80)

    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º chat_id
    print("\nüì± [1/6] –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id...")
    chat_id, username = get_latest_chat_id()

    if not chat_id:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    print(f"‚úÖ Chat ID: {chat_id}")
    print(f"‚úÖ Username: @{username}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π offset
    updates = requests.get(f"{BASE_URL}/getUpdates").json()
    if updates['ok'] and updates['result']:
        current_offset = updates['result'][-1]['update_id'] + 1
    else:
        current_offset = 0

    # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é
    print(f"\nüì§ [2/6] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start_adaptive_interview...")
    result = send_message(chat_id, "/start_adaptive_interview")

    if not result['ok']:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}")
        return

    print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")

    # –®–∞–≥ 3: –¶–∏–∫–ª –∏–Ω—Ç–µ—Ä–≤—å—é
    print(f"\n‚ùì [3/6] –ù–∞—á–∞–ª–æ –∏–Ω—Ç–µ—Ä–≤—å—é...")
    print("=" * 80)

    question_count = 0
    max_questions = 15  # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è

    while question_count < max_questions:
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞
        time.sleep(3)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        bot_messages, current_offset = get_bot_messages(current_offset)

        if not bot_messages:
            print("‚ö†Ô∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–∞")
            time.sleep(2)
            continue

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for message in bot_messages:
            print(f"\nü§ñ –ë–û–¢:\n{message}")
            print("-" * 80)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if "–∑–∞–≤–µ—Ä—à–µ–Ω–æ" in message.lower() or "completed" in message.lower():
                print("\n‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                print("=" * 80)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ Claude Code
                if "claude_code" in message.lower() or "claude code" in message.lower():
                    print("‚úÖ SUCCESS: Claude Code —É–ø–æ–º—è–Ω—É—Ç (–æ—Å–Ω–æ–≤–Ω–æ–π LLM)!")
                else:
                    print("‚ö†Ô∏è WARNING: Claude Code –Ω–µ —É–ø–æ–º—è–Ω—É—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º audit score
                if "–æ—Ü–µ–Ω–∫–∞" in message.lower() or "score" in message.lower():
                    print("‚úÖ SUCCESS: Audit score –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
            q_id = extract_question_id(message)

            if q_id:
                question_count += 1
                print(f"\nüìù –í–æ–ø—Ä–æ—Å {question_count}: {q_id}")

                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if q_id in TEST_PROJECT_ANSWERS:
                    answer = TEST_PROJECT_ANSWERS[q_id]
                    print(f"üë§ –û–¢–í–ï–¢: {answer}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                    send_message(chat_id, answer)
                    print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    print(f"‚ö†Ô∏è –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {q_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                    send_message(chat_id, "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è " + q_id)

                break

    print("\n‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è)")


if __name__ == "__main__":
    main()
