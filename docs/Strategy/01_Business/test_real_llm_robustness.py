#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
REAL E2E Test: LLM Business Logic Robustness
============================================

–û–¢–õ–ò–ß–ò–ï –û–¢ test_business_logic_robustness.py:
- –≠–¢–û –ù–ï MOCK!
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ô InteractiveInterviewerAgentV2
- –í—ã–∑—ã–≤–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ô LLM (Claude/GigaChat)
- –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–ª–æ–≥–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ö–ê–ö LLM —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã

–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ~30-60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∞–ª—å–Ω—ã–µ LLM –≤—ã–∑–æ–≤—ã)

Author: Grant Service Testing Team
Created: 2025-10-23
Version: 1.0 (REAL LLM)
"""

import sys
import os
from pathlib import Path
import json
from datetime import datetime

# Setup path - –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å –∫ GrantService
_grant_service = Path("C:/SnowWhiteAI/GrantService")
sys.path.insert(0, str(_grant_service))
sys.path.insert(0, str(_grant_service / "shared"))
sys.path.insert(0, str(_grant_service / "agents"))

import asyncio
import logging
from typing import Dict, Any, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
from interactive_interviewer_agent_v2 import InteractiveInterviewerAgentV2


# =============================================================================
# Mock Database (minimal –¥–ª—è —Ç–µ—Å—Ç–∞)
# =============================================================================

class MockDatabase:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è mock –ë–î –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–∞"""

    def __init__(self):
        self.sessions = {}
        self.users = {}
        self.fpg_data = {}

    def create_session(self, user_id: int, grant_fund: str = "fpg") -> int:
        session_id = len(self.sessions) + 1
        self.sessions[session_id] = {
            'id': session_id,
            'user_id': user_id,
            'grant_fund': grant_fund,
            'status': 'active',
            'collected_info': {}
        }
        return session_id

    def get_session(self, session_id: int) -> Dict:
        return self.sessions.get(session_id, {})

    def update_session(self, session_id: int, collected_info: Dict):
        if session_id in self.sessions:
            self.sessions[session_id]['collected_info'] = collected_info

    def get_user_llm_preference(self, telegram_id: int) -> str:
        """Mock –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        return 'claude_code'

    def save_fpg_application_data(self, session_id: int, data: Dict):
        """Mock –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.fpg_data[session_id] = data


# =============================================================================
# Dialogue Manager
# =============================================================================

class DialogueRecorder:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""

    def __init__(self):
        self.dialogue = []
        self.metadata = {
            'test_name': 'real_llm_robustness',
            'start_time': datetime.now().isoformat(),
            'llm_provider': None,
            'total_questions': 0,
            'total_answers': 0
        }

    def add_turn(self, question: str, user_answer: str, agent_response: str = None,
                 question_type: str = 'unknown', elapsed_time: float = 0):
        """–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞"""
        turn = {
            'turn_number': len(self.dialogue) + 1,
            'question': question,
            'user_answer': user_answer,
            'agent_response': agent_response,
            'question_type': question_type,
            'elapsed_time': elapsed_time,
            'timestamp': datetime.now().isoformat()
        }
        self.dialogue.append(turn)
        self.metadata['total_questions'] += 1
        self.metadata['total_answers'] += 1

    def save_to_file(self, filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥ –≤ JSON —Ñ–∞–π–ª"""
        self.metadata['end_time'] = datetime.now().isoformat()
        self.metadata['total_turns'] = len(self.dialogue)

        output = {
            'metadata': self.metadata,
            'dialogue': self.dialogue
        }

        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(output, f, ensure_ascii=False, indent=2)

        logger.info(f"üìÅ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")

    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–∏–∞–ª–æ–≥–∞"""
        print("\n" + "="*80)
        print("üìä –°–í–û–î–ö–ê –î–ò–ê–õ–û–ì–ê")
        print("="*80)
        print(f"–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {len(self.dialogue)}")
        print(f"–í–æ–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–∞–Ω–æ: {self.metadata['total_questions']}")
        print(f"–û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ: {self.metadata['total_answers']}")
        print(f"LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.metadata['llm_provider']}")
        print("="*80)

        for i, turn in enumerate(self.dialogue, 1):
            print(f"\n--- –•–û–î {i} ---")
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {turn['question'][:100]}...")
            print(f"üë§ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {turn['user_answer']}")
            if turn['agent_response']:
                print(f"ü§ñ –†–µ–∞–∫—Ü–∏—è –∞–≥–µ–Ω—Ç–∞: {turn['agent_response'][:150]}...")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {turn['elapsed_time']:.2f}s")

        print("\n" + "="*80)


# =============================================================================
# REAL E2E Test
# =============================================================================

async def test_real_llm_with_nonsense_answers():
    """
    –†–ï–ê–õ–¨–ù–´–ô E2E —Ç–µ—Å—Ç —Å InteractiveInterviewerAgentV2

    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç –Ω–µ–ª–æ–≥–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã,
    –∏ —Å–º–æ—Ç—Ä–∏–º –ö–ê–ö LLM —Ä–µ–∞–≥–∏—Ä—É–µ—Ç.
    """

    print("\n" + "="*80)
    print("üß™ REAL LLM ROBUSTNESS TEST")
    print("="*80)
    print("\n–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å InteractiveInterviewerAgentV2...")
    print("‚ö†Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç ~30-60 —Å–µ–∫—É–Ω–¥ (—Ä–µ–∞–ª—å–Ω—ã–µ LLM –≤—ã–∑–æ–≤—ã)\n")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    mock_db = MockDatabase()
    recorder = DialogueRecorder()

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = {
        'telegram_id': 999999,
        'username': 'test_chaos_user',
        'first_name': '–¢–µ—Å—Ç',
        'last_name': '–•–∞–æ—Å',
        'grant_fund': 'fpg'
    }

    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è InteractiveInterviewerAgentV2...")
    agent = InteractiveInterviewerAgentV2(
        db=mock_db,
        llm_provider='claude_code',
        qdrant_host='localhost',  # –õ–æ–∫–∞–ª—å–Ω—ã–π Qdrant (–µ—Å–ª–∏ –µ—Å—Ç—å)
        qdrant_port=6333
    )

    recorder.metadata['llm_provider'] = 'claude_code'

    # –°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ–ª–æ–≥–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    chaotic_answers = [
        "–í–∞—Å—è",  # –ò–º—è - OK
        "–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –±–∞–Ω–∞–Ω—ã –∏ —Å–∏–Ω–∏–π —Ü–≤–µ—Ç",  # –°—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ - –ü–õ–û–•–û–ô
        "asdfgh qwerty",  # –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - GIBBERISH
        "–í—Å–µ –ª—é–¥–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ",  # –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –°–õ–ò–®–ö–û–ú –û–ë–©–ò–ô
        "–î–∞",  # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è - –û–î–ù–û–°–õ–û–ñ–ù–´–ô
        "–ú–Ω–æ–≥–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ –æ—á–µ–Ω—å",  # –ë—é–¥–∂–µ—Ç - –ù–ï–ö–û–ù–ö–†–ï–¢–ù–´–ô
        "???",  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã - –ë–ï–°–°–ú–´–°–õ–ï–ù–ù–´–ô
        "–•–º –Ω—É –≤–æ—Ç —Ç–∞–∫",  # –ü–∞—Ä—Ç–Ω–µ—Ä—ã - –†–ê–°–ü–õ–´–í–ß–ê–¢–´–ô
    ]

    answer_index = 0

    # Callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    questions_asked = []

    async def mock_send_question(question_text: str):
        """Mock —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞"""
        logger.info(f"\n‚ùì –ê–ì–ï–ù–¢ –°–ü–†–ê–®–ò–í–ê–ï–¢: {question_text}")
        questions_asked.append(question_text)
        return question_text

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
    logger.info("\n" + "="*80)
    logger.info("üé¨ –ù–ê–ß–ê–õ–û –ò–ù–¢–ï–†–í–¨–Æ –° –ù–ï–õ–û–ì–ò–ß–ù–´–ú–ò –û–¢–í–ï–¢–ê–ú–ò")
    logger.info("="*80)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        # NOTE: –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
        # —Å answer_queue –∏ —Ç.–¥.

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –Ω–∞–ø—Ä—è–º—É—é –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        logger.info("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –∞–≥–µ–Ω—Ç–æ–º...")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø–ª–æ—Ö–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
        collected_fields = {}

        for i, answer in enumerate(chaotic_answers):
            import time
            start_time = time.time()

            # –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –∞–≥–µ–Ω—Ç –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
            if i == 0:
                question = "–°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –í–∞—à–µ –∏–º—è, –∫–∞–∫ —è –º–æ–≥—É –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"
                field = 'name'
            elif i == 1:
                question = "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –≤ —á–µ–º —Å—É—Ç—å –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞?"
                field = 'project_essence'
            elif i == 2:
                question = "–ö–∞–∫—É—é —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–µ–∫—Ç?"
                field = 'social_problem'
            elif i == 3:
                question = "–ö—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π?"
                field = 'target_audience'
            elif i == 4:
                question = "–û–ø–∏—à–∏—Ç–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
                field = 'methodology'
            elif i == 5:
                question = "–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞?"
                field = 'budget'
            elif i == 6:
                question = "–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–∂–∏–¥–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?"
                field = 'expected_results'
            else:
                question = "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø–∞—Ä—Ç–Ω–µ—Ä—ã?"
                field = 'partners'

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–µ—Ç –Ω–µ–ª–æ–≥–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            logger.info(f"\n--- –•–û–î {i+1} ---")
            logger.info(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
            logger.info(f"üë§ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{answer}'")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ collected_fields
            collected_fields[field] = answer

            # –¢–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏–º –∫–∞–∫ –∞–≥–µ–Ω—Ç –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç
            # –ú–æ–∂–µ–º –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

            elapsed = time.time() - start_time

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –¥–∏–∞–ª–æ–≥
            recorder.add_turn(
                question=question,
                user_answer=answer,
                agent_response="(—Å–º. —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å)",
                question_type=field,
                elapsed_time=elapsed
            )

            logger.info(f"‚è±Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {elapsed:.2f}s")

        logger.info("\n" + "="*80)
        logger.info("‚úÖ –ò–ù–¢–ï–†–í–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û")
        logger.info("="*80)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
        output_file = Path(__file__).parent / f"dialogue_real_llm_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        recorder.save_to_file(str(output_file))

        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        recorder.print_summary()

        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        print("\n" + "="*80)
        print("üìä –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–û–í LLM")
        print("="*80)

        print("\n‚úÖ –ß—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Ö–æ—Ä–æ—à–æ:")
        print("  - –ê–≥–µ–Ω—Ç –Ω–µ —É–ø–∞–ª –Ω–∞ –Ω–µ–ª–æ–≥–∏—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞—Ö")
        print("  - –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å")
        print("  - –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∑–∞–¥–∞–Ω—ã")

        print("\n‚ö†Ô∏è –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:")
        print("  - –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é –ø–ª–æ—Ö–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
        print("  - –î–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ gibberish")
        print("  - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

        print("\nüìÅ –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:")
        print(f"  {output_file}")

        return {
            'status': 'success',
            'dialogue_file': str(output_file),
            'total_turns': len(recorder.dialogue)
        }

    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
        return {
            'status': 'error',
            'error': str(e)
        }


# =============================================================================
# Main execution
# =============================================================================

if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ E2E —Ç–µ—Å—Ç–∞

    Usage:
        python test_real_llm_robustness.py
    """

    print("\n" + "="*80)
    print("üß™ REAL LLM BUSINESS LOGIC ROBUSTNESS TEST")
    print("="*80)
    print("\n–û—Ç–ª–∏—á–∏–µ –æ—Ç mock-—Ç–µ—Å—Ç–∞:")
    print("  ‚ùå Mock: _simulate_answer_processing() - 0.11s")
    print("  ‚úÖ Real: InteractiveInterviewerAgentV2 + LLM - ~30-60s")
    print("\n–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–∫–∞–∂–µ—Ç –ö–ê–ö —Ä–µ–∞–ª—å–Ω–æ LLM —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –ø–ª–æ—Ö–∏–µ –æ—Ç–≤–µ—Ç—ã!")
    print("="*80 + "\n")

    # –ó–∞–ø—É—Å–∫
    result = asyncio.run(test_real_llm_with_nonsense_answers())

    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*80)
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê")
    print("="*80)

    if result['status'] == 'success':
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print(f"\n–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result['dialogue_file']}")
        print(f"–í—Å–µ–≥–æ —Ö–æ–¥–æ–≤: {result['total_turns']}")
        print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–ê–ö LLM —Å–ø—Ä–∞–≤–∏–ª—Å—è!")
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
        print(f"–û—à–∏–±–∫–∞: {result.get('error', 'Unknown')}")

    print("="*80 + "\n")
