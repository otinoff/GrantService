"""
Expert Agent - —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–∞–º
–í–µ—Ä—Å–∏—è: 1.0 (MVP)
–î–∞—Ç–∞: 2025-10-17

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- PostgreSQL: —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (sources, sections, criteria, examples)
- Qdrant: –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ embeddings –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
- Sentence Transformers: —Å–æ–∑–¥–∞–Ω–∏–µ embeddings (multilingual-MiniLM-L6-v2)
"""

import psycopg2
from typing import List, Dict, Any, Optional
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams, PointStruct, Filter, FieldCondition, MatchValue
from sentence_transformers import SentenceTransformer
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class ExpertAgent:
    """
    Expert Agent –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –æ –≥—Ä–∞–Ω—Ç–∞—Ö

    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–Ω–∞–Ω–∏–π
    - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ (Writer, Reviewer –∏ –¥—Ä.)
    """

    def __init__(
        self,
        postgres_host: str = "localhost",
        postgres_port: int = 5432,
        postgres_user: str = "postgres",
        postgres_password: str = "root",
        postgres_db: str = "grantservice",
        qdrant_host: str = "5.35.88.251",  # Production Qdrant –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
        qdrant_port: int = 6333,
        embedding_model: str = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Expert Agent

        Args:
            postgres_*: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
            qdrant_*: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant
            embedding_model: –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è embeddings (384 —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å)
        """
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Expert Agent...")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        self.pg_conn = psycopg2.connect(
            host=postgres_host,
            port=postgres_port,
            user=postgres_user,
            password=postgres_password,
            database=postgres_db
        )
        logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω ({postgres_host}:{postgres_port})")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Qdrant
        self.qdrant = QdrantClient(host=qdrant_host, port=qdrant_port)
        logger.info(f"‚úÖ Qdrant –ø–æ–¥–∫–ª—é—á–µ–Ω ({qdrant_host}:{qdrant_port})")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ embeddings
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {embedding_model}")
        self.embedding_model = SentenceTransformer(embedding_model)
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        self.collection_name = "knowledge_sections"

        logger.info("üéâ Expert Agent –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    def create_embedding(self, text: str) -> List[float]:
        """
        –°–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞

        Args:
            text: —Ç–µ–∫—Å—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        Returns:
            –í–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 384
        """
        embedding = self.embedding_model.encode(text, convert_to_tensor=False)
        return embedding.tolist()

    def add_knowledge_section(
        self,
        source_id: int,
        section_type: str,
        section_name: str,
        content: str,
        fund_name: str = "fpg",
        char_limit: Optional[int] = None,
        priority: int = 5,
        tags: Optional[List[str]] = None
    ) -> int:
        """
        –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –∑–Ω–∞–Ω–∏–π

        Args:
            source_id: ID –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ knowledge_sources
            section_type: —Ç–∏–ø —Ä–∞–∑–¥–µ–ª–∞ ('requirement', 'example', 'tip', etc.)
            section_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞
            content: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            fund_name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ–Ω–¥–∞
            char_limit: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
            priority: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-10)
            tags: —Ç–µ–≥–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
        """
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞: {section_name}")

        # 1. –î–æ–±–∞–≤–∏—Ç—å –≤ PostgreSQL
        cursor = self.pg_conn.cursor()

        cursor.execute("""
            INSERT INTO knowledge_sections
            (source_id, section_type, section_name, content, char_limit, priority, tags)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            RETURNING id
        """, (source_id, section_type, section_name, content, char_limit, priority, tags or []))

        section_id = cursor.fetchone()[0]
        self.pg_conn.commit()

        logger.info(f"‚úÖ –†–∞–∑–¥–µ–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ PostgreSQL (ID: {section_id})")

        # 2. –°–æ–∑–¥–∞—Ç—å embedding
        embedding = self.create_embedding(content)

        # 3. –î–æ–±–∞–≤–∏—Ç—å –≤ Qdrant
        point = PointStruct(
            id=section_id,
            vector=embedding,
            payload={
                "section_id": section_id,
                "section_name": section_name,
                "section_type": section_type,
                "fund_name": fund_name,
                "priority": priority,
                "char_limit": char_limit,
                "tags": tags or []
            }
        )

        self.qdrant.upsert(
            collection_name=self.collection_name,
            points=[point]
        )

        logger.info(f"‚úÖ Embedding –¥–æ–±–∞–≤–ª–µ–Ω –≤ Qdrant (ID: {section_id})")

        return section_id

    def query_knowledge(
        self,
        question: str,
        fund: str = "fpg",
        top_k: int = 5,
        min_score: float = 0.5
    ) -> List[Dict[str, Any]]:
        """
        –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

        Args:
            question: –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            fund: —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ñ–æ–Ω–¥—É
            top_k: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            min_score: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score (0.0 - 1.0)

        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        logger.info(f"–ó–∞–ø—Ä–æ—Å: {question[:100]}...")

        # 1. –°–æ–∑–¥–∞—Ç—å embedding –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
        question_embedding = self.create_embedding(question)

        # 2. –ü–æ–∏—Å–∫ –≤ Qdrant
        search_result = self.qdrant.search(
            collection_name=self.collection_name,
            query_vector=question_embedding,
            query_filter=Filter(
                must=[
                    FieldCondition(
                        key="fund_name",
                        match=MatchValue(value=fund)
                    )
                ]
            ),
            limit=top_k,
            score_threshold=min_score
        )

        if not search_result:
            logger.warning("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(search_result)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤")

        # 3. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL
        section_ids = [hit.id for hit in search_result]

        cursor = self.pg_conn.cursor()
        cursor.execute("""
            SELECT
                ks.id,
                ks.section_name,
                ks.content,
                ks.section_type,
                ks.char_limit,
                ks.priority,
                ks.tags,
                src.title AS source_title,
                src.url AS source_url
            FROM knowledge_sections ks
            JOIN knowledge_sources src ON ks.source_id = src.id
            WHERE ks.id = ANY(%s)
        """, (section_ids,))

        rows = cursor.fetchall()

        # 4. –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å scores
        results = []
        scores = {hit.id: hit.score for hit in search_result}

        for row in rows:
            results.append({
                "id": row[0],
                "section_name": row[1],
                "content": row[2],
                "section_type": row[3],
                "char_limit": row[4],
                "priority": row[5],
                "tags": row[6],
                "source_title": row[7],
                "source_url": row[8],
                "relevance_score": scores[row[0]]
            })

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ score
        results.sort(key=lambda x: x["relevance_score"], reverse=True)

        return results

    def get_section_by_id(self, section_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª –ø–æ ID"""
        cursor = self.pg_conn.cursor()
        cursor.execute("""
            SELECT
                ks.id,
                ks.section_name,
                ks.content,
                ks.section_type,
                ks.char_limit,
                ks.priority,
                ks.tags,
                src.title AS source_title
            FROM knowledge_sections ks
            JOIN knowledge_sources src ON ks.source_id = src.id
            WHERE ks.id = %s
        """, (section_id,))

        row = cursor.fetchone()
        if not row:
            return None

        return {
            "id": row[0],
            "section_name": row[1],
            "content": row[2],
            "section_type": row[3],
            "char_limit": row[4],
            "priority": row[5],
            "tags": row[6],
            "source_title": row[7]
        }

    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
        cursor = self.pg_conn.cursor()

        # PostgreSQL —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) FROM knowledge_sources WHERE is_active = true")
        active_sources = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM knowledge_sections")
        total_sections = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM evaluation_criteria")
        total_criteria = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM successful_grant_examples")
        total_examples = cursor.fetchone()[0]

        # Qdrant —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        collection_info = self.qdrant.get_collection(self.collection_name)
        vectors_count = collection_info.points_count

        return {
            "postgres": {
                "active_sources": active_sources,
                "sections": total_sections,
                "criteria": total_criteria,
                "examples": total_examples
            },
            "qdrant": {
                "vectors": vectors_count,
                "collection_status": collection_info.status
            }
        }

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.pg_conn.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")


# ============================================================================
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
# ============================================================================

if __name__ == "__main__":
    # –°–æ–∑–¥–∞—Ç—å Expert Agent
    agent = ExpertAgent()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = agent.get_statistics()
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:")
    print(f"  PostgreSQL:")
    print(f"    - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats['postgres']['active_sources']}")
    print(f"    - –†–∞–∑–¥–µ–ª–æ–≤: {stats['postgres']['sections']}")
    print(f"    - –ö—Ä–∏—Ç–µ—Ä–∏–µ–≤ –æ—Ü–µ–Ω–∫–∏: {stats['postgres']['criteria']}")
    print(f"    - –ü—Ä–∏–º–µ—Ä–æ–≤ –∑–∞—è–≤–æ–∫: {stats['postgres']['examples']}")
    print(f"  Qdrant:")
    print(f"    - –í–µ–∫—Ç–æ—Ä–æ–≤: {stats['qdrant']['vectors']}")
    print(f"    - –°—Ç–∞—Ç—É—Å: {stats['qdrant']['collection_status']}")

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
    print("\nüîç –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    results = agent.query_knowledge(
        question="–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞?",
        fund="fpg",
        top_k=3
    )

    if results:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n")
        for i, result in enumerate(results, 1):
            print(f"{i}. {result['section_name']} (score: {result['relevance_score']:.3f})")
            print(f"   {result['content'][:200]}...")
            print()
    else:
        print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    agent.close()
