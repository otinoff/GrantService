#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
StandaloneAuditor - Auditor Agent wrapper –¥–ª—è standalone testing

–¶–ï–õ–¨: –û—Ç–¥–µ–ª–∏—Ç—å Auditor –æ—Ç database dependency + FIX rate limit

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê (Iteration 30):
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç grant_content (str) –≤–º–µ—Å—Ç–æ dict
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat-2-Max –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
- –ö–†–ò–¢–ò–ß–ù–û: –ü–∞—É–∑–∞ 6 —Å–µ–∫—É–Ω–¥ –ü–ï–†–ï–î –∑–∞–ø—Ä–æ—Å–æ–º (fix 529 errors)
- Exponential backoff –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
- 3 –ø–æ–ø—ã—Ç–∫–∏ retry
- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç audit_result (Dict)
- –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ê–≤—Ç–æ—Ä: Claude Code (Iteration 30)
–î–∞—Ç–∞: 2025-10-24
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import os
from pathlib import Path
from typing import Dict, Any, List, Optional
import logging
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "agents"))

from shared.llm.unified_llm_client import UnifiedLLMClient

logger = logging.getLogger(__name__)


class RateLimitError(Exception):
    """Custom exception for rate limit errors"""
    pass


class StandaloneAuditor:
    """
    Standalone Auditor - —Å –ø–∞—É–∑–∞–º–∏ –¥–ª—è rate limit

    –ö–†–ò–¢–ò–ß–ù–´–ï FIX:
    - Delay 6 —Å–µ–∫—É–Ω–¥ –ü–ï–†–ï–î –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ GigaChat
    - Exponential backoff –ø—Ä–∏ 529/429 errors
    - 3 retry attempts
    - Timeout –Ω–∞ –∑–∞–ø—Ä–æ—Å

    Example:
        auditor = StandaloneAuditor(
            llm_provider='gigachat',
            rate_limit_delay=6,
            retry_attempts=3
        )

        audit_result = await auditor.audit(grant_content)
    """

    def __init__(
        self,
        llm_provider: str = 'gigachat',
        rate_limit_delay: int = 6,
        retry_attempts: int = 3,
        db=None  # Optional
    ):
        """
        Args:
            llm_provider: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä (default: gigachat)
            rate_limit_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ü–ï–†–ï–î –∑–∞–ø—Ä–æ—Å–æ–º (—Å–µ–∫—É–Ω–¥—ã)
            retry_attempts: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ retry
            db: Database instance (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.llm_provider = llm_provider
        self.rate_limit_delay = rate_limit_delay
        self.retry_attempts = retry_attempts
        self.db = db

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM client
        self.llm_client = UnifiedLLMClient(provider=llm_provider)

        logger.info(f"[StandaloneAuditor] Initialized with {llm_provider}")
        logger.info(f"[StandaloneAuditor] Rate limit delay: {rate_limit_delay}s")
        logger.info(f"[StandaloneAuditor] Retry attempts: {retry_attempts}")

    def _build_audit_prompt(self, grant_content: str) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ –∑–∞—è–≤–∫–∏

        Args:
            grant_content: –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏

        Returns:
            str: –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM
        """
        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º –∑–∞—è–≤–∫–∞–º —Å 20-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∏—Å—Å–∏—è—Ö –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–≤–µ—Å—Ç–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ –∏ –æ—Ü–µ–Ω–∏—Ç—å –µ—ë –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:

1. –ü–û–õ–ù–û–¢–ê (0-10):
   - –í—Å–µ –ª–∏ —Ä–∞–∑–¥–µ–ª—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã?
   - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–µ—Ç–∞–ª–µ–π?
   - –ï—Å—Ç—å –ª–∏ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã?

2. –ö–ê–ß–ï–°–¢–í–û (0-10):
   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
   - –ù–∞–ª–∏—á–∏–µ —Ü–∏—Ç–∞—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   - –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   - –ê—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã

3. –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø–ú –§–ü–ì (0-10):
   - –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
   - –ò–∑–º–µ—Ä–∏–º–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
   - –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
   - –ù–∞–ª–∏—á–∏–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤

–ó–ê–Ø–í–ö–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:

{grant_content}

---

–í–ï–†–ù–ò –†–ï–ó–£–õ–¨–¢–ê–¢ –í –§–û–†–ú–ê–¢–ï JSON:

{{
  "completeness_score": 8.5,
  "quality_score": 9.0,
  "compliance_score": 8.0,
  "overall_score": 0.85,
  "can_submit": true,
  "strengths": [
    "–°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1",
    "–°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2",
    "–°–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 3"
  ],
  "weaknesses": [
    "–°–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 1",
    "–°–ª–∞–±–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ 2"
  ],
  "recommendations": [
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1",
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2",
    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 3"
  ],
  "missing_elements": [
    "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç 1 (–µ—Å–ª–∏ –µ—Å—Ç—å)"
  ],
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∞–Ω–∞–ª–∏–∑–∞"
}}

–í–ê–ñ–ù–û: –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!
"""
        return prompt

    def _parse_audit_response(self, response_text: str) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM –≤ structured dict

        Args:
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM

        Returns:
            Dict: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞
        """
        import json
        import re

        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group(0)
                audit_result = json.loads(json_str)

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                required_fields = [
                    'completeness_score', 'quality_score', 'compliance_score',
                    'overall_score', 'can_submit', 'recommendations'
                ]

                for field in required_fields:
                    if field not in audit_result:
                        logger.warning(f"‚ö†Ô∏è Missing field '{field}' in audit result")

                return audit_result
            else:
                raise ValueError("No JSON found in response")

        except Exception as e:
            logger.error(f"‚ùå Failed to parse audit response: {e}")
            logger.error(f"Response text: {response_text[:500]}")

            # Fallback —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            return {
                "completeness_score": 0.0,
                "quality_score": 0.0,
                "compliance_score": 0.0,
                "overall_score": 0.0,
                "can_submit": False,
                "strengths": [],
                "weaknesses": ["–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—É–¥–∏—Ç–∞"],
                "recommendations": ["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑"],
                "missing_elements": [],
                "summary": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞",
                "error": str(e)
            }

    async def _audit_with_retry(self, grant_content: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É–¥–∏—Ç —Å retry logic

        Args:
            grant_content: –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏

        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞

        Raises:
            RateLimitError: –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        """
        prompt = self._build_audit_prompt(grant_content)

        for attempt in range(self.retry_attempts):
            try:
                logger.info(f"üîç Auditor attempt {attempt + 1}/{self.retry_attempts}")

                # –ö–†–ò–¢–ò–ß–ù–û: –ü–∞—É–∑–∞ –ü–ï–†–ï–î –∑–∞–ø—Ä–æ—Å–æ–º!
                if attempt > 0:
                    # Exponential backoff –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
                    wait_time = self.rate_limit_delay * (2 ** attempt)
                    logger.info(f"‚è≥ Exponential backoff: waiting {wait_time}s...")
                    await asyncio.sleep(wait_time)
                else:
                    # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ - –æ–±—ã—á–Ω–∞—è –ø–∞—É–∑–∞
                    logger.info(f"‚è≥ Rate limit delay: waiting {self.rate_limit_delay}s...")
                    await asyncio.sleep(self.rate_limit_delay)

                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                async with self.llm_client as client:
                    response_text = await client.generate_text(
                        prompt=prompt,
                        max_tokens=4000
                    )

                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                audit_result = self._parse_audit_response(response_text)

                logger.info(f"‚úÖ Auditor succeeded on attempt {attempt + 1}")
                return audit_result

            except Exception as e:
                error_str = str(e).lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ rate limit errors
                if '529' in error_str or '429' in error_str or 'rate limit' in error_str:
                    logger.warning(f"‚ö†Ô∏è Rate limit error (attempt {attempt + 1}/{self.retry_attempts}): {e}")

                    if attempt < self.retry_attempts - 1:
                        continue  # Retry
                    else:
                        raise RateLimitError(f"Rate limit exceeded after {self.retry_attempts} attempts")
                else:
                    # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –Ω–µ retry
                    logger.error(f"‚ùå Auditor error: {e}")
                    raise

        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        raise RateLimitError(f"Failed after {self.retry_attempts} attempts")

    async def audit(self, grant_content: str) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É–¥–∏—Ç –∑–∞—è–≤–∫–∏ –ë–ï–ó –ë–î –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

        Args:
            grant_content: str (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏)

        Returns:
            audit_result: {
                "overall_score": 0.85,
                "completeness_score": 8.5,
                "quality_score": 9.0,
                "compliance_score": 8.0,
                "can_submit": true,
                "recommendations": [...]
            }
        """
        start_time = time.time()

        logger.info("=" * 80)
        logger.info("üìä STANDALONE AUDITOR - STARTING")
        logger.info("=" * 80)
        logger.info(f"Grant length: {len(grant_content)} characters")
        logger.info(f"LLM Provider: {self.llm_provider}")
        logger.info("")

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—É–¥–∏—Ç —Å retry
            audit_result = await self._audit_with_retry(grant_content)

            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            audit_result['metadata'] = {
                "timestamp": datetime.now().isoformat(),
                "llm_provider": self.llm_provider,
                "grant_length": len(grant_content),
                "rate_limit_delay": self.rate_limit_delay
            }

            duration = time.time() - start_time

            logger.info("")
            logger.info("=" * 80)
            logger.info("‚úÖ STANDALONE AUDITOR - COMPLETED")
            logger.info("=" * 80)
            logger.info(f"Duration: {duration:.1f}s")
            logger.info(f"Overall score: {audit_result['overall_score'] * 100:.1f}%")
            logger.info(f"Can submit: {audit_result['can_submit']}")
            logger.info(f"Recommendations: {len(audit_result.get('recommendations', []))}")
            logger.info("")

            return audit_result

        except RateLimitError as e:
            logger.error(f"‚ùå Rate limit error: {e}")

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π
            return {
                "overall_score": 0.0,
                "completeness_score": 0.0,
                "quality_score": 0.0,
                "compliance_score": 0.0,
                "can_submit": False,
                "strengths": [],
                "weaknesses": ["Rate limit error"],
                "recommendations": [
                    "–£–≤–µ–ª–∏—á–∏—Ç—å rate_limit_delay –¥–æ 10+ —Å–µ–∫—É–Ω–¥",
                    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–≤–æ—Ç—ã GigaChat API"
                ],
                "missing_elements": [],
                "summary": f"–ê—É–¥–∏—Ç –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∏–∑-–∑–∞ rate limit: {e}",
                "error": str(e)
            }

        except Exception as e:
            logger.error(f"‚ùå Auditor failed: {e}")
            import traceback
            traceback.print_exc()
            raise


if __name__ == "__main__":
    """
    Quick test of StandaloneAuditor
    """
    import sys
    if sys.platform == 'win32':
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    test_grant_content = """
# –ì–†–ê–ù–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê

## –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
–£—Ä–æ–∫–∏ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –Ω–µ –º–æ–≥—É—Ç –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –ø—Ä–∏–≤–ª–µ—á—å –¥–µ—Ç–µ–π –∫ —Å–ø–æ—Ä—Ç—É.
–°–æ–≥–ª–∞—Å–Ω–æ –¥–∞–Ω–Ω—ã–º –†–æ—Å—Å—Ç–∞—Ç [–ò—Å—Ç–æ—á–Ω–∏–∫ ‚Ññ1], —Ç–æ–ª—å–∫–æ 30% –¥–µ—Ç–µ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º.

## –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞
–°–ø–æ—Ä—Ç–∏–≤–Ω–æ-–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ –¥–µ—Ç–µ–π —á–µ—Ä–µ–∑ —Å—Ç—Ä–µ–ª—å–±—É –∏–∑ –ª—É–∫–∞.

## –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
–≥. –ö–µ–º–µ—Ä–æ–≤–æ, 50+ —à–∫–æ–ª

## –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
- 1000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
- 20 –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
- 4 —Ç—É—Ä–Ω–∏—Ä–∞

## –ü–∞—Ä—Ç–Ω—ë—Ä—ã
–õ–∏–≥–∞ —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞ –ö—É–∑–±–∞—Å—Å–∞
"""

    async def main():
        auditor = StandaloneAuditor(
            llm_provider='gigachat',
            rate_limit_delay=6,
            retry_attempts=3
        )

        audit_result = await auditor.audit(test_grant_content)

        print("\nüìä AUDIT RESULT:")
        import json
        print(json.dumps(audit_result, indent=2, ensure_ascii=False))

    asyncio.run(main())
