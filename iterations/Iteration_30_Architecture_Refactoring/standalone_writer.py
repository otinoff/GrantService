#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
StandaloneWriter - Writer Agent wrapper –¥–ª—è standalone testing

–¶–ï–õ–¨: –û—Ç–¥–µ–ª–∏—Ç—å Writer –æ—Ç database dependency

–ê–†–•–ò–¢–ï–ö–¢–£–†–ê (Iteration 30):
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç project_data + research_results —è–≤–Ω–æ (Dict)
- –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î –≤–Ω—É—Ç—Ä–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat-2-Max –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç grant_content (str)
- –ë–ï–ó —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

–ê–≤—Ç–æ—Ä: Claude Code (Iteration 30)
–î–∞—Ç–∞: 2025-10-24
–í–µ—Ä—Å–∏—è: 1.0
"""

import sys
import os
from pathlib import Path
from typing import Dict, Any, List, Optional
import logging
import asyncio
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_root = Path(r"C:\SnowWhiteAI\GrantService")
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "shared"))
sys.path.insert(0, str(project_root / "agents"))

from shared.llm.unified_llm_client import UnifiedLLMClient

logger = logging.getLogger(__name__)


class StandaloneWriter:
    """
    Standalone Writer - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —è–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ë–ï–ó –ë–î –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
    - GigaChat-2-Max –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - Research results (from Researcher)
    - Project data
    - Rate limit handling (6s delay)

    Example:
        writer = StandaloneWriter(
            llm_provider='gigachat',
            rate_limit_delay=6
        )

        grant_content = await writer.write(
            project_data=project_data,
            research_results=research_results
        )
    """

    def __init__(
        self,
        llm_provider: str = 'gigachat',
        rate_limit_delay: int = 6,
        db=None  # Optional –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    ):
        """
        Args:
            llm_provider: LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä (default: gigachat)
            rate_limit_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            db: Database instance (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.llm_provider = llm_provider
        self.rate_limit_delay = rate_limit_delay
        self.db = db

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM client
        self.llm_client = UnifiedLLMClient(provider=llm_provider)

        logger.info(f"[StandaloneWriter] Initialized with {llm_provider}")

    def _format_citations(self, research_results: Dict) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ research_results

        Args:
            research_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Researcher

        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —Ü–∏—Ç–∞—Ç
        """
        citations = []

        for block_name in ['block1_problem', 'block2_geography', 'block3_goals']:
            block = research_results.get(block_name, {})
            facts = block.get('key_facts', [])

            for fact in facts[:5]:  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 5 –∏–∑ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
                citations.append(fact)

        logger.info(f"üìä Extracted {len(citations)} citations from research")
        return citations

    def _build_context(
        self,
        project_data: Dict,
        research_results: Dict,
        citations: List[str]
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM

        Args:
            project_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            research_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            citations: –¶–∏—Ç–∞—Ç—ã –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è

        Returns:
            str: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        context = f"""
# –î–ê–ù–ù–´–ï –ü–†–û–ï–ö–¢–ê

–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_data.get('project_name', '')}

–ü—Ä–æ–±–ª–µ–º–∞: {project_data.get('problem', '')}

–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {project_data.get('target_audience', '')}

–ì–µ–æ–≥—Ä–∞—Ñ–∏—è: {project_data.get('geography', '')}

–¶–µ–ª–∏: {', '.join(project_data.get('goals', [])) if isinstance(project_data.get('goals'), list) else project_data.get('goals', '')}

# –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø

## –ë–ª–æ–∫ 1: –ü—Ä–æ–±–ª–µ–º–∞
{research_results.get('block1_problem', {}).get('summary', '')}

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã:
{chr(10).join(f'- {fact[:200]}...' for fact in research_results.get('block1_problem', {}).get('key_facts', [])[:3])}

## –ë–ª–æ–∫ 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è
{research_results.get('block2_geography', {}).get('summary', '')}

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã:
{chr(10).join(f'- {fact[:200]}...' for fact in research_results.get('block2_geography', {}).get('key_facts', [])[:3])}

## –ë–ª–æ–∫ 3: –¶–µ–ª–∏
{research_results.get('block3_goals', {}).get('summary', '')}

–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã:
{chr(10).join(f'- {fact[:200]}...' for fact in research_results.get('block3_goals', {}).get('key_facts', [])[:3])}

# –î–û–°–¢–£–ü–ù–´–ï –¶–ò–¢–ê–¢–´

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ —Ü–∏—Ç–∞—Ç—ã –≤ –∑–∞—è–≤–∫–µ (–º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ç–∞—Ç):

{chr(10).join(f'{i+1}. {cit[:300]}...' for i, cit in enumerate(citations[:15]))}
"""
        return context

    def _build_prompt(
        self,
        project_data: Dict,
        research_results: Dict,
        citations: List[str]
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏

        Args:
            project_data: –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
            research_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            citations: –¶–∏—Ç–∞—Ç—ã

        Returns:
            str: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        """
        context = self._build_context(project_data, research_results, citations)

        prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã 15+ –ª–µ—Ç.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –¥–ª—è –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ (–§–ü–ì).

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ú–∏–Ω–∏–º—É–º 30,000 —Å–∏–º–≤–æ–ª–æ–≤
2. –ú–∏–Ω–∏–º—É–º 10 —Ü–∏—Ç–∞—Ç –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π [–ò—Å—Ç–æ—á–Ω–∏–∫ ‚ÑñX])
3. –ú–∏–Ω–∏–º—É–º 2 —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
   - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (500 —Å–ª–æ–≤)
   - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (1500 —Å–ª–æ–≤ + —Ü–∏—Ç–∞—Ç—ã)
   - –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (800 —Å–ª–æ–≤)
   - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (800 —Å–ª–æ–≤)
   - –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏ (1000 —Å–ª–æ–≤)
   - –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (1500 —Å–ª–æ–≤)
   - –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (1000 —Å–ª–æ–≤ + —Ç–∞–±–ª–∏—Ü—ã)
   - –ü–∞—Ä—Ç–Ω—ë—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ (500 —Å–ª–æ–≤)
   - –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (800 —Å–ª–æ–≤)

–í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
- –í—Å–µ —Ü–∏—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–º–µ—á–µ–Ω—ã [–ò—Å—Ç–æ—á–Ω–∏–∫ ‚ÑñX]
- –¶–∏—Ñ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
- –ü–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —è–∑—ã–∫–æ–º
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑

{context}

–ù–ê–ß–ò–ù–ê–ô –ì–ï–ù–ï–†–ê–¶–ò–Æ –ó–ê–Ø–í–ö–ò:
"""
        return prompt

    async def write(
        self,
        project_data: Dict,
        research_results: Dict
    ) -> str:
        """
        –ù–∞–ø–∏—Å–∞—Ç—å –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –ë–ï–ó –ë–î –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

        Args:
            project_data: {
                "project_name": "...",
                "problem": "...",
                "target_audience": "...",
                "geography": "...",
                "goals": [...]
            }
            research_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Researcher {
                "block1_problem": {...},
                "block2_geography": {...},
                "block3_goals": {...}
            }

        Returns:
            grant_content: str (–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏)
        """
        start_time = time.time()

        logger.info("=" * 80)
        logger.info("‚úçÔ∏è STANDALONE WRITER - STARTING")
        logger.info("=" * 80)
        logger.info(f"Project: {project_data.get('project_name', 'Unknown')}")
        logger.info(f"LLM Provider: {self.llm_provider}")
        logger.info(f"Rate limit delay: {self.rate_limit_delay}s")
        logger.info("")

        try:
            # 1. –ò–∑–≤–ª–µ—á—å —Ü–∏—Ç–∞—Ç—ã –∏–∑ research_results
            citations = self._format_citations(research_results)

            logger.info(f"üìä Citations prepared: {len(citations)}")

            # 2. –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–º–ø—Ç
            prompt = self._build_prompt(project_data, research_results, citations)

            logger.info(f"üìù Prompt built: {len(prompt)} characters")

            # 3. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ LLM
            logger.info("ü§ñ Generating grant application...")
            logger.info(f"   (This may take 1-2 minutes)")

            async with self.llm_client as client:
                grant_content = await client.generate_text(
                    prompt=prompt,
                    max_tokens=20000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è 30k+ —Å–∏–º–≤–æ–ª–æ–≤
                )

            duration = time.time() - start_time

            logger.info("")
            logger.info("=" * 80)
            logger.info("‚úÖ STANDALONE WRITER - COMPLETED")
            logger.info("=" * 80)
            logger.info(f"Duration: {duration:.1f}s")
            logger.info(f"Grant length: {len(grant_content)} characters")
            logger.info(f"Citations used: ~{grant_content.count('[–ò—Å—Ç–æ—á–Ω–∏–∫')}")
            logger.info("")

            return grant_content

        except Exception as e:
            logger.error(f"‚ùå Writer failed: {e}")
            import traceback
            traceback.print_exc()
            raise


if __name__ == "__main__":
    """
    Quick test of StandaloneWriter
    """
    import sys
    if sys.platform == 'win32':
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Test data
    test_project_data = {
        "project_name": "–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞ - —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ-–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ",
        "problem": "–£—Ä–æ–∫–∏ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä—ã –Ω–µ –º–æ–≥—É—Ç –≤ –ø–æ–ª–Ω–æ–π –º–µ—Ä–µ –ø—Ä–∏–≤–ª–µ—á—å –¥–µ—Ç–µ–π –∫ —Å–ø–æ—Ä—Ç—É",
        "target_audience": "–î–µ—Ç–∏ –∏ –º–æ–ª–æ–¥—ë–∂—å 10-21 –ª–µ—Ç",
        "geography": "–≥. –ö–µ–º–µ—Ä–æ–≤–æ",
        "goals": ["–°–ø–æ—Ä—Ç–∏–≤–Ω–æ-–ø–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ", "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –ó–û–ñ"]
    }

    test_research_results = {
        "block1_problem": {
            "summary": "–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–µ–π –∫ —Å–ø–æ—Ä—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω–∞",
            "key_facts": [
                "–°–æ–≥–ª–∞—Å–Ω–æ –†–æ—Å—Å—Ç–∞—Ç, —Ç–æ–ª—å–∫–æ 30% –¥–µ—Ç–µ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º",
                "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ –≤ —à–∫–æ–ª–∞—Ö –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            ],
            "total_sources": 10
        },
        "block2_geography": {
            "summary": "–ö–µ–º–µ—Ä–æ–≤–æ - –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º 550 —Ç—ã—Å.",
            "key_facts": [
                "–í –ö–µ–º–µ—Ä–æ–≤–æ 50+ —à–∫–æ–ª –∏ 10+ –≤—É–∑–æ–≤",
                "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≤–∏—Ç–∞"
            ],
            "total_sources": 8
        },
        "block3_goals": {
            "summary": "–ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ø–æ—Ä—Ç",
            "key_facts": [
                "–°—Ç—Ä–µ–ª—å–±–∞ –∏–∑ –ª—É–∫–∞ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É",
                "–ü—Ä–∏–∫–ª–∞–¥–Ω–æ–π –Ω–∞–≤—ã–∫ –¥–ª—è –∞—Ä–º–µ–π—Å–∫–æ–π —Å–ª—É–∂–±—ã"
            ],
            "total_sources": 7
        },
        "metadata": {
            "total_queries": 27,
            "websearch_provider": "perplexity"
        }
    }

    async def main():
        writer = StandaloneWriter(llm_provider='gigachat')

        grant_content = await writer.write(
            project_data=test_project_data,
            research_results=test_research_results
        )

        print("\nüìÑ GRANT APPLICATION:")
        print(grant_content[:1000])
        print(f"\n... (total {len(grant_content)} characters)")

    asyncio.run(main())
