#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∫–µ—Ç
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç anketa_id –¥–ª—è —Å–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –¥–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService')
sys.path.append('/var/GrantService/data')

from data.database.models import GrantServiceDatabase, get_kuzbass_time

def migrate_existing_anketas():
    """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∫–µ—Ç - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è anketa_id –¥–ª—è —Å–µ—Å—Å–∏–π –±–µ–∑ –Ω–µ–≥–æ"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∫–µ—Ç")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = GrantServiceDatabase()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        all_sessions = db.get_all_sessions(limit=1000)
        print(f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –≤ –±–∞–∑–µ: {len(all_sessions)}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Å—Å–∏–∏ –±–µ–∑ anketa_id
        sessions_without_anketa = [s for s in all_sessions if not s.get('anketa_id')]
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π –±–µ–∑ anketa_id: {len(sessions_without_anketa)}")
        
        if not sessions_without_anketa:
            print("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏–º–µ—é—Ç anketa_id!")
            return
        
        migrated_count = 0
        error_count = 0
        
        for session in sessions_without_anketa:
            try:
                print(f"\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é ID: {session['id']}")
                user_display = session.get('username', f"ID:{session['telegram_id']}")
                print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}")
                print(f"   –ò–º—è: {session.get('first_name', '')} {session.get('last_name', '')}")
                print(f"   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {session.get('started_at', 'Unknown')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
                has_interview_data = bool(session.get('interview_data'))
                print(f"   –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {'‚úÖ –ï—Å—Ç—å' if has_interview_data else '‚ùå –ù–µ—Ç'}")
                
                if not has_interview_data:
                    print("   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é")
                    continue
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_data = {
                    "telegram_id": session["telegram_id"],
                    "username": session.get("username"),
                    "first_name": session.get("first_name"),
                    "last_name": session.get("last_name")
                }
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º anketa_id
                anketa_id = db.generate_anketa_id(user_data)
                print(f"   üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω anketa_id: {anketa_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é —Å anketa_id
                success = update_session_with_anketa_id(db, session['id'], anketa_id)
                
                if success:
                    print(f"   ‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    migrated_count += 1
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏")
                    error_count += 1
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session['id']}: {e}")
                error_count += 1
        
        print("\n" + "=" * 50)
        print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
        print(f"   üìã –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {migrated_count + error_count}")
        
        if migrated_count > 0:
            print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å {migrated_count} –∞–Ω–∫–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

def update_session_with_anketa_id(db, session_id, anketa_id):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é —Å anketa_id"""
    try:
        with db.connect() as conn:
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é
            cursor.execute("""
                UPDATE sessions 
                SET anketa_id = ?, 
                    status = CASE 
                        WHEN interview_data IS NOT NULL AND interview_data != '' 
                        THEN 'completed' 
                        ELSE status 
                    END,
                    completed_at = CASE 
                        WHEN interview_data IS NOT NULL AND interview_data != '' 
                        THEN ? 
                        ELSE completed_at 
                    END
                WHERE id = ?
            """, (anketa_id, get_kuzbass_time(), session_id))
            
            conn.commit()
            
            if cursor.rowcount > 0:
                return True
            else:
                print(f"   ‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        return False

def show_migration_preview():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–æ–≥–æ, —á—Ç–æ –±—É–¥–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ"""
    print("üîç –ü—Ä–µ–≤—å—é –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print("=" * 50)
    
    db = GrantServiceDatabase()
    
    try:
        all_sessions = db.get_all_sessions(limit=1000)
        sessions_without_anketa = [s for s in all_sessions if not s.get('anketa_id')]
        
        print(f"üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {len(all_sessions)}")
        print(f"üîç –ë–µ–∑ anketa_id: {len(sessions_without_anketa)}")
        
        if sessions_without_anketa:
            print(f"\nüìã –°–µ—Å—Å–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏:")
            for i, session in enumerate(sessions_without_anketa[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                user_display = session.get('username', f"ID:{session['telegram_id']}")
                has_data = "‚úÖ" if session.get('interview_data') else "‚ùå"
                print(f"   {i+1}. {user_display} - {has_data} –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é")
            
            if len(sessions_without_anketa) > 5:
                print(f"   ... –∏ –µ—â–µ {len(sessions_without_anketa) - 5} —Å–µ—Å—Å–∏–π")
        else:
            print("‚úÖ –í—Å–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –∏–º–µ—é—Ç anketa_id!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–≤—å—é: {e}")

if __name__ == "__main__":
    print("üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–∫–µ—Ç")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    show_migration_preview()
    
    print("\n" + "=" * 50)
    response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (y/N): ").strip().lower()
    
    if response in ['y', 'yes', '–¥–∞', '–¥']:
        migrate_existing_anketas()
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

