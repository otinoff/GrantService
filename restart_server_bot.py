#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import sqlite3
import subprocess
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_database_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = "data/grant_service.db"
    
    if not os.path.exists(db_path):
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        cursor.execute("SELECT COUNT(*) FROM questions WHERE is_active = 1")
        active_questions = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        cursor.execute("SELECT COUNT(*) FROM questions WHERE hint_text IS NOT NULL AND hint_text != ''")
        questions_with_hints = cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='questions'")
        table_exists = cursor.fetchone() is not None
        
        conn.close()
        
        logger.info(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        logger.info(f"  - –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {active_questions}")
        logger.info(f"  - –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {questions_with_hints}")
        logger.info(f"  - –¢–∞–±–ª–∏—Ü–∞ questions —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {table_exists}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        mod_time = os.path.getmtime(db_path)
        mod_datetime = datetime.fromtimestamp(mod_time)
        logger.info(f"  - –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–î: {mod_datetime}")
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def find_bot_process():
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –±–æ—Ç–∞"""
    try:
        # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ Python —Å main.py
        result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
        if result.returncode == 0:
            pids = result.stdout.strip().split('\n')
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞: {pids}")
            return pids
        else:
            logger.info("üîç –ü—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return []

def kill_bot_processes(pids):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞"""
    for pid in pids:
        try:
            subprocess.run(['kill', '-TERM', pid], check=True)
            logger.info(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            time.sleep(2)
        except subprocess.CalledProcessError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")
            try:
                subprocess.run(['kill', '-KILL', pid], check=True)
                logger.info(f"üíÄ –ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as e2:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e2}")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É telegram-bot
        os.chdir('telegram-bot')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        subprocess.Popen(['python3', 'main.py'], 
                        stdout=subprocess.DEVNULL, 
                        stderr=subprocess.DEVNULL,
                        start_new_session=True)
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
        os.chdir('..')
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
    logger.info("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not check_database_status():
        logger.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # 2. –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞
    logger.info("2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞...")
    pids = find_bot_process()
    
    # 3. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    if pids:
        logger.info("3Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞...")
        kill_bot_processes(pids)
        time.sleep(3)
    else:
        logger.info("3Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∑–∞–Ω–æ–≤–æ
    logger.info("4Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    if start_bot():
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        time.sleep(5)
        new_pids = find_bot_process()
        if new_pids:
            logger.info(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å PID: {new_pids}")
        else:
            logger.warning("‚ö†Ô∏è –ë–æ—Ç –º–æ–∂–µ—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
        
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        return False

if __name__ == "__main__":
    main()