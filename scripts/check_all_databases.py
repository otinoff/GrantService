#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –∏—Ö –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import sqlite3
import os
import glob
from datetime import datetime

def check_all_databases():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–• –ù–ê –°–ï–†–í–ï–†–ï")
    print("=" * 80)
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    possible_paths = [
        "/var/GrantService/data/grantservice.db",
        "/var/GrantService/grantservice.db",
        "/home/*/GrantService/data/grantservice.db",
        "/home/*/GrantService/grantservice.db",
        "/opt/GrantService/data/grantservice.db",
        "/opt/GrantService/grantservice.db"
    ]
    
    found_databases = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—É—Ç–∏
    for path in possible_paths[:6]:  # –ü–µ—Ä–≤—ã–µ 6 –ø—É—Ç–µ–π –±–µ–∑ wildcard
        if os.path.exists(path):
            found_databases.append(path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ —Å wildcard
    for pattern in possible_paths[6:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—É—Ç–∏ —Å wildcard
        matches = glob.glob(pattern)
        for match in matches:
            if os.path.exists(match):
                found_databases.append(match)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: {len(found_databases)}")
    print("-" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    for i, db_path in enumerate(found_databases, 1):
        print(f"\n{i}. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        print(f"   –ü—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(db_path)}")
        
        if os.path.exists(db_path):
            try:
                # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                size = os.path.getsize(db_path)
                mtime = os.path.getmtime(db_path)
                mod_time = datetime.fromtimestamp(mtime)
                
                print(f"   –†–∞–∑–º–µ—Ä: {size:,} –±–∞–π—Ç")
                print(f"   –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                conn = sqlite3.connect(db_path)
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' 
                    ORDER BY name
                """)
                tables = cursor.fetchall()
                
                print(f"   –¢–∞–±–ª–∏—Ü: {len(tables)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É interview_questions
                if any(table[0] == 'interview_questions' for table in tables):
                    cursor.execute("""
                        SELECT COUNT(*), 
                               COUNT(CASE WHEN is_active = 1 THEN 1 END),
                               COUNT(CASE WHEN hint_text IS NOT NULL AND hint_text != '' THEN 1 END),
                               COUNT(CASE WHEN is_active = 1 AND hint_text IS NOT NULL AND hint_text != '' THEN 1 END)
                        FROM interview_questions
                    """)
                    
                    counts = cursor.fetchone()
                    total_q = counts[0]
                    active_q = counts[1]
                    with_hints = counts[2]
                    active_with_hints = counts[3]
                    
                    print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ: {total_q}")
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {active_q}")
                    print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {with_hints}")
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {active_with_hints}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                    cursor.execute("""
                        SELECT question_number, question_text, hint_text
                        FROM interview_questions 
                        WHERE is_active = 1
                        ORDER BY question_number
                        LIMIT 3
                    """)
                    
                    sample_questions = cursor.fetchall()
                    print("   –ü—Ä–∏–º–µ—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
                    for q in sample_questions:
                        q_num, q_text, hint = q
                        hint_status = "–ï–°–¢–¨" if hint and hint.strip() else "–ù–ï–¢"
                        print(f"     {q_num}. {hint_status} - {q_text[:50]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if any(table[0] == 'db_version' for table in tables):
                    cursor.execute("""
                        SELECT version, updated_at 
                        FROM db_version 
                        ORDER BY id DESC 
                        LIMIT 1
                    """)
                    version_row = cursor.fetchone()
                    if version_row:
                        print(f"   –í–µ—Ä—Å–∏—è –ë–î: {version_row[0]}")
                        print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∞: {version_row[1]}")
                
                conn.close()
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        
        print("-" * 40)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–≤–µ—Ä–∏–º –æ–±—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not found_databases:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø—É—Ç—è–º")
        print("–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
        
        common_dirs = ["/var", "/home", "/opt", "/usr/local"]
        for dir_path in common_dirs:
            if os.path.exists(dir_path):
                print(f"   –ü—Ä–æ–≤–µ—Ä–∫–∞: {dir_path}")
                try:
                    for root, dirs, files in os.walk(dir_path):
                        for file in files:
                            if file == "grantservice.db":
                                full_path = os.path.join(root, file)
                                found_databases.append(full_path)
                                print(f"     ‚úÖ –ù–∞–π–¥–µ–Ω–∞: {full_path}")
                except PermissionError:
                    print(f"     üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞: {dir_path}")

if __name__ == "__main__":
    check_all_databases()