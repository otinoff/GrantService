#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import sqlite3
import os
from datetime import datetime

def check_database_content():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    db_path = '/var/GrantService/data/grantservice.db'
    
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –°–û–î–ï–†–ñ–ò–ú–û–ì–û –ë–ê–ó–´ –î–ê–ù–ù–´–• –ù–ê –°–ï–†–í–ï–†–ï")
    print("=" * 80)
    print(f"–§–∞–π–ª –ë–î: {db_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(db_path):
        print("‚ùå –§–ê–ô–õ –ë–ê–ó–´ –î–ê–ù–ù–´–• –ù–ï –ù–ê–ô–î–ï–ù!")
        return
    
    # –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    mtime = os.path.getmtime(db_path)
    mod_time = datetime.fromtimestamp(mtime)
    print(f"–î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {mod_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        cursor.execute("""
            SELECT question_number, question_text, hint_text, field_name, question_type
            FROM interview_questions 
            WHERE is_active = 1 
            ORDER BY question_number
        """)
        
        questions = cursor.fetchall()
        
        print(f"\n–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        print("-" * 80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å
        for i, row in enumerate(questions, 1):
            q_num = row['question_number']
            q_text = row['question_text']
            hint_text = row['hint_text']
            field_name = row['field_name']
            q_type = row['question_type']
            
            print(f"\n{i}. –í–æ–ø—Ä–æ—Å {q_num}:")
            print(f"   –¢–µ–∫—Å—Ç: {q_text[:60]}{'...' if len(q_text) > 60 else ''}")
            print(f"   –ü–æ–ª–µ: {field_name}")
            print(f"   –¢–∏–ø: {q_type}")
            
            if hint_text and hint_text.strip():
                hint_preview = hint_text[:80] + "..." if len(hint_text) > 80 else hint_text
                print(f"   –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint_preview}")
                print(f"   ‚úÖ [OK] –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"   –ü–æ–¥—Å–∫–∞–∑–∫–∞: [–ù–ï–¢]")
                print(f"   ‚ùå [ERROR] –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        questions_with_hints = sum(1 for row in questions if row['hint_text'] and row['hint_text'].strip())
        questions_without_hints = len(questions) - questions_with_hints
        
        print("\n" + "=" * 80)
        print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print("-" * 80)
        print(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}")
        print(f"–í–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏: {questions_with_hints}")
        print(f"–í–æ–ø—Ä–æ—Å–æ–≤ –ë–ï–ó –ø–æ–¥—Å–∫–∞–∑–æ–∫: {questions_without_hints}")
        
        if questions_without_hints == 0:
            print("\nüéâ –í–°–ï –ê–ö–¢–ò–í–ù–´–ï –í–û–ü–†–û–°–´ –ò–ú–ï–Æ–¢ –ü–û–î–°–ö–ê–ó–ö–ò!")
            print("–ï—Å–ª–∏ –≤ Telegram –±–æ—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–¥–µ –±–æ—Ç–∞.")
        else:
            print(f"\n‚ùå –ù–ê–ô–î–ï–ù–û {questions_without_hints} –í–û–ü–†–û–°–û–í –ë–ï–ó –ü–û–î–°–ö–ê–ó–û–ö!")
            print("–ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–ê–ó–ï: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_database_content()