#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data.database import db

def check_questions_order():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ë–î"""
    
    try:
        with db.connect() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –Ω–æ–º–µ—Ä—É
            cursor.execute("""
                SELECT question_number, field_name, question_text, question_type, is_active
                FROM interview_questions 
                WHERE is_active = 1
                ORDER BY question_number
            """)
            
            questions = cursor.fetchall()
            
            print("="*80)
            print("–ê–ö–¢–ò–í–ù–´–ï –í–û–ü–†–û–°–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
            print("="*80)
            print(f"\n–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {len(questions)}\n")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤
            expected_number = 1
            gaps = []
            
            for q in questions:
                q_num, field, text, q_type, active = q
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if q_num != expected_number:
                    for missing in range(expected_number, q_num):
                        gaps.append(missing)
                    expected_number = q_num
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
                print(f"–í–æ–ø—Ä–æ—Å ‚Ññ{q_num:2} | –¢–∏–ø: {q_type:10} | –ü–æ–ª–µ: {field:30} | –¢–µ–∫—Å—Ç: {text[:50]}...")
                
                expected_number += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
            if gaps:
                print("\n" + "="*80)
                print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏!")
                print("="*80)
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞: {', '.join(map(str, gaps))}")
                print(f"–í—Å–µ–≥–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {len(gaps)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            cursor.execute("""
                SELECT question_number, field_name, question_text
                FROM interview_questions 
                WHERE is_active = 0
                ORDER BY question_number
            """)
            
            inactive = cursor.fetchall()
            if inactive:
                print("\n" + "="*80)
                print("–ù–ï–ê–ö–¢–ò–í–ù–´–ï –í–û–ü–†–û–°–´")
                print("="*80)
                for q in inactive:
                    print(f"–í–æ–ø—Ä–æ—Å ‚Ññ{q[0]:2} | {q[1]:30} | {q[2][:50]}...")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
            cursor.execute("""
                SELECT question_number, COUNT(*) as cnt
                FROM interview_questions
                WHERE is_active = 1
                GROUP BY question_number
                HAVING COUNT(*) > 1
            """)
            
            duplicates = cursor.fetchall()
            if duplicates:
                print("\n" + "="*80)
                print("‚ùå –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤!")
                print("="*80)
                for dup in duplicates:
                    print(f"–ù–æ–º–µ—Ä {dup[0]} –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {dup[1]} —Ä–∞–∑(–∞)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å ‚Ññ15 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
            print("\n" + "="*80)
            print("–ü–†–û–í–ï–†–ö–ê –í–û–ü–†–û–°–ê ‚Ññ15")
            print("="*80)
            
            cursor.execute("""
                SELECT * FROM interview_questions 
                WHERE question_number = 15
            """)
            
            q15 = cursor.fetchone()
            if q15:
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å ‚Ññ15 –Ω–∞–π–¥–µ–Ω:")
                print(f"   ID: {q15[0]}")
                print(f"   –¢–µ–∫—Å—Ç: {q15[2]}")
                print(f"   Field: {q15[3]}")
                print(f"   –¢–∏–ø: {q15[4] if len(q15) > 4 else 'text'}")
                print(f"   –ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if q15[7] else '–ù–µ—Ç'}")
            else:
                print("‚ùå –í–æ–ø—Ä–æ—Å ‚Ññ15 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            if gaps or duplicates:
                print("\n" + "="*80)
                print("üìù –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ")
                print("="*80)
                
                if gaps:
                    print("\n1. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –≤ –Ω—É–º–µ—Ä–∞—Ü–∏–∏:")
                    print("   - –ü–µ—Ä–µ–Ω—É–º–µ—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")
                    print("   - –ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
                    
                if duplicates:
                    print("\n2. –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
                    print("   - –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –≤–æ–ø—Ä–æ—Å–æ–≤")
                    print("   - –ò–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ª–∏—à–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
                    
                print("\n3. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç fix_questions_numbering.py –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    check_questions_order()