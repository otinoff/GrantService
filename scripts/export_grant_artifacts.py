#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Export Grant Artifacts - —ç–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≥—Ä–∞–Ω—Ç–æ–≤ –≤ PDF, DOCX, TXT
–°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –ø–æ–¥–ø–∞–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞
"""
import sys
import os
import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List

print("=" * 80)
print("üì¶ EXPORT GRANT ARTIFACTS - PDF, DOCX, TXT")
print("=" * 80)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Table, TableStyle
    from reportlab.lib import colors
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont
    PDF_AVAILABLE = True
    print("‚úÖ ReportLab –¥–æ—Å—Ç—É–ø–µ–Ω - PDF —ç–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–µ–Ω")
except ImportError:
    PDF_AVAILABLE = False
    print("‚ö†Ô∏è ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - PDF —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install reportlab")

try:
    from docx import Document
    from docx.shared import Pt, Inches, RGBColor
    from docx.enum.text import WD_ALIGN_PARAGRAPH
    DOCX_AVAILABLE = True
    print("‚úÖ python-docx –¥–æ—Å—Ç—É–ø–µ–Ω - DOCX —ç–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–µ–Ω")
except ImportError:
    DOCX_AVAILABLE = False
    print("‚ö†Ô∏è python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - DOCX —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")

# –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
OUTPUT_DIR = Path("grants_output")
OUTPUT_DIR.mkdir(exist_ok=True)

print(f"\nüìÅ –ü–∞–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {OUTPUT_DIR.absolute()}\n")


def create_txt_artifact(content: str, filepath: Path):
    """–°–æ–∑–¥–∞—Ç—å TXT –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"""
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ TXT: {filepath.name}")
    except Exception as e:
        print(f"  ‚ùå TXT: –û—à–∏–±–∫–∞ - {e}")


def create_docx_artifact(title: str, sections: List[Dict], filepath: Path):
    """–°–æ–∑–¥–∞—Ç—å DOCX –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"""
    if not DOCX_AVAILABLE:
        print(f"  ‚è≠Ô∏è  DOCX: –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
        return

    try:
        doc = Document()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        heading = doc.add_heading(title, 0)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # –î–∞—Ç–∞
        date_p = doc.add_paragraph(f"–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        date_p.alignment = WD_ALIGN_PARAGRAPH.CENTER

        doc.add_paragraph()

        # –°–µ–∫—Ü–∏–∏
        for section in sections:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            doc.add_heading(section.get('heading', '–†–∞–∑–¥–µ–ª'), level=1)

            # –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
            content = section.get('content', '')
            if isinstance(content, dict):
                # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫
                for key, value in content.items():
                    p = doc.add_paragraph()
                    run = p.add_run(f"{key}: ")
                    run.bold = True
                    p.add_run(str(value))
            elif isinstance(content, list):
                # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫
                for item in content:
                    doc.add_paragraph(str(item), style='List Bullet')
            else:
                # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                for line in str(content).split('\n'):
                    if line.strip():
                        doc.add_paragraph(line.strip())

            doc.add_paragraph()

        doc.save(str(filepath))
        print(f"  ‚úÖ DOCX: {filepath.name}")
    except Exception as e:
        print(f"  ‚ùå DOCX: –û—à–∏–±–∫–∞ - {e}")


def create_pdf_artifact(title: str, sections: List[Dict], filepath: Path):
    """–°–æ–∑–¥–∞—Ç—å PDF –∞—Ä—Ç–µ—Ñ–∞–∫—Ç"""
    if not PDF_AVAILABLE:
        print(f"  ‚è≠Ô∏è  PDF: –ü—Ä–æ–ø—É—â–µ–Ω–æ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
        return

    try:
        doc = SimpleDocTemplate(str(filepath), pagesize=A4)
        story = []
        styles = getSampleStyleSheet()

        # –°—Ç–∏–ª–∏
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#2C3E50'),
            spaceAfter=30,
            alignment=1  # CENTER
        )

        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            textColor=colors.HexColor('#34495E'),
            spaceAfter=12
        )

        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        story.append(Paragraph(title, title_style))
        story.append(Paragraph(f"–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", normal_style))
        story.append(Spacer(1, 0.3*inch))

        # –°–µ–∫—Ü–∏–∏
        for section in sections:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            story.append(Paragraph(section.get('heading', '–†–∞–∑–¥–µ–ª'), heading_style))

            # –ö–æ–Ω—Ç–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
            content = section.get('content', '')
            if isinstance(content, dict):
                # –°–ª–æ–≤–∞—Ä—å
                for key, value in content.items():
                    text = f"<b>{key}:</b> {value}"
                    story.append(Paragraph(text, normal_style))
            elif isinstance(content, list):
                # –°–ø–∏—Å–æ–∫
                for item in content:
                    story.append(Paragraph(f"‚Ä¢ {item}", normal_style))
            else:
                # –¢–µ–∫—Å—Ç
                for line in str(content).split('\n'):
                    if line.strip():
                        story.append(Paragraph(line.strip(), normal_style))

            story.append(Spacer(1, 0.2*inch))

        doc.build(story)
        print(f"  ‚úÖ PDF: {filepath.name}")
    except Exception as e:
        print(f"  ‚ùå PDF: –û—à–∏–±–∫–∞ - {e}")


def export_interview_artifacts(test_case: Dict, grant_dir: Path):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Interview (–∞–Ω–∫–µ—Ç–∞)"""
    print("\n  üìã –°—Ç–∞–¥–∏—è 1: Interview (–ê–Ω–∫–µ—Ç–∞)")

    user_answers = test_case['user_answers']

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 1: INTERVIEW (–ê–ù–ö–ï–¢–ê)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
ID: {test_case['id']}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {test_case.get('category', '–æ–±—â–∞—è')}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´ –ê–ù–ö–ï–¢–´:

"""
    for key, value in user_answers.items():
        txt_content += f"{key.upper()}:\n{value}\n\n"

    create_txt_artifact(txt_content, grant_dir / "01_interview.txt")

    # DOCX
    sections = [
        {
            'heading': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ',
            'content': {
                '–ì—Ä–∞–Ω—Ç': test_case['name'],
                'ID': test_case['id'],
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': test_case.get('category', '–æ–±—â–∞—è'),
                '–î–∞—Ç–∞': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
        },
        {
            'heading': '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã',
            'content': user_answers
        }
    ]

    create_docx_artifact("–°—Ç–∞–¥–∏—è 1: Interview (–ê–Ω–∫–µ—Ç–∞)", sections, grant_dir / "01_interview.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 1: Interview (–ê–Ω–∫–µ—Ç–∞)", sections, grant_dir / "01_interview.pdf")


def export_audit_artifacts(test_case: Dict, grant_dir: Path):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Audit (–∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã)"""
    print("\n  üîç –°—Ç–∞–¥–∏—è 2: Audit (–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã)")

    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞
    audit_result = {
        'status': 'approved',
        'score': 8.5,
        'completeness': 95,
        'quality': 90,
        'recommendations': [
            '–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é',
            '–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç',
            '–ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–µ',
            '–û–¥–æ–±—Ä–µ–Ω–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        ]
    }

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 2: AUDIT (–ü–†–û–í–ï–†–ö–ê –ê–ù–ö–ï–¢–´)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–£–î–ò–¢–ê:

–°—Ç–∞—Ç—É—Å: {audit_result['status'].upper()}
–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {audit_result['score']}/10
–ü–æ–ª–Ω–æ—Ç–∞: {audit_result['completeness']}%
–ö–∞—á–µ—Å—Ç–≤–æ: {audit_result['quality']}%

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
"""
    for i, rec in enumerate(audit_result['recommendations'], 1):
        txt_content += f"{i}. {rec}\n"

    create_txt_artifact(txt_content, grant_dir / "02_audit.txt")

    # DOCX
    sections = [
        {
            'heading': '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞',
            'content': {
                '–°—Ç–∞—Ç—É—Å': audit_result['status'].upper(),
                '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞': f"{audit_result['score']}/10",
                '–ü–æ–ª–Ω–æ—Ç–∞': f"{audit_result['completeness']}%",
                '–ö–∞—á–µ—Å—Ç–≤–æ': f"{audit_result['quality']}%"
            }
        },
        {
            'heading': '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
            'content': audit_result['recommendations']
        }
    ]

    create_docx_artifact("–°—Ç–∞–¥–∏—è 2: Audit (–ü—Ä–æ–≤–µ—Ä–∫–∞)", sections, grant_dir / "02_audit.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 2: Audit (–ü—Ä–æ–≤–µ—Ä–∫–∞)", sections, grant_dir / "02_audit.pdf")


def export_research_artifacts(test_case: Dict, research_results: Dict, grant_dir: Path):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Research (–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)"""
    print("\n  üî¨ –°—Ç–∞–¥–∏—è 3: Research (–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)")

    metadata = research_results.get('metadata', {})

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 3: RESEARCH (–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï - 27 –ó–ê–ü–†–û–°–û–í)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–ú–ï–¢–ê–î–ê–ù–ù–´–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:

–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metadata.get('total_queries', 27)}
–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {metadata.get('sources_count', 45)}
–¶–∏—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ: {metadata.get('quotes_count', 68)}
–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {metadata.get('total_processing_time', 315)} —Å–µ–∫—É–Ω–¥

{'=' * 80}

–ë–õ–û–ö 1: –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´ (10 –ó–ê–ü–†–û–°–û–í)

"""
    block1 = research_results.get('block1_problem', {})
    txt_content += f"–†–µ–∑—é–º–µ:\n{block1.get('summary', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')[:500]}...\n\n"

    txt_content += f"–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã ({len(block1.get('key_facts', []))}):\n"
    for i, fact in enumerate(block1.get('key_facts', [])[:5], 1):
        txt_content += f"{i}. {fact.get('fact', '')} (–ò—Å—Ç–æ—á–Ω–∏–∫: {fact.get('source', '')})\n"

    txt_content += f"\n–ì–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã ({len(block1.get('programs', []))}):\n"
    for i, prog in enumerate(block1.get('programs', []), 1):
        txt_content += f"{i}. {prog.get('name', '')} - {prog.get('kpi', '')}\n"

    txt_content += f"\n–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã ({len(block1.get('success_cases', []))}):\n"
    for i, case in enumerate(block1.get('success_cases', []), 1):
        txt_content += f"{i}. {case.get('title', '')} - {case.get('result', '')}\n"

    txt_content += f"\n{'=' * 80}\n\n–ë–õ–û–ö 2: –ì–ï–û–ì–†–ê–§–ò–Ø –ò –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø (10 –ó–ê–ü–†–û–°–û–í)\n\n"
    block2 = research_results.get('block2_geography', {})
    txt_content += f"–†–µ–∑—é–º–µ:\n{block2.get('summary', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')[:500]}...\n\n"

    target = block2.get('target_audience', {})
    txt_content += f"–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:\n"
    txt_content += f"  - –í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {target.get('age_range', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    txt_content += f"  - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {target.get('total_count', 0)}\n"
    txt_content += f"  - –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –ø—Ä–æ–±–ª–µ–º–æ–π: {target.get('affected_by_problem', 0)} ({target.get('percentage', 0)}%)\n"

    txt_content += f"\n{'=' * 80}\n\n–ë–õ–û–ö 3: –¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò (7 –ó–ê–ü–†–û–°–û–í)\n\n"
    block3 = research_results.get('block3_goals', {})
    txt_content += f"–†–µ–∑—é–º–µ:\n{block3.get('summary', '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ')[:500]}...\n\n"

    if block3.get('main_goal_variants'):
        goal = block3['main_goal_variants'][0]
        txt_content += f"–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å (SMART):\n{goal.get('text', '')}\n"

    create_txt_artifact(txt_content, grant_dir / "03_research.txt")

    # DOCX
    sections = [
        {
            'heading': '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è',
            'content': {
                '–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤': metadata.get('total_queries', 27),
                '–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ': metadata.get('sources_count', 45),
                '–¶–∏—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ': metadata.get('quotes_count', 68),
                '–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏': f"{metadata.get('total_processing_time', 315)} —Å–µ–∫—É–Ω–¥"
            }
        },
        {
            'heading': '–ë–ª–æ–∫ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã',
            'content': f"{block1.get('summary', '')[:500]}...\n\n–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã: {len(block1.get('key_facts', []))}\n–ì–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã: {len(block1.get('programs', []))}\n–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã: {len(block1.get('success_cases', []))}"
        },
        {
            'heading': '–ë–ª–æ–∫ 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –¶–ê',
            'content': f"{block2.get('summary', '')[:500]}...\n\n–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: {target.get('total_count', 0)} —á–µ–ª–æ–≤–µ–∫ ({target.get('percentage', 0)}%)"
        },
        {
            'heading': '–ë–ª–æ–∫ 3: –¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏',
            'content': f"{block3.get('summary', '')[:500]}..."
        }
    ]

    create_docx_artifact("–°—Ç–∞–¥–∏—è 3: Research (–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)", sections, grant_dir / "03_research.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 3: Research (–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)", sections, grant_dir / "03_research.pdf")


def export_planning_artifacts(plan: Dict, grant_dir: Path, test_case: Dict):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Planning (–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    print("\n  üìê –°—Ç–∞–¥–∏—è 4: Planning (–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)")

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 4: PLANNING (–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ì–†–ê–ù–¢–ê)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–ü–õ–ê–ù –°–¢–†–£–ö–¢–£–†–´ –ó–ê–Ø–í–ö–ò:

–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã: {plan.get('total_length_estimate', 15000)} —Å–∏–º–≤–æ–ª–æ–≤
–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç: {plan.get('total_citations', 10)}
–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {plan.get('total_tables', 2)}

{'=' * 80}

–†–ê–ó–î–ï–õ–´ –ó–ê–Ø–í–ö–ò:

"""
    for i, section in enumerate(plan.get('sections', []), 1):
        txt_content += f"{i}. {section.get('name', '–†–∞–∑–¥–µ–ª')}\n"
        txt_content += f"   –ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: {', '.join(section.get('key_elements', []))}\n"
        txt_content += f"   –ë–ª–æ–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {', '.join(section.get('research_blocks', []))}\n"
        txt_content += f"   –¶–∏—Ç–∞—Ç: {section.get('citations_count', 0)}\n"
        txt_content += f"   –¢–∞–±–ª–∏—Ü: {section.get('tables_count', 0)}\n\n"

    create_txt_artifact(txt_content, grant_dir / "04_planning.txt")

    # DOCX
    sections_list = [
        {
            'heading': '–ü–ª–∞–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–∫–∏',
            'content': {
                '–û—Ü–µ–Ω–∫–∞ –¥–ª–∏–Ω—ã': f"{plan.get('total_length_estimate', 15000)} —Å–∏–º–≤–æ–ª–æ–≤",
                '–í—Å–µ–≥–æ —Ü–∏—Ç–∞—Ç': plan.get('total_citations', 10),
                '–í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü': plan.get('total_tables', 2)
            }
        }
    ]

    for i, section in enumerate(plan.get('sections', []), 1):
        sections_list.append({
            'heading': f"–†–∞–∑–¥–µ–ª {i}: {section.get('name', '–†–∞–∑–¥–µ–ª')}",
            'content': {
                '–ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã': ', '.join(section.get('key_elements', [])),
                '–ë–ª–æ–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è': ', '.join(section.get('research_blocks', [])),
                '–¶–∏—Ç–∞—Ç': section.get('citations_count', 0),
                '–¢–∞–±–ª–∏—Ü': section.get('tables_count', 0)
            }
        })

    create_docx_artifact("–°—Ç–∞–¥–∏—è 4: Planning (–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", sections_list, grant_dir / "04_planning.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 4: Planning (–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)", sections_list, grant_dir / "04_planning.pdf")


def export_grant_artifacts(grant_content: Dict, citations: List, tables: List, grant_dir: Path, test_case: Dict):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Grant (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞)"""
    print("\n  üìù –°—Ç–∞–¥–∏—è 5: Grant (–§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞)")

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 5: GRANT (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ó–ê–Ø–í–ö–ê)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê:
{grant_content.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}

–ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï:
{grant_content.get('summary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

{'=' * 80}

–ê–ö–¢–£–ê–õ–¨–ù–û–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´:
{grant_content.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

{'=' * 80}

–ì–ï–û–ì–†–ê–§–ò–Ø –ò –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø:
{grant_content.get('geography', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

{'=' * 80}

–¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê:
{grant_content.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

{'=' * 80}

–†–ï–®–ï–ù–ò–ï:
{grant_content.get('solution', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:
{grant_content.get('implementation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ë–Æ–î–ñ–ï–¢:
{grant_content.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–°–†–û–ö–ò:
{grant_content.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–ö–û–ú–ê–ù–î–ê:
{grant_content.get('team', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:
{grant_content.get('impact', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨:
{grant_content.get('sustainability', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

{'=' * 80}

–¶–ò–¢–ê–¢–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ù–´–ï –í –ó–ê–Ø–í–ö–ï ({len(citations)}):

"""
    for i, citation in enumerate(citations, 1):
        txt_content += f"{i}. {citation.get('text', '')}\n"
        txt_content += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {citation.get('source', '')}\n"
        txt_content += f"   –î–∞—Ç–∞: {citation.get('date', '')}\n"
        txt_content += f"   –¢–∏–ø: {citation.get('type', '')}\n\n"

    txt_content += f"\n{'=' * 80}\n\n–¢–ê–ë–õ–ò–¶–´ –í–ö–õ–Æ–ß–ï–ù–ù–´–ï –í –ó–ê–Ø–í–ö–£ ({len(tables)}):\n\n"
    for i, table in enumerate(tables, 1):
        txt_content += f"{i}. {table.get('title', '–¢–∞–±–ª–∏—Ü–∞')}\n"
        txt_content += f"   –¢–∏–ø: {table.get('type', '')}\n"
        txt_content += f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {table.get('source', '')}\n\n"

    create_txt_artifact(txt_content, grant_dir / "05_grant_final.txt")

    # DOCX
    sections = [
        {
            'heading': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            'content': grant_content.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        },
        {
            'heading': '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
            'content': grant_content.get('summary', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        },
        {
            'heading': '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã',
            'content': grant_content.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        },
        {
            'heading': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
            'content': grant_content.get('geography', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        },
        {
            'heading': '–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏',
            'content': grant_content.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        },
        {
            'heading': '–†–µ—à–µ–Ω–∏–µ',
            'content': grant_content.get('solution', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        },
        {
            'heading': '–ë—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏',
            'content': f"–ë—é–¥–∂–µ—Ç: {grant_content.get('budget', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n–°—Ä–æ–∫–∏: {grant_content.get('timeline', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        },
        {
            'heading': f'–¶–∏—Ç–∞—Ç—ã ({len(citations)})',
            'content': [f"{c.get('text', '')} (–ò—Å—Ç–æ—á–Ω–∏–∫: {c.get('source', '')})" for c in citations[:10]]
        },
        {
            'heading': f'–¢–∞–±–ª–∏—Ü—ã ({len(tables)})',
            'content': [f"{t.get('title', '')} - {t.get('type', '')}" for t in tables]
        }
    ]

    create_docx_artifact("–°—Ç–∞–¥–∏—è 5: Grant (–§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞)", sections, grant_dir / "05_grant_final.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 5: Grant (–§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞)", sections, grant_dir / "05_grant_final.pdf")


def export_review_artifacts(reviewer_result: Dict, grant_dir: Path, test_case: Dict):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å—Ç–∞–¥–∏–∏ Review (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)"""
    print("\n  ‚≠ê –°—Ç–∞–¥–∏—è 6: Review (–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)")

    # TXT
    txt_content = f"""–°–¢–ê–î–ò–Ø 6: REVIEW (–§–ò–ù–ê–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò)
–ì—Ä–∞–Ω—Ç: {test_case['name']}
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 80}

–û–ë–©–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:

–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω—Ç–∞: {reviewer_result.get('readiness_score', 0):.2f}/10
–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {reviewer_result.get('approval_probability', 0):.1f}%
–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {reviewer_result.get('quality_tier', 'Unknown')}
–ú–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å: {'–î–ê' if reviewer_result.get('can_submit', False) else '–ù–ï–¢'}

{'=' * 80}

–û–¶–ï–ù–ö–ò –ü–û –ö–†–ò–¢–ï–†–ò–Ø–ú:

"""
    for crit_name, crit_data in reviewer_result.get('criteria_scores', {}).items():
        txt_content += f"{crit_name.upper()}:\n"
        txt_content += f"  –û—Ü–µ–Ω–∫–∞: {crit_data['score']:.2f}/10\n"
        txt_content += f"  –í–µ—Å –∫—Ä–∏—Ç–µ—Ä–∏—è: {crit_data['weight']*100:.0f}%\n"
        txt_content += f"  –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {crit_data['weighted_score']:.2f}\n\n"

    txt_content += f"{'=' * 80}\n\n–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ ({len(reviewer_result.get('strengths', []))}):\n\n"
    for i, strength in enumerate(reviewer_result.get('strengths', []), 1):
        txt_content += f"{i}. {strength}\n"

    txt_content += f"\n{'=' * 80}\n\n–°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´ ({len(reviewer_result.get('weaknesses', []))}):\n\n"
    for i, weakness in enumerate(reviewer_result.get('weaknesses', []), 1):
        txt_content += f"{i}. {weakness}\n"

    txt_content += f"\n{'=' * 80}\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ({len(reviewer_result.get('recommendations', []))}):\n\n"
    for i, rec in enumerate(reviewer_result.get('recommendations', []), 1):
        txt_content += f"{i}. {rec}\n"

    create_txt_artifact(txt_content, grant_dir / "06_review.txt")

    # DOCX
    sections = [
        {
            'heading': '–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
            'content': {
                '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≥—Ä–∞–Ω—Ç–∞': f"{reviewer_result.get('readiness_score', 0):.2f}/10",
                '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è': f"{reviewer_result.get('approval_probability', 0):.1f}%",
                '–£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞': reviewer_result.get('quality_tier', 'Unknown'),
                '–ú–æ–∂–Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å': '–î–ê' if reviewer_result.get('can_submit', False) else '–ù–ï–¢'
            }
        },
        {
            'heading': '–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º',
            'content': {
                crit_name: f"{crit_data['score']:.2f}/10 (–≤–µ—Å {crit_data['weight']*100:.0f}%)"
                for crit_name, crit_data in reviewer_result.get('criteria_scores', {}).items()
            }
        },
        {
            'heading': f"–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã ({len(reviewer_result.get('strengths', []))})",
            'content': reviewer_result.get('strengths', [])
        },
        {
            'heading': f"–°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã ({len(reviewer_result.get('weaknesses', []))})",
            'content': reviewer_result.get('weaknesses', [])
        },
        {
            'heading': f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(reviewer_result.get('recommendations', []))})",
            'content': reviewer_result.get('recommendations', [])
        }
    ]

    create_docx_artifact("–°—Ç–∞–¥–∏—è 6: Review (–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)", sections, grant_dir / "06_review.docx")
    create_pdf_artifact("–°—Ç–∞–¥–∏—è 6: Review (–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)", sections, grant_dir / "06_review.pdf")


def export_grant_full(test_case: Dict, e2e_result: Dict):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞"""
    print(f"\n{'=' * 80}")
    print(f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞–Ω—Ç–∞: {test_case['name']}")
    print(f"{'=' * 80}")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥—Ä–∞–Ω—Ç–∞
    grant_dir = OUTPUT_DIR / test_case['id']
    grant_dir.mkdir(exist_ok=True)
    print(f"üìÅ –ü–∞–ø–∫–∞: {grant_dir.name}/")

    # –°—Ç–∞–¥–∏—è 1: Interview
    export_interview_artifacts(test_case, grant_dir)

    # –°—Ç–∞–¥–∏—è 2: Audit
    export_audit_artifacts(test_case, grant_dir)

    # –°—Ç–∞–¥–∏—è 3: Research (–∏–∑ mock research_results)
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è mock –¥–∞–Ω–Ω—ã—Ö
    sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
    from test_full_workflow_e2e_phases_3_5 import create_mock_research_results
    research_results = create_mock_research_results(test_case)
    export_research_artifacts(test_case, research_results, grant_dir)

    # –°—Ç–∞–¥–∏—è 4: Planning
    writer_step = e2e_result.get('steps', {}).get('writer', {})
    # –°–æ–∑–¥–∞–µ–º mock –ø–ª–∞–Ω –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ
    mock_plan = {
        'sections': [
            {
                'name': '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã',
                'key_elements': ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–ì–æ—Å–ø—Ä–æ–≥—Ä–∞–º–º—ã', '–¢–∞–±–ª–∏—Ü–∞ –¥–∏–Ω–∞–º–∏–∫–∏'],
                'research_blocks': ['block1'],
                'citations_count': 4,
                'tables_count': 1
            },
            {
                'name': '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
                'key_elements': ['–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–æ–≤', '–¶–ê', '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'],
                'research_blocks': ['block2'],
                'citations_count': 3,
                'tables_count': 1
            },
            {
                'name': '–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏',
                'key_elements': ['SMART-—Ü–µ–ª–∏', 'KPI', '–£—Å–ø–µ—à–Ω—ã–µ –∫–µ–π—Å—ã'],
                'research_blocks': ['block3'],
                'citations_count': 3,
                'tables_count': 0
            }
        ],
        'total_length_estimate': 15000,
        'total_citations': 10,
        'total_tables': 2
    }
    export_planning_artifacts(mock_plan, grant_dir, test_case)

    # –°—Ç–∞–¥–∏—è 5: Grant (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞)
    # –°–æ–∑–¥–∞–µ–º mock grant_content
    from writer_agent_v2 import WriterAgentV2
    writer_v2 = WriterAgentV2(None)
    grant_content = writer_v2._create_fallback_content(test_case['user_answers'], research_results)
    citations = writer_v2._format_citations(research_results, 10)
    tables = writer_v2._format_tables(research_results, 2)

    export_grant_artifacts(grant_content, citations, tables, grant_dir, test_case)

    # –°—Ç–∞–¥–∏—è 6: Review (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
    reviewer_step = e2e_result.get('steps', {}).get('reviewer', {})
    if reviewer_step.get('status') == 'success':
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π reviewer result
        reviewer_result = {
            'readiness_score': reviewer_step.get('readiness_score', 0),
            'approval_probability': reviewer_step.get('approval_probability', 0),
            'quality_tier': reviewer_step.get('quality_tier', 'Unknown'),
            'can_submit': reviewer_step.get('can_submit', False),
            'criteria_scores': reviewer_step.get('criteria_scores', {}),
            'strengths': ['–°–∏–ª—å–Ω–∞—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è –±–∞–∑–∞', 'SMART-—Ü–µ–ª–∏', '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—Ü–ø—Ä–æ–µ–∫—Ç–∞–º'],
            'weaknesses': ['–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞', '–ù—É–∂–Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å'],
            'recommendations': ['–£–≤–µ–ª–∏—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ']
        }
        export_review_artifacts(reviewer_result, grant_dir, test_case)

    print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {grant_dir.name}/")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –≥—Ä–∞–Ω—Ç–æ–≤"""

    # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã E2E —Ç–µ—Å—Ç–æ–≤
    report_files = list(Path('.').glob('E2E_FULL_WORKFLOW_REPORT_*.json'))

    if not report_files:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –æ—Ç—á–µ—Ç–æ–≤ E2E —Ç–µ—Å—Ç–æ–≤")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python test_full_workflow_e2e_phases_3_5.py")
        return

    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á–µ—Ç
    latest_report = max(report_files, key=lambda p: p.stat().st_mtime)
    print(f"\nüìÑ –ß–∏—Ç–∞–µ–º –æ—Ç—á–µ—Ç: {latest_report.name}")

    with open(latest_report, 'r', encoding='utf-8') as f:
        report_data = json.load(f)

    results = report_data.get('results', [])
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞–Ω—Ç–æ–≤: {len(results)}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TEST_CASES
    from test_full_workflow_e2e_phases_3_5 import TEST_CASES

    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≥—Ä–∞–Ω—Ç
    for i, (test_case, e2e_result) in enumerate(zip(TEST_CASES, results), 1):
        export_grant_full(test_case, e2e_result)

        if i < len(TEST_CASES):
            print("\n‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞...")
            import time
            time.sleep(1)

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n\n{'=' * 80}")
    print("‚úÖ –í–°–ï –ì–†–ê–ù–¢–´ –≠–ö–°–ü–û–†–¢–ò–†–û–í–ê–ù–´!")
    print(f"{'=' * 80}\n")

    print(f"üìÅ –ü–∞–ø–∫–∞ —Å –≥—Ä–∞–Ω—Ç–∞–º–∏: {OUTPUT_DIR.absolute()}")
    print(f"üìä –í—Å–µ–≥–æ –≥—Ä–∞–Ω—Ç–æ–≤: {len(results)}")
    print(f"üìÑ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–∞ –≥—Ä–∞–Ω—Ç: 18 —Ñ–∞–π–ª–æ–≤ (6 —Å—Ç–∞–¥–∏–π √ó 3 —Ñ–æ—Ä–º–∞—Ç–∞)")
    print(f"üì¶ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(results) * 18}")

    print("\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏:")
    for test_case in TEST_CASES:
        grant_dir = OUTPUT_DIR / test_case['id']
        if grant_dir.exists():
            files = sorted(grant_dir.glob('*'))
            print(f"  {grant_dir.name}/ ({len(files)} —Ñ–∞–π–ª–æ–≤)")


if __name__ == "__main__":
    main()
