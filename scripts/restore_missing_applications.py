#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
"""

import sqlite3
import json
import uuid
from pathlib import Path
from datetime import datetime

db_path = Path(__file__).parent.parent / 'data' / 'grantservice.db'

print("=" * 60)
print("–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ü–£–©–ï–ù–ù–´–• –ì–†–ê–ù–¢–û–í–´–• –ó–ê–Ø–í–û–ö")
print("=" * 60)

conn = sqlite3.connect(db_path)
cursor = conn.cursor()

# –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –∑–∞—è–≤–æ–∫
cursor.execute("""
    SELECT s.id, s.telegram_id, s.anketa_id, s.answers_data, s.project_name,
           s.completed_at, u.username, u.first_name, u.last_name
    FROM sessions s
    LEFT JOIN users u ON s.telegram_id = u.telegram_id
    LEFT JOIN grant_applications ga ON s.id = ga.session_id
    WHERE s.status = 'completed' 
          AND s.completed_at IS NOT NULL
          AND ga.id IS NULL
    ORDER BY s.completed_at DESC
""")

orphan_sessions = cursor.fetchall()

if not orphan_sessions:
    print("\n‚úÖ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ –∑–∞—è–≤–æ–∫")
    conn.close()
    exit()

print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(orphan_sessions)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –±–µ–∑ –∑–∞—è–≤–æ–∫:")

restored_count = 0

for session in orphan_sessions:
    session_id, telegram_id, anketa_id, answers_data, project_name, completed_at, username, first_name, last_name = session
    
    user_info = f"{first_name} {last_name}" if first_name else f"@{username}" if username else f"ID{telegram_id}"
    print(f"\nüìã –°–µ—Å—Å–∏—è {session_id}: {user_info}")
    print(f"   –ê–Ω–∫–µ—Ç–∞: {anketa_id}")
    print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {completed_at}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    date_str = datetime.now().strftime('%Y%m%d')
    app_number = f"GA-{date_str}-{str(uuid.uuid4())[:8].upper()}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    title = project_name if project_name else "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞"
    
    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç—ã
    content_data = {}
    if answers_data:
        try:
            answers = json.loads(answers_data)
            content_data = answers
        except:
            content_data = {"raw_answers": answers_data}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
    content_data["_restored"] = {
        "from_session": session_id,
        "anketa_id": anketa_id,
        "restored_at": datetime.now().isoformat(),
        "original_completion": completed_at
    }
    
    content_json = json.dumps(content_data, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    cursor.execute("""
        INSERT INTO grant_applications (
            application_number, title, content_json, summary, 
            status, user_id, session_id, admin_user, 
            created_at, updated_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (
        app_number,
        title,
        content_json,
        f"–ó–∞—è–≤–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Å–µ—Å—Å–∏–∏ {session_id}",
        "draft",
        None,  # user_id –±—É–¥–µ—Ç NULL
        session_id,
        "system_restore",
        completed_at,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        datetime.now().isoformat()
    ))
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: {app_number}")
    restored_count += 1

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
conn.commit()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
cursor.execute("SELECT COUNT(*) FROM grant_applications")
total_apps = cursor.fetchone()[0]

print(f"\n{'='*60}")
print(f"‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
print(f"   –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: {restored_count}")
print(f"   –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –ë–î: {total_apps}")
print(f"{'='*60}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫:")
cursor.execute("""
    SELECT id, application_number, title, admin_user, created_at 
    FROM grant_applications 
    ORDER BY created_at DESC 
    LIMIT 5
""")

for app in cursor.fetchall():
    admin = f"({app[3]})" if app[3] else ""
    print(f"  ID {app[0]}: {app[1]} {admin}")
    print(f"       {app[2][:50]}...")

conn.close()