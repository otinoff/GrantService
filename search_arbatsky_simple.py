#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –æ—Ç –ú–∏—Ö–∞–∏–ª–∞ –ê—Ä–±–∞—Ç—Å–∫–æ–≥–æ
"""

import os
import json
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from datetime import datetime

def load_credentials():
    """–ó–∞–≥—Ä—É–∑–∫–∞ OAuth credentials –∏–∑ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
    creds_file = 'C:/SnowWhiteAI/MCP_servers/mcp-gsuite/.oauth.otinoff@gmail.com.json'

    if not os.path.exists(creds_file):
        print(f"‚ùå –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {creds_file}")
        print("–ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ MCP —Å–µ—Ä–≤–µ—Ä")
        return None

    with open(creds_file, 'r') as f:
        creds_data = json.load(f)

    creds = Credentials(
        token=creds_data.get('access_token'),
        refresh_token=creds_data.get('refresh_token'),
        token_uri=creds_data.get('token_uri', 'https://oauth2.googleapis.com/token'),
        client_id=creds_data.get('client_id'),
        client_secret=creds_data.get('client_secret')
    )

    return creds

def search_emails(service, query):
    """–ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    try:
        results = service.users().messages().list(
            userId='me',
            q=query,
            maxResults=20
        ).execute()

        messages = results.get('messages', [])
        return messages
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def get_email_details(service, msg_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø–∏—Å—å–º–∞"""
    try:
        message = service.users().messages().get(
            userId='me',
            id=msg_id,
            format='full'
        ).execute()

        headers = message['payload']['headers']

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        subject = next((h['value'] for h in headers if h['name'] == 'Subject'), '–ë–µ–∑ —Ç–µ–º—ã')
        from_email = next((h['value'] for h in headers if h['name'] == 'From'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        date = next((h['value'] for h in headers if h['name'] == 'Date'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

        # –ü–æ–ª—É—á–∞–µ–º snippet
        snippet = message.get('snippet', '')

        return {
            'id': msg_id,
            'subject': subject,
            'from': from_email,
            'date': date,
            'snippet': snippet
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏—Å—å–º–∞ {msg_id}: {e}")
        return None

def main():
    print("üîç –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –æ—Ç –ú–∏—Ö–∞–∏–ª–∞ –ê—Ä–±–∞—Ç—Å–∫–æ–≥–æ...\n")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
    creds = load_credentials()
    if not creds:
        return

    # –°–æ–∑–¥–∞–µ–º Gmail API —Å–µ—Ä–≤–∏—Å
    try:
        service = build('gmail', 'v1', credentials=creds)
        print("‚úÖ Gmail API –ø–æ–¥–∫–ª—é—á–µ–Ω\n")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail API: {e}")
        return

    # –ò—â–µ–º –ø–∏—Å—å–º–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    queries = [
        "from:–ê—Ä–±–∞—Ç—Å–∫–∏–π",
        "from:Arbatsky",
        "from:–ú–∏—Ö–∞–∏–ª",
        "–ê—Ä–±–∞—Ç—Å–∫–∏–π",
        "Arbatsky"
    ]

    all_emails = {}

    for query in queries:
        print(f"–ü–æ–∏—Å–∫: {query}")
        messages = search_emails(service, query)
        print(f"  –ù–∞–π–¥–µ–Ω–æ: {len(messages)}\n")

        for msg in messages:
            if msg['id'] not in all_emails:
                all_emails[msg['id']] = msg

    if not all_emails:
        print("\n‚ùå –ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    print(f"\nüìß –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º: {len(all_emails)}")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∏—Å—å–º–∞
    for i, msg_id in enumerate(all_emails.keys(), 1):
        details = get_email_details(service, msg_id)
        if details:
            print(f"\n{i}. {details['subject']}")
            print(f"   –û—Ç: {details['from']}")
            print(f"   –î–∞—Ç–∞: {details['date']}")
            print(f"   ID: {details['id']}")
            if details['snippet']:
                print(f"   –ü—Ä–µ–≤—å—é: {details['snippet'][:150]}...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    output_file = 'C:/SnowWhiteAI/GrantService/arbatsky_emails_result.json'

    detailed_results = []
    for msg_id in all_emails.keys():
        details = get_email_details(service, msg_id)
        if details:
            detailed_results.append(details)

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(detailed_results, f, ensure_ascii=False, indent=2)

    print(f"\n\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_file}")

if __name__ == "__main__":
    main()
