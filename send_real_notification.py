#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É Telegram
–¢–µ—Å—Ç –¥–ª—è test-engineer GrantService
"""

import os
import sys
import sqlite3
import json
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), 'telegram-bot', 'utils'))

ADMIN_GROUP_ID = -4930683040

def load_bot_token():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ config/.env"""
    config_path = r"C:\SnowWhiteAI\GrantService\config\.env"
    if os.path.exists(config_path):
        with open(config_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    token = line.split('=', 1)[1].strip()
                    return token
    return os.getenv('TELEGRAM_BOT_TOKEN')

def get_latest_application():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î"""
    db_path = r"C:\SnowWhiteAI\GrantService\data\grantservice.db"

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT
                application_number,
                title,
                grant_fund,
                requested_amount,
                project_duration,
                created_at,
                summary,
                content_json
            FROM grant_applications
            ORDER BY created_at DESC
            LIMIT 1
        """)

        row = cursor.fetchone()
        conn.close()

        if not row:
            return None, None

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        app_data = {
            'application_number': row[0],
            'title': row[1] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            'grant_fund': row[2] or '–§–æ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω',
            'requested_amount': row[3] or 0,
            'project_duration': row[4] or 12,
            'created_at': row[5],
            'summary': row[6] or '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_info
        user_data = None
        if row[7]:
            try:
                content = json.loads(row[7])
                user_data = content.get('user_info', {})
            except json.JSONDecodeError:
                user_data = {}

        return app_data, user_data

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return None, None

def format_notification_message(app_data, user_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_data:
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        username = user_data.get('username', '')
        telegram_id = user_data.get('telegram_id', '')

        if first_name or last_name:
            user_name = f"{first_name} {last_name}".strip()
        elif username:
            user_name = f"@{username}"
        elif telegram_id:
            user_name = f"ID: {telegram_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ì–†–ê–ù–¢</b>

üìã <b>–ó–∞—è–≤–∫–∞ ‚Ññ{app_data['application_number']}</b>
üéØ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {app_data['title']}
üèõ <b>–§–æ–Ω–¥:</b> {app_data['grant_fund']}
üí∞ <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞:</b> {app_data['requested_amount']:,.0f} ‚ÇΩ
‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞:</b> {app_data['project_duration']} –º–µ—Å.
üìÖ <b>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</b> {app_data['created_at']}

üë§ <b>–ó–∞—è–≤–∏—Ç–µ–ª—å:</b> {user_name}

üìù <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>
{app_data['summary'][:200]}{"..." if len(app_data['summary']) > 200 else ""}

‚ö°Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>

#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #–≥—Ä–∞–Ω—Ç #{app_data['grant_fund'].replace(' ', '_').lower()}
""".strip()

    return message

async def send_real_notification():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –†–ï–ê–õ–¨–ù–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É"""

    print("üöÄ –û–¢–ü–†–ê–í–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í –ê–î–ú–ò–ù–°–ö–£–Æ –ì–†–£–ü–ü–£")
    print("=" * 60)
    print(f"üéØ –¶–µ–ª–µ–≤–∞—è –≥—Ä—É–ø–ø–∞: {ADMIN_GROUP_ID}")
    print()

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    print("1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
    bot_token = load_bot_token()
    if not bot_token:
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config/.env")
        return False

    print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: ...{bot_token[-10:]}")

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞...")
    try:
        from telegram import Bot
        bot = Bot(token=bot_token)
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –±–æ—Ç–∞: {e}")
        return False

    # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    print("\n3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏...")
    app_data, user_data = get_latest_application()

    if not app_data:
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞—è–≤–∫–∏ –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

    print(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ‚Ññ{app_data['application_number']}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {app_data['title']}")
    print(f"   –§–æ–Ω–¥: {app_data['grant_fund']}")
    print(f"   –°—É–º–º–∞: {app_data['requested_amount']:,.0f} ‚ÇΩ")

    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("\n4Ô∏è‚É£ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    message = format_notification_message(app_data, user_data)
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ({len(message)} —Å–∏–º–≤–æ–ª–æ–≤)")

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
    print("\n5Ô∏è‚É£ –û–¢–ü–†–ê–í–ö–ê –í –ê–î–ú–ò–ù–°–ö–£–Æ –ì–†–£–ü–ü–£...")
    print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –≥—Ä—É–ø–ø—É: {ADMIN_GROUP_ID}")

    try:
        from telegram.constants import ParseMode

        result = await bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            text=message,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )

        print("üéâ –£–°–ü–ï–•! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É!")
        print(f"‚úÖ ID —Å–æ–æ–±—â–µ–Ω–∏—è: {result.message_id}")
        print(f"‚úÖ –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {result.date}")
        print(f"‚úÖ –í –≥—Ä—É–ø–ø—É: {result.chat.id}")

        if hasattr(result.chat, 'title'):
            print(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: {result.chat.title}")

        return True

    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
        print("- –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("- –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥—Ä—É–ø–ø—ã")
        print("- –ì—Ä—É–ø–ø–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –±–æ—Ç–∞")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ TEST ENGINEER - –û–¢–ü–†–ê–í–ö–ê –†–ï–ê–õ–¨–ù–û–ì–û –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
    print("=" * 60)
    print("–í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –≥—Ä—É–ø–ø—É!")
    print("–ì—Ä—É–ø–ø–∞ -4930683040 –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!")
    print("=" * 60)
    print()

    success = await send_real_notification()

    print("\n" + "=" * 60)
    if success:
        print("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï–£–î–ê–ß–ï–ù")
        print("‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")

    print("=" * 60)
    return success

if __name__ == "__main__":
    try:
        result = asyncio.run(main())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)