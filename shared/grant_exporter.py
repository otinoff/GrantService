#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Grant Exporter - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã: MD, PDF, DOCX

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    from shared.grant_exporter import GrantExporter

    exporter = GrantExporter(grant_result_json)

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–∞–π–ª
    exporter.export_to_markdown("output.md")
    exporter.export_to_pdf("output.pdf")
    exporter.export_to_docx("output.docx")

    # –≠–∫—Å–ø–æ—Ä—Ç –≤ –ø–∞–º—è—Ç—å (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    md_content = exporter.get_markdown_content()
    pdf_bytes = exporter.get_pdf_bytes()
    docx_bytes = exporter.get_docx_bytes()

    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å—Ä–∞–∑—É
    files = exporter.export_all(output_dir="./output")
"""
import os
import json
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from io import BytesIO

logger = logging.getLogger(__name__)


class GrantExporter:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ MD, PDF, DOCX"""

    def __init__(self, grant_data: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞

        Args:
            grant_data: JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–∞–±–æ—Ç—ã Writer Agent V2
                –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏: status, application, citations, tables, quality_score
        """
        self.grant_data = grant_data
        self.application = grant_data.get('application', {})
        self.citations = grant_data.get('citations', [])
        self.tables = grant_data.get('tables', [])
        self.quality_score = grant_data.get('quality_score', 0)
        self.provider_used = grant_data.get('provider_used', 'unknown')
        self.timestamp = grant_data.get('timestamp', datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.metadata = self.application.get('metadata', {})
        self.total_chars = self.metadata.get('total_chars', 0)
        self.citations_used = self.metadata.get('citations_used', len(self.citations))
        self.tables_included = self.metadata.get('tables_included', len(self.tables))

        logger.info(f"‚úÖ GrantExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.total_chars} —Å–∏–º–≤–æ–ª–æ–≤, "
                   f"{self.citations_used} —Ü–∏—Ç–∞—Ç, {self.tables_included} —Ç–∞–±–ª–∏—Ü")

    # ==================== MARKDOWN EXPORT ====================

    def get_markdown_content(self) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ Markdown —Ñ–∞–π–ª–∞

        Returns:
            str: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
        """
        md_lines = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = self.application.get('title', '–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        md_lines.append(f"# üìã {title}\n")
        md_lines.append(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {self.timestamp}\n")
        md_lines.append(f"**–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {self.quality_score}/10 ‚≠ê\n")
        md_lines.append(f"**–û–±—ä–µ–º:** {self.total_chars} —Å–∏–º–≤–æ–ª–æ–≤\n")
        md_lines.append(f"**–¶–∏—Ç–∞—Ç—ã:** {self.citations_used} | **–¢–∞–±–ª–∏—Ü—ã:** {self.tables_included}\n")
        md_lines.append(f"**LLM Provider:** {self.provider_used}\n")
        md_lines.append("\n---\n\n")

        # 9 —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞—è–≤–∫–∏
        sections = [
            ("1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê", "section_1_brief"),
            ("2. –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–û–¶–ò–ê–õ–¨–ù–û–ô –ó–ù–ê–ß–ò–ú–û–°–¢–ò", "section_2_problem"),
            ("3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê", "section_3_goal"),
            ("4. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´", "section_4_results"),
            ("5. –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê", "section_5_tasks"),
            ("6. –ü–ê–†–¢–ù–ï–†–´ –ü–†–û–ï–ö–¢–ê", "section_6_partners"),
            ("7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï", "section_7_info"),
            ("8. –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï –ü–†–û–ï–ö–¢–ê", "section_8_future"),
            ("9. –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù", "section_9_calendar")
        ]

        for section_title, section_key in sections:
            md_lines.append(f"## {section_title}\n\n")
            content = self.application.get(section_key, '')
            if content:
                md_lines.append(f"{content}\n\n")
            else:
                md_lines.append("*–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö*\n\n")
            md_lines.append("---\n\n")

        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1: –¶–∏—Ç–∞—Ç—ã
        md_lines.append("## üìö –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 1: –¶–ò–¢–ê–¢–´ –ò –ò–°–¢–û–ß–ù–ò–ö–ò\n\n")
        if self.citations:
            for i, citation in enumerate(self.citations, 1):
                md_lines.append(f"### –¶–∏—Ç–∞—Ç–∞ {i}\n\n")
                md_lines.append(f"**–¢–∏–ø:** {citation.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n")
                md_lines.append(f"> {citation.get('text', '')}\n\n")
                if citation.get('source'):
                    md_lines.append(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {citation['source']}")
                    if citation.get('date'):
                        md_lines.append(f" ({citation['date']})")
                    md_lines.append("\n\n")
        else:
            md_lines.append("*–¶–∏—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n")

        md_lines.append("---\n\n")

        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2: –¢–∞–±–ª–∏—Ü—ã
        md_lines.append("## üìä –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 2: –¢–ê–ë–õ–ò–¶–´ –ò –î–ê–ù–ù–´–ï\n\n")
        if self.tables:
            for i, table in enumerate(self.tables, 1):
                md_lines.append(f"### –¢–∞–±–ª–∏—Ü–∞ {i}: {table.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n")
                md_lines.append(f"**–¢–∏–ø:** {table.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n")
                md_lines.append(f"**–ò—Å—Ç–æ—á–Ω–∏–∫:** {table.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n")

                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã - –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5 –ø–æ–ª–µ–π
                table_data = table.get('data', {})
                if isinstance(table_data, dict) and table_data:
                    md_lines.append("**–î–∞–Ω–Ω—ã–µ:**\n\n")
                    for key, value in list(table_data.items())[:5]:
                        md_lines.append(f"- **{key}:** {str(value)[:100]}\n")
                    md_lines.append("\n")
        else:
            md_lines.append("*–¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç*\n\n")

        # –§—É—Ç–µ—Ä
        md_lines.append("---\n\n")
        md_lines.append(f"*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Writer Agent V2 | {self.timestamp}*\n")

        return ''.join(md_lines)

    def export_to_markdown(self, output_path: str) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Markdown —Ñ–∞–π–ª

        Args:
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            md_content = self.get_markdown_content()

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(md_content)

            logger.info(f"‚úÖ MD —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path} ({len(md_content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            return output_path
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MD: {e}")
            raise

    # ==================== PDF EXPORT ====================

    def get_pdf_bytes(self) -> bytes:
        """
        –°–æ–∑–¥–∞—Ç—å PDF –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

        Returns:
            bytes: PDF —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        """
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Pandoc (–¥–ª—è Windows —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        try:
            pdf_bytes = self._create_pdf_with_pandoc()
            logger.info(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Pandoc: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Pandoc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å WeasyPrint (–¥–ª—è Linux –ø—Ä–æ–¥–∞–∫—à–Ω)
        try:
            from weasyprint import HTML, CSS
            from weasyprint.text.fonts import FontConfiguration

            # –ü–æ–ª—É—á–∞–µ–º MD –∫–æ–Ω—Ç–µ–Ω—Ç
            md_content = self.get_markdown_content()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MD –≤ HTML (–ø—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
            html_content = self._markdown_to_html(md_content)

            # CSS –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            css = CSS(string='''
                @page { size: A4; margin: 2cm; }
                body { font-family: "DejaVu Sans", Arial, sans-serif; font-size: 11pt; line-height: 1.6; }
                h1 { color: #2c3e50; font-size: 24pt; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                h2 { color: #34495e; font-size: 18pt; margin-top: 20px; border-bottom: 2px solid #95a5a6; padding-bottom: 5px; }
                h3 { color: #7f8c8d; font-size: 14pt; margin-top: 15px; }
                table { width: 100%; border-collapse: collapse; margin: 10px 0; }
                th, td { border: 1px solid #bdc3c7; padding: 8px; text-align: left; }
                th { background-color: #ecf0f1; font-weight: bold; }
                blockquote { border-left: 4px solid #3498db; padding-left: 15px; margin-left: 0; color: #555; }
                strong { color: #2c3e50; }
                hr { border: none; border-top: 1px solid #bdc3c7; margin: 20px 0; }
            ''')

            font_config = FontConfiguration()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –≤ –ø–∞–º—è—Ç—å
            pdf_bytes = HTML(string=html_content).write_pdf(
                stylesheets=[css],
                font_config=font_config
            )

            logger.info(f"‚úÖ PDF —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ WeasyPrint: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes
        except ImportError:
            logger.warning("‚ö†Ô∏è WeasyPrint –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è WeasyPrint –æ—à–∏–±–∫–∞: {e}")

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Fallback –Ω–∞ ReportLab
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é PDF —á–µ—Ä–µ–∑ ReportLab")
        return self._create_simple_pdf()

    def export_to_pdf(self, output_path: str) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ PDF —Ñ–∞–π–ª

        Args:
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            pdf_bytes = self.get_pdf_bytes()

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            with open(output_path, 'wb') as f:
                f.write(pdf_bytes)

            logger.info(f"‚úÖ PDF —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path} ({len(pdf_bytes)} –±–∞–π—Ç)")
            return output_path
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF: {e}")
            raise

    def _create_pdf_with_pandoc(self) -> bytes:
        """
        –°–æ–∑–¥–∞—Ç—å PDF —á–µ—Ä–µ–∑ Pandoc (–¥–ª—è Windows —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        Returns:
            bytes: PDF —Ñ–∞–π–ª

        Raises:
            Exception: –ï—Å–ª–∏ Pandoc –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        import subprocess
        import tempfile

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Pandoc
        pandoc_paths = [
            r"C:\Program Files\Pandoc\pandoc.exe",
            r"C:\Program Files (x86)\Pandoc\pandoc.exe",
            "pandoc"  # –≤ PATH
        ]

        pandoc_exe = None
        for path in pandoc_paths:
            try:
                result = subprocess.run([path, "--version"], capture_output=True, timeout=5)
                if result.returncode == 0:
                    pandoc_exe = path
                    logger.info(f"‚úÖ Pandoc –Ω–∞–π–¥–µ–Ω: {path}")
                    break
            except:
                continue

        if not pandoc_exe:
            raise FileNotFoundError("Pandoc –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://pandoc.org/")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π MD —Ñ–∞–π–ª
        md_content = self.get_markdown_content()

        with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', suffix='.md', delete=False) as md_file:
            md_file.write(md_content)
            md_path = md_file.name

        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as pdf_file:
            pdf_path = pdf_file.name

        try:
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è: MD -> HTML -> —Å–∞–º–æ–¥–µ–ª—å–Ω—ã–π PDF (–±–µ–∑ LaTeX)
            # –°–æ–∑–¥–∞–µ–º HTML —á–µ—Ä–µ–∑ Pandoc —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
            html_path = pdf_path.replace('.pdf', '.html')

            cmd_html = [
                pandoc_exe,
                md_path,
                "-o", html_path,
                "--standalone",
                "--self-contained",
                "-c", "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css",
                "--metadata", "title=–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
            ]

            result = subprocess.run(cmd_html, capture_output=True, timeout=30, text=True)

            if result.returncode != 0:
                raise Exception(f"Pandoc HTML –æ—à–∏–±–∫–∞: {result.stderr}")

            # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º wkhtmltopdf –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ fallback
            wkhtmltopdf_paths = [
                r"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe",
                r"C:\Program Files (x86)\wkhtmltopdf\bin\wkhtmltopdf.exe",
                "wkhtmltopdf"
            ]

            wkhtmltopdf_exe = None
            for wk_path in wkhtmltopdf_paths:
                try:
                    test = subprocess.run([wk_path, "--version"], capture_output=True, timeout=5)
                    if test.returncode == 0:
                        wkhtmltopdf_exe = wk_path
                        break
                except:
                    continue

            if wkhtmltopdf_exe:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HTML -> PDF —á–µ—Ä–µ–∑ wkhtmltopdf
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º wkhtmltopdf –¥–ª—è PDF")
                cmd_pdf = [wkhtmltopdf_exe, html_path, pdf_path, "--enable-local-file-access"]
                result = subprocess.run(cmd_pdf, capture_output=True, timeout=30)

                if result.returncode != 0:
                    raise Exception("wkhtmltopdf –æ—à–∏–±–∫–∞")
            else:
                # Fallback: —á–∏—Ç–∞–µ–º HTML –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º weasyprint/reportlab
                logger.warning("‚ö†Ô∏è wkhtmltopdf –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                with open(html_path, 'r', encoding='utf-8') as f:
                    html_content = f.read()

                # –ü—Ä–æ–±—É–µ–º weasyprint
                try:
                    from weasyprint import HTML
                    HTML(string=html_content).write_pdf(pdf_path)
                except:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PDF
                    raise Exception("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å PDF - –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

            # –ß–∏—Ç–∞–µ–º PDF
            with open(pdf_path, 'rb') as f:
                pdf_bytes = f.read()

            return pdf_bytes

        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            try:
                os.unlink(md_path)
                os.unlink(pdf_path)
            except:
                pass

    def _markdown_to_html(self, md_content: str) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Markdown –≤ HTML"""
        try:
            import markdown
            html_body = markdown.markdown(md_content, extensions=['tables', 'fenced_code'])
        except ImportError:
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –±–µ–∑ markdown –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            html_body = md_content.replace('\n\n', '</p><p>').replace('\n', '<br>')
            html_body = f"<p>{html_body}</p>"

        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞</title>
        </head>
        <body>
            {html_body}
        </body>
        </html>
        """

    def _create_simple_pdf(self) -> bytes:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è PDF —á–µ—Ä–µ–∑ reportlab (fallback)"""
        try:
            from reportlab.lib.pagesizes import A4
            from reportlab.lib import colors
            from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont
            from reportlab.lib.units import cm

            buffer = BytesIO()
            doc = SimpleDocTemplate(buffer, pagesize=A4, leftMargin=2*cm, rightMargin=2*cm)

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            try:
                pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
                pdfmetrics.registerFont(TTFont('DejaVuSans-Bold', 'DejaVuSans-Bold.ttf'))
                font_name = 'DejaVuSans'
            except:
                font_name = 'Helvetica'

            styles = getSampleStyleSheet()

            # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
            title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'],
                                         fontSize=18, textColor=colors.HexColor('#2c3e50'),
                                         spaceAfter=12, fontName=font_name)
            heading_style = ParagraphStyle('CustomHeading', parent=styles['Heading2'],
                                          fontSize=14, textColor=colors.HexColor('#34495e'),
                                          spaceAfter=10, spaceBefore=10, fontName=font_name)
            normal_style = ParagraphStyle('CustomNormal', parent=styles['Normal'],
                                         fontSize=11, fontName=font_name)

            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = self.application.get('title', '–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
            story.append(Paragraph(f"üìã {title}", title_style))
            story.append(Spacer(1, 0.5*cm))

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            story.append(Paragraph(f"<b>–î–∞—Ç–∞:</b> {self.timestamp}", normal_style))
            story.append(Paragraph(f"<b>–û—Ü–µ–Ω–∫–∞:</b> {self.quality_score}/10", normal_style))
            story.append(Paragraph(f"<b>–û–±—ä–µ–º:</b> {self.total_chars} —Å–∏–º–≤–æ–ª–æ–≤", normal_style))
            story.append(Spacer(1, 0.5*cm))

            # –†–∞–∑–¥–µ–ª—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3)
            sections = [
                ("1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï", "section_1_brief"),
                ("2. –û–ë–û–°–ù–û–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´", "section_2_problem"),
                ("3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê", "section_3_goal")
            ]

            for section_title, section_key in sections:
                story.append(Paragraph(section_title, heading_style))
                content = self.application.get(section_key, '')[:2000]  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                if content:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                    paragraphs = content.split('\n\n')
                    for para in paragraphs[:5]:  # –ú–∞–∫—Å 5 –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
                        if para.strip():
                            story.append(Paragraph(para.strip(), normal_style))
                            story.append(Spacer(1, 0.3*cm))
                story.append(PageBreak())

            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ç–æ–π PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PDF: {e}")
            raise

    # ==================== DOCX EXPORT ====================

    def get_docx_bytes(self) -> bytes:
        """
        –°–æ–∑–¥–∞—Ç—å DOCX –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)

        Returns:
            bytes: DOCX —Ñ–∞–π–ª –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤
        """
        try:
            from docx import Document
            from docx.shared import Pt, RGBColor, Inches
            from docx.enum.text import WD_PARAGRAPH_ALIGNMENT

            doc = Document()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = self.application.get('title', '–ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
            heading = doc.add_heading(f"üìã {title}", level=1)
            heading.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            meta_para = doc.add_paragraph()
            meta_para.add_run(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ").bold = True
            meta_para.add_run(f"{self.timestamp}\n")
            meta_para.add_run(f"–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ").bold = True
            meta_para.add_run(f"{self.quality_score}/10 ‚≠ê\n")
            meta_para.add_run(f"–û–±—ä–µ–º: ").bold = True
            meta_para.add_run(f"{self.total_chars} —Å–∏–º–≤–æ–ª–æ–≤\n")
            meta_para.add_run(f"–¶–∏—Ç–∞—Ç—ã: ").bold = True
            meta_para.add_run(f"{self.citations_used} | ")
            meta_para.add_run(f"–¢–∞–±–ª–∏—Ü—ã: ").bold = True
            meta_para.add_run(f"{self.tables_included}\n")

            doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            doc.add_paragraph("_" * 80)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            doc.add_paragraph()

            # 9 —Ä–∞–∑–¥–µ–ª–æ–≤
            sections = [
                ("1. –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê", "section_1_brief"),
                ("2. –û–ë–û–°–ù–û–í–ê–ù–ò–ï –°–û–¶–ò–ê–õ–¨–ù–û–ô –ó–ù–ê–ß–ò–ú–û–°–¢–ò", "section_2_problem"),
                ("3. –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê", "section_3_goal"),
                ("4. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´", "section_4_results"),
                ("5. –ó–ê–î–ê–ß–ò –ü–†–û–ï–ö–¢–ê", "section_5_tasks"),
                ("6. –ü–ê–†–¢–ù–ï–†–´ –ü–†–û–ï–ö–¢–ê", "section_6_partners"),
                ("7. –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ï –°–û–ü–†–û–í–û–ñ–î–ï–ù–ò–ï", "section_7_info"),
                ("8. –î–ê–õ–¨–ù–ï–ô–®–ï–ï –†–ê–ó–í–ò–¢–ò–ï –ü–†–û–ï–ö–¢–ê", "section_8_future"),
                ("9. –ö–ê–õ–ï–ù–î–ê–†–ù–´–ô –ü–õ–ê–ù", "section_9_calendar")
            ]

            for section_title, section_key in sections:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
                section_heading = doc.add_heading(section_title, level=2)
                run = section_heading.runs[0]
                run.font.color.rgb = RGBColor(52, 73, 94)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π

                # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞
                content = self.application.get(section_key, '')
                if content:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
                    paragraphs = content.split('\n\n')
                    for para in paragraphs:
                        if para.strip():
                            p = doc.add_paragraph(para.strip())
                            p.paragraph_format.line_spacing = 1.5
                else:
                    doc.add_paragraph("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö").italic = True

                doc.add_paragraph()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                doc.add_paragraph("_" * 80)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                doc.add_paragraph()

            # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: –¶–∏—Ç–∞—Ç—ã
            if self.citations:
                doc.add_heading("üìö –ü–†–ò–õ–û–ñ–ï–ù–ò–ï 1: –¶–ò–¢–ê–¢–´ –ò –ò–°–¢–û–ß–ù–ò–ö–ò", level=2)
                for i, citation in enumerate(self.citations, 1):
                    doc.add_heading(f"–¶–∏—Ç–∞—Ç–∞ {i}", level=3)
                    cite_para = doc.add_paragraph()
                    cite_para.add_run(f"–¢–∏–ø: ").bold = True
                    cite_para.add_run(f"{citation.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n")
                    cite_para.add_run(f"–¢–µ–∫—Å—Ç: ").bold = True
                    cite_para.add_run(f'"{citation.get("text", "")}"').italic = True
                    cite_para.add_run(f"\n–ò—Å—Ç–æ—á–Ω–∏–∫: ").bold = True
                    source_text = citation.get('source', '–ù–µ —É–∫–∞–∑–∞–Ω')
                    if citation.get('date'):
                        source_text += f" ({citation['date']})"
                    cite_para.add_run(source_text)
                    doc.add_paragraph()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            buffer = BytesIO()
            doc.save(buffer)
            docx_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ DOCX —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–º—è—Ç–∏: {len(docx_bytes)} –±–∞–π—Ç")
            return docx_bytes
        except ImportError:
            logger.error("‚ùå python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx")
            raise ImportError("python-docx library is required for DOCX export")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DOCX: {e}")
            raise

    def export_to_docx(self, output_path: str) -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ DOCX —Ñ–∞–π–ª

        Args:
            output_path: –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É

        Returns:
            str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            docx_bytes = self.get_docx_bytes()

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(output_path), exist_ok=True)

            with open(output_path, 'wb') as f:
                f.write(docx_bytes)

            logger.info(f"‚úÖ DOCX —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_path} ({len(docx_bytes)} –±–∞–π—Ç)")
            return output_path
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DOCX: {e}")
            raise

    # ==================== UNIVERSAL EXPORT ====================

    def export_all(self, output_dir: str, base_filename: Optional[str] = None) -> Dict[str, str]:
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Ä–∞–∑—É

        Args:
            output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è).
                          –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è application_number –∏–ª–∏ timestamp

        Returns:
            Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
                {
                    'markdown': '/path/to/file.md',
                    'pdf': '/path/to/file.pdf',
                    'docx': '/path/to/file.docx'
                }
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            if not base_filename:
                app_number = self.grant_data.get('application_number',
                                                 f"grant_{self.timestamp.replace(':', '-').replace(' ', '_')}")
                base_filename = app_number.replace('#', '').replace('/', '_')

            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(output_dir, exist_ok=True)

            results = {}

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ MD
            try:
                md_path = os.path.join(output_dir, f"{base_filename}.md")
                results['markdown'] = self.export_to_markdown(md_path)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ MD: {e}")
                results['markdown'] = None

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
            try:
                pdf_path = os.path.join(output_dir, f"{base_filename}.pdf")
                results['pdf'] = self.export_to_pdf(pdf_path)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ PDF: {e}")
                results['pdf'] = None

            # –≠–∫—Å–ø–æ—Ä—Ç –≤ DOCX
            try:
                docx_path = os.path.join(output_dir, f"{base_filename}.docx")
                results['docx'] = self.export_to_docx(docx_path)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ DOCX: {e}")
                results['docx'] = None

            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            success_count = sum(1 for v in results.values() if v is not None)
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/3 —Ñ–æ—Ä–º–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ")

            return results
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ export_all: {e}")
            raise


# ==================== UTILITY FUNCTIONS ====================

def export_grant_from_json_file(json_path: str, output_dir: str,
                                base_filename: Optional[str] = None) -> Dict[str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞

    Args:
        json_path: –ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º Writer Agent
        output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        base_filename: –ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        Dict[str, str]: –°–ª–æ–≤–∞—Ä—å —Å –ø—É—Ç—è–º–∏ –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º

    Example:
        >>> from shared.grant_exporter import export_grant_from_json_file
        >>> files = export_grant_from_json_file(
        ...     "grant_export_session_9/03_grant_draft/grant_result.json",
        ...     "grant_export_session_9/03_grant_draft/"
        ... )
        >>> print(files['markdown'])
        '/path/to/grant.md'
    """
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            grant_data = json.load(f)

        exporter = GrantExporter(grant_data)
        return exporter.export_all(output_dir, base_filename)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞ {json_path}: {e}")
        raise


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("GrantExporter - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
    print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  from shared.grant_exporter import GrantExporter, export_grant_from_json_file")
