"""
Claude Code API Client –¥–ª—è GrantService

–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code API Wrapper
API: http://178.236.17.55:8000
"""

import aiohttp
import asyncio
import json
from typing import Optional, Dict, Any, List
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class ClaudeCodeClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Claude Code API Wrapper"""

    def __init__(
        self,
        api_key: str,
        base_url: str = "http://178.236.17.55:8000",
        default_model: str = "sonnet",
        default_temperature: float = 0.7,
        timeout: int = 60
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            base_url: –ë–∞–∑–æ–≤—ã–π URL API
            default_model: –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (sonnet/opus)
            default_temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.api_key = api_key
        self.base_url = base_url.rstrip('/')
        self.default_model = default_model
        self.default_temperature = default_temperature
        self.timeout = timeout
        self.session: Optional[aiohttp.ClientSession] = None
        self.debug_log = []

        logger.info(f"üîß ClaudeCodeClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {base_url}, model={default_model}")

    async def __aenter__(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        timeout_config = aiohttp.ClientTimeout(total=self.timeout)

        self.session = aiohttp.ClientSession(
            headers=headers,
            timeout=timeout_config
        )

        logger.info("‚úÖ ClaudeCodeClient —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.session:
            await self.session.close()
            logger.info("üîí ClaudeCodeClient —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

    async def chat(
        self,
        message: str,
        session_id: Optional[str] = None,
        model: Optional[str] = None,
        temperature: Optional[float] = None,
        max_tokens: Optional[int] = None
    ) -> str:
        """
        –ß–∞—Ç —Å Claude

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Claude
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            model: –ú–æ–¥–µ–ª—å Claude (sonnet/opus, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é sonnet)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.7)
            max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ (1-8000, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –û—Ç–≤–µ—Ç Claude –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ API
        """
        url = f"{self.base_url}/chat"

        payload = {
            "message": message,
            "model": model or self.default_model,
            "temperature": temperature or self.default_temperature,
        }

        if session_id:
            payload["session_id"] = session_id
        if max_tokens:
            payload["max_tokens"] = max_tokens

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "endpoint": "/chat",
            "model": payload["model"],
            "message_length": len(message),
            "has_session": session_id is not None
        }
        self.debug_log.append(log_entry)

        try:
            async with self.session.post(url, json=payload) as response:
                response_text = await response.text()

                if response.status == 200:
                    data = json.loads(response_text)
                    result = data.get("response", "")

                    log_entry.update({
                        "status": "success",
                        "response_length": len(result),
                        "session_id": data.get("session_id")
                    })
                    self.debug_log.append(log_entry)

                    logger.info(f"‚úÖ Claude chat: {len(message)} chars ‚Üí {len(result)} chars")
                    return result

                else:
                    error_msg = f"Claude API error: {response.status} - {response_text}"
                    logger.error(error_msg)

                    log_entry.update({
                        "status": "error",
                        "error": response_text,
                        "status_code": response.status
                    })
                    self.debug_log.append(log_entry)

                    raise Exception(error_msg)

        except asyncio.TimeoutError:
            error_msg = f"Claude API timeout ({self.timeout}s)"
            logger.error(error_msg)
            raise Exception(error_msg)

        except Exception as e:
            logger.error(f"Claude chat error: {e}")
            raise

    async def execute_code(
        self,
        code: str,
        language: str = "python",
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude Code

        Args:
            code: –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (python –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:
            {
                "result": "output",
                "session_id": "...",
                "language": "python",
                "timestamp": "2025-10-05T...",
                "status": "success"
            }

        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        url = f"{self.base_url}/code"

        payload = {
            "code": code,
            "language": language
        }

        if session_id:
            payload["session_id"] = session_id

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "endpoint": "/code",
            "language": language,
            "code_length": len(code),
            "has_session": session_id is not None
        }
        self.debug_log.append(log_entry)

        try:
            async with self.session.post(url, json=payload) as response:
                response_text = await response.text()

                if response.status == 200:
                    data = json.loads(response_text)

                    log_entry.update({
                        "status": "success",
                        "result_length": len(data.get("result", "")),
                        "session_id": data.get("session_id")
                    })
                    self.debug_log.append(log_entry)

                    logger.info(f"‚úÖ Code execution: {language}, {len(code)} chars")
                    return data

                else:
                    error_msg = f"Code execution error: {response.status} - {response_text}"
                    logger.error(error_msg)

                    log_entry.update({
                        "status": "error",
                        "error": response_text,
                        "status_code": response.status
                    })
                    self.debug_log.append(log_entry)

                    raise Exception(error_msg)

        except asyncio.TimeoutError:
            error_msg = f"Code execution timeout ({self.timeout}s)"
            logger.error(error_msg)
            raise Exception(error_msg)

        except Exception as e:
            logger.error(f"Code execution error: {e}")
            raise

    async def list_sessions(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π

        Returns:
            –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π
        """
        url = f"{self.base_url}/sessions"

        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    sessions = await response.json()
                    logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ —Å–µ—Å—Å–∏–π: {len(sessions)}")
                    return sessions
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏: {response.status}")
                    return []

        except Exception as e:
            logger.error(f"Error listing sessions: {e}")
            return []

    async def delete_session(self, session_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é

        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        url = f"{self.base_url}/sessions/{session_id}"

        try:
            async with self.session.delete(url) as response:
                success = response.status == 200

                if success:
                    logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_id}")
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é {session_id}: {response.status}")

                return success

        except Exception as e:
            logger.error(f"Error deleting session: {e}")
            return False

    async def list_models(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π

        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π
        """
        url = f"{self.base_url}/models"

        try:
            async with self.session.get(url) as response:
                if response.status == 200:
                    models = await response.json()
                    logger.info(f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {models}")
                    return models
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏: {response.status}")
                    return []

        except Exception as e:
            logger.error(f"Error listing models: {e}")
            return []

    async def check_health(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API

        Returns:
            True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, False –∏–Ω–∞—á–µ
        """
        url = f"{self.base_url}/health"

        try:
            async with self.session.get(url) as response:
                healthy = response.status == 200

                if healthy:
                    logger.info("‚úÖ Claude Code API –∑–¥–æ—Ä–æ–≤")
                else:
                    logger.warning(f"‚ö†Ô∏è Claude Code API –Ω–µ–∑–¥–æ—Ä–æ–≤: {response.status}")

                return healthy

        except Exception as e:
            logger.error(f"‚ùå Claude Code API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False

    def get_debug_log(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏

        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞
        """
        return self.debug_log.copy()

    def clear_debug_log(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏"""
        self.debug_log.clear()
        logger.info("üßπ Debug log –æ—á–∏—â–µ–Ω")

    async def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_requests = len(self.debug_log)
        successful = len([log for log in self.debug_log if log.get("status") == "success"])
        failed = len([log for log in self.debug_log if log.get("status") == "error"])

        chat_requests = len([log for log in self.debug_log if log.get("endpoint") == "/chat"])
        code_requests = len([log for log in self.debug_log if log.get("endpoint") == "/code"])

        return {
            "total_requests": total_requests,
            "successful": successful,
            "failed": failed,
            "success_rate": (successful / total_requests * 100) if total_requests > 0 else 0,
            "chat_requests": chat_requests,
            "code_requests": code_requests
        }


# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
class ClaudeCodeClientSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º"""

    def __init__(self, *args, **kwargs):
        self.async_client = ClaudeCodeClient(*args, **kwargs)
        self.loop = asyncio.get_event_loop()

    def chat(self, message: str, **kwargs) -> str:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —á–∞—Ç"""
        async def _chat():
            async with self.async_client as client:
                return await client.chat(message, **kwargs)

        return self.loop.run_until_complete(_chat())

    def execute_code(self, code: str, **kwargs) -> Dict[str, Any]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞"""
        async def _execute():
            async with self.async_client as client:
                return await client.execute_code(code, **kwargs)

        return self.loop.run_until_complete(_execute())

    def check_health(self) -> bool:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        async def _health():
            async with self.async_client as client:
                return await client.check_health()

        return self.loop.run_until_complete(_health())


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""

    api_key = "1f79b062cf00b8d28546f5bd283dc59a1c6a7f9e9fe5a8e5ef25b0cc27aa0732"

    async with ClaudeCodeClient(api_key=api_key) as client:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        healthy = await client.check_health()
        print(f"API Health: {healthy}")

        # 2. –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = await client.list_models()
        print(f"Available models: {models}")

        # 3. –ü—Ä–æ—Å—Ç–æ–π —á–∞—Ç
        response = await client.chat(
            message="–ü—Ä–∏–≤–µ—Ç! –û—Ü–µ–Ω–∏ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ —à–∫–∞–ª–µ 1-10.",
            model="sonnet",
            temperature=0.3
        )
        print(f"Response: {response}")

        # 4. –ß–∞—Ç —Å —Å–µ—Å—Å–∏–µ–π
        session_id = "grant_project_123"

        response1 = await client.chat(
            message="–ó–∞–ø–æ–º–Ω–∏: –ø—Ä–æ–µ–∫—Ç –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–æ–ª–æ–¥—ë–∂–∏",
            session_id=session_id
        )

        response2 = await client.chat(
            message="–û —á—ë–º –±—ã–ª –ø—Ä–æ–µ–∫—Ç?",
            session_id=session_id
        )
        print(f"Remembered: {response2}")

        # 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
        code = """
import json

data = {"–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å": 8, "–Ω–æ–≤–∏–∑–Ω–∞": 7, "–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è": 9}
total = sum(data.values())

print(json.dumps({
    "scores": data,
    "total": total,
    "average": round(total / len(data), 2)
}))
"""

        result = await client.execute_code(code, language="python")
        print(f"Code result: {result['result']}")

        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await client.get_statistics()
        print(f"Statistics: {stats}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
