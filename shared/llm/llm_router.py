"""
LLM Router –¥–ª—è GrantService

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏:
- GigaChat: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
- Claude Code: –∞–Ω–∞–ª–∏–∑, –æ—Ü–µ–Ω–∫–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
"""

from typing import Optional, Dict, Any, Literal
from enum import Enum
import logging
import asyncio

from .unified_llm_client import UnifiedLLMClient
from .claude_code_client import ClaudeCodeClient
from .config import (
    GIGACHAT_API_KEY,
    CLAUDE_CODE_API_KEY,
    CLAUDE_CODE_BASE_URL,
    DEFAULT_TEMPERATURE,
    MAX_TOKENS
)

logger = logging.getLogger(__name__)


class TaskType(str, Enum):
    """–¢–∏–ø—ã –∑–∞–¥–∞—á –¥–ª—è LLM"""

    # GigaChat - –ª—É—á—à–µ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    GENERATION = "generation"          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
    CONVERSATION = "conversation"      # –û–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    TRANSLATION = "translation"        # –ü–µ—Ä–µ–≤–æ–¥/–ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è

    # Claude Code - –ª—É—á—à–µ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    ANALYSIS = "analysis"              # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    EVALUATION = "evaluation"          # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    STRUCTURING = "structuring"        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    RESEARCH = "research"              # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–æ–≥–æ–≤
    CODE = "code"                      # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞
    VALIDATION = "validation"          # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö


class ProviderType(str, Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    GIGACHAT = "gigachat"
    CLAUDE = "claude"
    AUTO = "auto"  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä


class LLMRouter:
    """
    –†–æ—É—Ç–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

    –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏:
    - GigaChat: —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –æ–±—â–µ–Ω–∏–µ
    - Claude Code: –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –æ—Ü–µ–Ω–∫–∞, –∫–æ–¥

    Fallback: –µ—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π
    """

    def __init__(
        self,
        gigachat_api_key: Optional[str] = None,
        claude_api_key: Optional[str] = None,
        claude_base_url: Optional[str] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞

        Args:
            gigachat_api_key: API –∫–ª—é—á GigaChat (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ config)
            claude_api_key: API –∫–ª—é—á Claude Code (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ config)
            claude_base_url: URL Claude Code API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑ config)
        """
        self.gigachat_api_key = gigachat_api_key or GIGACHAT_API_KEY
        self.claude_api_key = claude_api_key or CLAUDE_CODE_API_KEY
        self.claude_base_url = claude_base_url or CLAUDE_CODE_BASE_URL

        self.gigachat_client: Optional[UnifiedLLMClient] = None
        self.claude_client: Optional[ClaudeCodeClient] = None

        # –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        self.provider_matrix = {
            TaskType.GENERATION: ProviderType.GIGACHAT,
            TaskType.CONVERSATION: ProviderType.GIGACHAT,
            TaskType.TRANSLATION: ProviderType.GIGACHAT,

            TaskType.ANALYSIS: ProviderType.CLAUDE,
            TaskType.EVALUATION: ProviderType.CLAUDE,
            TaskType.STRUCTURING: ProviderType.CLAUDE,
            TaskType.RESEARCH: ProviderType.CLAUDE,
            TaskType.CODE: ProviderType.CLAUDE,
            TaskType.VALIDATION: ProviderType.CLAUDE,
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.stats = {
            "gigachat_requests": 0,
            "claude_requests": 0,
            "fallback_count": 0,
            "errors": []
        }

        logger.info("üö¶ LLMRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def __aenter__(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat
        if self.gigachat_api_key:
            self.gigachat_client = UnifiedLLMClient(
                provider="gigachat",
                api_key=self.gigachat_api_key,
                temperature=DEFAULT_TEMPERATURE
            )
            await self.gigachat_client.__aenter__()
            logger.info("‚úÖ GigaChat –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è GigaChat API key –Ω–µ –∑–∞–¥–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude Code
        if self.claude_api_key:
            self.claude_client = ClaudeCodeClient(
                api_key=self.claude_api_key,
                base_url=self.claude_base_url,
                default_temperature=DEFAULT_TEMPERATURE
            )
            await self.claude_client.__aenter__()
            logger.info("‚úÖ Claude Code –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è Claude Code API key –Ω–µ –∑–∞–¥–∞–Ω")

        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.gigachat_client:
            await self.gigachat_client.__aexit__(exc_type, exc_val, exc_tb)
            logger.info("üîí GigaChat –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

        if self.claude_client:
            await self.claude_client.__aexit__(exc_type, exc_val, exc_tb)
            logger.info("üîí Claude Code –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç")

    def _select_provider(
        self,
        task_type: TaskType,
        provider: Optional[ProviderType] = None
    ) -> ProviderType:
        """
        –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞—á–∏

        Args:
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏
            provider: –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∞–≤—Ç–æ-–≤—ã–±–æ—Ä–æ–º)

        Returns:
            –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        """
        # –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if provider and provider != ProviderType.AUTO:
            logger.info(f"üéØ –Ø–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {provider.value}")
            return provider

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        selected = self.provider_matrix.get(task_type, ProviderType.GIGACHAT)
        logger.info(f"ü§ñ –ê–≤—Ç–æ-–≤—ã–±–æ—Ä –¥–ª—è {task_type.value}: {selected.value}")
        return selected

    async def generate(
        self,
        prompt: str,
        task_type: TaskType,
        provider: Optional[ProviderType] = None,
        session_id: Optional[str] = None,
        temperature: Optional[float] = None,
        max_tokens: Optional[int] = None,
        **kwargs
    ) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            task_type: –¢–∏–ø –∑–∞–¥–∞—á–∏ (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞)
            provider: –Ø–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è Claude (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        Raises:
            Exception: –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        """
        # –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        target_provider = self._select_provider(task_type, provider)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        gen_params = {
            "temperature": temperature or DEFAULT_TEMPERATURE,
            "max_tokens": max_tokens or MAX_TOKENS,
            **kwargs
        }

        logger.info(
            f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: task={task_type.value}, "
            f"provider={target_provider.value}, "
            f"prompt_len={len(prompt)}"
        )

        # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        try:
            if target_provider == ProviderType.CLAUDE:
                if not self.claude_client:
                    raise Exception("Claude Code –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                self.stats["claude_requests"] += 1

                result = await self.claude_client.chat(
                    message=prompt,
                    session_id=session_id,
                    temperature=gen_params["temperature"],
                    max_tokens=gen_params["max_tokens"]
                )

                logger.info(f"‚úÖ Claude —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                return result

            else:  # GigaChat
                if not self.gigachat_client:
                    raise Exception("GigaChat –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

                self.stats["gigachat_requests"] += 1

                result = await self.gigachat_client.generate_async(
                    prompt=prompt,
                    temperature=gen_params["temperature"],
                    max_tokens=gen_params["max_tokens"]
                )

                logger.info(f"‚úÖ GigaChat —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ {target_provider.value}: {e}"
            logger.error(f"‚ùå {error_msg}")
            self.stats["errors"].append(error_msg)

            # Fallback –Ω–∞ –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            fallback_provider = (
                ProviderType.GIGACHAT if target_provider == ProviderType.CLAUDE
                else ProviderType.CLAUDE
            )

            logger.warning(f"üîÑ Fallback –Ω–∞ {fallback_provider.value}")
            self.stats["fallback_count"] += 1

            try:
                if fallback_provider == ProviderType.CLAUDE and self.claude_client:
                    self.stats["claude_requests"] += 1
                    result = await self.claude_client.chat(
                        message=prompt,
                        session_id=session_id,
                        temperature=gen_params["temperature"],
                        max_tokens=gen_params["max_tokens"]
                    )
                    logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω (Claude): {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return result

                elif fallback_provider == ProviderType.GIGACHAT and self.gigachat_client:
                    self.stats["gigachat_requests"] += 1
                    result = await self.gigachat_client.generate_async(
                        prompt=prompt,
                        temperature=gen_params["temperature"],
                        max_tokens=gen_params["max_tokens"]
                    )
                    logger.info(f"‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω (GigaChat): {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return result

                else:
                    raise Exception(f"Fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä {fallback_provider.value} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            except Exception as fallback_error:
                error_msg = f"Fallback —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω: {fallback_error}"
                logger.error(f"‚ùå {error_msg}")
                self.stats["errors"].append(error_msg)
                raise Exception(f"–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û—Å–Ω–æ–≤–Ω–æ–π: {e}, Fallback: {fallback_error}")

    async def execute_code(
        self,
        code: str,
        language: str = "python",
        session_id: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ Claude Code

        Args:
            code: –ö–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            session_id: ID —Å–µ—Å—Å–∏–∏

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞

        Raises:
            Exception: –ï—Å–ª–∏ Claude Code –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        """
        if not self.claude_client:
            raise Exception("Claude Code –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: {language}, {len(code)} —Å–∏–º–≤–æ–ª–æ–≤")
        self.stats["claude_requests"] += 1

        try:
            result = await self.claude_client.execute_code(
                code=code,
                language=language,
                session_id=session_id
            )

            logger.info(f"‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}"
            logger.error(f"‚ùå {error_msg}")
            self.stats["errors"].append(error_msg)
            raise

    async def create_session(self, user_id: str) -> str:
        """
        –°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_id)

        Returns:
            ID —Å–µ—Å—Å–∏–∏
        """
        session_id = f"grant_session_{user_id}"
        logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: {session_id}")
        return session_id

    async def delete_session(self, session_id: str) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é

        Args:
            session_id: ID —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.claude_client:
            logger.warning("Claude Code –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False

        success = await self.claude_client.delete_session(session_id)

        if success:
            logger.info(f"üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞: {session_id}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é: {session_id}")

        return success

    async def check_providers_health(self) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤

        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        health = {}

        # GigaChat
        if self.gigachat_client:
            try:
                health["gigachat"] = await self.gigachat_client.check_connection_async()
            except:
                health["gigachat"] = False
        else:
            health["gigachat"] = False

        # Claude Code
        if self.claude_client:
            try:
                health["claude"] = await self.claude_client.check_health()
            except:
                health["claude"] = False
        else:
            health["claude"] = False

        logger.info(f"üè• Health check: {health}")
        return health

    def get_statistics(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞

        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        total_requests = self.stats["gigachat_requests"] + self.stats["claude_requests"]

        return {
            "total_requests": total_requests,
            "gigachat_requests": self.stats["gigachat_requests"],
            "claude_requests": self.stats["claude_requests"],
            "gigachat_percent": (
                (self.stats["gigachat_requests"] / total_requests * 100)
                if total_requests > 0 else 0
            ),
            "claude_percent": (
                (self.stats["claude_requests"] / total_requests * 100)
                if total_requests > 0 else 0
            ),
            "fallback_count": self.stats["fallback_count"],
            "errors_count": len(self.stats["errors"]),
            "recent_errors": self.stats["errors"][-5:] if self.stats["errors"] else []
        }

    def reset_statistics(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            "gigachat_requests": 0,
            "claude_requests": 0,
            "fallback_count": 0,
            "errors": []
        }
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def example_usage():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM Router"""

    async with LLMRouter() as router:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        health = await router.check_providers_health()
        print(f"Health: {health}")

        # 2. –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç Claude)
        evaluation = await router.generate(
            prompt="–û—Ü–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç –ø–æ 10 –∫—Ä–∏—Ç–µ—Ä–∏—è–º –æ—Ç 1 –¥–æ 10...",
            task_type=TaskType.EVALUATION,
            temperature=0.3,
            max_tokens=2000
        )
        print(f"Evaluation: {evaluation}")

        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ—Ç GigaChat)
        grant_text = await router.generate(
            prompt="–ù–∞–ø–∏—à–∏ –≤–≤–µ–¥–µ–Ω–∏–µ –∫ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Ç–µ–º—É...",
            task_type=TaskType.GENERATION,
            temperature=0.7,
            max_tokens=1000
        )
        print(f"Grant text: {grant_text}")

        # 4. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ (—Ç–æ–ª—å–∫–æ Claude)
        code_result = await router.execute_code(
            code="""
import json
data = {"–∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å": 8, "–Ω–æ–≤–∏–∑–Ω–∞": 7}
print(json.dumps(data))
""",
            language="python"
        )
        print(f"Code result: {code_result}")

        # 5. –†–∞–±–æ—Ç–∞ —Å —Å–µ—Å—Å–∏—è–º–∏
        session_id = await router.create_session(user_id="123456")

        response1 = await router.generate(
            prompt="–ó–∞–ø–æ–º–Ω–∏: –ø—Ä–æ–µ–∫—Ç –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–µ",
            task_type=TaskType.ANALYSIS,
            session_id=session_id
        )

        response2 = await router.generate(
            prompt="–û —á—ë–º –±—ã–ª –ø—Ä–æ–µ–∫—Ç?",
            task_type=TaskType.ANALYSIS,
            session_id=session_id
        )
        print(f"Remembered: {response2}")

        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = router.get_statistics()
        print(f"Statistics: {stats}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(example_usage())
