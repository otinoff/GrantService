import asyncio
import aiohttp
import json
import base64
import uuid
from typing import Optional, List, Dict
import time
import logging

from .config import (
    GIGACHAT_BASE_URL, GIGACHAT_AUTH_URL, GIGACHAT_API_KEY, GIGACHAT_CLIENT_ID,
    PERPLEXITY_BASE_URL, PERPLEXITY_API_KEY,
    OLLAMA_BASE_URL, OLLAMA_MODEL,
    DEFAULT_TEMPERATURE, MAX_TOKENS, REQUEST_TIMEOUT,
    ASYNC_CONNECTION_LIMIT, ASYNC_CONNECTION_LIMIT_PER_HOST, ASYNC_REQUEST_TIMEOUT
)

logger = logging.getLogger(__name__)

class UnifiedLLMClient:
    def __init__(self, provider: str = "gigachat", model: str = "GigaChat", 
                 temperature: float = DEFAULT_TEMPERATURE, prompt_config: Optional[Dict] = None, **kwargs):
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è GrantService –Ω–∞ –æ—Å–Ω–æ–≤–µ review_generator
        
        Args:
            provider: "ollama", "gigachat" –∏–ª–∏ "perplexity"
            model: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            prompt_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (api_key –¥–ª—è GigaChat)
        """
        self.provider = provider.lower()
        self.model = model
        self.temperature = temperature
        self.prompt_config = prompt_config or {}
        self.session = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if self.provider == "ollama":
            self.base_url = kwargs.get("base_url", OLLAMA_BASE_URL)
        elif self.provider == "gigachat":
            self.base_url = GIGACHAT_BASE_URL
            self.auth_url = GIGACHAT_AUTH_URL
            self.api_key = kwargs.get("api_key", GIGACHAT_API_KEY)
            self.client_id = kwargs.get("client_id", GIGACHAT_CLIENT_ID)
            self.access_token = None
            self.token_expires_at = 0
        elif self.provider == "perplexity":
            self.base_url = PERPLEXITY_BASE_URL
            self.api_key = kwargs.get("api_key", PERPLEXITY_API_KEY)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
        
        logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω {self.provider.upper()} –∫–ª–∏–µ–Ω—Ç —Å –º–æ–¥–µ–ª—å—é '{self.model}'")
        self.debug_log = []  # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è Web Admin –æ—Ç–ª–∞–¥–∫–∏
    
    async def __aenter__(self):
        """–°–æ–∑–¥–∞—ë–º aiohttp —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è GigaChat (—á–∞—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏)
        connector = aiohttp.TCPConnector(
            limit=ASYNC_CONNECTION_LIMIT, 
            limit_per_host=ASYNC_CONNECTION_LIMIT_PER_HOST,
            ssl=False  # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
        )
        timeout = aiohttp.ClientTimeout(total=ASYNC_REQUEST_TIMEOUT)
        self.session = aiohttp.ClientSession(connector=connector, timeout=timeout)
        
        # –î–ª—è GigaChat –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if self.provider == "gigachat":
            await self._get_gigachat_token()
        
        return self
    
    async def generate_async(self, prompt: str, provider: str = None, **kwargs) -> str:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            prompt: –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            provider: –ü—Ä–æ–≤–∞–π–¥–µ—Ä ('gigachat', 'ollama', 'perplexity') –∏–ª–∏ None –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (temperature, max_tokens –∏ —Ç.–¥.)
        
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        target_provider = provider or self.provider
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ kwargs
        temperature = kwargs.get('temperature', self.temperature)
        max_tokens = kwargs.get('max_tokens', MAX_TOKENS)
        
        try:
            if target_provider == "gigachat":
                return await self._generate_gigachat(prompt, temperature, max_tokens)
            elif target_provider == "ollama":
                return await self._generate_ollama(prompt, temperature, max_tokens)
            elif target_provider == "perplexity":
                return await self._generate_perplexity(prompt, temperature, max_tokens)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {target_provider}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {target_provider}: {e}")
            raise
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        if self.session:
            await self.session.close()
    
    async def _get_gigachat_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è GigaChat"""
        if self.access_token and time.time() < self.token_expires_at:
            return  # –¢–æ–∫–µ–Ω –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        
        logger.info(f"üîê –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è GigaChat...")
        self.debug_log.append(f"üîê –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ GigaChat: {self.auth_url}")
        
        url = self.auth_url
        headers = {
            "Authorization": f"Basic {self.api_key}",
            "RqUID": str(uuid.uuid4()),
            "Content-Type": "application/x-www-form-urlencoded",
            "Accept": "application/json"
        }
        data = "scope=GIGACHAT_API_PERS"
        
        try:
            async with self.session.post(url, headers=headers, data=data) as response:
                if response.status == 200:
                    token_data = await response.json()
                    self.access_token = token_data["access_token"]
                    # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    self.token_expires_at = time.time() + token_data.get("expires_in", 1800) - 300
                    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω GigaChat –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    self.debug_log.append(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {token_data.get('expires_in', 1800)}—Å–µ–∫")
                else:
                    error_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status} - {error_text}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GigaChat: {e}")
    
    async def generate_text(self, prompt: str, max_tokens: int = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        
        Args:
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            
        Returns:
            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ generate_async
        return await self.generate_async(prompt, temperature=self.temperature, max_tokens=max_tokens)
    
    def _clean_markdown_formatting(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏ –∏ –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import re
        
        # –£–±–∏—Ä–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è (**text**, *text*)
        text = re.sub(r'\*{1,2}([^*]+?)\*{1,2}', r'\1', text)
        
        # –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ [text]
        text = re.sub(r'\[([^\]]+?)\]', r'\1', text)
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∫–æ–±–∫–∏ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏
        text = re.sub(r'\s*\([^)]*—Å–∏–Ω–æ–Ω–∏–º[^)]*\)', '', text)
        text = re.sub(r'\s*\([^)]*–∑–∞–º–µ–Ω[^)]*\)', '', text)
        text = re.sub(r'\s*\([^)]*–≤–∞—Ä–∏–∞–Ω—Ç[^)]*\)', '', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\s+', ' ', text).strip()
        
        return text
    
    async def _generate_ollama(self, prompt: str, temperature: float = None, max_tokens: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Ollama API"""
        url = f"{self.base_url}/api/generate"
        
        data = {
            "model": self.model,
            "prompt": prompt,
            "options": {
                "temperature": temperature or self.temperature,
                "num_predict": max_tokens or MAX_TOKENS
            },
            "stream": True
        }
        
        async with self.session.post(url, json=data) as response:
            if response.status != 200:
                raise Exception(f"HTTP {response.status}: {await response.text()}")
            
            # Ollama –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NDJSON
            full_response = ""
            async for line in response.content:
                if line.strip():
                    try:
                        chunk = json.loads(line.decode('utf-8'))
                        if 'response' in chunk:
                            full_response += chunk['response']
                        if chunk.get('done', False):
                            break
                    except json.JSONDecodeError:
                        continue
            
            return full_response.strip()
    
    async def _generate_gigachat(self, prompt: str, temperature: float = None, max_tokens: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GigaChat API —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limits"""
        self.debug_log.append(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é GigaChat: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await self._get_gigachat_token()
        
        url = f"{self.base_url}/chat/completions"
        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": temperature or self.temperature,
            "max_tokens": max_tokens or MAX_TOKENS
        }
        
        # Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ rate limits
        max_retries = 3
        for attempt in range(max_retries):
            try:
                async with self.session.post(url, headers=headers, json=data) as response:
                    if response.status == 200:
                        response_data = await response.json()
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ GigaChat —Ñ–æ—Ä–º–∞—Ç–∞
                        if "choices" in response_data and len(response_data["choices"]) > 0:
                            response_text = response_data["choices"][0]["message"]["content"].strip()
                            self.debug_log.append(f"‚úÖ GigaChat –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return response_text
                        else:
                            self.debug_log.append("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
                            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat")
                    
                    elif response.status == 429:  # Too Many Requests
                        error_text = await response.text()
                        wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                        logger.warning(f"‚ö†Ô∏è Rate limit GigaChat. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}, –∂–¥—ë–º {wait_time}—Å...")
                        
                        if attempt < max_retries - 1:
                            await asyncio.sleep(wait_time)
                            continue
                        else:
                            raise Exception(f"GigaChat rate limit –ø—Ä–µ–≤—ã—à–µ–Ω: {error_text}")
                    
                    else:
                        error_text = await response.text()
                        raise Exception(f"GigaChat HTTP {response.status}: {error_text}")
                        
            except asyncio.TimeoutError:
                if attempt < max_retries - 1:
                    logger.warning(f"‚ö†Ô∏è GigaChat timeout. –ü–æ–≤—Ç–æ—Ä {attempt + 1}/{max_retries}...")
                    await asyncio.sleep(1)
                    continue
                else:
                    raise Exception("GigaChat timeout –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    
    async def _generate_perplexity(self, prompt: str, temperature: float = None, max_tokens: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Perplexity API"""
        url = f"{self.base_url}/chat/completions"
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        data = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": self.temperature,
            "max_tokens": max_tokens
        }
        
        async with self.session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                response_data = await response.json()
                
                if "choices" in response_data and len(response_data["choices"]) > 0:
                    return response_data["choices"][0]["message"]["content"].strip()
                else:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Perplexity")
            else:
                error_text = await response.text()
                raise Exception(f"Perplexity HTTP {response.status}: {error_text}")
    
    async def check_connection_async(self) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if not self.session:
                connector = aiohttp.TCPConnector()
                timeout = aiohttp.ClientTimeout(total=10)
                self.session = aiohttp.ClientSession(connector=connector, timeout=timeout)
                should_close = True
            else:
                should_close = False
            
            if self.provider == "ollama":
                url = f"{self.base_url}/api/tags"
                async with self.session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        model_names = [model.get('name', '') for model in data.get('models', [])]
                        result = self.model in model_names
                    else:
                        result = False
            
            elif self.provider == "gigachat":
                # –î–ª—è GigaChat –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
                await self._get_gigachat_token()
                result = self.access_token is not None
            
            elif self.provider == "perplexity":
                # –î–ª—è Perplexity –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                url = f"{self.base_url}/models"
                headers = {"Authorization": f"Bearer {self.api_key}"}
                async with self.session.get(url, headers=headers) as response:
                    result = response.status == 200
            
            if should_close:
                await self.session.close()
                self.session = None
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {self.provider}: {e}")
            return False
    
    def get_debug_log(self) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return self.debug_log.copy()
    
    def clear_debug_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏"""
        self.debug_log.clear()
