#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GrantService Admin Panel - Streamlit Application
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –∏–∑ Telegram –±–æ—Ç–∞
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import streamlit as st
import sys
import os
import time
from datetime import datetime, timedelta
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—É—Ç–µ–π
from config import paths

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ë–î
from data.database import db, auth_manager
from data.database.auth import UserRole

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="GrantService Admin",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def check_token_from_url():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    query_params = st.query_params
    token = query_params.get('token')
    
    if token:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        user_data = db.validate_login_token(token)
        if user_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
            st.session_state['authenticated'] = True
            st.session_state['user_data'] = user_data
            st.session_state['token'] = token
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
            auth_manager.log_auth_action(
                user_id=user_data['id'],
                action='login_success',
                success=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ –≤—Ö–æ–¥–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
            try:
                import requests
                bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
                if bot_token and user_data.get('telegram_id'):
                    notification_text = f"""
üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ*

‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å GrantService

üìÖ –í—Ä–µ–º—è –≤—Ö–æ–¥–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üåê IP: {st.session_state.get('remote_ip', 'Unknown')}

–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /revoke_access –¥–ª—è –æ—Ç–∑—ã–≤–∞ —Ç–æ–∫–µ–Ω–∞!
"""
                    requests.post(
                        f'https://api.telegram.org/bot{bot_token}/sendMessage',
                        json={
                            'chat_id': user_data['telegram_id'],
                            'text': notification_text,
                            'parse_mode': 'Markdown'
                        },
                        timeout=5
                    )
            except:
                pass  # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            st.query_params.clear()
            
            return True
    
    return False

def login_with_token():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if check_token_from_url():
        st.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        time.sleep(1)
        st.rerun()
        return
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <style>
        .main-title {
            text-align: center;
            color: #1f77b4;
            margin-bottom: 30px;
        }
        .stButton > button {
            width: 100%;
            height: 60px;
            font-size: 20px;
            font-weight: bold;
            background-color: #0088cc;
            color: white;
            border-radius: 10px;
            border: none;
            margin-top: 20px;
        }
        .stButton > button:hover {
            background-color: #006699;
        }
        .info-box {
            background-color: #f0f8ff;
            border-radius: 10px;
            padding: 20px;
            margin: 20px 0;
            border-left: 4px solid #0088cc;
        }
        .security-note {
            background-color: #fff3cd;
            border-radius: 5px;
            padding: 10px;
            margin-top: 20px;
            border-left: 4px solid #ffc107;
        }
        </style>
        """, unsafe_allow_html=True)
        
        st.markdown('<h1 class="main-title">üèõÔ∏è GrantService Admin</h1>', unsafe_allow_html=True)
        st.markdown('<h3 style="text-align: center; color: #666;">–í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram</h3>', unsafe_allow_html=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
        st.markdown("""
        <div class="info-box">
            <h4>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h4>
            <p>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.
            –ù–∏–∫–∞–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ!</p>
        </div>
        """, unsafe_allow_html=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è
        bot_username = os.getenv('TELEGRAM_BOT_USERNAME', 'GrantServiceHelperBot')
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram –±–æ—Ç–∞
        telegram_url = f"https://t.me/{bot_username}?start=get_access"
        
        st.markdown(f"""
        ### üì± –®–∞–≥ 1: –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –±–æ—Ç
        
        –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—à –±–æ—Ç –≤ Telegram:
        """)
        
        # –°–æ–∑–¥–∞–µ–º HTML –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Telegram
        st.markdown(f"""
        <a href="{telegram_url}" target="_blank" style="text-decoration: none;">
            <button style="
                width: 100%;
                height: 60px;
                font-size: 20px;
                font-weight: bold;
                background-color: #0088cc;
                color: white;
                border-radius: 10px;
                border: none;
                cursor: pointer;
                margin: 10px 0;
            ">
                üöÄ –û—Ç–∫—Ä—ã—Ç—å @{bot_username}
            </button>
        </a>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        ### üîó –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
        
        1. –í –±–æ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ `/get_access`
        2. –ë–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞
        3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ - –∏ –≤—ã –≤ —Å–∏—Å—Ç–µ–º–µ!
        """)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        st.markdown("""
        ### ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...
        
        –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –≤ Telegram, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –Ω–µ–π.
        –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        st.markdown("""
        <script>
        setTimeout(function(){
            window.location.reload();
        }, 3000);
        </script>
        """, unsafe_allow_html=True)
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        st.markdown("""
        <div class="security-note">
            <strong>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</strong><br>
            ‚Ä¢ –¢–æ–∫–µ–Ω—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 24 —á–∞—Å–∞<br>
            ‚Ä¢ –ö–∞–∂–¥—ã–π —Ç–æ–∫–µ–Ω —É–Ω–∏–∫–∞–ª–µ–Ω<br>
            ‚Ä¢ –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –≤–∞—à–µ–º—É Telegram ID<br>
            ‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏
        </div>
        """, unsafe_allow_html=True)
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - QR –∫–æ–¥ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        with st.expander("üì∑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - QR –∫–æ–¥"):
            import qrcode
            import io
            from PIL import Image
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –¥–ª—è Telegram —Å—Å—ã–ª–∫–∏
            qr = qrcode.QRCode(version=1, box_size=10, border=5)
            qr.add_data(telegram_url)
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            buf = io.BytesIO()
            img.save(buf, format='PNG')
            buf.seek(0)
            
            st.image(buf, caption=f"–°–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è @{bot_username}", width=200)
            st.caption("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É Telegram –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

def show_user_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_data = st.session_state.get('user_data', {})
    
    col1, col2, col3 = st.columns([2, 2, 1])
    
    with col1:
        st.metric("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user_data.get('username', 'Unknown'))
        
    with col2:
        role = auth_manager.get_user_role(user_data.get('telegram_id'))
        role_emoji = {
            'admin': 'üëë',
            'editor': '‚úèÔ∏è',
            'viewer': 'üëÅÔ∏è',
            'user': 'üë§'
        }.get(role, 'üë§')
        st.metric("üé≠ –†–æ–ª—å", f"{role_emoji} {role}")
        
    with col3:
        if st.button("üö™ –í—ã–π—Ç–∏", type="secondary"):
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            for key in ['authenticated', 'user_data', 'token']:
                if key in st.session_state:
                    del st.session_state[key]
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥
            auth_manager.log_auth_action(
                user_id=user_data.get('id'),
                action='logout',
                success=True
            )
            
            st.rerun()

def main_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    st.title("üèõÔ∏è GrantService Admin Panel")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    show_user_info()
    
    st.divider()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = st.session_state.get('user_data', {})
    user_role = auth_manager.get_user_role(user_data.get('telegram_id'))
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    with st.sidebar:
        st.header("üìç –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        
        page = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            options=[
                "üìä –î–∞—à–±–æ—Ä–¥",
                "üìù –ê–Ω–∫–µ—Ç—ã",
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "‚ùì –í–æ–ø—Ä–æ—Å—ã",
                "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
            ]
        )
        
        if user_role == 'admin':
            st.divider()
            st.subheader("‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            admin_page = st.radio(
                "–ê–¥–º–∏–Ω-—Ä–∞–∑–¥–µ–ª—ã:",
                options=[
                    "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º",
                    "üìã –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    "‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                ]
            )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if page == "üìä –î–∞—à–±–æ—Ä–¥":
        show_dashboard()
    elif page == "üìù –ê–Ω–∫–µ—Ç—ã":
        show_anketas()
    elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
        show_users()
    elif page == "‚ùì –í–æ–ø—Ä–æ—Å—ã":
        show_questions()
    elif page == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_analytics()
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    if user_role == 'admin' and 'admin_page' in locals():
        st.divider()
        if admin_page == "üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º":
            show_access_management()
        elif admin_page == "üìã –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏":
            show_auth_logs()
        elif admin_page == "‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏":
            show_system_settings()

def show_dashboard():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥"""
    st.header("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        from data.database import get_total_users
        total_users = get_total_users()
        st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users, "+12")
    
    with col2:
        from data.database import db
        sessions = db.get_all_sessions(limit=1000)
        completed = len([s for s in sessions if s.get('status') == 'completed'])
        st.metric("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç", completed, "+3")
    
    with col3:
        active = len([s for s in sessions if s.get('status') == 'active'])
        st.metric("‚è≥ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π", active, "+1")
    
    with col4:
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if sessions:
            completion_rate = (completed / len(sessions)) * 100
            st.metric("üìà % –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", f"{completion_rate:.1f}%", "+2.3%")
        else:
            st.metric("üìà % –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", "0%")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é plotly –∏–ª–∏ altair
    st.info("–ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

def show_anketas():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç"""
    st.header("üìù –ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    from data.database import db
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å:",
            options=["–í—Å–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏"]
        )
    
    with col2:
        date_filter = st.date_input(
            "–î–∞—Ç–∞ –æ—Ç:",
            value=datetime.now() - timedelta(days=7)
        )
    
    with col3:
        search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ ID:")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã
    sessions = db.get_all_sessions(limit=100)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º
    if status_filter != "–í—Å–µ":
        status_map = {
            "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ": "completed",
            "–ê–∫—Ç–∏–≤–Ω—ã–µ": "active",
            "–ß–µ—Ä–Ω–æ–≤–∏–∫–∏": "draft"
        }
        status = status_map.get(status_filter)
        if status:
            sessions = [s for s in sessions if s.get('status') == status]
    
    if search:
        sessions = [s for s in sessions if search.lower() in str(s.get('anketa_id', '')).lower()]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    if sessions:
        st.dataframe(
            data=[{
                "ID": s.get('anketa_id', f"Session_{s.get('id')}"),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": s.get('username', 'Unknown'),
                "–°—Ç–∞—Ç—É—Å": s.get('status', 'unknown'),
                "–î–∞—Ç–∞": s.get('started_at', ''),
                "–ü—Ä–æ–≥—Ä–µ—Å—Å": f"{len(json.loads(s.get('interview_data', '{}')))} –æ—Ç–≤–µ—Ç–æ–≤"
            } for s in sessions],
            use_container_width=True
        )
    else:
        st.info("–ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_users():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user_data = st.session_state.get('user_data', {})
    user_role = auth_manager.get_user_role(user_data.get('telegram_id'))
    
    if user_role not in ['admin', 'editor']:
        st.warning("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞")
        return
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.info("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_questions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é"""
    st.header("‚ùì –í–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    from data.database import get_interview_questions
    
    questions = get_interview_questions()
    
    if questions:
        for q in questions:
            with st.expander(f"–í–æ–ø—Ä–æ—Å #{q['question_number']}: {q['field_name']}"):
                st.write(f"**–¢–µ–∫—Å—Ç:** {q['question_text']}")
                if q.get('hint_text'):
                    st.info(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {q['hint_text']}")
                if q.get('question_type') == 'select' and q.get('options'):
                    st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                    try:
                        options = json.loads(q['options']) if isinstance(q['options'], str) else q['options']
                        for opt in options:
                            st.write(f"- {opt.get('text', opt.get('value'))}")
                    except:
                        pass
    else:
        st.info("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_analytics():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞  
    user_data = st.session_state.get('user_data', {})
    if not auth_manager.can_view_analytics(user_data.get('telegram_id')):
        st.warning("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return
    
    st.info("–†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def show_access_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    st.header("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏
    users = auth_manager.get_users_by_role('user')
    editors = auth_manager.get_users_by_role('editor')
    admins = auth_manager.get_users_by_role('admin')
    
    tab1, tab2, tab3 = st.tabs(["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä—ã", "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã"])
    
    with tab1:
        if users:
            for user in users:
                col1, col2, col3 = st.columns([3, 2, 1])
                with col1:
                    st.write(f"@{user.get('username', 'Unknown')} ({user.get('telegram_id')})")
                with col2:
                    st.write(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registration_date', '')[:10]}")
                with col3:
                    if st.button(f"–ü–æ–≤—ã—Å–∏—Ç—å", key=f"promote_{user['id']}"):
                        auth_manager.set_user_role(user['telegram_id'], 'editor')
                        st.success(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['username']} –Ω–∞–∑–Ω–∞—á–µ–Ω —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º")
                        st.rerun()
        else:
            st.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–∞–∑–æ–≤–æ–π —Ä–æ–ª—å—é")
    
    with tab2:
        if editors:
            for user in editors:
                col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                with col1:
                    st.write(f"@{user.get('username', 'Unknown')} ({user.get('telegram_id')})")
                with col2:
                    if st.button(f"‚Üí Admin", key=f"admin_{user['id']}"):
                        auth_manager.set_user_role(user['telegram_id'], 'admin')
                        st.rerun()
                with col3:
                    if st.button(f"‚Üí User", key=f"demote_{user['id']}"):
                        auth_manager.set_user_role(user['telegram_id'], 'user')
                        st.rerun()
        else:
            st.info("–ù–µ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤")
    
    with tab3:
        if admins:
            for user in admins:
                st.write(f"üëë @{user.get('username', 'Unknown')} ({user.get('telegram_id')})")
        else:
            st.info("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")

def show_auth_logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    st.header("üìã –õ–æ–≥–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    logs = auth_manager.get_auth_logs(limit=50)
    
    if logs:
        log_data = []
        for log in logs:
            log_data.append({
                "–í—Ä–µ–º—è": log.get('created_at', ''),
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": log.get('username', f"ID: {log.get('user_id')}"),
                "–î–µ–π—Å—Ç–≤–∏–µ": log.get('action', ''),
                "–°—Ç–∞—Ç—É—Å": "‚úÖ" if log.get('success') else "‚ùå",
                "–û—à–∏–±–∫–∞": log.get('error_message', '')
            })
        
        st.dataframe(log_data, use_container_width=True)
    else:
        st.info("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_system_settings():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    st.header("‚ö° –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    st.info("–†–∞–∑–¥–µ–ª —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'authenticated' not in st.session_state:
        st.session_state['authenticated'] = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    if not st.session_state['authenticated']:
        check_token_from_url()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not st.session_state['authenticated']:
        login_with_token()
    else:
        main_dashboard()

if __name__ == "__main__":
    main()