#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Interview Wrapper –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram Bot
–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è InteractiveInterviewerAgent
"""

import sys
import logging
from pathlib import Path

# Setup paths
sys.path.insert(0, str(Path(__file__).parent.parent))

logger = logging.getLogger(__name__)


async def run_ai_audit_for_anketa(anketa_id: str, db):
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å AI –∞—É–¥–∏—Ç –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã

    Args:
        anketa_id: ID –∞–Ω–∫–µ—Ç—ã (–Ω–∞–ø—Ä. AN-20251020-username-123)
        db: Database instance

    Returns:
        dict: {
            'success': bool,
            'audit_score': int (0-100),
            'recommendations': list[str],
            'message': str
        }
    """
    try:
        from agents.interactive_interviewer_agent import InteractiveInterviewerAgent

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ –ë–î
        anketa_data = db.get_session_by_anketa_id(anketa_id)

        if not anketa_data:
            return {
                'success': False,
                'audit_score': 0,
                'recommendations': [],
                'message': f"–ê–Ω–∫–µ—Ç–∞ {anketa_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            }

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º user_data –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        user_data = {
            'telegram_id': anketa_data.get('user_id', 0),
            'username': anketa_data.get('username', 'unknown'),
            'first_name': anketa_data.get('first_name', ''),
            'last_name': anketa_data.get('last_name', ''),
            'email': anketa_data.get('email', ''),
            'phone': anketa_data.get('phone', ''),
            'grant_fund': anketa_data.get('grant_fund', '–§–æ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –∏–∑ –∞–Ω–∫–µ—Ç—ã
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è interview_data JSONB
        interview_data = anketa_data.get('interview_data', {})

        # –ú–∞–ø–∏–º –ø–æ–ª—è –∞–Ω–∫–µ—Ç—ã –Ω–∞ —Ñ–æ—Ä–º–∞—Ç InteractiveInterviewerAgent
        block_1_fields = {
            'block_1_q1': interview_data.get('project_name', ''),
            'block_1_q2': interview_data.get('project_goal', ''),
            'block_1_q3': interview_data.get('problem_statement', ''),
            'block_1_q4': interview_data.get('target_audience', ''),
            'block_1_q5': interview_data.get('geography', '')
        }

        block_2_fields = {
            'block_2_q1': interview_data.get('project_tasks', ''),
            'block_2_q2': interview_data.get('methodology', ''),
            'block_2_q3': interview_data.get('expected_results', ''),
            'block_2_q4': interview_data.get('budget', ''),
            'block_2_q5': interview_data.get('budget_breakdown', '')
        }

        block_3_fields = {
            'block_3_q1': interview_data.get('team_experience', ''),
            'block_3_q2': interview_data.get('partnerships', ''),
            'block_3_q3': interview_data.get('risk_management', ''),
            'block_3_q4': interview_data.get('sustainability', ''),
            'block_3_q5': interview_data.get('project_duration', '')
        }

        user_data.update(block_1_fields)
        user_data.update(block_2_fields)
        user_data.update(block_3_fields)

        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = InteractiveInterviewerAgent(db, llm_provider="claude_code")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
        logger.info(f"Running AI audit for anketa {anketa_id}...")
        result = await agent.conduct_interview_with_audit(user_data=user_data)

        if result['status'] == 'success':
            # –û–±–Ω–æ–≤–ª—è–µ–º audit_score –≤ –ë–î
            try:
                db.update_anketa_audit_score(anketa_id, result['audit_score'])
            except Exception as e:
                logger.warning(f"Failed to update audit_score in DB: {e}")

            return {
                'success': True,
                'audit_score': result['audit_score'],
                'recommendations': result.get('recommendations', []),
                'message': f"AI –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ü–µ–Ω–∫–∞: {result['audit_score']}/100"
            }
        else:
            return {
                'success': False,
                'audit_score': 0,
                'recommendations': [],
                'message': f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: {result.get('error', 'Unknown error')}"
            }

    except ImportError as e:
        logger.error(f"Import error in AI audit: {e}")
        return {
            'success': False,
            'audit_score': 0,
            'recommendations': [],
            'message': f"InteractiveInterviewerAgent –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
        }
    except Exception as e:
        logger.error(f"Error in AI audit: {e}")
        import traceback
        traceback.print_exc()
        return {
            'success': False,
            'audit_score': 0,
            'recommendations': [],
            'message': f"–û—à–∏–±–∫–∞: {e}"
        }


def format_ai_audit_message(audit_result):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ AI –∞—É–¥–∏—Ç–∞ –¥–ª—è Telegram

    Args:
        audit_result: dict from run_ai_audit_for_anketa()

    Returns:
        str: Formatted message for Telegram
    """
    if not audit_result['success']:
        return f"‚ùå {audit_result['message']}"

    score = audit_result['audit_score']

    # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
    if score >= 80:
        emoji = "üåü"
        status = "–û—Ç–ª–∏—á–Ω–æ!"
    elif score >= 60:
        emoji = "‚úÖ"
        status = "–•–æ—Ä–æ—à–æ"
    elif score >= 40:
        emoji = "‚ö†Ô∏è"
        status = "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
    else:
        emoji = "‚ùå"
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    message = f"""
{emoji} *AI –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*

*–û—Ü–µ–Ω–∫–∞:* {score}/100
*–°—Ç–∞—Ç—É—Å:* {status}
"""

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    recommendations = audit_result.get('recommendations', [])
    if recommendations:
        message += "\n*üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
        for i, rec in enumerate(recommendations[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5
            message += f"{i}. {rec}\n"

    return message
