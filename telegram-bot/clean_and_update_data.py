#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Perplexity API
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService')

from data.database import GrantServiceDatabase

def clean_and_update_data():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Perplexity API")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = GrantServiceDatabase()
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏...")
    try:
        with db.connect() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                DELETE FROM researcher_logs 
                WHERE query_text LIKE '–ú–∏–≥—Ä–∞—Ü–∏—è:%'
            ''')
            deleted_count = cursor.rowcount
            conn.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω–∞ (3 –∞–≤–≥—É—Å—Ç–∞ 2025)
    current_data = {
        'credit_balance': 0.747174,
        'api_requests': {
            'sonar_medium': 9,
            'sonar_low': 66,
            'reasoning_pro': 20,
            'sonar_pro_low': 1
        },
        'input_tokens': {
            'sonar': 1788,
            'reasoning_pro': 2546,
            'sonar_pro': 5,
            'total': 4339
        },
        'output_tokens': {
            'sonar': 9833,
            'reasoning_pro': 169065,
            'sonar_pro': 50,
            'total': 178948
        },
        'reasoning_tokens': {
            'reasoning_pro': 5853115
        },
        'total_cost': 0.133939
    }
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
    models_data = [
        {
            'user_id': 1,
            'session_id': 1,
            'query_text': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: sonar medium –∑–∞–ø—Ä–æ—Å—ã',
            'perplexity_response': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Perplexity dashboard',
            'sources': [],
            'usage_stats': {
                'model': 'sonar',
                'quality': 'medium',
                'input_tokens': current_data['input_tokens']['sonar'],
                'output_tokens': current_data['output_tokens']['sonar'],
                'search_queries': 0,
                'reasoning_tokens': 0,
                'requests_count': current_data['api_requests']['sonar_medium']
            },
            'cost': current_data['total_cost'] * (current_data['api_requests']['sonar_medium'] / 96),  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
            'status': 'success',
            'error_message': None,
            'credit_balance': current_data['credit_balance']
        },
        {
            'user_id': 1,
            'session_id': 1,
            'query_text': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: sonar low –∑–∞–ø—Ä–æ—Å—ã',
            'perplexity_response': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Perplexity dashboard',
            'sources': [],
            'usage_stats': {
                'model': 'sonar',
                'quality': 'low',
                'input_tokens': current_data['input_tokens']['sonar'],
                'output_tokens': current_data['output_tokens']['sonar'],
                'search_queries': 0,
                'reasoning_tokens': 0,
                'requests_count': current_data['api_requests']['sonar_low']
            },
            'cost': current_data['total_cost'] * (current_data['api_requests']['sonar_low'] / 96),
            'status': 'success',
            'error_message': None,
            'credit_balance': current_data['credit_balance']
        },
        {
            'user_id': 1,
            'session_id': 1,
            'query_text': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: reasoning-pro –∑–∞–ø—Ä–æ—Å—ã',
            'perplexity_response': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Perplexity dashboard',
            'sources': [],
            'usage_stats': {
                'model': 'reasoning-pro',
                'quality': 'none',
                'input_tokens': current_data['input_tokens']['reasoning_pro'],
                'output_tokens': current_data['output_tokens']['reasoning_pro'],
                'search_queries': 0,
                'reasoning_tokens': current_data['reasoning_tokens']['reasoning_pro'],
                'requests_count': current_data['api_requests']['reasoning_pro']
            },
            'cost': current_data['total_cost'] * (current_data['api_requests']['reasoning_pro'] / 96),
            'status': 'success',
            'error_message': None,
            'credit_balance': current_data['credit_balance']
        },
        {
            'user_id': 1,
            'session_id': 1,
            'query_text': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: sonar-pro low –∑–∞–ø—Ä–æ—Å—ã',
            'perplexity_response': '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Perplexity dashboard',
            'sources': [],
            'usage_stats': {
                'model': 'sonar-pro',
                'quality': 'low',
                'input_tokens': current_data['input_tokens']['sonar_pro'],
                'output_tokens': current_data['output_tokens']['sonar_pro'],
                'search_queries': 0,
                'reasoning_tokens': 0,
                'requests_count': current_data['api_requests']['sonar_pro_low']
            },
            'cost': current_data['total_cost'] * (current_data['api_requests']['sonar_pro_low'] / 96),
            'status': 'success',
            'error_message': None,
            'credit_balance': current_data['credit_balance']
        }
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    for i, data in enumerate(models_data, 1):
        try:
            log_id = db.log_researcher_query(
                user_id=data['user_id'],
                session_id=data['session_id'],
                query_text=data['query_text'],
                perplexity_response=data['perplexity_response'],
                sources=data['sources'],
                usage_stats=data['usage_stats'],
                cost=data['cost'],
                status=data['status'],
                error_message=data['error_message'],
                credit_balance=data['credit_balance']
            )
            print(f"‚úÖ –ó–∞–ø–∏—Å—å {i} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: {log_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {i}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    logs = db.get_researcher_logs(limit=10)
    
    if logs:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å–µ–π:")
        for log in logs:
            usage_stats = log.get('usage_stats', {})
            model = usage_stats.get('model', 'unknown')
            quality = usage_stats.get('quality', 'unknown')
            requests = usage_stats.get('requests_count', 0)
            balance = log.get('credit_balance', 0.0)
            
            try:
                balance_float = float(balance) if balance else 0.0
                print(f"  ‚Ä¢ {model} ({quality}): {requests} –∑–∞–ø—Ä–æ—Å–æ–≤, –±–∞–ª–∞–Ω—Å: ${balance_float:.6f}")
            except (ValueError, TypeError):
                print(f"  ‚Ä¢ {model} ({quality}): {requests} –∑–∞–ø—Ä–æ—Å–æ–≤, –±–∞–ª–∞–Ω—Å: N/A")
    else:
        print("–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    clean_and_update_data() 