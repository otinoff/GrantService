#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Anketa Management Handler - Iteration 38

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç (/my_anketas)
- –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º (/delete_anketa)
- –ê—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç (/audit_anketa)

Iteration 38 - Synthetic Corpus Generator:
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç (/generate_synthetic_anketa)
- Batch –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç (/batch_audit_anketas)
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–ø—É—Å–∞ (/corpus_stats)

Author: Grant Service Architect Agent
Created: 2025-10-25
Version: 1.1 (Iteration 38)
"""

import sys
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio
import json

# Setup paths
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class AnketaManagementHandler:
    """
    Handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –ö–æ–º–∞–Ω–¥—ã:
    - /my_anketas - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - /delete_anketa - —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    - /audit_anketa - –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç—ã

    –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: Cradle OS - Immunity (Quality Control)
    """

    def __init__(self, db):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handler

        Args:
            db: Database instance (GrantServiceDatabase)
        """
        self.db = db
        logger.info("[ANKETA] AnketaManagementHandler initialized")

    # ========== –ö–û–ú–ê–ù–î–ê: /my_anketas ==========

    async def my_anketas(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç:
        - Anketa ID
        - –î–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        - –°—Ç–∞—Ç—É—Å –∞—É–¥–∏—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        - –û—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        - –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π (—É–¥–∞–ª–∏—Ç—å, –∞—É–¥–∏—Ç)
        """
        user_id = update.effective_user.id

        logger.info(f"[ANKETA] User {user_id} requested anketa list")

        try:
            # –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

            if not anketas or len(anketas) == 0:
                await update.message.reply_text(
                    "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∞–Ω–∫–µ—Ç—É."
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üìã **–í–∞—à–∏ –∞–Ω–∫–µ—Ç—ã** ({len(anketas)}):\n\n"

            for i, anketa in enumerate(anketas, 1):
                anketa_id = anketa.get('anketa_id', 'Unknown')
                completed_at = anketa.get('completed_at')
                audit_score = anketa.get('audit_score')
                audit_status = anketa.get('audit_status')

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
                if completed_at:
                    if isinstance(completed_at, str):
                        date_str = completed_at[:10]
                    else:
                        date_str = completed_at.strftime('%Y-%m-%d')
                else:
                    date_str = "Unknown"

                # Emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = self._get_status_emoji(audit_status)

                message += f"{i}. `{anketa_id}`\n"
                message += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {date_str}\n"

                if audit_score is not None:
                    message += f"   {status_emoji} –ê—É–¥–∏—Ç: {audit_score:.1f}/10 ({audit_status or 'unknown'})\n"
                else:
                    message += f"   ‚è≥ –ê—É–¥–∏—Ç: –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω\n"

                message += "\n"

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("üîç –ê—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã", callback_data="anketa_audit_select"),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="anketa_delete_select")
                ],
                [
                    InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="anketa_refresh")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )

            logger.info(f"[ANKETA] Displayed {len(anketas)} anketas for user {user_id}")

        except Exception as e:
            logger.error(f"[ANKETA] Error getting anketas for user {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== –ö–û–ú–ê–ù–î–ê: /delete_anketa ==========

    async def delete_anketa(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ó–∞–ø—Ä–æ—Å–∏—Ç—å anketa_id (–∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫)
        2. –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        3. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        4. –í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ)
        """
        user_id = update.effective_user.id

        logger.info(f"[ANKETA] User {user_id} initiated anketa deletion")

        try:
            # –ü–æ–ª—É—á–∏—Ç—å anketa_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            if context.args and len(context.args) > 0:
                anketa_id = context.args[0]

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                session = self.db.get_session_by_anketa_id(anketa_id)

                if not session:
                    await update.message.reply_text(
                        f"‚ùå –ê–Ω–∫–µ—Ç–∞ `{anketa_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        parse_mode='Markdown'
                    )
                    return

                if session.get('telegram_id') != user_id:
                    await update.message.reply_text(
                        "‚ùå –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç."
                    )
                    return

                # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                await self._confirm_delete(update, anketa_id)

            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
                anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

                if not anketas or len(anketas) == 0:
                    await update.message.reply_text(
                        "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
                    )
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = []
                for anketa in anketas[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                    anketa_id = anketa.get('anketa_id', 'Unknown')
                    completed_at = anketa.get('completed_at')

                    if completed_at:
                        if isinstance(completed_at, str):
                            date_str = completed_at[:10]
                        else:
                            date_str = completed_at.strftime('%Y-%m-%d')
                    else:
                        date_str = "Unknown"

                    button_text = f"{anketa_id} ({date_str})"
                    callback_data = f"anketa_delete_confirm:{anketa_id}"

                    keyboard.append([
                        InlineKeyboardButton(button_text, callback_data=callback_data)
                    ])

                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_delete_cancel")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö "
                    "(–∞—É–¥–∏—Ç—ã, –≥—Ä–∞–Ω—Ç—ã, review).",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"[ANKETA] Error initiating deletion for user {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _confirm_delete(self, update: Update, anketa_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"anketa_delete_execute:{anketa_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_delete_cancel")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = (
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã:**\n\n"
            f"`{anketa_id}`\n\n"
            f"–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã\n"
            f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞\n"
            f"‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã\n"
            f"‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ review\n\n"
            f"**–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
        )

        await update.message.reply_text(
            message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def _execute_delete(self, query, anketa_id: str, user_id: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã"""
        try:
            logger.info(f"[ANKETA] Executing deletion of {anketa_id} for user {user_id}")

            # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
            success = self.db.delete_anketa(anketa_id=anketa_id, telegram_id=user_id)

            if success:
                await query.edit_message_text(
                    f"‚úÖ –ê–Ω–∫–µ—Ç–∞ `{anketa_id}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n"
                    f"–í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.",
                    parse_mode='Markdown'
                )
                logger.info(f"[ANKETA] Successfully deleted {anketa_id}")
            else:
                await query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É `{anketa_id}`.\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.",
                    parse_mode='Markdown'
                )
                logger.warning(f"[ANKETA] Failed to delete {anketa_id}")

        except Exception as e:
            logger.error(f"[ANKETA] Error executing deletion of {anketa_id}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== –ö–û–ú–ê–ù–î–ê: /audit_anketa ==========

    async def audit_anketa(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç—ã

        –ü—Ä–æ—Ü–µ—Å—Å:
        1. –í—ã–±—Ä–∞—Ç—å anketa_id (–∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ)
        2. –ó–∞–ø—É—Å—Ç–∏—Ç—å AuditorAgent
        3. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞
        4. –î–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        user_id = update.effective_user.id

        logger.info(f"[ANKETA] User {user_id} initiated anketa audit")

        try:
            # –ü–æ–ª—É—á–∏—Ç—å anketa_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            if context.args and len(context.args) > 0:
                anketa_id = context.args[0]

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                session = self.db.get_session_by_anketa_id(anketa_id)

                if not session:
                    await update.message.reply_text(
                        f"‚ùå –ê–Ω–∫–µ—Ç–∞ `{anketa_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        parse_mode='Markdown'
                    )
                    return

                if session.get('telegram_id') != user_id:
                    await update.message.reply_text(
                        "‚ùå –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç."
                    )
                    return

                # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç
                await self._run_audit(update, anketa_id, session, context)

            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞
                anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

                if not anketas or len(anketas) == 0:
                    await update.message.reply_text(
                        "üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞."
                    )
                    return

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
                keyboard = []
                for anketa in anketas[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 5
                    anketa_id = anketa.get('anketa_id', 'Unknown')
                    audit_score = anketa.get('audit_score')

                    if audit_score is not None:
                        button_text = f"{anketa_id} (‚≠ê {audit_score:.1f}/10)"
                    else:
                        button_text = f"{anketa_id} (‚è≥ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω)"

                    callback_data = f"anketa_audit_run:{anketa_id}"

                    keyboard.append([
                        InlineKeyboardButton(button_text, callback_data=callback_data)
                    ])

                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_audit_cancel")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –∞—É–¥–∏—Ç–∞:**\n\n"
                    "–ê—É–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏ –¥–∞—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"[ANKETA] Error initiating audit for user {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def _run_audit(self, update_or_query, anketa_id: str, session: Dict, context=None):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (Update –∏–ª–∏ CallbackQuery)
            is_query = hasattr(update_or_query, 'edit_message_text')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—É–¥–∏—Ç–∞
            if is_query:
                await update_or_query.edit_message_text(
                    f"üîç –ó–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã `{anketa_id}`...\n\n"
                    f"–≠—Ç–æ –∑–∞–π–º–µ—Ç ~30 —Å–µ–∫—É–Ω–¥.",
                    parse_mode='Markdown'
                )
            else:
                msg = await update_or_query.message.reply_text(
                    f"üîç –ó–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã `{anketa_id}`...\n\n"
                    f"–≠—Ç–æ –∑–∞–π–º–µ—Ç ~30 —Å–µ–∫—É–Ω–¥.",
                    parse_mode='Markdown'
                )

            logger.info(f"[ANKETA] Starting audit for {anketa_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞—É–¥–∏—Ç
            session_id = session.get('id')
            existing_audit = self.db.get_audit_by_session_id(session_id)

            if existing_audit:
                logger.info(f"[ANKETA] Found existing audit for {anketa_id}")
                audit_result = existing_audit
            else:
                # ITERATION 37: Two-Stage QA - Stage 1 (Anketa Validation)
                # –ó–∞–ø—É—Å–∫–∞–µ–º AnketaValidator –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –í–•–û–î–ù–´–• –î–ê–ù–ù–´–•
                from agents.anketa_validator import AnketaValidator

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
                interview_data = session.get('interview_data')
                if isinstance(interview_data, str):
                    interview_data = json.loads(interview_data)

                # –ü–æ–ª—É—á–∞–µ–º LLM preference
                user_id = session.get('telegram_id')
                llm_provider = self.db.get_user_llm_preference(user_id)

                # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
                validator = AnketaValidator(llm_provider=llm_provider, db=self.db)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç raw JSON anketa)
                validation_result = await validator.validate(interview_data)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç AnketaValidator ‚Üí —Ñ–æ—Ä–º–∞—Ç –¥–ª—è _format_audit_result
                # AnketaValidator –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {score, valid, can_proceed, issues, recommendations}
                # _format_audit_result –æ–∂–∏–¥–∞–µ—Ç: {average_score, approval_status, recommendations}

                score = validation_result['score']

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º approval_status –Ω–∞ –æ—Å–Ω–æ–≤–µ score –∏ can_proceed
                if validation_result['can_proceed'] and score >= 7.0:
                    approval_status = 'approved'
                elif score >= 5.0:
                    approval_status = 'needs_revision'
                else:
                    approval_status = 'rejected'

                audit_result = {
                    'average_score': score,
                    'approval_status': approval_status,
                    # AnketaValidator –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ - —É–ø—Ä–æ—â–∞–µ–º
                    'completeness_score': int(score),
                    'clarity_score': 0,  # N/A for anketa validation
                    'feasibility_score': 0,  # N/A for anketa validation
                    'innovation_score': 0,  # N/A for anketa validation
                    'quality_score': int(score),
                    'recommendations': validation_result['recommendations'],
                    'issues': validation_result['issues']
                }

                logger.info(f"[ANKETA] Validation completed for {anketa_id}: status={approval_status}, score={score:.1f}/10")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            message = self._format_audit_result(anketa_id, audit_result)

            # ITERATION 37: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã + —Ñ–∞–π–ª
            if is_query:
                await update_or_query.edit_message_text(
                    message,
                    parse_mode='Markdown'
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
                await self._send_audit_report_file(
                    update_or_query.message.chat_id,
                    anketa_id,
                    audit_result,
                    validation_result if 'validation_result' in locals() else None,
                    context.bot if context else None
                )
            else:
                await msg.edit_text(
                    message,
                    parse_mode='Markdown'
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º
                await self._send_audit_report_file(
                    msg.chat_id,
                    anketa_id,
                    audit_result,
                    validation_result if 'validation_result' in locals() else None,
                    context.bot if context else None
                )

        except Exception as e:
            logger.error(f"[ANKETA] Error running audit for {anketa_id}: {e}")

            error_msg = (
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—ã `{anketa_id}`.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

            if is_query:
                await update_or_query.edit_message_text(error_msg, parse_mode='Markdown')
            else:
                await update_or_query.message.reply_text(error_msg, parse_mode='Markdown')

    async def _send_audit_report_file(self, chat_id: int, anketa_id: str, audit: Dict, validation_details: Dict = None, bot=None):
        """
        ITERATION 37: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞—É–¥–∏—Ç–∞

        Args:
            chat_id: Telegram chat ID
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã
            audit: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞
            validation_details: –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        try:
            from telegram import InputFile
            from datetime import datetime
            import io

            # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
            report = []
            report.append("=" * 60)
            report.append(f"–û–¢–ß–Å–¢ –ê–£–î–ò–¢–ê –ê–ù–ö–ï–¢–´")
            report.append("=" * 60)
            report.append(f"")
            report.append(f"–ê–Ω–∫–µ—Ç–∞ ID: {anketa_id}")
            report.append(f"–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"")
            report.append("=" * 60)
            report.append("–û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
            report.append("=" * 60)

            score = audit.get('average_score', 0.0)
            status = audit.get('approval_status', 'unknown')

            report.append(f"")
            report.append(f"–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {score:.1f}/10")
            report.append(f"–°—Ç–∞—Ç—É—Å: {self._get_status_text(status)}")
            report.append(f"")

            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            report.append("=" * 60)
            report.append("–î–ï–¢–ê–õ–¨–ù–´–ï –û–¶–ï–ù–ö–ò")
            report.append("=" * 60)
            report.append(f"")
            report.append(f"‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞:          {audit.get('completeness_score', 0)}/10")
            report.append(f"‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å:          {audit.get('clarity_score', 0)}/10")
            report.append(f"‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å:     {audit.get('feasibility_score', 0)}/10")
            report.append(f"‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å:  {audit.get('innovation_score', 0)}/10")
            report.append(f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ:         {audit.get('quality_score', 0)}/10")
            report.append(f"")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = audit.get('recommendations', [])
            if isinstance(recommendations, str):
                try:
                    recommendations = json.loads(recommendations)
                except:
                    recommendations = [recommendations]

            if recommendations and len(recommendations) > 0:
                report.append("=" * 60)
                report.append("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
                report.append("=" * 60)
                report.append(f"")
                for i, rec in enumerate(recommendations, 1):
                    report.append(f"{i}. {rec}")
                report.append(f"")

            # –ü—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            issues = audit.get('issues', [])
            if issues and len(issues) > 0:
                report.append("=" * 60)
                report.append("–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
                report.append("=" * 60)
                report.append(f"")
                for i, issue in enumerate(issues, 1):
                    report.append(f"{i}. {issue}")
                report.append(f"")

            # –î–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if validation_details:
                report.append("=" * 60)
                report.append("–î–ï–¢–ê–õ–ò –í–ê–õ–ò–î–ê–¶–ò–ò (GATE 1)")
                report.append("=" * 60)
                report.append(f"")
                report.append(f"–û—Ü–µ–Ω–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {validation_details.get('score', 0):.1f}/10")
                report.append(f"–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å: {'–î–∞' if validation_details.get('can_proceed', False) else '–ù–µ—Ç'}")

                llm_assessment = validation_details.get('details', {}).get('llm_assessment', {})
                if llm_assessment:
                    report.append(f"")
                    report.append(f"LLM –æ—Ü–µ–Ω–∫–∏:")
                    report.append(f"  ‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞:     {llm_assessment.get('problem_score', 0)}/3")
                    report.append(f"  ‚Ä¢ –†–µ—à–µ–Ω–∏–µ:      {llm_assessment.get('solution_score', 0)}/3")
                    report.append(f"  ‚Ä¢ –¶–µ–ª–∏:         {llm_assessment.get('goals_score', 0)}/2")
                    report.append(f"  ‚Ä¢ –ë—é–¥–∂–µ—Ç:       {llm_assessment.get('budget_score', 0)}/2")
                report.append(f"")

            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            report.append("=" * 60)
            report.append("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
            report.append("=" * 60)
            report.append(f"")

            if status == 'approved':
                report.append("‚úÖ –ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞!")
            elif status == 'needs_revision':
                report.append("‚ö†Ô∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≥—Ä–∞–Ω—Ç–∞.")
            elif status == 'rejected':
                report.append("‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞.")
                report.append("   –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

            report.append(f"")
            report.append("=" * 60)
            report.append(f"–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"–°–∏—Å—Ç–µ–º–∞: GrantService - Two-Stage QA Pipeline")
            report.append("=" * 60)

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç
            report_text = "\n".join(report)

            # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            file_content = io.BytesIO(report_text.encode('utf-8'))
            file_content.name = f"audit_{anketa_id}.txt"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            if bot:
                await bot.send_document(
                    chat_id=chat_id,
                    document=InputFile(file_content, filename=f"audit_{anketa_id}.txt"),
                    caption=f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç –∞—É–¥–∏—Ç–∞ –∞–Ω–∫–µ—Ç—ã {anketa_id}"
                )
            else:
                logger.warning(f"[ANKETA] No bot instance to send file")

            logger.info(f"[ANKETA] Audit report file sent for {anketa_id}")

        except Exception as e:
            logger.error(f"[ANKETA] Error sending audit report file: {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º

    def _format_audit_result(self, anketa_id: str, audit: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞"""
        avg_score = audit.get('average_score', 0.0)
        status = audit.get('approval_status', 'unknown')

        completeness = audit.get('completeness_score', 0)
        clarity = audit.get('clarity_score', 0)
        feasibility = audit.get('feasibility_score', 0)
        innovation = audit.get('innovation_score', 0)
        quality = audit.get('quality_score', 0)

        recommendations = audit.get('recommendations', [])
        if isinstance(recommendations, str):
            try:
                recommendations = json.loads(recommendations)
            except:
                recommendations = []

        # Emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = self._get_status_emoji(status)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        message = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –∞–Ω–∫–µ—Ç—ã**\n\n"
        message += f"`{anketa_id}`\n\n"

        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        message += f"{status_emoji} **–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:** {avg_score:.1f}/10\n"
        message += f"**–°—Ç–∞—Ç—É—Å:** {self._get_status_text(status)}\n\n"

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
        message += f"**–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:**\n"
        message += f"‚Ä¢ –ü–æ–ª–Ω–æ—Ç–∞: {completeness}/10\n"
        message += f"‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å: {clarity}/10\n"
        message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å: {feasibility}/10\n"
        message += f"‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å: {innovation}/10\n"
        message += f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {quality}/10\n\n"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendations and len(recommendations) > 0:
            message += f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for i, rec in enumerate(recommendations[:5], 1):
                message += f"{i}. {rec}\n"
            message += "\n"

        # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
        if status == 'approved':
            message += "‚úÖ –ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞!"
        elif status == 'needs_revision':
            message += "‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ª—É—á—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≥—Ä–∞–Ω—Ç–∞."
        elif status == 'rejected':
            message += "‚ùå –ê–Ω–∫–µ—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞."
        else:
            message += f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}"

        return message

    # ========== CALLBACK HANDLER ==========

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫

        Callback patterns:
        - anketa_audit_select - –≤—ã–±–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞
        - anketa_audit_run:<anketa_id> - –∑–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
        - anketa_audit_cancel - –æ—Ç–º–µ–Ω–∞ –∞—É–¥–∏—Ç–∞
        - anketa_delete_select - –≤—ã–±–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        - anketa_delete_confirm:<anketa_id> - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        - anketa_delete_execute:<anketa_id> - –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        - anketa_delete_cancel - –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
        - anketa_refresh - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        """
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        data = query.data

        logger.info(f"[ANKETA] Callback from user {user_id}: {data}")

        try:
            # –ê—É–¥–∏—Ç
            if data == "anketa_audit_select":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞
                anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

                if not anketas or len(anketas) == 0:
                    await query.edit_message_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞.")
                    return

                keyboard = []
                for anketa in anketas[:5]:
                    anketa_id = anketa.get('anketa_id', 'Unknown')
                    audit_score = anketa.get('audit_score')

                    if audit_score is not None:
                        button_text = f"{anketa_id} (‚≠ê {audit_score:.1f}/10)"
                    else:
                        button_text = f"{anketa_id} (‚è≥ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω)"

                    keyboard.append([
                        InlineKeyboardButton(button_text, callback_data=f"anketa_audit_run:{anketa_id}")
                    ])

                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_audit_cancel")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "üîç **–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –∞—É–¥–∏—Ç–∞:**",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

            elif data.startswith("anketa_audit_run:"):
                anketa_id = data.split(":", 1)[1]

                # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
                session = self.db.get_session_by_anketa_id(anketa_id)

                if not session:
                    await query.edit_message_text(
                        f"‚ùå –ê–Ω–∫–µ—Ç–∞ `{anketa_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                        parse_mode='Markdown'
                    )
                    return

                if session.get('telegram_id') != user_id:
                    await query.edit_message_text("‚ùå –≠—Ç–∞ –∞–Ω–∫–µ—Ç–∞ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.")
                    return

                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
                await self._run_audit(query, anketa_id, session, context)

            elif data == "anketa_audit_cancel":
                await query.edit_message_text("‚ùå –ê—É–¥–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω.")

            # –£–¥–∞–ª–µ–Ω–∏–µ
            elif data == "anketa_delete_select":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

                if not anketas or len(anketas) == 0:
                    await query.edit_message_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                    return

                keyboard = []
                for anketa in anketas[:5]:
                    anketa_id = anketa.get('anketa_id', 'Unknown')
                    completed_at = anketa.get('completed_at')

                    if completed_at:
                        if isinstance(completed_at, str):
                            date_str = completed_at[:10]
                        else:
                            date_str = completed_at.strftime('%Y-%m-%d')
                    else:
                        date_str = "Unknown"

                    button_text = f"{anketa_id} ({date_str})"

                    keyboard.append([
                        InlineKeyboardButton(button_text, callback_data=f"anketa_delete_confirm:{anketa_id}")
                    ])

                keyboard.append([
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_delete_cancel")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ —É–¥–∞–ª–µ–Ω–∏—é –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

            elif data.startswith("anketa_delete_confirm:"):
                anketa_id = data.split(":", 1)[1]

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"anketa_delete_execute:{anketa_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="anketa_delete_cancel")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                message = (
                    f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ:**\n\n"
                    f"`{anketa_id}`\n\n"
                    f"**–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!**"
                )

                await query.edit_message_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

            elif data.startswith("anketa_delete_execute:"):
                anketa_id = data.split(":", 1)[1]

                # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                await self._execute_delete(query, anketa_id, user_id)

            elif data == "anketa_delete_cancel":
                await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            elif data == "anketa_refresh":
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
                anketas = self.db.get_user_anketas(telegram_id=user_id, limit=10)

                if not anketas or len(anketas) == 0:
                    await query.edit_message_text(
                        "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
                    )
                    return

                message = f"üìã **–í–∞—à–∏ –∞–Ω–∫–µ—Ç—ã** ({len(anketas)}):\n\n"

                for i, anketa in enumerate(anketas, 1):
                    anketa_id = anketa.get('anketa_id', 'Unknown')
                    completed_at = anketa.get('completed_at')
                    audit_score = anketa.get('audit_score')
                    audit_status = anketa.get('audit_status')

                    if completed_at:
                        if isinstance(completed_at, str):
                            date_str = completed_at[:10]
                        else:
                            date_str = completed_at.strftime('%Y-%m-%d')
                    else:
                        date_str = "Unknown"

                    status_emoji = self._get_status_emoji(audit_status)

                    message += f"{i}. `{anketa_id}`\n"
                    message += f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {date_str}\n"

                    if audit_score is not None:
                        message += f"   {status_emoji} –ê—É–¥–∏—Ç: {audit_score:.1f}/10 ({audit_status or 'unknown'})\n"
                    else:
                        message += f"   ‚è≥ –ê—É–¥–∏—Ç: –Ω–µ –ø—Ä–æ–≤–µ–¥–µ–Ω\n"

                    message += "\n"

                keyboard = [
                    [
                        InlineKeyboardButton("üîç –ê—É–¥–∏—Ç", callback_data="anketa_audit_select"),
                        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="anketa_delete_select")
                    ],
                    [
                        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="anketa_refresh")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )

        except Exception as e:
            logger.error(f"[ANKETA] Error handling callback {data}: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== –ö–û–ú–ê–ù–î–ê: /create_test_anketa ==========

    async def create_test_anketa(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

        –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Iteration 35
        """
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name

        logger.info(f"[ANKETA] User {user_id} creating test anketa")

        try:
            await update.message.reply_text("üîß –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º anketa_id
            user_data = {
                'telegram_id': user_id,
                'username': username,
                'first_name': first_name,
                'last_name': last_name
            }

            anketa_id = self.db.generate_anketa_id(user_data)

            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
            test_interview_data = {
                "project_name": "–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä '–¶–∏—Ñ—Ä–æ–≤–æ–µ –±—É–¥—É—â–µ–µ'",
                "organization": "–ê–ù–û '–†–∞–∑–≤–∏—Ç–∏–µ –º–æ–ª–æ–¥–µ–∂–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤'",
                "organization_type": "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –Ω–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
                "region": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - –ö—É–∑–±–∞—Å—Å",
                "city": "–ö–µ–º–µ—Ä–æ–≤–æ",
                "target_audience": "–ú–æ–ª–æ–¥–µ–∂—å 14-25 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è—Å—è IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
                "target_count": "150 —á–µ–ª–æ–≤–µ–∫ –≤ –≥–æ–¥",

                "problem": "–í —Ä–µ–≥–∏–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º IT-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏. –ë–æ–ª–µ–µ 70% –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ —à–∫–æ–ª –Ω–µ –∏–º–µ—é—Ç –±–∞–∑–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞.",

                "solution": "–°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ —Å –∫—É—Ä—Å–∞–º–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –¥–∏–∑–∞–π–Ω—É –∏ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –ó–∞–Ω—è—Ç–∏—è –±—É–¥—É—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –æ–ø—ã—Ç–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–∞—Ö.",

                "goals": [
                    "–û–±—É—á–∏—Ç—å 150 –º–æ–ª–æ–¥—ã—Ö –ª—é–¥–µ–π –æ—Å–Ω–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ IT-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
                    "–°–æ–∑–¥–∞—Ç—å 5 —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º",
                    "–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å 30 –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –æ—Ç –≤–µ–¥—É—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –æ—Ç—Ä–∞—Å–ª–∏",
                    "–ü–æ–º–æ—á—å 50 –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö"
                ],

                "activities": [
                    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –∏ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤",
                    "–ù–∞–±–æ—Ä –∏ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
                    "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∫—É—Ä—Å–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ö–∞–∫–∞—Ç–æ–Ω–æ–≤ –∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤",
                    "–ö–∞—Ä—å–µ—Ä–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –≤ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"
                ],

                "results": [
                    "150 –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–ª–æ–¥—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                    "5 –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
                    "30 –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤",
                    "50 —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤",
                    "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ —Ä–µ–≥–∏–æ–Ω–∞"
                ],

                "budget": "850000",
                "budget_breakdown": {
                    "equipment": "300000 —Ä—É–± - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                    "rent": "200000 —Ä—É–± - –∞—Ä–µ–Ω–¥–∞ –ø–æ–º–µ—â–µ–Ω–∏—è –Ω–∞ –≥–æ–¥",
                    "salaries": "250000 —Ä—É–± - –æ–ø–ª–∞—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π",
                    "materials": "100000 —Ä—É–± - —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"
                },

                "timeline": "12 –º–µ—Å—è—Ü–µ–≤",
                "team": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞, 3 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –º–µ—Ç–æ–¥–∏—Å—Ç, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä",

                "experience": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–º–µ–µ—Ç 3-–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏. –†–∞–Ω–µ–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã 2 –ø—Ä–æ–µ–∫—Ç–∞ —Å –æ—Ö–≤–∞—Ç–æ–º –±–æ–ª–µ–µ 200 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",

                "sustainability": "–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Ü–µ–Ω—Ç—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–ª–∞—Ç–Ω–æ–π –æ—Å–Ω–æ–≤–µ –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏.",

                "innovation": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫ –æ–±—É—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø—Ä–æ–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –æ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∫—Ä—É–ø–Ω—ã—Ö IT-–∫–æ–º–ø–∞–Ω–∏–π.",

                "social_impact": "–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –º–æ–ª–æ–¥–µ–∂–∏ —Ä–µ–≥–∏–æ–Ω–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ –º–æ–ª–æ–¥–µ–∂–Ω–æ–π –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã."
            }

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
            existing_sessions = self.db.get_user_sessions(telegram_id=user_id, limit=1)

            if existing_sessions and len(existing_sessions) > 0:
                latest_session = existing_sessions[0]
                if latest_session.get('status') == 'active':
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
                    session_id = latest_session['id']
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                    session_id = self.db.create_session(telegram_id=user_id)
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                session_id = self.db.create_session(telegram_id=user_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ save_anketa
            anketa_data = {
                'user_data': user_data,
                'interview_data': test_interview_data,
                'session_id': session_id
            }

            saved_anketa_id = self.db.save_anketa(anketa_data)

            if saved_anketa_id:
                message = (
                    f"‚úÖ **–¢–µ—Å—Ç–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!**\n\n"
                    f"üìã Anketa ID: `{saved_anketa_id}`\n"
                    f"üìä –ü—Ä–æ–µ–∫—Ç: {test_interview_data['project_name']}\n"
                    f"üí∞ –ë—é–¥–∂–µ—Ç: {test_interview_data['budget']} —Ä—É–±\n\n"
                    f"**–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å:**\n"
                    f"‚Ä¢ /my\\_anketas - –ø—Ä–æ—Å–º–æ—Ç—Ä\n"
                    f"‚Ä¢ /audit\\_anketa - –∞—É–¥–∏—Ç –∫–∞—á–µ—Å—Ç–≤–∞\n"
                    f"‚Ä¢ /generate\\_grant - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞\n"
                    f"‚Ä¢ /delete\\_anketa - —É–¥–∞–ª–µ–Ω–∏–µ"
                )

                await update.message.reply_text(message, parse_mode='Markdown')
                logger.info(f"[ANKETA] Test anketa created: {saved_anketa_id}")
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
                )
                logger.error(f"[ANKETA] Failed to save test anketa")

        except Exception as e:
            logger.error(f"[ANKETA] Error creating test anketa for user {user_id}: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã:\n{str(e)}"
            )

    # ========== ITERATION 38: SYNTHETIC CORPUS GENERATOR ==========

    async def generate_synthetic_anketa(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        ITERATION 38: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –∫–æ—Ä–ø—É—Å–∞

        Usage: /generate_synthetic_anketa [count] [quality]

        Examples:
        - /generate_synthetic_anketa 10 medium
        - /generate_synthetic_anketa 5 high
        - /generate_synthetic_anketa 1 low

        Args:
            count: 1-100 (default: 10)
            quality: low/medium/high (default: random mix)
        """
        user_id = update.effective_user.id

        # Parse arguments
        args = context.args
        count = 10  # default
        quality_level = None  # random mix

        if len(args) >= 1:
            try:
                count = int(args[0])
                if count < 1 or count > 100:
                    await update.message.reply_text(
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100"
                    )
                    return
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100."
                )
                return

        if len(args) >= 2:
            quality_level = args[1].lower()
            if quality_level not in ['low', 'medium', 'high']:
                await update.message.reply_text(
                    "‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: low, medium –∏–ª–∏ high"
                )
                return

        logger.info(f"[SYNTHETIC] User {user_id} requested {count} synthetic anketas (quality: {quality_level or 'mixed'})")

        try:
            # Import generator
            from agents.anketa_synthetic_generator import AnketaSyntheticGenerator

            # Get LLM model (use GigaChat for Lite - token economy)
            llm_model = 'GigaChat'  # Lite model, hardcoded for Iteration 38

            # Initialize generator
            generator = AnketaSyntheticGenerator(
                db=self.db,
                llm_model=llm_model
            )

            # Get template anketas from database
            template_anketas = self.db.get_user_anketas(telegram_id=user_id, limit=5)

            if not template_anketas or len(template_anketas) == 0:
                await update.message.reply_text(
                    "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ —à–∞–±–ª–æ–Ω—ã.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ /start"
                )
                return

            # Show progress
            await update.message.reply_text(
                f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {count} —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∫–µ—Ç...\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {llm_provider.upper()}\n"
                f"üìä –ö–∞—á–µ—Å—Ç–≤–æ: {quality_level or 'mixed (20% low, 50% medium, 30% high)'}\n\n"
                f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~{count * 15} —Å–µ–∫—É–Ω–¥"
            )

            # Generate batch
            if quality_level:
                # Single quality level
                generated = []
                for i in range(count):
                    anketa = await generator.generate_synthetic_anketa(
                        template_anketas=template_anketas,
                        quality_level=quality_level
                    )
                    generated.append(anketa)

                    # Progress update every 10 anketas
                    if (i + 1) % 10 == 0:
                        await update.message.reply_text(
                            f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i + 1}/{count} –∞–Ω–∫–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ..."
                        )
            else:
                # Mixed quality distribution
                generated = await generator.generate_batch(
                    template_anketas=template_anketas,
                    count=count
                )

            # Save to database
            saved_count = 0
            for anketa in generated:
                # Create session for each synthetic anketa
                session_id = self.db.create_session(telegram_id=user_id)

                # Prepare anketa data
                anketa_data = {
                    'user_data': {
                        'telegram_id': user_id,
                        'username': update.effective_user.username or 'synthetic_user'
                    },
                    'interview_data': anketa,
                    'session_id': session_id
                }

                # Save
                saved_anketa_id = self.db.save_anketa(anketa_data)
                if saved_anketa_id:
                    saved_count += 1

                    # TODO: Add to Qdrant (Phase 4)
                    # await self._add_to_qdrant(saved_anketa_id, anketa)

            # Calculate token usage estimate
            tokens_used = count * 1500  # ~1500 tokens per anketa (Lite)

            # Success message
            await update.message.reply_text(
                f"‚úÖ **–°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–∫–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã!**\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(generated)} –∞–Ω–∫–µ—Ç\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {saved_count} –∞–Ω–∫–µ—Ç\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ~{tokens_used:,} (GigaChat Lite)\n\n"
                f"**–ö–∞—á–µ—Å—Ç–≤–æ:**\n"
                f"‚Ä¢ Low: {sum(1 for a in generated if a.get('quality_target') == 'low')} –∞–Ω–∫–µ—Ç\n"
                f"‚Ä¢ Medium: {sum(1 for a in generated if a.get('quality_target') == 'medium')} –∞–Ω–∫–µ—Ç\n"
                f"‚Ä¢ High: {sum(1 for a in generated if a.get('quality_target') == 'high')} –∞–Ω–∫–µ—Ç\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /corpus_stats –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                parse_mode='Markdown'
            )

            logger.info(f"[SYNTHETIC] Generated {saved_count} synthetic anketas using ~{tokens_used} Lite tokens")

        except Exception as e:
            logger.error(f"[SYNTHETIC] Error generating synthetic anketas: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:\n{str(e)}"
            )

    async def batch_audit_anketas(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        ITERATION 38: Batch –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GigaChat Max

        Usage: /batch_audit_anketas [count]

        Examples:
        - /batch_audit_anketas 10
        - /batch_audit_anketas 100

        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç GigaChat Max (~2000 tokens/anketa)
        –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Sber500!

        Args:
            count: 1-500 (default: 10)
        """
        user_id = update.effective_user.id

        # Parse arguments
        args = context.args
        count = 10  # default

        if len(args) >= 1:
            try:
                count = int(args[0])
                if count < 1 or count > 500:
                    await update.message.reply_text(
                        "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 500"
                    )
                    return
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 500."
                )
                return

        logger.info(f"[BATCH-AUDIT] User {user_id} requested batch audit of {count} anketas")

        try:
            # Get anketas to audit (prefer synthetic ones without audit)
            from shared.database import GrantServiceDatabase

            # Query: Get anketas without audit_score, prioritize synthetic
            anketas = self.db.get_user_anketas(telegram_id=user_id, limit=count * 2)  # Get more to filter

            # Filter: No audit yet
            unaudited = [a for a in anketas if not a.get('audit_score')]

            if len(unaudited) == 0:
                await update.message.reply_text(
                    "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞.\n\n"
                    "–í—Å–µ –≤–∞—à–∏ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã."
                )
                return

            # Limit to requested count
            to_audit = unaudited[:count]

            # Calculate token estimate
            tokens_estimate = len(to_audit) * 2000  # ~2000 Max tokens per audit

            # Show progress
            await update.message.reply_text(
                f"üîÑ –ó–∞–ø—É—Å–∫–∞—é batch –∞—É–¥–∏—Ç {len(to_audit)} –∞–Ω–∫–µ—Ç...\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: **GigaChat Max** (–∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è Sber500!)\n"
                f"üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ~{tokens_estimate:,} Max tokens\n\n"
                f"‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ~{len(to_audit) * 30} —Å–µ–∫—É–Ω–¥",
                parse_mode='Markdown'
            )

            # Import validator (GATE 1 - validates JSON)
            from agents.anketa_validator import AnketaValidator

            # Use GigaChat Max for quality assurance
            llm_provider = 'gigachat'  # GigaChat Max

            validator = AnketaValidator(
                llm_provider=llm_provider,
                db=self.db
            )

            # Audit each anketa
            results = []
            audited_count = 0

            for i, anketa in enumerate(to_audit, 1):
                anketa_id = anketa.get('anketa_id')

                try:
                    # Get interview data
                    session = self.db.get_session_by_anketa_id(anketa_id)
                    if not session:
                        logger.warning(f"[BATCH-AUDIT] No session for anketa {anketa_id}")
                        continue

                    interview_data = session.get('interview_data')
                    if isinstance(interview_data, str):
                        interview_data = json.loads(interview_data)

                    # Run validation (GATE 1)
                    validation_result = await validator.validate(interview_data)

                    score = validation_result['score']

                    # Determine status
                    if validation_result['can_proceed'] and score >= 7.0:
                        status = 'approved'
                    elif score >= 5.0:
                        status = 'needs_revision'
                    else:
                        status = 'rejected'

                    # Update database
                    self.db.update_anketa_audit(
                        anketa_id=anketa_id,
                        audit_score=score,
                        audit_status=status,
                        audit_recommendations=validation_result.get('recommendations', [])
                    )

                    results.append({
                        'anketa_id': anketa_id,
                        'score': score,
                        'status': status
                    })

                    audited_count += 1

                    # Progress update every 10 anketas
                    if i % 10 == 0:
                        await update.message.reply_text(
                            f"‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(to_audit)} –∞–Ω–∫–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ..."
                        )

                except Exception as e:
                    logger.error(f"[BATCH-AUDIT] Error auditing {anketa_id}: {e}")
                    continue

            # Calculate actual token usage
            actual_tokens = audited_count * 2000

            # Statistics
            approved = sum(1 for r in results if r['status'] == 'approved')
            needs_revision = sum(1 for r in results if r['status'] == 'needs_revision')
            rejected = sum(1 for r in results if r['status'] == 'rejected')

            avg_score = sum(r['score'] for r in results) / len(results) if results else 0

            # Success message
            await update.message.reply_text(
                f"‚úÖ **Batch –∞—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n"
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {audited_count} –∞–Ω–∫–µ—Ç\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/10\n\n"
                f"**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:**\n"
                f"‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ (‚â•7.0): {approved}\n"
                f"‚Ä¢ ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (5.0-6.9): {needs_revision}\n"
                f"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ (<5.0): {rejected}\n\n"
                f"**–¢–æ–∫–µ–Ω—ã:**\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ~{actual_tokens:,} Max tokens\n"
                f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: ~{actual_tokens / 1000:.1f} —Ä—É–± (–∏–∑ 1,987,948 –¥–æ—Å—Ç—É–ø–Ω—ã—Ö)\n\n"
                f"üí° –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Sber500!",
                parse_mode='Markdown'
            )

            logger.info(f"[BATCH-AUDIT] Audited {audited_count} anketas using ~{actual_tokens} Max tokens")

        except Exception as e:
            logger.error(f"[BATCH-AUDIT] Error in batch audit: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ batch –∞—É–¥–∏—Ç–µ:\n{str(e)}"
            )

    async def corpus_stats(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        ITERATION 38: –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–ø—É—Å–∞ –∞–Ω–∫–µ—Ç

        Usage: /corpus_stats

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
        - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç (—Ä–µ–∞–ª—å–Ω—ã—Ö –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö)
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
        - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∞—É–¥–∏—Ç–∞
        - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        """
        user_id = update.effective_user.id

        logger.info(f"[CORPUS] User {user_id} requested corpus statistics")

        try:
            # Get all anketas
            all_anketas = self.db.get_user_anketas(telegram_id=user_id, limit=1000)

            if not all_anketas or len(all_anketas) == 0:
                await update.message.reply_text(
                    "üìä –ö–æ—Ä–ø—É—Å –ø—É—Å—Ç.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∞–Ω–∫–µ—Ç\n"
                    "–∏–ª–∏ /generate_synthetic_anketa –¥–ª—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö."
                )
                return

            # Count synthetic vs real
            synthetic_count = 0
            real_count = 0

            for anketa in all_anketas:
                anketa_id = anketa.get('anketa_id')
                session = self.db.get_session_by_anketa_id(anketa_id)

                if session:
                    interview_data = session.get('interview_data')
                    if isinstance(interview_data, str):
                        interview_data = json.loads(interview_data)

                    if interview_data and interview_data.get('synthetic'):
                        synthetic_count += 1
                    else:
                        real_count += 1

            # Audit statistics
            audited = [a for a in all_anketas if a.get('audit_score')]
            unaudited = [a for a in all_anketas if not a.get('audit_score')]

            # Quality distribution (for audited)
            approved = sum(1 for a in audited if a.get('audit_status') == 'approved')
            needs_revision = sum(1 for a in audited if a.get('audit_status') == 'needs_revision')
            rejected = sum(1 for a in audited if a.get('audit_status') == 'rejected')

            # Average score
            avg_score = sum(a.get('audit_score', 0) for a in audited) / len(audited) if audited else 0

            # Token estimates
            # Synthetic generation: 1500 Lite tokens each
            # Batch audit: 2000 Max tokens each
            estimated_lite_tokens = synthetic_count * 1500
            estimated_max_tokens = len(audited) * 2000

            # Build message
            message = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–ø—É—Å–∞ –∞–Ω–∫–µ—Ç**\n\n"
                f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {len(all_anketas)}\n"
                f"‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ: {real_count}\n"
                f"‚Ä¢ –°–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ: {synthetic_count}\n\n"
                f"**–ê—É–¥–∏—Ç:**\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(audited)}\n"
                f"‚Ä¢ –ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(unaudited)}\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score:.1f}/10\n\n"
                f"**–ö–∞—á–µ—Å—Ç–≤–æ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ):**\n"
                f"‚Ä¢ ‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: {approved}\n"
                f"‚Ä¢ ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {needs_revision}\n"
                f"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected}\n\n"
                f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤:**\n"
                f"‚Ä¢ GigaChat Lite: ~{estimated_lite_tokens:,}\n"
                f"‚Ä¢ GigaChat Max: ~{estimated_max_tokens:,}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                f"‚Ä¢ /generate_synthetic_anketa [N] - —Å–æ–∑–¥–∞—Ç—å –µ—â—ë\n"
                f"‚Ä¢ /batch_audit_anketas [N] - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ"
            )

            await update.message.reply_text(message, parse_mode='Markdown')

            logger.info(
                f"[CORPUS] Stats: {len(all_anketas)} total "
                f"({real_count} real, {synthetic_count} synthetic, "
                f"{len(audited)} audited)"
            )

        except Exception as e:
            logger.error(f"[CORPUS] Error getting corpus stats: {e}")
            await update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n{str(e)}"
            )

    # ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

    def _get_status_emoji(self, status: Optional[str]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏—Ç–∞"""
        if status == 'approved':
            return "‚úÖ"
        elif status == 'needs_revision':
            return "‚ö†Ô∏è"
        elif status == 'rejected':
            return "‚ùå"
        elif status == 'pending':
            return "‚è≥"
        else:
            return "‚ùì"

    def _get_status_text(self, status: Optional[str]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        if status == 'approved':
            return "–û–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ"
        elif status == 'needs_revision':
            return "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ‚ö†Ô∏è"
        elif status == 'rejected':
            return "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
        elif status == 'pending':
            return "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ ‚è≥"
        else:
            return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({status})"
