#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Grant Handler - ProductionWriter Integration –¥–ª—è Telegram Bot

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ ProductionWriter.

Author: Grant Service Architect Agent
Created: 2025-10-24
Version: 1.0
"""

import sys
import logging
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime
import asyncio

# Setup paths
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class GrantHandler:
    """
    Handler –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —á–µ—Ä–µ–∑ ProductionWriter

    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≥—Ä–∞–Ω—Ç–æ–≤ –ø–æ anketa_id
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    - –û—Ç–ø—Ä–∞–≤–∫–æ–π –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    """

    def __init__(self, db, admin_chat_id: Optional[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handler

        Args:
            db: Database instance
            admin_chat_id: ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.db = db
        self.admin_chat_id = admin_chat_id

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        # {user_id: {grant_id, start_time, status}}
        self.active_generations = {}

    def is_generation_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.active_generations

    async def generate_grant(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        anketa_id: str = None
    ):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É

        Args:
            update: Telegram Update
            context: Telegram Context
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è)
        """
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        if self.is_generation_active(user_id):
            await update.message.reply_text(
                "‚è≥ –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
            )
            return

        logger.info(f"[GRANT] Starting grant generation for user {user_id}, anketa_id={anketa_id}")

        # –ü–æ–ª—É—á–∏—Ç—å anketa_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if anketa_id is None:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            anketa = self.db.get_latest_completed_anketa(user_id)
            if anketa is None:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return
            anketa_id = anketa['anketa_id']
        else:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            anketa = self.db.get_session_by_anketa_id(anketa_id)
            if anketa is None:
                await update.message.reply_text(
                    f"‚ùå –ê–Ω–∫–µ—Ç–∞ {anketa_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                return
            if anketa['telegram_id'] != user_id:
                await update.message.reply_text(
                    f"‚ùå –ê–Ω–∫–µ—Ç–∞ {anketa_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º."
                )
                return

        logger.info(f"[GRANT] Using anketa_id: {anketa_id}")

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –≥—Ä–∞–Ω—Ç –¥–ª—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã
        existing_grant = self.db.get_grant_by_anketa_id(anketa_id)
        if existing_grant and existing_grant['status'] == 'completed':
            await update.message.reply_text(
                f"‚úÖ –î–ª—è –∞–Ω–∫–µ—Ç—ã {anketa_id} —É–∂–µ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –≥—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {existing_grant.get('character_count', 'N/A')}\n"
                f"‚Ä¢ –°–ª–æ–≤: {existing_grant.get('word_count', 'N/A')}\n"
                f"‚Ä¢ –°–µ–∫—Ü–∏–π: {existing_grant.get('sections_generated', 'N/A')}\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: {existing_grant.get('created_at', 'N/A')}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_grant {anketa_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            f"üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏...\n\n"
            f"üìã –ê–Ω–∫–µ—Ç–∞: {anketa_id}\n"
            f"‚è± –≠—Ç–æ –∑–∞–π–º–µ—Ç ~2-3 –º–∏–Ω—É—Ç—ã\n\n"
            f"–Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞!"
        )

        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        self.active_generations[user_id] = {
            'anketa_id': anketa_id,
            'start_time': datetime.now(),
            'status': 'running',
            'status_message_id': status_message.message_id
        }

        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ProductionWriter
            from agents.production_writer import ProductionWriter
            import os

            # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            llm_provider = self.db.get_user_llm_preference(user_id)
            logger.info(f"User {user_id} preferred LLM: {llm_provider}")

            # –°–æ–∑–¥–∞—Ç—å ProductionWriter
            writer = ProductionWriter(
                llm_provider=llm_provider,
                qdrant_host=os.getenv('QDRANT_HOST', '5.35.88.251'),
                qdrant_port=int(os.getenv('QDRANT_PORT', '6333')),
                postgres_host=os.getenv('PGHOST', 'localhost'),
                postgres_port=int(os.getenv('PGPORT', '5434')),
                postgres_user=os.getenv('PGUSER', 'grantservice'),
                postgres_password=os.getenv('PGPASSWORD'),
                postgres_db=os.getenv('PGDATABASE', 'grantservice'),
                db=self.db
            )

            logger.info(f"[GRANT] ProductionWriter initialized for anketa {anketa_id}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–Ω—Ç
            result = await asyncio.to_thread(
                writer.generate_grant,
                anketa_id=anketa_id
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result['success']:
                grant_id = result['grant_id']
                grant = self.db.get_grant_by_id(grant_id)

                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                self.active_generations[user_id]['status'] = 'completed'
                self.active_generations[user_id]['grant_id'] = grant_id

                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id,
                    text=f"‚úÖ –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                         f"üìã –ê–Ω–∫–µ—Ç–∞: {anketa_id}\n"
                         f"üÜî Grant ID: {grant_id}\n\n"
                         f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                         f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {grant.get('character_count', 'N/A'):,}\n"
                         f"‚Ä¢ –°–ª–æ–≤: {grant.get('word_count', 'N/A'):,}\n"
                         f"‚Ä¢ –°–µ–∫—Ü–∏–π: {grant.get('sections_generated', 'N/A')}\n"
                         f"‚Ä¢ –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {grant.get('duration_seconds', 'N/A'):.1f}s\n\n"
                         f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_grant {anketa_id} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
                )

                # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if self.admin_chat_id:
                    await context.bot.send_message(
                        chat_id=self.admin_chat_id,
                        text=f"‚úÖ –ù–æ–≤–∞—è –≥—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                             f"üë§ User: {update.effective_user.username or update.effective_user.first_name} (ID: {user_id})\n"
                             f"üìã Anketa: {anketa_id}\n"
                             f"üÜî Grant: {grant_id}\n"
                             f"üìä –°–∏–º–≤–æ–ª–æ–≤: {grant.get('character_count', 0):,}\n"
                             f"‚è± –í—Ä–µ–º—è: {grant.get('duration_seconds', 0):.1f}s"
                    )

                logger.info(f"[GRANT] Successfully generated grant {grant_id} for anketa {anketa_id}")

            else:
                # –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                error_msg = result.get('error', 'Unknown error')

                self.active_generations[user_id]['status'] = 'failed'
                self.active_generations[user_id]['error'] = error_msg

                await context.bot.edit_message_text(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
                         f"üìã –ê–Ω–∫–µ—Ç–∞: {anketa_id}\n"
                         f"‚ùóÔ∏è –û—à–∏–±–∫–∞: {error_msg}\n\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )

                logger.error(f"[GRANT] Failed to generate grant for anketa {anketa_id}: {error_msg}")

        except Exception as e:
            logger.error(f"[GRANT] Exception during grant generation: {e}", exc_info=True)

            self.active_generations[user_id]['status'] = 'error'
            self.active_generations[user_id]['error'] = str(e)

            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=status_message.message_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n\n"
                     f"üìã –ê–Ω–∫–µ—Ç–∞: {anketa_id}\n"
                     f"‚ùóÔ∏è {str(e)}\n\n"
                     f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–æ–±–ª–µ–º–µ."
            )

            # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
            if self.admin_chat_id:
                await context.bot.send_message(
                    chat_id=self.admin_chat_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞!\n\n"
                         f"üë§ User: {update.effective_user.username or update.effective_user.first_name} (ID: {user_id})\n"
                         f"üìã Anketa: {anketa_id}\n"
                         f"‚ùóÔ∏è Error: {str(e)}"
                )

        finally:
            # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
            if user_id in self.active_generations:
                del self.active_generations[user_id]

    async def get_grant(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        anketa_id: str = None
    ):
        """
        –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É

        Args:
            update: Telegram Update
            context: Telegram Context
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        user_id = update.effective_user.id

        # –ü–æ–ª—É—á–∏—Ç—å anketa_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        if anketa_id is None:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É —Å –≥—Ä–∞–Ω—Ç–æ–º
            grant = self.db.get_latest_grant_for_user(user_id)
            if grant is None:
                await update.message.reply_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_grant –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏."
                )
                return
            anketa_id = grant['anketa_id']

        # –ü–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω—Ç –ø–æ anketa_id
        grant = self.db.get_grant_by_anketa_id(anketa_id)

        if grant is None:
            await update.message.reply_text(
                f"‚ùå –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –∞–Ω–∫–µ—Ç—ã {anketa_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_grant {anketa_id} –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if grant['user_id'] != user_id:
            await update.message.reply_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        if grant['status'] != 'completed':
            await update.message.reply_text(
                f"‚è≥ –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è.\n"
                f"–°—Ç–∞—Ç—É—Å: {grant['status']}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        grant_content = grant.get('grant_content', '')

        if not grant_content:
            await update.message.reply_text(
                f"‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω—Ç —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–ª–∏–º–∏—Ç Telegram: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000

        if len(grant_content) <= max_length:
            await update.message.reply_text(grant_content)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""

            for line in grant_content.split('\n'):
                if len(current_part) + len(line) + 1 <= max_length:
                    current_part += line + '\n'
                else:
                    parts.append(current_part)
                    current_part = line + '\n'

            if current_part:
                parts.append(current_part)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
            await update.message.reply_text(
                f"üìÑ –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (—Ä–∞–∑–±–∏—Ç–∞ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π):\n"
                f"üìã –ê–Ω–∫–µ—Ç–∞: {anketa_id}\n"
                f"üÜî Grant ID: {grant['grant_id']}"
            )

            for i, part in enumerate(parts, 1):
                await update.message.reply_text(
                    f"–ß–∞—Å—Ç—å {i}/{len(parts)}:\n\n{part}"
                )
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.db.mark_grant_sent_to_user(grant['grant_id'])

        logger.info(f"[GRANT] Sent grant {grant['grant_id']} to user {user_id}")

    async def list_grants(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            update: Telegram Update
            context: Telegram Context
        """
        user_id = update.effective_user.id

        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä–∞–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        grants = self.db.get_user_grants(user_id)

        if not grants:
            await update.message.reply_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate_grant –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
        message = f"üìã –í–∞—à–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({len(grants)}):\n\n"

        for i, grant in enumerate(grants, 1):
            status_emoji = {
                'draft': 'üìù',
                'pending': '‚è≥',
                'completed': '‚úÖ',
                'sent_to_user': 'üì§',
                'approved': 'üéâ',
                'rejected': '‚ùå'
            }.get(grant['status'], '‚ùì')

            message += (
                f"{i}. {status_emoji} {grant['grant_id'][:8]}...\n"
                f"   üìã –ê–Ω–∫–µ—Ç–∞: {grant['anketa_id']}\n"
                f"   üìä –°–∏–º–≤–æ–ª–æ–≤: {grant.get('character_count', 'N/A'):,}\n"
                f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {grant['created_at']}\n"
                f"   üîñ –°—Ç–∞—Ç—É—Å: {grant['status']}\n\n"
            )

        message += (
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"/get_grant <anketa_id>"
        )

        await update.message.reply_text(message)
