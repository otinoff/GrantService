#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interactive Interview Handler - Reference Points Framework –¥–ª—è Telegram Bot

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é V2 —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ—Ç–æ–∫–æ–º –¥–∏–∞–ª–æ–≥–∞.

Author: Grant Service Architect Agent
Created: 2025-10-20
Version: 2.0
"""

import sys
import logging
from pathlib import Path
from typing import Dict, Any, Optional, Callable
from datetime import datetime

# Setup paths
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)


class InteractiveInterviewHandler:
    """
    Handler –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é —Å Reference Points Framework

    –£–ø—Ä–∞–≤–ª—è–µ—Ç:
    - –ó–∞–ø—É—Å–∫–æ–º/–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π –∏–Ω—Ç–µ—Ä–≤—å—é
    - –ó–∞–¥–∞–≤–∞–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Telegram
    - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–æ–≤
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    """

    def __init__(self, db, admin_chat_id: Optional[int] = None, pipeline_handler=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è handler

        Args:
            db: Database instance
            admin_chat_id: ID –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            pipeline_handler: InteractivePipelineHandler –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Iteration 52
        """
        self.db = db
        self.admin_chat_id = admin_chat_id
        self.pipeline_handler = pipeline_handler

        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
        # {user_id: {agent, update, context, conversation_state, answer_queue}}
        self.active_interviews = {}

        # Import asyncio –¥–ª—è Queue
        import asyncio
        self.asyncio = asyncio

    def is_interview_active(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return user_id in self.active_interviews

    async def start_interview(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        user_data: Dict[str, Any],
        skip_greeting: bool = False
    ):
        """
        –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é

        Args:
            update: Telegram Update
            context: Telegram Context
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        if self.is_interview_active(user_id):
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. "
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–º–∞–Ω–¥–æ–π /stop_interview"
            )
            return

        logger.info(f"[START] Interactive Interview V2 for user {user_id}")

        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        llm_provider = self.db.get_user_llm_preference(user_id)
        logger.info(f"User {user_id} preferred LLM: {llm_provider}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
        try:
            from agents.interactive_interviewer_agent_v2 import InteractiveInterviewerAgentV2

            agent = InteractiveInterviewerAgentV2(
                db=self.db,
                llm_provider=llm_provider,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                qdrant_host="5.35.88.251",
                qdrant_port=6333
            )

            # –°–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            import asyncio
            answer_queue = asyncio.Queue()

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            self.active_interviews[user_id] = {
                'agent': agent,
                'update': update,
                'context': context,
                'user_data': user_data,
                'started_at': datetime.now(),
                'answer_queue': answer_queue  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
            }

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
            if not skip_greeting:
                greeting = f"""
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –§–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤.

–ú—ã –ø—Ä–æ–≤–µ–¥—ë–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã,
–∞ –≤—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —Å—á–∏—Ç–∞–µ—Ç–µ –≤–∞–∂–Ω—ã–º.

–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Ç–µ—Å—å –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ - —è —Å–∞–º —Å–æ–±–µ—Ä—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ /continue –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
                """

                # Send greeting (works with both message and callback)
                chat = update.effective_chat
                await context.bot.send_message(chat_id=chat.id, text=greeting)

            logger.info(f"[OK] Interview initialized for user {user_id} (skip_greeting={skip_greeting})")

        except ImportError as e:
            logger.error(f"[ERROR] Failed to import InteractiveInterviewerAgentV2: {e}")
            chat = update.effective_chat
            await context.bot.send_message(
                chat_id=chat.id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as e:
            logger.error(f"[ERROR] Failed to start interview: {e}")
            import traceback
            traceback.print_exc()
            chat = update.effective_chat
            await context.bot.send_message(
                chat_id=chat.id,
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}"
            )

    async def continue_interview(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é (–∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å)

        Args:
            update: Telegram Update
            context: Telegram Context
        """
        user_id = update.effective_user.id

        if not self.is_interview_active(user_id):
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é. "
                "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–º–∞–Ω–¥–æ–π /start_interview"
            )
            return

        interview = self.active_interviews[user_id]
        agent = interview['agent']
        answer_queue = interview['answer_queue']

        # –°–æ–∑–¥–∞—Ç—å callback –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        async def ask_question_callback(question: str = None) -> str:
            """
            Callback –¥–ª—è –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Telegram

            Args:
                question: –í–æ–ø—Ä–æ—Å –æ—Ç –∞–≥–µ–Ω—Ç–∞ (None = –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É, —Ç–æ–ª—å–∫–æ –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞)

            Returns:
                –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            """
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            # ‚úÖ ITERATION 26: –ï—Å–ª–∏ question=None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É (–¥–ª—è hardcoded –≤–æ–ø—Ä–æ—Å–æ–≤)
            if question is not None:
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º context.bot –≤–º–µ—Å—Ç–æ update.message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å callback)
                chat_id = update.effective_chat.id if update.effective_chat else user_id
                await context.bot.send_message(chat_id=chat_id, text=question)
                logger.info(f"[SENT] Question sent to user {user_id}")
            else:
                logger.info(f"[SKIP] Skipping question send (hardcoded RP) for user {user_id}")

            # –ñ–¥–µ–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            logger.info(f"[WAITING] Waiting for answer from user {user_id}")
            answer = await answer_queue.get()
            logger.info(f"[RECEIVED] Got answer from user {user_id}: {answer[:50]}...")

            return answer

        try:
            # –í–ê–ñ–ù–û: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ (task)
            # —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop
            async def run_interview():
                """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –≤ —Ñ–æ–Ω–µ"""
                try:
                    result = await agent.conduct_interview(
                        user_data=interview['user_data'],
                        callback_ask_question=ask_question_callback
                    )

                    # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                    logger.info(f"[COMPLETE] Interview completed for user {user_id}")
                    logger.info(f"[SCORE] Audit score: {result['audit_score']}/100")

                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –≤ –ë–î
                    try:
                        # –ü–æ–ª—É—á–∏—Ç—å user_data –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é
                        interview_data = self.active_interviews.get(user_id, {})
                        user_data_from_interview = interview_data.get('user_data', {})

                        # ITERATION 52 FIX (Phase 14): –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ë–î –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                        import json
                        from datetime import datetime
                        anketa_data = result.get('anketa', {})

                        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ë–î
                        from data.database import get_or_create_session, update_session_data

                        # –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é
                        session_data = get_or_create_session(user_id)
                        if not session_data:
                            logger.error(f"[DB] Failed to create session for user {user_id}")
                            raise Exception("Failed to create database session")

                        session_id = session_data.get('id')
                        logger.info(f"[DB] Using session ID: {session_id}")

                        # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å anketa_id
                        anketa_id = f"anketa_{session_id}_{int(datetime.now().timestamp())}"

                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –≤ –ë–î
                        update_data = {
                            'interview_data': json.dumps(anketa_data, ensure_ascii=False),
                            'anketa_id': anketa_id,
                            'audit_result': json.dumps(result.get('audit_details', {}), ensure_ascii=False),
                            'completion_status': 'completed',
                            'status': 'completed',
                            'completed_at': datetime.now()
                        }

                        success = update_session_data(session_id, update_data)
                        if not success:
                            logger.error(f"[DB] Failed to update session {session_id}")
                            raise Exception("Failed to save anketa to database")

                        logger.info(f"[DB] Anketa saved successfully with ID: {anketa_id}")

                        # ITERATION 52 FIX (Phase 15): –ù–ï –≤—ã–∑—ã–≤–∞–µ–º _send_results() –∑–¥–µ—Å—å!
                        # update –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤ background task.
                        # Pipeline handler —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–∞–π–ª anketa.txt —Å –¥–∞–Ω–Ω—ã–º–∏.
                        # await self._send_results(update, result)  # ‚Üê Removed

                        # ITERATION 52: –í—ã–∑–≤–∞—Ç—å Interactive Pipeline
                        if self.pipeline_handler and anketa_id:
                            logger.info(f"[PIPELINE] Starting interactive pipeline for anketa {anketa_id}")

                            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å session_data –¥–ª—è pipeline
                            session_for_pipeline = {
                                'audit_score': result.get('audit_score', 0),
                                'audit_recommendations': result.get('audit_details', {}).get('recommendations', [])
                            }

                            # –í—ã–∑–≤–∞—Ç—å on_anketa_complete
                            await self.pipeline_handler.on_anketa_complete(
                                update,
                                context,
                                anketa_id,
                                session_for_pipeline
                            )
                        else:
                            logger.warning("[PIPELINE] Pipeline handler not available or anketa_id missing")

                    except Exception as e:
                        logger.error(f"[ERROR] Failed to save anketa or start pipeline: {e}")
                        import traceback
                        traceback.print_exc()

                        # ITERATION 52 FIX (Phase 15): –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        # update –º–æ–∂–µ—Ç –±—ã—Ç—å None –≤ background task
                        # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        # await self._send_results(update, result)  # ‚Üê Removed

                    # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                    if user_id in self.active_interviews:
                        del self.active_interviews[user_id]

                except Exception as e:
                    logger.error(f"[ERROR] Interview error for user {user_id}: {e}")
                    import traceback
                    traceback.print_exc()

                    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                    chat = update.effective_chat
                    await context.bot.send_message(
                        chat_id=chat.id,
                        text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω—Ç–µ—Ä–≤—å—é: {e}"
                    )

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ background task
            import asyncio
            asyncio.create_task(run_interview())

            logger.info(f"[BACKGROUND] Interview task created for user {user_id}")

        except Exception as e:
            logger.error(f"[ERROR] Failed to start interview task for user {user_id}: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}"
            )

    async def handle_message(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å

        Args:
            update: Telegram Update
            context: Telegram Context
        """
        user_id = update.effective_user.id
        logger.info(f"[DEBUG] handle_message called for user {user_id}")

        if not self.is_interview_active(user_id):
            # –ù–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            logger.info(f"[DEBUG] No active interview for user {user_id}")
            return

        logger.info(f"[DEBUG] Interview is active for user {user_id}")
        interview = self.active_interviews[user_id]
        answer_queue = interview.get('answer_queue')

        if not answer_queue:
            # –ù–µ—Ç –æ—á–µ—Ä–µ–¥–∏ - —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è handler
            logger.warning(f"[DEBUG] No answer_queue for user {user_id}")
            return

        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        answer = update.message.text

        logger.info(f"[ANSWER] User {user_id}: {answer[:50]}...")

        # –ü–æ–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å - callback –µ–≥–æ –∑–∞–±–µ—Ä—ë—Ç
        await answer_queue.put(answer)
        logger.info(f"[DEBUG] Answer put in queue for user {user_id}")

    async def stop_interview(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é

        Args:
            update: Telegram Update
            context: Telegram Context
        """
        user_id = update.effective_user.id

        if not self.is_interview_active(user_id):
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é."
            )
            return

        # –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_interviews[user_id]

        await update.message.reply_text(
            "–ò–Ω—Ç–µ—Ä–≤—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. "
            "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –∫–æ–º–∞–Ω–¥–æ–π /start_interview"
        )

        logger.info(f"[STOP] Interview stopped for user {user_id}")

    async def show_progress(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω—Ç–µ—Ä–≤—å—é

        Args:
            update: Telegram Update
            context: Telegram Context
        """
        user_id = update.effective_user.id

        if not self.is_interview_active(user_id):
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é."
            )
            return

        interview = self.active_interviews[user_id]
        agent = interview['agent']

        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç flow manager
        progress_message = agent.flow_manager.get_progress_message()

        await update.message.reply_text(
            f"[PROGRESS]\n\n{progress_message}"
        )

    async def _send_results(
        self,
        update: Update,
        result: Dict[str, Any]
    ):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        Args:
            update: Telegram Update
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç agent
        """
        score = result['audit_score']

        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ü–µ–Ω–∫–∏
        if score >= 80:
            emoji = "[EXCELLENT]"
            status = "–û—Ç–ª–∏—á–Ω–æ!"
        elif score >= 60:
            emoji = "[GOOD]"
            status = "–•–æ—Ä–æ—à–æ"
        elif score >= 40:
            emoji = "[NEEDS_WORK]"
            status = "–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        else:
            emoji = "[POOR]"
            status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

        message = f"""
{emoji} –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

–û—Ü–µ–Ω–∫–∞: {score}/100
–°—Ç–∞—Ç—É—Å: {status}

–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {result['questions_asked']}
–£—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {result['follow_ups_asked']}
–í—Ä–µ–º—è: {result['processing_time']:.1f} —Å–µ–∫—É–Ω–¥

–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.
        """

        await update.message.reply_text(message)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        if self.admin_chat_id:
            try:
                admin_message = f"""
[NEW INTERVIEW COMPLETED]

User ID: {update.effective_user.id}
Username: @{update.effective_user.username}
Score: {score}/100
Questions: {result['questions_asked']}
Follow-ups: {result['follow_ups_asked']}
                """
                # TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ bot.send_message
                logger.info(f"[ADMIN] {admin_message}")
            except Exception as e:
                logger.error(f"[ERROR] Failed to notify admin: {e}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    print("Interactive Interview Handler V2")
    print("Ready for integration with Telegram Bot")
