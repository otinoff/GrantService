#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Interactive Pipeline Handler - Iteration 52

–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Ñ–ª–æ—É —Å —Ñ–∞–π–ª–∞–º–∏-—á–µ–∫–ø–æ–∏–Ω—Ç–∞–º–∏:
- Anketa complete ‚Üí file + button "–ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç"
- Audit ‚Üí file + button "–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"
- Grant ‚Üí file + button "–°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é"
- Review ‚Üí file + "–ì–æ—Ç–æ–≤–æ!"

Author: Claude Code (Iteration 52)
Created: 2025-10-26
Version: 1.0.0
"""

import sys
import logging
import tempfile
import os
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

# Setup paths
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

# Import file generators
from shared.telegram.file_generators import (
    generate_anketa_txt,
    generate_audit_txt,
    generate_grant_txt,
    generate_review_txt
)

logger = logging.getLogger(__name__)


class InteractivePipelineHandler:
    """
    Handler –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ pipeline —Å —á–µ–∫–ø–æ–∏–Ω—Ç–∞–º–∏

    Methods:
    - on_anketa_complete() - –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
    - handle_start_audit() - callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç"
    - handle_start_grant() - callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"
    - handle_start_review() - callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é"
    """

    def __init__(self, db):
        """
        Args:
            db: Database instance (GrantServiceDatabase)
        """
        self.db = db
        logger.info("[PIPELINE] Interactive Pipeline Handler initialized")

    # ========== STEP 1: ANKETA ‚Üí AUDIT ==========

    async def on_anketa_complete(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE,
        anketa_id: str,
        session_data: Dict[str, Any]
    ):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã

        Actions:
        1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª anketa.txt
        2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        3. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç"
        4. –û–±–Ω–æ–≤–ª—è–µ—Ç state ‚Üí ANKETA_COMPLETED

        Args:
            update: Telegram Update
            context: Telegram Context
            anketa_id: ID –∞–Ω–∫–µ—Ç—ã
            session_data: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
        """
        user_id = update.effective_user.id

        logger.info(f"[PIPELINE] User {user_id} completed anketa {anketa_id}")

        try:
            # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ –ë–î
            anketa_data = self.db.get_session_by_anketa_id(anketa_id)

            if not anketa_data:
                logger.error(f"[ERROR] Anketa {anketa_id} not found in database")
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                )
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            txt_content = generate_anketa_txt(anketa_data)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode='w',
                suffix='.txt',
                delete=False,
                encoding='utf-8'
            ) as f:
                f.write(txt_content)
                temp_file_path = f.name

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            with open(temp_file_path, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename=f"anketa_{anketa_id}.txt",
                    caption="‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n–í—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
                )

            # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)

            # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚ö° –ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç",
                    callback_data=f"start_audit:anketa:{anketa_id}"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await update.message.reply_text(
                text=(
                    "üéØ –ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞—É–¥–∏—Ç—É!\n\n"
                    "–ê—É–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç:\n"
                    "‚Ä¢ –ü–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–æ–≤\n"
                    "‚Ä¢ –Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è\n"
                    "‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞\n"
                    "‚Ä¢ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:"
                ),
                reply_markup=keyboard
            )

            # TODO: Update user pipeline state to ANKETA_COMPLETED
            # self.db.update_user_pipeline_state(user_id, "anketa_completed", anketa_id)

            logger.info(f"[OK] Anketa file sent to user {user_id}, button displayed")

        except Exception as e:
            logger.error(f"[ERROR] Failed to process anketa completion: {e}")
            import traceback
            traceback.print_exc()
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∫–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== STEP 2: AUDIT ‚Üí GRANT ==========

    async def handle_start_audit(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        Callback handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∞—É–¥–∏—Ç"

        Actions:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç AuditorAgent
        2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç audit.txt
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
        4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"
        """
        query = update.callback_query
        user_id = query.from_user.id

        # Parse callback data: "start_audit:anketa:ANK123"
        callback_data = query.data
        parts = callback_data.split(':')

        if len(parts) != 3 or parts[0] != 'start_audit' or parts[1] != 'anketa':
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        anketa_id = parts[2]

        logger.info(f"[PIPELINE] User {user_id} clicked 'Start Audit' for anketa {anketa_id}")

        # Acknowledge button click
        await query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç...")

        try:
            # TODO: Check pipeline state
            # state = self.db.get_user_pipeline_state(user_id)
            # if state != "anketa_completed":
            #     await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!")
            #     return

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞—É–¥–∏—Ç–∞
            await query.message.reply_text(
                "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç –∞–Ω–∫–µ—Ç—ã...\n\n"
                "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥."
            )

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å AuditorAgent
            from agents.auditor_agent import AuditorAgent

            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ –ë–î
            anketa_session = self.db.get_session_by_anketa_id(anketa_id)
            if not anketa_session:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –∞–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return

            # –ü–∞—Ä—Å–∏–º interview_data
            import json
            if isinstance(anketa_session.get('interview_data'), str):
                anketa_data = json.loads(anketa_session['interview_data'])
            else:
                anketa_data = anketa_session.get('interview_data', {})

            # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∞
            auditor = AuditorAgent(db=self.db)

            # –§–æ—Ä–º–∏—Ä—É–µ–º input –¥–ª—è AuditorAgent
            audit_input = {
                'application': {'answers': anketa_data},
                'user_answers': anketa_data,
                'selected_grant': {
                    'fund_name': anketa_data.get('grant_fund', '–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤')
                },
                'session_id': anketa_session.get('id')
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
            audit_wrapped = await auditor.audit_application_async(audit_input)

            # BaseAgent –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ {'result': {...}}
            audit_result = audit_wrapped.get('result', audit_wrapped)

            if not audit_result:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞—É–¥–∏—Ç"
                )
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            txt_content = generate_audit_txt(audit_result)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode='w',
                suffix='.txt',
                delete=False,
                encoding='utf-8'
            ) as f:
                f.write(txt_content)
                temp_file_path = f.name

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            score = audit_result.get('average_score', 0)
            status = audit_result.get('approval_status', 'pending')

            status_emoji = {
                'approved': '‚úÖ',
                'needs_revision': '‚ö†Ô∏è',
                'rejected': '‚ùå',
                'pending': '‚è≥'
            }.get(status, '‚è≥')

            with open(temp_file_path, 'rb') as f:
                await query.message.reply_document(
                    document=f,
                    filename=f"audit_{anketa_id}.txt",
                    caption=f"{status_emoji} –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–û—Ü–µ–Ω–∫–∞: {score}/10"
                )

            # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)

            # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "‚úçÔ∏è –ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞",
                    callback_data=f"start_grant:anketa:{anketa_id}"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await query.message.reply_text(
                text=(
                    "üìù –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É?\n\n"
                    "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É:\n"
                    "‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
                    "‚Ä¢ –†–µ—à–µ–Ω–∏–µ\n"
                    "‚Ä¢ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è\n"
                    "‚Ä¢ –ë—é–¥–∂–µ—Ç –∏ –∫–æ–º–∞–Ω–¥–∞\n\n"
                    "‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã.\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:"
                ),
                reply_markup=keyboard
            )

            # TODO: Update pipeline state to AUDIT_COMPLETED
            # self.db.update_user_pipeline_state(user_id, "audit_completed", anketa_id)

            logger.info(f"[OK] Audit complete for user {user_id}, button displayed")

        except Exception as e:
            logger.error(f"[ERROR] Failed to run audit: {e}")
            import traceback
            traceback.print_exc()
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== STEP 3: GRANT ‚Üí REVIEW ==========

    async def handle_start_grant(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        Callback handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"

        Actions:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç ProductionWriter
        2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç grant.txt
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
        4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é"
        """
        query = update.callback_query
        user_id = query.from_user.id

        # Parse callback data: "start_grant:anketa:ANK123"
        callback_data = query.data
        parts = callback_data.split(':')

        if len(parts) != 3 or parts[0] != 'start_grant' or parts[1] != 'anketa':
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        anketa_id = parts[2]

        logger.info(f"[PIPELINE] User {user_id} clicked 'Start Grant' for anketa {anketa_id}")

        # Acknowledge button click
        await query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞–Ω—Ç–∞...")

        try:
            # TODO: Check pipeline state
            # state = self.db.get_user_pipeline_state(user_id)
            # if state != "audit_completed":
            #     await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∞—É–¥–∏—Ç!")
            #     return

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await query.message.reply_text(
                "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É...\n\n"
                "–≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å ProductionWriter
            from agents.production_writer import ProductionWriter
            import os

            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –∏–∑ –ë–î
            anketa_session = self.db.get_session_by_anketa_id(anketa_id)
            if not anketa_session or not anketa_session.get('interview_data'):
                await query.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã {anketa_id}"
                )
                return

            # –ü–∞—Ä—Å–∏–º interview_data
            import json
            if isinstance(anketa_session['interview_data'], str):
                anketa_data = json.loads(anketa_session['interview_data'])
            else:
                anketa_data = anketa_session['interview_data']

            # –°–æ–∑–¥–∞—Ç—å ProductionWriter
            writer = ProductionWriter(
                llm_provider='gigachat',  # –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
                qdrant_host=os.getenv('QDRANT_HOST', '5.35.88.251'),
                qdrant_port=int(os.getenv('QDRANT_PORT', '6333')),
                postgres_host=os.getenv('PGHOST', 'localhost'),
                postgres_port=int(os.getenv('PGPORT', '5434')),
                postgres_user=os.getenv('PGUSER', 'grantservice'),
                postgres_password=os.getenv('PGPASSWORD'),
                postgres_db=os.getenv('PGDATABASE', 'grantservice'),
                db=self.db
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–Ω—Ç —á–µ—Ä–µ–∑ write()
            grant_content = await writer.write(anketa_data=anketa_data)

            if not grant_content:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞–Ω—Ç"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞–Ω—Ç –≤ –ë–î (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –±–µ—Ä–µ–º anketa_id –∫–∞–∫ grant_id)
            grant_id = anketa_id  # –ò–ª–∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
            grant = {
                'grant_id': grant_id,
                'grant_content': grant_content,
                'anketa_id': anketa_id
            }

            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            txt_content = generate_grant_txt(grant)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode='w',
                suffix='.txt',
                delete=False,
                encoding='utf-8'
            ) as f:
                f.write(txt_content)
                temp_file_path = f.name

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            content_length = len(grant.get('grant_content', ''))

            with open(temp_file_path, 'rb') as f:
                await query.message.reply_document(
                    document=f,
                    filename=f"grant_{grant_id}.txt",
                    caption=f"‚úÖ –ì—Ä–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n\n–†–∞–∑–º–µ—Ä: {content_length:,} —Å–∏–º–≤–æ–ª–æ–≤"
                )

            # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)

            # –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É "–°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(
                    "üîç –°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é",
                    callback_data=f"start_review:grant:{grant_id}"
                )]
            ])

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await query.message.reply_text(
                text=(
                    "üéâ –ì—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n"
                    "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ?\n\n"
                    "–†–µ–≤—å—é –æ—Ü–µ–Ω–∏—Ç:\n"
                    "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏\n"
                    "‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏\n"
                    "‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã:"
                ),
                reply_markup=keyboard
            )

            # TODO: Update pipeline state to GRANT_COMPLETED
            # self.db.update_user_pipeline_state(user_id, "grant_completed", grant_id)

            logger.info(f"[OK] Grant created for user {user_id}, button displayed")

        except Exception as e:
            logger.error(f"[ERROR] Failed to generate grant: {e}")
            import traceback
            traceback.print_exc()
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ========== STEP 4: REVIEW ‚Üí COMPLETE ==========

    async def handle_start_review(
        self,
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
    ):
        """
        Callback handler –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–µ–≤—å—é"

        Actions:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç ReviewerAgent
        2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç review.txt
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª
        4. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–æ—Ç–æ–≤–æ!"
        """
        query = update.callback_query
        user_id = query.from_user.id

        # Parse callback data: "start_review:grant:GNT456"
        callback_data = query.data
        parts = callback_data.split(':')

        if len(parts) != 3 or parts[0] != 'start_review' or parts[1] != 'grant':
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return

        grant_id = parts[2]

        logger.info(f"[PIPELINE] User {user_id} clicked 'Start Review' for grant {grant_id}")

        # Acknowledge button click
        await query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≤—å—é...")

        try:
            # TODO: Check pipeline state
            # state = self.db.get_user_pipeline_state(user_id)
            # if state != "grant_completed":
            #     await query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞–Ω—Ç!")
            #     return

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–≤—å—é
            await query.message.reply_text(
                "‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω—Ç–∞...\n\n"
                "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30 —Å–µ–∫—É–Ω–¥."
            )

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å ReviewerAgent
            from agents.reviewer_agent import ReviewerAgent

            # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç–∞ –∏–∑ –ë–î
            # NOTE: grant_id –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å anketa_id (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
            # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º grant_id –∫–∞–∫ anketa_id
            anketa_session = self.db.get_session_by_anketa_id(grant_id)
            if not anketa_session:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                )
                return

            # –ü–∞—Ä—Å–∏–º interview_data
            import json
            if isinstance(anketa_session.get('interview_data'), str):
                anketa_data = json.loads(anketa_session['interview_data'])
            else:
                anketa_data = anketa_session.get('interview_data', {})

            # NOTE: –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å grant_content –∏–∑ –ë–î
            # –î–ª—è MVP –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≥—Ä–∞–Ω—Ç –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥ db.get_grant_by_id() –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            grant_content_text = ""  # Placeholder

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≤—å—é–µ—Ä–∞
            reviewer = ReviewerAgent(db=self.db)

            # –§–æ—Ä–º–∏—Ä—É–µ–º input –¥–ª—è ReviewerAgent
            review_input = {
                'grant_content': {'text': grant_content_text},
                'user_answers': anketa_data,
                'research_results': {},
                'citations': [],
                'tables': [],
                'selected_grant': {
                    'fund_name': anketa_data.get('grant_fund', '–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤')
                }
            }

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≤—å—é
            review_wrapped = await reviewer.review_grant_async(review_input)

            # BaseAgent –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            review = review_wrapped.get('result', review_wrapped)

            if not review:
                await query.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–≤—å—é"
                )
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
            txt_content = generate_review_txt(review)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(
                mode='w',
                suffix='.txt',
                delete=False,
                encoding='utf-8'
            ) as f:
                f.write(txt_content)
                temp_file_path = f.name

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            score = review.get('review_score', 0)
            status = review.get('final_status', 'pending')

            status_emoji = {
                'approved': '‚úÖ',
                'needs_revision': '‚ö†Ô∏è',
                'rejected': '‚ùå',
                'pending': '‚è≥'
            }.get(status, '‚è≥')

            with open(temp_file_path, 'rb') as f:
                await query.message.reply_document(
                    document=f,
                    filename=f"review_{grant_id}.txt",
                    caption=f"{status_emoji} –†–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n–û—Ü–µ–Ω–∫–∞: {score}/10"
                )

            # –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file_path)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ë–ï–ó –∫–Ω–æ–ø–æ–∫!)
            await query.message.reply_text(
                "üéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                "–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
                "‚úÖ –ê–Ω–∫–µ—Ç–∞\n"
                "‚úÖ –ê—É–¥–∏—Ç\n"
                "‚úÖ –ì—Ä–∞–Ω—Ç\n"
                "‚úÖ –†–µ–≤—å—é\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –∏—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞.\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GrantService!"
            )

            # TODO: Update pipeline state to PIPELINE_COMPLETE
            # self.db.update_user_pipeline_state(user_id, "pipeline_complete", None)

            logger.info(f"[OK] Pipeline complete for user {user_id}")

        except Exception as e:
            logger.error(f"[ERROR] Failed to run review: {e}")
            import traceback
            traceback.print_exc()
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≤—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
