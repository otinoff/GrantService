#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity –≤ –Ω–∞—à—É –ë–î
"""

import sys
import os
sys.path.append('/var/GrantService')

from data.database import GrantServiceDatabase
from datetime import datetime

def import_screen_data():
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity"""
    print("üì• –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–• –ò–ó –°–ö–†–ò–ù–û–í PERPLEXITY")
    print("=" * 50)
    
    db = GrantServiceDatabase()
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity (3 –∞–≤–≥—É—Å—Ç–∞ 2025)
    screen_data = {
        "api_requests": {
            "reasoning-pro, none": 20,
            "sonar-pro, low": 1,
            "sonar, low": 56,
            "sonar, medium": 8
        },
        "input_tokens": {
            "sonar": 1788,
            "reasoning-pro": 2546,
            "sonar-pro": 5
        },
        "output_tokens": {
            "sonar": 9833,
            "reasoning-pro": 169065,
            "sonar-pro": 50
        },
        "reasoning_tokens": {
            "reasoning-pro": 5853115
        }
    }
    
    print("üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:")
    print(f"  API Requests: {sum(screen_data['api_requests'].values())}")
    print(f"  Input Tokens: {sum(screen_data['input_tokens'].values()):,}")
    print(f"  Output Tokens: {sum(screen_data['output_tokens'].values()):,}")
    print(f"  Reasoning Tokens: {sum(screen_data['reasoning_tokens'].values()):,}")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    models_to_import = [
        ("reasoning-pro", "none", 20, 2546, 169065, 5853115),
        ("sonar-pro", "low", 1, 5, 50, 0),
        ("sonar", "low", 56, 0, 0, 0),  # –î–∞–Ω–Ω—ã–µ –∏–∑ sonar, low
        ("sonar", "medium", 8, 1788, 9833, 0)  # –î–∞–Ω–Ω—ã–µ –∏–∑ sonar, medium
    ]
    
    imported_count = 0
    
    for model, context, requests, input_tokens, output_tokens, reasoning_tokens in models_to_import:
        for i in range(requests):
            try:
                # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                log_id = db.log_researcher_query(
                    user_id=999,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    session_id=999,  # –°–∏—Å—Ç–µ–º–Ω–∞—è —Å–µ—Å—Å–∏—è
                    query_text=f"–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å {model} ({context}) - {i+1}/{requests}",
                    perplexity_response=f"–î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity: {model}",
                    sources=[],
                    usage_stats={
                        "prompt_tokens": input_tokens // requests if requests > 0 else 0,
                        "completion_tokens": output_tokens // requests if requests > 0 else 0,
                        "total_tokens": (input_tokens + output_tokens) // requests if requests > 0 else 0,
                        "search_context_size": context,
                        "num_search_queries": 0,
                        "reasoning_tokens": reasoning_tokens // requests if requests > 0 else 0
                    },
                    cost=0.0,  # –°—Ç–æ–∏–º–æ—Å—Ç—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    status="imported",
                    error_message=None
                )
                imported_count += 1
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {model}: {e}")
    
    print(f"\n‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {imported_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞...")
    stats = db.get_researcher_statistics(days=30)
    print(f"  –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}")
    print(f"  –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${stats['total_cost']:.6f}")
    
    return imported_count

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–º–ø–æ—Ä—Ç? (y/N): ")
    if response.lower() in ['y', 'yes', '–¥–∞']:
        import_screen_data()
    else:
        print("‚ùå –ò–º–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω") 