#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - Telegram Bot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: Telegram Bot + n8n + –ì–∏–≥–∞–ß–∞—Ç API
–ê–≥–µ–Ω—Ç—ã: –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä ‚Üí –ê—É–¥–∏—Ç–æ—Ä ‚Üí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ‚Üí –ü–∏—Å–∞—Ç–µ–ª—å
"""

import logging
import os
import sys
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import requests
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é –ë–î
sys.path.append('/var/GrantService/data')
from database import db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('/var/GrantService/logs/telegram_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class GrantServiceBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.n8n_webhook_url = os.getenv('N8N_WEBHOOK_URL', 'http://localhost:5678/webhook/grant-service')
        self.gigachat_api_key = os.getenv('GIGACHAT_API_KEY')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_sessions = {}
        
        # –≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–æ–π
        self.stages = {
            'interview': '–ò–Ω—Ç–µ—Ä–≤—å—é',
            'audit': '–ê—É–¥–∏—Ç',
            'planning': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', 
            'writing': '–ù–∞–ø–∏—Å–∞–Ω–∏–µ'
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            db.insert_default_questions()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_current_question(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            return None
        
        session = self.user_sessions[user_id]
        current_question_number = session.get('current_question', 1)
        
        return db.get_question_by_number(current_question_number)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
        user = update.effective_user
        
        welcome_text = f"""
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∑–∞ 15-20 –º–∏–Ω—É—Ç.

*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
1Ô∏è‚É£ *–ò–Ω—Ç–µ—Ä–≤—å—é* - —Å–æ–±–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ
2Ô∏è‚É£ *–ê—É–¥–∏—Ç* - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
3Ô∏è‚É£ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - —Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
4Ô∏è‚É£ *–ù–∞–ø–∏—Å–∞–Ω–∏–µ* - —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

*–ö–æ–º–∞–Ω–¥—ã:*
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/interview - –Ω–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –æ –ø—Ä–æ–µ–∫—Ç–µ
/status - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
/help - –ø–æ–º–æ—â—å

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /interview üëá
        """
        
        keyboard = [
            [InlineKeyboardButton("üé§ –ù–∞—á–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é", callback_data='start_interview')],
            [InlineKeyboardButton("üìä –ú–æ–π —Å—Ç–∞—Ç—É—Å", callback_data='check_status')],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def interview_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ –∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        if hasattr(update, 'effective_user') and update.effective_user:
            user_id = update.effective_user.id
        else:
            user_id = update.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'stage': 'interview',
            'current_question': 1,
            'answers': {},
            'started_at': datetime.now().isoformat()
        }
        
        first_question = """
üé§ *–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å!*

–î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ.

*–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7:*
üìù –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –≤ —á–µ–º –µ–≥–æ —Å—É—Ç—å? –û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
        """
        
        await update.message.reply_text(first_question, parse_mode='Markdown')

    async def start_interview_callback(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
        user_id = query.from_user.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_sessions[user_id] = {
            'stage': 'interview',
            'current_question': 1,
            'answers': {},
            'started_at': datetime.now().isoformat()
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î
        question = self.get_current_question(user_id)
        if not question:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        question_text = f"""
üé§ *–ò–Ω—Ç–µ—Ä–≤—å—é –Ω–∞—á–∞–ª–æ—Å—å!*

–î–∞–≤–∞–π—Ç–µ —Å–æ–±–µ—Ä–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ.

*–í–æ–ø—Ä–æ—Å {question['question_number']}:*
{question['question_text']}
        """
        
        if question['hint_text']:
            question_text += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* {question['hint_text']}"
        
        await query.edit_message_text(question_text, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        message_text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        if user_id not in self.user_sessions:
            await update.message.reply_text(
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            return
            
        session = self.user_sessions[user_id]
        stage = session['stage']
        
        if stage == 'interview':
            await self.process_interview_answer(update, context)
        elif stage == 'audit':
            await update.message.reply_text(
                "–ó–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∞—É–¥–∏—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
        else:
            await update.message.reply_text(
                f"–ó–∞—è–≤–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: {self.stages.get(stage, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
            )

    async def process_interview_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        user_id = update.effective_user.id
        message_text = update.message.text
        session = self.user_sessions[user_id]
        
        current_q = session['current_question']
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ë–î
        current_question = self.get_current_question(user_id)
        if current_question:
            validation_result = db.validate_answer(current_question['id'], message_text)
            if not validation_result['is_valid']:
                await update.message.reply_text(
                    f"‚ùå {validation_result['message']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    parse_mode='Markdown'
                )
                return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        session['answers'][f'question_{current_q}'] = message_text
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question_number = current_q + 1
        next_question = db.get_question_by_number(next_question_number)
        
        if next_question:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            session['current_question'] = next_question_number
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            question_text = f"""
‚úÖ *–û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç!*

*–í–æ–ø—Ä–æ—Å {next_question['question_number']}:*
{next_question['question_text']}
            """
            
            if next_question['hint_text']:
                question_text += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞:* {next_question['hint_text']}"
            
            await update.message.reply_text(question_text, parse_mode='Markdown')
        else:
            # –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            await self.complete_interview(update, context)

    async def complete_interview(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∞—É–¥–∏—Ç—É"""
        user_id = update.effective_user.id
        session = self.user_sessions[user_id]
        
        completion_text = """
üéâ *–ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*

–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –Ø —Å–æ–±—Ä–∞–ª –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ.

*–ß—Ç–æ –¥–∞–ª—å—à–µ:*
üîç –°–µ–π—á–∞—Å –∞–≥–µ–Ω—Ç-–∞—É–¥–∏—Ç–æ—Ä –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
üìä –î–∞—Å—Ç –æ—Ü–µ–Ω–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
üìã –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–æ–∑–¥–∞–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏

‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã...
        """
        
        keyboard = [
            [InlineKeyboardButton("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç", callback_data='start_audit')],
            [InlineKeyboardButton("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data='view_answers')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        session['stage'] = 'ready_for_audit'
        
        await update.message.reply_text(
            completion_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        user_id = query.from_user.id
        
        if callback_data == 'start_interview':
            await self.start_interview_callback(query, context)
        elif callback_data == 'start_audit':
            await self.start_audit_process(query, context)
        elif callback_data == 'check_status':
            await self.show_status(query, context)
        elif callback_data == 'help':
            await self.show_help(query, context)
        elif callback_data == 'view_answers':
            await self.show_answers(query, context)

    async def start_audit_process(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É–¥–∏—Ç–∞ —á–µ—Ä–µ–∑ n8n"""
        user_id = query.from_user.id
        session = self.user_sessions.get(user_id, {})
        
        audit_text = """
üîç *–ó–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç –∑–∞—è–≤–∫–∏...*

–ê–≥–µ–Ω—Ç-–∞—É–¥–∏—Ç–æ—Ä –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç:
‚úÖ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–æ–≤
‚úÖ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã  
‚úÖ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
‚úÖ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞

‚è±Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...
        """
        
        await query.edit_message_text(audit_text, parse_mode='Markdown')
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ n8n webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –ì–∏–≥–∞–ß–∞—Ç
        try:
            audit_result = await self.call_n8n_webhook('audit', session['answers'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞
            await self.show_audit_results(query, context, audit_result)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∞—É–¥–∏—Ç–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É–¥–∏—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def call_n8n_webhook(self, action: str, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ n8n webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ –ì–∏–≥–∞–ß–∞—Ç"""
        payload = {
            'action': action,
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ n8n
        # response = requests.post(self.n8n_webhook_url, json=payload)
        # return response.json()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return {
            'success': True,
            'result': '–ê—É–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            'scores': {
                'innovation': 8,
                'realism': 7,
                'team': 9,
                'impact': 8,
                'sustainability': 6
            }
        }

    async def show_audit_results(self, query, context: ContextTypes.DEFAULT_TYPE, audit_result: Dict[str, Any]):
        """–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—É–¥–∏—Ç–∞"""
        scores = audit_result.get('scores', {})
        
        result_text = f"""
üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –∑–∞—è–≤–∫–∏*

*–û—Ü–µ–Ω–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º (1-10):*
üöÄ –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å: {scores.get('innovation', 0)}/10
‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å: {scores.get('realism', 0)}/10  
üë• –ö–æ–º–∞–Ω–¥–∞: {scores.get('team', 0)}/10
üéØ –í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ: {scores.get('impact', 0)}/10
üîÑ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: {scores.get('sustainability', 0)}/10

*–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {sum(scores.values())//len(scores)}/10*

*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞:*
‚Ä¢ –£–∫—Ä–µ–ø–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —É—Å–ø–µ—Ö–∞
‚Ä¢ –ü—Ä–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≥—Ä–∞–Ω—Ç–∞

–ì–æ—Ç–æ–≤—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–∫–∏?
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –∑–∞—è–≤–∫–∏", callback_data='start_planning')],
            [InlineKeyboardButton("üîô –ö –Ω–∞—á–∞–ª—É", callback_data='back_to_start')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            result_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

    async def show_status(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        session = self.user_sessions.get(user_id)
        
        if not session:
            status_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        else:
            stage = session.get('stage', 'unknown')
            status_text = f"""
üìã *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏*

–¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {self.stages.get(stage, stage)}
–ù–∞—á–∞—Ç–æ: {session.get('started_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

*–ü—Ä–æ–≥—Ä–µ—Å—Å:*
{'‚úÖ' if stage != 'interview' else 'üîÑ'} –ò–Ω—Ç–µ—Ä–≤—å—é
{'‚úÖ' if stage in ['audit', 'planning', 'writing'] else '‚è≥'} –ê—É–¥–∏—Ç  
{'‚úÖ' if stage in ['planning', 'writing'] else '‚è≥'} –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
{'‚úÖ' if stage == 'writing' else '‚è≥'} –ù–∞–ø–∏—Å–∞–Ω–∏–µ
            """
        
        await query.edit_message_text(status_text, parse_mode='Markdown')

    async def show_help(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏"""
        help_text = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å—É*

*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/interview - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
/status - —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–≠—Ç–∞–ø—ã —Ä–∞–±–æ—Ç—ã:*
1Ô∏è‚É£ *–ò–Ω—Ç–µ—Ä–≤—å—é* - 7 –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–µ–∫—Ç–µ
2Ô∏è‚É£ *–ê—É–¥–∏—Ç* - –∞–Ω–∞–ª–∏–∑ –∏ –æ—Ü–µ–Ω–∫–∞ (–ò–ò)
3Ô∏è‚É£ *–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ* - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏ (–ò–ò) 
4Ô∏è‚É£ *–ù–∞–ø–∏—Å–∞–Ω–∏–µ* - –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–ò–ò)

*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 15-20 –º–∏–Ω—É—Ç
*–†–µ–∑—É–ª—å—Ç–∞—Ç:* –ì–æ—Ç–æ–≤–∞—è –≥—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support_bot
        """
        
        await query.edit_message_text(help_text, parse_mode='Markdown')

    async def show_answers(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é"""
        user_id = query.from_user.id
        session = self.user_sessions.get(user_id, {})
        answers = session.get('answers', {})
        
        if not answers:
            await query.edit_message_text("–ò–Ω—Ç–µ—Ä–≤—å—é –µ—â–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å.")
            return
            
        answers_text = "üìù *–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–≤—å—é:*\n\n"
        
        questions = [
            "–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞",
            "–ì—Ä–∞–Ω—Ç –∏ —Ñ–æ–Ω–¥", 
            "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
            "–ë—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏",
            "–ö–æ–º–∞–Ω–¥–∞ –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", 
            "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞",
            "–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        ]
        
        for i, (key, answer) in enumerate(answers.items(), 1):
            if i <= len(questions):
                answers_text += f"*{i}. {questions[i-1]}:*\n{answer}\n\n"
        
        await query.edit_message_text(answers_text, parse_mode='Markdown')

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
            
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("interview", self.interview_command))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        logger.info("–ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

if __name__ == '__main__':
    bot = GrantServiceBot()
    bot.run() 