#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Perplexity API
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService')

from services.perplexity_service import PerplexityService
from data.database import get_researcher_logs, add_researcher_log

def test_balance_display():
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Perplexity API")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    perplexity_service = PerplexityService()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    combined_stats = perplexity_service.get_combined_statistics()
    
    account_info = combined_stats.get('account_info', {})
    usage_stats = combined_stats.get('usage_stats', {})
    
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${account_info.get('credit_balance', 0.0):.6f} USD")
    print(f"üéØ –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {account_info.get('current_tier', 'Tier 0')}")
    print(f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${account_info.get('total_spent', 0.0):.2f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–µ—Ä–∞
    tier_progress = account_info.get('tier_progress', {})
    if tier_progress.get('next_tier'):
        remaining = tier_progress.get('remaining_to_next', 0.0)
        print(f"üìà –î–æ {tier_progress['next_tier']}: ${remaining:.2f}")
    
    print("\nüìä API Requests –ø–æ –º–æ–¥–µ–ª—è–º:")
    print(f"  ‚Ä¢ sonar: {usage_stats.get('sonar_low', 0) + usage_stats.get('sonar_medium', 0)}")
    print(f"  ‚Ä¢ sonar-pro: {usage_stats.get('sonar_pro_low', 0)}")
    print(f"  ‚Ä¢ reasoning-pro: {usage_stats.get('reasoning_pro', 0)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {usage_stats.get('total_queries', 0)}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–æ–¥–µ–ª—è–º:")
    model_stats = perplexity_service.get_model_specific_statistics()
    
    for model, data in model_stats.items():
        if model != 'total_requests' and model != 'last_updated':
            print(f"  ‚Ä¢ {model}:")
            print(f"    - Low: {data.get('low', 0)}")
            print(f"    - Medium: {data.get('medium', 0)}")
            print(f"    - High: {data.get('high', 0)}")
            print(f"    - Total: {data.get('total', 0)}")
    
    print(f"\nüïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {model_stats.get('last_updated', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    logs = get_researcher_logs(limit=5)
    
    if logs:
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(logs)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤:")
        for log in logs:
            try:
                balance = float(log.get('credit_balance', 0.0)) if log.get('credit_balance') else 0.0
                cost = float(log.get('cost', 0.0)) if log.get('cost') else 0.0
                print(f"  ‚Ä¢ ID: {log.get('id')}, –ë–∞–ª–∞–Ω—Å: ${balance:.6f}, –°—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.6f}")
            except (ValueError, TypeError):
                print(f"  ‚Ä¢ ID: {log.get('id')}, –ë–∞–ª–∞–Ω—Å: N/A, –°—Ç–æ–∏–º–æ—Å—Ç—å: N/A")
    else:
        print("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_balance_display() 