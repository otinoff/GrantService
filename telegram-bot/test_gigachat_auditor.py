#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GigaChat —Å AuditorAgent
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))

from services.gigachat_service import GigaChatService
sys.path.append('/var/GrantService/agents')
from auditor_agent import AuditorAgent
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_gigachat_service():
    """–¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ GigaChat"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat Service")
    print("=" * 50)
    
    service = GigaChatService()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞—è–≤–∫–∏
    test_application = """
    –ù–ê–ó–í–ê–ù–ò–ï: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
    
    –†–ï–ó–Æ–ú–ï: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ 
    —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ò–ò –∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    
    –ü–†–û–ë–õ–ï–ú–ê: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ –Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–∫—É—á–Ω—ã.
    
    –†–ï–®–ï–ù–ò–ï: –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –ø–æ–¥ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –ë–Æ–î–ñ–ï–¢: 500,000 —Ä—É–±–ª–µ–π –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    
    result = service.analyze_grant_application(test_application)
    
    if result.get('status') == 'success':
        print("‚úÖ GigaChat –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìù –ê–Ω–∞–ª–∏–∑: {result.get('analysis')[:200]}...")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
    
    return result

def test_auditor_agent():
    """–¢–µ—Å—Ç AuditorAgent —Å GigaChat"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º AuditorAgent —Å GigaChat")
    print("=" * 50)
    
    # –ú–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    class MockDB:
        def get_agent_prompts(self, agent_type):
            return {"system_prompt": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≥—Ä–∞–Ω—Ç–∞–º"}
    
    auditor = AuditorAgent(MockDB())
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'application': {
            'title': '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
            'summary': '–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤',
            'problem': '–°—Ç—É–¥–µ–Ω—Ç—ã –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–º–æ—â–∏',
            'solution': '–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º',
            'budget': '750,000 —Ä—É–±–ª–µ–π',
            'timeline': '12 –º–µ—Å—è—Ü–µ–≤'
        },
        'user_answers': {
            'experience': 'high',
            'budget': '500000-1000000',
            'region': '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
        },
        'selected_grant': {
            'requirements': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
            'amount': '1,000,000 —Ä—É–±–ª–µ–π',
            'deadline': '2025-12-31'
        }
    }
    
    try:
        result = auditor.process(test_data)
        
        if result.get('status') == 'success':
            print("‚úÖ AuditorAgent –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GigaChat –∞–Ω–∞–ª–∏–∑–∞
            gigachat_analysis = result.get('analysis', {}).get('gigachat_analysis', {})
            
            if gigachat_analysis.get('status') == 'success':
                print("ü§ñ GigaChat –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                print(f"üìä –û—Ü–µ–Ω–∫–∞: {gigachat_analysis.get('score', 'N/A')}")
                print(f"üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(gigachat_analysis.get('recommendations', []))} —à—Ç—É–∫")
            else:
                print(f"‚ö†Ô∏è GigaChat –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {gigachat_analysis.get('message', 'N/A')}")
            
            print(f"üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result.get('overall_score', 'N/A')}")
            print(f"üèÜ –°—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {result.get('readiness_status', 'N/A')}")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ AuditorAgent: {result.get('message')}")
            
        return result
        
    except Exception as e:
        print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ: {e}")
        return None

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("üïê –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ GigaChat
    gigachat_result = test_gigachat_service()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π AuditorAgent —Å GigaChat
    auditor_result = test_auditor_agent()
    
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"ü§ñ GigaChat Service: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if gigachat_result and gigachat_result.get('status') == 'success' else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    print(f"üïµÔ∏è AuditorAgent: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if auditor_result and auditor_result.get('status') == 'success' else '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}")
    
    if gigachat_result and gigachat_result.get('status') == 'success':
        print("\nüéâ GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å AuditorAgent!")
        print("üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò-–∞–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã")
    else:
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
