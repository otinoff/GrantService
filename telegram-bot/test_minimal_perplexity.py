#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Perplexity API - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import sys
import os
sys.path.append('/var/GrantService')

from services.perplexity_service import PerplexityService
from data.database import GrantServiceDatabase

def test_minimal_perplexity():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("üß™ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ Perplexity API")
    print("=" * 50)
    print("üí∞ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó —Ç—Ä–∞—Ç")
    print("‚ö†Ô∏è –ó–∞—Ç—Ä–∞—Ç—ã: $0.0000")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    perplexity_service = PerplexityService()
    db = GrantServiceDatabase()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏...")
    try:
        settings = perplexity_service.get_model_settings()
        print(f"  ‚úÖ –ú–æ–¥–µ–ª—å: {settings.get('model_name', 'sonar')}")
        print(f"  ‚úÖ –ú–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤: {settings.get('max_tokens', 'N/A')}")
        print(f"  ‚úÖ –¶–µ–Ω–∞: {settings.get('pricing', {}).get('status', 'N/A')}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î...")
    try:
        stats = perplexity_service.get_account_statistics()
        if "error" in stats:
            print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['error']}")
        else:
            print(f"  ‚úÖ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['usage_stats']['total_queries']}")
            print(f"  ‚úÖ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${stats['usage_stats']['total_cost']:.4f}")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏...")
    try:
        logs = db.get_researcher_logs(limit=3)
        if logs:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤: {len(logs)}")
            latest = logs[0]
            print(f"  ‚úÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π: {latest['created_at']} - {latest['status']}")
        else:
            print("  ‚ÑπÔ∏è –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–æ–≤: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É researcher_logs
        with db.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("PRAGMA table_info(researcher_logs)")
            columns = cursor.fetchall()
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ researcher_logs: {len(columns)} –∫–æ–ª–æ–Ω–æ–∫")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM researcher_logs")
            count = cursor.fetchone()[0]
            print(f"  ‚úÖ –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {count}")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    # 5. –¢–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    print("\nüîç –¢–µ—Å—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ –≤ –ë–î –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API
        test_log_id = db.log_researcher_query(
            user_id=999,
            session_id=999,
            query_text="–¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–° - –±–µ–∑ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API",
            perplexity_response="–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ –∑–∞—Ç—Ä–∞—Ç",
            sources=[],
            usage_stats={"prompt_tokens": 10, "completion_tokens": 5},
            cost=0.0,
            status="test",
            error_message=None
        )
        print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ ID: {test_log_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–æ–≥ —Å–æ–∑–¥–∞–ª—Å—è
        test_log = db.get_researcher_logs(limit=1)[0]
        print(f"  ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞: {test_log['status']} - ${test_log['cost']:.4f}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞: {e}")
    
    print("\n" + "=" * 50)
    print("‚úÖ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
    print("üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: $0.0000")
    print("üîß –ü—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –ë–î –∏ —Å–µ—Ä–≤–∏—Å–∞")
    print("üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Perplexity API")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–ï–ó –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/N): ")
    if response.lower() in ['y', 'yes', '–¥–∞']:
        test_minimal_perplexity()
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω") 