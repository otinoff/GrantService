#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity API
"""

import requests
import json
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_KEY = "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"
BASE_URL = "https://api.perplexity.ai"

def test_simple_request():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity API")
    print("=" * 50)
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": "sonar",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            }
        ],
        "max_tokens": 100
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {BASE_URL}/chat/completions")
    print(f"üîë API Key: {API_KEY[:10]}...")
    print(f"üìù Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
    
    try:
        start_time = time.time()
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=30  # –£–º–µ–Ω—å—à–∞–µ–º timeout
        )
        end_time = time.time()
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (30 —Å–µ–∫—É–Ω–¥)")
    except requests.exceptions.ConnectionError as e:
        print(f"üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def test_models():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    models = [
        "sonar",
        "sonar-pro", 
        "sonar-deep-research",
        "sonar-reasoning",
        "sonar-reasoning-pro"
    ]
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    for model in models:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
        
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user",
                    "content": "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç"
                }
            ],
            "max_tokens": 50
        }
        
        try:
            response = requests.post(
                f"{BASE_URL}/chat/completions",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"‚úÖ {model} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"‚ùå {model} - –æ—à–∏–±–∫–∞ {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"‚ùå {model} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\nüîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
        response = requests.get(BASE_URL, timeout=10)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_connection()
    test_simple_request()
    test_models() 