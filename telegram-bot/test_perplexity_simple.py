#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–∞
"""

import requests
import json

# API –∫–ª—é—á –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
API_KEY = "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"
BASE_URL = "https://api.perplexity.ai"

def test_simple_query():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞"""
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Perplexity API")
    print("=" * 50)
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": "sonar",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
            }
        ],
        "max_tokens": 50
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {BASE_URL}/chat/completions")
    print(f"üîë API Key: {API_KEY[:10]}...")
    print(f"üìù Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
    
    try:
        response = requests.post(
            f"{BASE_URL}/chat/completions",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {json.dumps(result, indent=2, ensure_ascii=False)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_different_models():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    print("\nüîç –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    print("=" * 50)
    
    models = [
        "sonar",
        "sonar-pro", 
        "llama-3.1-sonar-small-128k-online",
        "llama-3.1-sonar-small-128k",
        "llama-3.1-sonar-medium-128k-online",
        "llama-3.1-sonar-medium-128k"
    ]
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    for model in models:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
        
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user",
                    "content": "–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç"
                }
            ],
            "max_tokens": 20
        }
        
        try:
            response = requests.post(
                f"{BASE_URL}/chat/completions",
                headers=headers,
                json=payload,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"‚úÖ {model} - —Ä–∞–±–æ—Ç–∞–µ—Ç")
                result = response.json()
                if 'choices' in result and len(result['choices']) > 0:
                    content = result['choices'][0]['message']['content']
                    print(f"   –û—Ç–≤–µ—Ç: {content}")
                return True
            else:
                print(f"‚ùå {model} - –æ—à–∏–±–∫–∞ {response.status_code}")
                if response.status_code == 401:
                    print(f"   –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –∫–ª—é—á –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
                    return False
                elif response.status_code == 400:
                    print(f"   –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ - {response.text}")
                else:
                    print(f"   {response.text}")
                
        except Exception as e:
            print(f"‚ùå {model} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return False

def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"""
    print("\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ—Å—Ç–æ–π GET –∑–∞–ø—Ä–æ—Å
        response = requests.get(BASE_URL, timeout=10)
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 404:
            print("‚ÑπÔ∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return True
        else:
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Perplexity API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API
    if not check_api_status():
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    if test_simple_query():
        print("\nüéâ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("\nüîç –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏...")
        if test_different_models():
            print("\nüéâ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å!")
        else:
            print("\n‚ùå API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º")
            print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. –ö–ª—é—á –∏—Å—Ç–µ–∫")
            print("2. –ò–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            print("3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ IP/—Ä–µ–≥–∏–æ–Ω—É")
            print("4. –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–ª—é—á") 