#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity API —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append('/var/GrantService')

from services.perplexity_service import PerplexityService
from data.database import GrantServiceDatabase

def test_real_perplexity():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API"""
    print("üß™ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ Perplexity API")
    print("=" * 50)
    print("üí∞ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –û–î–ò–ù —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å!")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    perplexity_service = PerplexityService()
    db = GrantServiceDatabase()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –∑–∞–ø—Ä–æ—Å–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∑–∞–ø—Ä–æ—Å–∞:")
    stats_before = perplexity_service.get_account_statistics()
    print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_before['usage_stats']['total_queries']}")
    print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_before['usage_stats']['total_cost']:.6f}")
    
    # 2. –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å...")
    try:
        result = perplexity_service.search_grants(
            query="–≥—Ä–∞–Ω—Ç—ã –¥–ª—è IT —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤",
            region="–†–æ—Å—Å–∏—è",
            budget_range="–¥–æ 5 –º–ª–Ω —Ä—É–±–ª–µ–π",
            user_id=999,  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            session_id=999  # –¢–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è
        )
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {result['error']}")
            return False
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.get('grants_info', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º usage –¥–∞–Ω–Ω—ã–µ
        usage = result.get('usage', {})
        print(f"üìä Usage –¥–∞–Ω–Ω—ã–µ:")
        print(f"  - Prompt tokens: {usage.get('prompt_tokens', 0)}")
        print(f"  - Completion tokens: {usage.get('completion_tokens', 0)}")
        print(f"  - Total tokens: {usage.get('total_tokens', 0)}")
        print(f"  - Search queries: {usage.get('num_search_queries', 0)}")
        print(f"  - Search context size: {usage.get('search_context_size', 'N/A')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost_info = usage.get('cost', {})
        if cost_info:
            print(f"üí∞ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:")
            print(f"  - Input tokens cost: ${cost_info.get('input_tokens_cost', 0):.6f}")
            print(f"  - Output tokens cost: ${cost_info.get('output_tokens_cost', 0):.6f}")
            print(f"  - Request cost: ${cost_info.get('request_cost', 0):.6f}")
            print(f"  - Total cost: ${cost_info.get('total_cost', 0):.6f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        sources = result.get('sources', [])
        print(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(sources)} –Ω–∞–π–¥–µ–Ω–æ")
        for i, source in enumerate(sources[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            print(f"  {i+1}. {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:50]}...")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –∑–∞–ø—Ä–æ—Å–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∑–∞–ø—Ä–æ—Å–∞:")
        stats_after = perplexity_service.get_account_statistics()
        print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_after['usage_stats']['total_queries']}")
        print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_after['usage_stats']['total_cost']:.6f}")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        cost_diff = stats_after['usage_stats']['total_cost'] - stats_before['usage_stats']['total_cost']
        queries_diff = stats_after['usage_stats']['total_queries'] - stats_before['usage_stats']['total_queries']
        
        print(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${cost_diff:.6f}")
        print(f"üìà –ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_diff}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥...")
        logs = db.get_researcher_logs(limit=1)
        
        if logs:
            latest_log = logs[0]
            print(f"  - –õ–æ–≥ ID: {latest_log['id']}")
            print(f"  - –°—Ç–∞—Ç—É—Å: {latest_log['status']}")
            print(f"  - –°—Ç–æ–∏–º–æ—Å—Ç—å: ${latest_log['cost']:.6f}")
            print(f"  - –í—Ä–µ–º—è: {latest_log['created_at']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º usage_stats –∏–∑ –ª–æ–≥–∞
            usage_stats = latest_log['usage_stats']
            print(f"  - Usage –∏–∑ –ª–æ–≥–∞:")
            print(f"    Prompt tokens: {usage_stats.get('prompt_tokens', 0)}")
            print(f"    Completion tokens: {usage_stats.get('completion_tokens', 0)}")
            print(f"    Total tokens: {usage_stats.get('total_tokens', 0)}")
        else:
            print("  - –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 6. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\n" + "=" * 50)
        print("‚úÖ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost_diff:.6f}")
        print(f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ~${1.1 - cost_diff:.3f}")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        print("üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Perplexity API")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/N): ")
    if response.lower() in ['y', 'yes', '–¥–∞']:
        test_real_perplexity()
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω") 