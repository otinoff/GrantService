#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç Perplexity API —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏
"""

import sys
import os
sys.path.append('/var/GrantService')

from services.perplexity_service import PerplexityService
from data.database import GrantServiceDatabase

def test_safe_perplexity():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞—Ç—Ä–∞—Ç–∞–º–∏"""
    print("üß™ –ë–ï–ó–û–ü–ê–°–ù–´–ô –¢–ï–°–¢ Perplexity API")
    print("=" * 60)
    print("üí∞ –ë–∞–ª–∞–Ω—Å: $1.1")
    print("üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: ~$0.001-0.002")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    perplexity_service = PerplexityService()
    db = GrantServiceDatabase()
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –∑–∞–ø—Ä–æ—Å–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –∑–∞–ø—Ä–æ—Å–∞:")
    stats_before = perplexity_service.get_account_statistics()
    
    if "error" in stats_before:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {stats_before['error']}")
        print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_before['usage_stats']['total_queries']}")
        print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_before['usage_stats']['total_cost']:.4f}")
    else:
        print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_before['usage_stats']['total_queries']}")
        print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_before['usage_stats']['total_cost']:.4f}")
    
    # 2. –î–µ–ª–∞–µ–º –û–î–ò–ù –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    print("\nüîç –í—ã–ø–æ–ª–Ω—è–µ–º –û–î–ò–ù —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
    
    try:
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        test_query = "–ù–∞–π–¥–∏ 3 –≥—Ä–∞–Ω—Ç–∞ –¥–ª—è IT –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –†–æ—Å—Å–∏–∏"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = perplexity_service.search_grants(
            query=test_query,
            region="–†–æ—Å—Å–∏—è",
            budget_range="–¥–æ 1 –º–ª–Ω —Ä—É–±–ª–µ–π"
        )
        
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {result['error']}")
            return False
        
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result.get('grants_info', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –∑–∞–ø—Ä–æ—Å–∞
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –∑–∞–ø—Ä–æ—Å–∞:")
        stats_after = perplexity_service.get_account_statistics()
        
        if "error" in stats_after:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: {stats_after['error']}")
            print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_after['usage_stats']['total_queries']}")
            print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_after['usage_stats']['total_cost']:.4f}")
        else:
            print(f"  - –ó–∞–ø—Ä–æ—Å–æ–≤: {stats_after['usage_stats']['total_queries']}")
            print(f"  - –†–∞—Å—Ö–æ–¥—ã: ${stats_after['usage_stats']['total_cost']:.4f}")
        
        # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É
        cost_diff = stats_after['usage_stats']['total_cost'] - stats_before['usage_stats']['total_cost']
        queries_diff = stats_after['usage_stats']['total_queries'] - stats_before['usage_stats']['total_queries']
        
        print(f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞: ${cost_diff:.4f}")
        print(f"üìà –ù–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {queries_diff}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤ –ë–î
        print("\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        logs = db.get_researcher_logs(limit=5)
        
        if logs:
            latest_log = logs[0]  # –°–∞–º—ã–π —Å–≤–µ–∂–∏–π –ª–æ–≥
            print(f"  - –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ ID: {latest_log['id']}")
            print(f"  - –°—Ç–∞—Ç—É—Å: {latest_log['status']}")
            print(f"  - –°—Ç–æ–∏–º–æ—Å—Ç—å: ${latest_log.get('cost', 0):.4f}")
            print(f"  - –í—Ä–µ–º—è: {latest_log['created_at']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            query_text = latest_log['query_text']
            if len(query_text) > 50:
                query_text = query_text[:50] + "..."
            print(f"  - –ó–∞–ø—Ä–æ—Å: {query_text}")
        else:
            print("  - –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # 6. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\n" + "=" * 60)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${cost_diff:.4f}")
        print(f"üí≥ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ~${1.1 - cost_diff:.3f}")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("üìã –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def test_context_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    print("\nüîß –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("=" * 40)
    
    perplexity_service = PerplexityService()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    test_data = {
        "project_name": "–¢–µ—Å—Ç–æ–≤—ã–π IT –ø—Ä–æ–µ–∫—Ç",
        "budget": "500,000 —Ä—É–±–ª–µ–π",
        "team_size": "5 —á–µ–ª–æ–≤–µ–∫",
        "region": "–ú–æ—Å–∫–≤–∞",
        "project_description": "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π. " * 50,  # 50 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        "tech_requirements": "Python, Django, PostgreSQL, Docker " * 30  # 30 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    }
    
    print("üìè –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    total_chars = sum(len(str(v)) for v in test_data.values())
    estimated_tokens = total_chars // 4  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    
    print(f"  - –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"  - –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {estimated_tokens:,}")
    
    # TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print("  - –§—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Perplexity API")
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –û–î–ò–ù –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/N): ").lower().strip()
    
    if confirm == 'y':
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
        success = test_safe_perplexity()
        
        if success:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            test_context_settings()
            
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω") 