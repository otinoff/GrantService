#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Perplexity API
"""

import sys
import os
sys.path.append('/var/GrantService')

from services.perplexity_service import PerplexityService

def test_sync_perplexity():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Perplexity API"""
    print("üîÑ –¢–ï–°–¢ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –° PERPLEXITY API")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
    perplexity_service = PerplexityService()
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Perplexity API
    print("\nüì° –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Perplexity API...")
    api_data = perplexity_service.get_perplexity_api_usage()
    
    if "error" in api_data:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {api_data['error']}")
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç API")
    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {list(api_data.keys())}")
    
    # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    print("\nüóÑÔ∏è –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–π –ë–î...")
    db_stats = perplexity_service.get_account_statistics()
    
    if "error" in db_stats:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {db_stats['error']}")
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î")
    
    # 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    print("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
    sync_result = perplexity_service.sync_with_perplexity_api()
    
    if "error" in sync_result:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {sync_result['error']}")
        return False
    
    print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•:")
    print("-" * 50)
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤ Perplexity
    if 'manual_data' in api_data:
        manual = api_data['manual_data']
        print("üîç –î–ê–ù–ù–´–ï –ò–ó –°–ö–†–ò–ù–û–í PERPLEXITY:")
        print(f"  API Requests: {manual['api_requests']['total']}")
        print(f"  Input Tokens: {manual['input_tokens']['total']:,}")
        print(f"  Output Tokens: {manual['output_tokens']['total']:,}")
        print(f"  Reasoning Tokens: {manual['reasoning_tokens']['reasoning-pro']:,}")
        
        print("\nüìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ú–û–î–ï–õ–Ø–ú:")
        print("  API Requests:")
        for model, count in manual['api_requests'].items():
            if model != 'total':
                print(f"    {model}: {count}")
        
        print("  Input Tokens:")
        for model, count in manual['input_tokens'].items():
            if model != 'total':
                print(f"    {model}: {count:,}")
        
        print("  Output Tokens:")
        for model, count in manual['output_tokens'].items():
            if model != 'total':
                print(f"    {model}: {count:,}")
    
    # –ë–î –¥–∞–Ω–Ω—ã–µ
    db_usage = db_stats['usage_stats']
    print(f"\nüóÑÔ∏è –ù–ê–®–ê –ë–î:")
    print(f"  Requests: {db_usage['total_queries']}")
    print(f"  Input Tokens: {db_usage['total_input_tokens']:,}")
    print(f"  Output Tokens: {db_usage['total_output_tokens']:,}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if 'manual_data' in api_data:
        manual = api_data['manual_data']
        print(f"\nüìà –°–†–ê–í–ù–ï–ù–ò–ï:")
        print(f"  Requests: {db_usage['total_queries']} / {manual['api_requests']['total']} ({db_usage['total_queries']/manual['api_requests']['total']*100:.1f}%)")
        print(f"  Input Tokens: {db_usage['total_input_tokens']:,} / {manual['input_tokens']['total']:,} ({db_usage['total_input_tokens']/manual['input_tokens']['total']*100:.1f}%)")
        print(f"  Output Tokens: {db_usage['total_output_tokens']:,} / {manual['output_tokens']['total']:,} ({db_usage['total_output_tokens']/manual['output_tokens']['total']*100:.1f}%)")
    
    return True

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Perplexity API")
    
    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç? (y/N): ")
    if response.lower() in ['y', 'yes', '–¥–∞']:
        test_sync_perplexity()
    else:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω") 