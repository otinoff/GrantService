#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç Interactive Interview V2 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telethon

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–æ—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

Requirements:
    pip install telethon pytest pytest-asyncio

Setup:
    1. –ü–æ–ª—É—á–∏—Ç—å API credentials –Ω–∞ https://my.telegram.org/
    2. –°–æ–∑–¥–∞—Ç—å .env —Å TELEGRAM_API_ID –∏ TELEGRAM_API_HASH
    3. –ó–∞–ø—É—Å—Ç–∏—Ç—å: python test_interview_auto.py

Author: Grant Service Testing Agent
Created: 2025-10-21
"""

import asyncio
import os
import sys
from pathlib import Path
from datetime import datetime

# Add paths
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.custom import Message

# Load env
from dotenv import load_dotenv
load_dotenv(Path(__file__).parent.parent.parent / 'config' / '.env')


class InterviewTester:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Interactive Interview V2

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telethon –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    def __init__(
        self,
        bot_username: str = "@grantservice_test_bot",  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!
        api_id: int = None,
        api_hash: str = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞

        Args:
            bot_username: Username –±–æ—Ç–∞ (—Å @)
            api_id: Telegram API ID (–∏–∑ my.telegram.org)
            api_hash: Telegram API Hash
        """
        self.bot_username = bot_username

        # –ü–æ–ª—É—á–∏—Ç—å credentials –∏–∑ env –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self.api_id = api_id or int(os.getenv('TELEGRAM_API_ID'))
        self.api_hash = api_hash or os.getenv('TELEGRAM_API_HASH')

        if not self.api_id or not self.api_hash:
            raise ValueError(
                "TELEGRAM_API_ID –∏ TELEGRAM_API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!\n"
                "–ü–æ–ª—É—á–∏—Ç–µ –∏—Ö –Ω–∞ https://my.telegram.org/"
            )

        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
        self.client = TelegramClient(
            'test_session',  # –§–∞–π–ª —Å–µ—Å—Å–∏–∏
            self.api_id,
            self.api_hash
        )

        self.results = {
            'total_tests': 0,
            'passed': 0,
            'failed': 0,
            'errors': []
        }

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.start()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram –∫–∞–∫ {await self.client.get_me()}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()

    async def send_and_wait(self, conv, message: str, timeout: int = 15) -> Message:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç–∞

        Args:
            conv: Conversation –æ–±—ä–µ–∫—Ç
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            Message –æ—Ç –±–æ—Ç–∞
        """
        print(f"\nüë§ USER ‚Üí BOT: {message}")
        await conv.send_message(message)

        try:
            response = await conv.get_response(timeout=timeout)
            print(f"ü§ñ BOT ‚Üí USER: {response.text[:200]}...")
            return response
        except asyncio.TimeoutError:
            print(f"‚ùå TIMEOUT: –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
            raise

    async def test_interview_flow(self):
        """
        –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
        - /start_interview_v2 –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é
        - /continue –∑–∞–¥–∞–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        - –û—Ç–≤–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        - –ë–æ—Ç –∑–∞–¥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        - –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Å –æ—Ü–µ–Ω–∫–æ–π
        """
        print("\n" + "=" * 80)
        print("–¢–ï–°–¢: –ü–æ–ª–Ω—ã–π Flow Interactive Interview V2")
        print("=" * 80)

        self.results['total_tests'] += 1

        try:
            async with self.client.conversation(self.bot_username) as conv:
                # 1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
                print("\n[–®–ê–ì 1] –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–≤—å—é...")
                response = await self.send_and_wait(conv, '/start_interview_v2', timeout=10)

                assert '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ' in response.text or '–ø—Ä–∏–≤–µ—Ç' in response.text.lower(), \
                    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"
                print("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–æ")

                # 2. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å (–ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å)
                print("\n[–®–ê–ì 2] –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞...")
                response = await self.send_and_wait(conv, '/continue', timeout=15)

                assert len(response.text) > 10, "–í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
                print(f"‚úÖ –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω: {response.text[:100]}...")

                # 3. –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ 5 –≤–æ–ø—Ä–æ—Å–æ–≤
                print("\n[–®–ê–ì 3] –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã...")

                answers = [
                    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –∂–∏—Ç–µ–ª–µ–π –ö–µ–º–µ—Ä–æ–≤–æ - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ –∏ –≤—Å—Ç—Ä–µ—á —Å –ø–∏—Å–∞—Ç–µ–ª—è–º–∏",
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤ –≥–æ—Ä–æ–¥–µ, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–æ–π",
                    "–ñ–∏—Ç–µ–ª–∏ –≥–æ—Ä–æ–¥–∞ –ö–µ–º–µ—Ä–æ–≤–æ, –ª—é–±–∏—Ç–µ–ª–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, —à–∫–æ–ª—å–Ω–∏–∫–∏ –∏ —Å—Ç—É–¥–µ–Ω—Ç—ã",
                    "–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã—Ö –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –≤–µ—á–µ—Ä–æ–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ö –≥–æ—Ä–æ–¥–∞ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º –º–µ—Å—Ç–Ω—ã—Ö –ø–∏—Å–∞—Ç–µ–ª–µ–π",
                    "500000 —Ä—É–±–ª–µ–π –Ω–∞ –≥–æ–¥: 300000 –Ω–∞ –≥–æ–Ω–æ—Ä–∞—Ä—ã –ø–∏—Å–∞—Ç–µ–ª–µ–π, 100000 –Ω–∞ –∞—Ä–µ–Ω–¥—É –ø–æ–º–µ—â–µ–Ω–∏–π, 100000 –Ω–∞ —Ä–µ–∫–ª–∞–º—É"
                ]

                for i, answer in enumerate(answers, 1):
                    print(f"\n  –û—Ç–≤–µ—Ç {i}/5...")
                    response = await self.send_and_wait(conv, answer, timeout=20)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª (–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å, –ª–∏–±–æ –ø—Ä–æ–≥—Ä–µ—Å—Å, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
                    assert len(response.text) > 0, f"–ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ—Ç–≤–µ—Ç {i}"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –æ—à–∏–±–∫–∞
                    assert '–æ—à–∏–±–∫–∞' not in response.text.lower(), f"–ë–æ—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.text}"
                    assert 'error' not in response.text.lower(), f"–ë–æ—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.text}"

                    print(f"  ‚úÖ –û—Ç–≤–µ—Ç {i} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

                # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é
                print("\n[–®–ê–ì 4] –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é...")

                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                max_turns = 10
                for turn in range(max_turns):
                    try:
                        response = await conv.get_response(timeout=5)
                        print(f"  –û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response.text[:100]}...")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        if any(word in response.text.lower() for word in [
                            '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '—Å–ø–∞—Å–∏–±–æ', '–æ—Ü–µ–Ω–∫–∞', 'score', '–∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
                        ]):
                            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {response.text[:200]}...")
                            break
                    except asyncio.TimeoutError:
                        # Timeout - –≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                        print("  Timeout - –≤–æ–∑–º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                        break

                print("\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Interactive Interview V2 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                self.results['passed'] += 1

        except AssertionError as e:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
            self.results['failed'] += 1
            self.results['errors'].append(str(e))

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {e}")
            import traceback
            traceback.print_exc()
            self.results['failed'] += 1
            self.results['errors'].append(f"Exception: {e}")

    async def test_already_covered_fix(self):
        """
        –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –±–∞–≥–∞ "already covered"

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±–æ—Ç –ó–ê–î–ê–ï–¢ –≤–æ–ø—Ä–æ—Å—ã, –∞ –Ω–µ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é.
        """
        print("\n" + "=" * 80)
        print("–†–ï–ì–†–ï–°–°–ò–û–ù–ù–´–ô –¢–ï–°–¢: Already Covered Bug Fix")
        print("=" * 80)

        self.results['total_tests'] += 1

        try:
            async with self.client.conversation(self.bot_username) as conv:
                # –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é
                await self.send_and_wait(conv, '/start_interview_v2', timeout=10)

                # –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                response = await self.send_and_wait(conv, '/continue', timeout=15)

                # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–¥–∞–Ω
                assert '?' in response.text or '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ' in response.text.lower(), \
                    "–ë–æ—Ç –Ω–µ –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å! –í–æ–∑–º–æ–∂–Ω–æ –±–∞–≥ 'already covered' –≤–µ—Ä–Ω—É–ª—Å—è"

                # –û—Ç–≤–µ—Ç–∏—Ç—å
                await self.send_and_wait(conv, "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", timeout=15)

                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –±–æ—Ç –ù–ï –∑–∞–≤–µ—Ä—à–∏–ª —Å—Ä–∞–∑—É
                response = await conv.get_response(timeout=10)

                assert '–∑–∞–≤–µ—Ä—à–µ–Ω–æ' not in response.text.lower(), \
                    "–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞! –ë–∞–≥ 'already covered' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ë–∞–≥ 'already covered' –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
                self.results['passed'] += 1

        except AssertionError as e:
            print(f"\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {e}")
            self.results['failed'] += 1
            self.results['errors'].append(str(e))
        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            self.results['failed'] += 1
            self.results['errors'].append(f"Exception: {e}")

    async def run_all_tests(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("\n" + "=" * 80)
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í")
        print("=" * 80)
        print(f"–í—Ä–µ–º—è: {datetime.now()}")
        print(f"–ë–æ—Ç: {self.bot_username}")
        print("=" * 80)

        await self.start()

        try:
            # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π flow
            await self.test_interview_flow()

            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏

            # –¢–µ—Å—Ç 2: –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
            await self.test_already_covered_fix()

        finally:
            await self.stop()

        # –û—Ç—á–µ—Ç
        print("\n" + "=" * 80)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {self.results['total_tests']}")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {self.results['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {self.results['failed']}")

        if self.results['errors']:
            print("\n–û—à–∏–±–∫–∏:")
            for i, error in enumerate(self.results['errors'], 1):
                print(f"  {i}. {error}")

        print("=" * 80)

        return self.results['failed'] == 0  # True –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –í–ê–ñ–ù–û: –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ username –≤–∞—à–µ–≥–æ –±–æ—Ç–∞!
    BOT_USERNAME = os.getenv('TEST_BOT_USERNAME', '@grantservice_test_bot')

    print(f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  Interactive Interview V2 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¢–µ—Å—Ç               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–ù–∞—Å—Ç—Ä–æ–π–∫–∞:
1. –ü–æ–ª—É—á–∏—Ç–µ API credentials –Ω–∞ https://my.telegram.org/
2. –î–æ–±–∞–≤—å—Ç–µ –≤ .env:
   TELEGRAM_API_ID=your_api_id
   TELEGRAM_API_HASH=your_api_hash
   TEST_BOT_USERNAME={BOT_USERNAME}

3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç: python test_interview_auto.py

""")

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–µ—Ä
    tester = InterviewTester(bot_username=BOT_USERNAME)

    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
    success = await tester.run_all_tests()

    # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º (–¥–ª—è CI/CD)
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    asyncio.run(main())
