"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö
"""

import logging
import asyncio
from typing import Dict, Any, Optional
from datetime import datetime
from telegram import Bot
from telegram.constants import ParseMode
from telegram.error import TelegramError

logger = logging.getLogger(__name__)

# ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_GROUP_ID = -4930683040  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø—ã

class AdminNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""

    def __init__(self, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot = Bot(token=bot_token)
        self.admin_group_id = ADMIN_GROUP_ID

    async def send_new_application_notification(
        self,
        application_data: Dict[str, Any],
        user_data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

        Args:
            application_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = self._format_notification(application_data, user_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            await self.bot.send_message(
                chat_id=self.admin_group_id,
                text=message,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )

            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ {application_data.get('application_number')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤")
            return True

        except TelegramError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

    def _format_notification(
        self,
        application_data: Dict[str, Any],
        user_data: Optional[Dict[str, Any]] = None
    ) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            application_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        app_number = application_data.get('application_number', '–ù–µ —É–∫–∞–∑–∞–Ω')
        title = application_data.get('title') or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        created_at = application_data.get('created_at') or datetime.now().isoformat()

        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        grant_fund = application_data.get('grant_fund') or '–ù–µ —É–∫–∞–∑–∞–Ω'
        requested_amount = application_data.get('requested_amount') or 0
        project_duration = application_data.get('project_duration') or 0

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if user_data:
            username = user_data.get('username', '')
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            telegram_id = user_data.get('telegram_id', '')

            user_parts = []
            if first_name:
                user_parts.append(first_name)
            if last_name:
                user_parts.append(last_name)
            if username:
                user_parts.append(f"@{username}")
            if telegram_id:
                user_parts.append(f"ID: {telegram_id}")

            if user_parts:
                user_info = " ".join(user_parts)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É
        if requested_amount > 0:
            amount_str = f"{requested_amount:,.0f}".replace(',', ' ') + " ‚ÇΩ"
        else:
            amount_str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines = [
            "üéØ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ì–†–ê–ù–¢</b>",
            "",
            f"üìã <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{app_number}</code>",
            f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {title}",
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_info}",
            "",
            f"üèõ <b>–§–æ–Ω–¥:</b> {grant_fund}",
            f"üí∞ <b>–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞:</b> {amount_str}",
            f"üìÖ <b>–°—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {project_duration} –º–µ—Å.",
            "",
            f"üïê <b>–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_at}",
            "",
            "‚û°Ô∏è <b>–î–µ–π—Å—Ç–≤–∏—è:</b>",
            "‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∑–∞—è–≤–∫–∏",
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
            "‚Ä¢ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
            "",
            "#–Ω–æ–≤–∞—è_–∑–∞—è–≤–∫–∞ #–≥—Ä–∞–Ω—Ç"
        ]

        return "\n".join(message_lines)

    def send_notification_sync(
        self,
        application_data: Dict[str, Any],
        user_data: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        Args:
            application_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                loop = asyncio.get_event_loop()
            except RuntimeError:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            if loop.is_running():
                # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                task = asyncio.create_task(
                    self.send_new_application_notification(application_data, user_data)
                )
                return True  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, —Ç.–∫. –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞
            else:
                # –ï—Å–ª–∏ loop –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                return loop.run_until_complete(
                    self.send_new_application_notification(application_data, user_data)
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±–µ—Ä—Ç–∫–µ: {e}")
            return False


def get_notifier(bot_token: str = None) -> Optional[AdminNotifier]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞

    Args:
        bot_token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)

    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä AdminNotifier –∏–ª–∏ None
    """
    if not bot_token:
        import os
        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not bot_token:
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return None

    return AdminNotifier(bot_token)