#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Stage Report Generator - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –≥—Ä–∞–Ω—Ç–æ–≤–æ–≥–æ workflow

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —ç—Ç–∞–ø—ã:
- Interview (–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 24 Q&A)
- Audit (–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞)
- Research (–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - 27 queries)
- Grant (–§–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞)
- Review (–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–≤—å—é–≤–µ—Ä–∞)
"""

import logging
import io
from typing import Dict, Any, List
from datetime import datetime

logger = logging.getLogger(__name__)


class StageReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —ç—Ç–∞–ø–æ–≤ –≥—Ä–∞–Ω—Ç–æ–≤–æ–≥–æ workflow"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
        self.font_name = self._register_russian_font()

    def _register_russian_font(self) -> str:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF

        Returns:
            –ò–º—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
        """
        try:
            from reportlab.pdfbase import pdfmetrics
            from reportlab.pdfbase.ttfonts import TTFont

            # –ü–æ–ø—ã—Ç–∫–∞ 1: Windows Arial (–ª—É—á—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –Ω–∞ Windows)
            try:
                arial_path = r'C:\Windows\Fonts\arial.ttf'
                pdfmetrics.registerFont(TTFont('Arial', arial_path))
                logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç Arial (Windows)")
                return 'Arial'
            except:
                pass

            # –ü–æ–ø—ã—Ç–∫–∞ 2: DejaVu Sans
            try:
                pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
                logger.info("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —à—Ä–∏—Ñ—Ç DejaVuSans")
                return 'DejaVuSans'
            except:
                pass

            # Fallback: Helvetica (–±–µ–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            logger.warning("‚ö†Ô∏è –†—É—Å—Å–∫–∏–µ —à—Ä–∏—Ñ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Helvetica (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å)")
            return 'Helvetica'

        except ImportError:
            logger.error("‚ùå ReportLab –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return 'Helvetica'

    def _create_pdf_document(self, title: str) -> tuple:
        """
        –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏

        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞

        Returns:
            Tuple[SimpleDocTemplate, BytesIO, styles]
        """
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.platypus import SimpleDocTemplate
        from reportlab.lib.enums import TA_LEFT, TA_CENTER
        from reportlab.lib.units import cm

        # –ë—É—Ñ–µ—Ä –¥–ª—è PDF
        buffer = io.BytesIO()

        # –î–æ–∫—É–º–µ–Ω—Ç
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=2*cm,
            leftMargin=2*cm,
            topMargin=2*cm,
            bottomMargin=2*cm
        )

        # –°—Ç–∏–ª–∏
        styles = getSampleStyleSheet()

        # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontName=self.font_name,
            fontSize=18,
            alignment=TA_CENTER,
            spaceAfter=12
        )

        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontName=self.font_name,
            fontSize=14,
            spaceAfter=6
        )

        subheading_style = ParagraphStyle(
            'CustomSubHeading',
            parent=styles['Heading3'],
            fontName=self.font_name,
            fontSize=12,
            spaceAfter=4
        )

        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontName=self.font_name,
            fontSize=10,
            spaceAfter=6
        )

        bold_style = ParagraphStyle(
            'CustomBold',
            parent=styles['Normal'],
            fontName=self.font_name,
            fontSize=10,
            spaceAfter=4
        )

        small_style = ParagraphStyle(
            'CustomSmall',
            parent=styles['Normal'],
            fontName=self.font_name,
            fontSize=8,
            spaceAfter=3
        )

        custom_styles = {
            'title': title_style,
            'heading': heading_style,
            'subheading': subheading_style,
            'normal': normal_style,
            'bold': bold_style,
            'small': small_style
        }

        return doc, buffer, custom_styles

    def _add_footer(self, story: List, styles: Dict):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ç–µ—Ä –∫ PDF

        Args:
            story: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ PDF
            styles: –°–ª–æ–≤–∞—Ä—å —Å—Ç–∏–ª–µ–π
        """
        from reportlab.platypus import Paragraph, Spacer
        from reportlab.lib.units import cm

        story.append(Spacer(1, 1*cm))
        story.append(Paragraph(
            f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            styles['small']
        ))
        story.append(Paragraph(
            "GrantService - AI-Powered Grant Application System",
            styles['small']
        ))

    def generate_interview_pdf(self, anketa_data: Dict[str, Any]) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –∞–Ω–∫–µ—Ç–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (24 Q&A)

        Args:
            anketa_data: –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
                {
                    'anketa_id': str,
                    'username': str,
                    'first_name': str,
                    'last_name': str,
                    'telegram_id': int,
                    'created_at': str,
                    'questions_answers': [
                        {'question_id': int, 'question_text': str, 'answer': str},
                        ...
                    ]
                }

        Returns:
            –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from reportlab.platypus import Paragraph, Spacer, PageBreak
            from reportlab.lib.units import cm

            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc, buffer, styles = self._create_pdf_document("–ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")

            # –ö–æ–Ω—Ç–µ–Ω—Ç
            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("üìù –ê–ù–ö–ï–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø", styles['title']))
            story.append(Spacer(1, 0.5*cm))

            # Metadata
            anketa_id = anketa_data.get('anketa_id', 'N/A')
            username = anketa_data.get('username', 'Unknown')
            first_name = anketa_data.get('first_name', '')
            last_name = anketa_data.get('last_name', '')
            full_name = f"{first_name} {last_name}".strip() or "Unknown"
            telegram_id = anketa_data.get('telegram_id', 'N/A')
            created_at = anketa_data.get('created_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

            story.append(Paragraph(f"<b>ID –ê–Ω–∫–µ—Ç—ã:</b> {anketa_id}", styles['normal']))
            story.append(Paragraph(f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name} (@{username})", styles['normal']))
            story.append(Paragraph(f"<b>Telegram ID:</b> {telegram_id}", styles['normal']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:</b> {created_at}", styles['normal']))
            story.append(Spacer(1, 1*cm))

            # –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
            story.append(Paragraph("–û–¢–í–ï–¢–´ –ù–ê –í–û–ü–†–û–°–´", styles['heading']))
            story.append(Spacer(1, 0.3*cm))

            questions_answers = anketa_data.get('questions_answers', [])
            for qa in questions_answers:
                question_id = qa.get('question_id', '?')
                question_text = qa.get('question_text', '')
                answer = qa.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')

                story.append(Paragraph(f"<b>–í–æ–ø—Ä–æ—Å {question_id}:</b> {question_text}", styles['bold']))
                story.append(Paragraph(f"<b>–û—Ç–≤–µ—Ç:</b> {answer}", styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –§—É—Ç–µ—Ä
            self._add_footer(story, styles)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
            doc.build(story)

            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Interview PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Interview PDF: {e}")
            return self._generate_fallback_text(anketa_data, "–ê–ù–ö–ï–¢–ê").encode('utf-8')

    def generate_audit_pdf(self, audit_data: Dict[str, Any]) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞—É–¥–∏—Ç–∞ (–¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç)

        Args:
            audit_data: –î–∞–Ω–Ω—ã–µ –∞—É–¥–∏—Ç–∞
                {
                    'anketa_id': str,
                    'average_score': float,  # —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
                    'approval_status': str,  # approved/rejected
                    'completeness_score': int,
                    'clarity_score': int,
                    'feasibility_score': int,
                    'innovation_score': int,
                    'quality_score': int,
                    'strengths': list,  # —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
                    'improvements': list,  # —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    'completed_at': str
                }

        Returns:
            –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from reportlab.platypus import Paragraph, Spacer
            from reportlab.lib.units import cm

            doc, buffer, styles = self._create_pdf_document("–û–¢–ß–Å–¢ –ê–£–î–ò–¢–ê –ü–†–û–ï–ö–¢–ù–û–ô –ó–ê–Ø–í–ö–ò")
            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("–û—Ç—á—ë—Ç –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏", styles['title']))
            story.append(Spacer(1, 0.5*cm))

            # Metadata
            anketa_id = audit_data.get('anketa_id', 'N/A')
            avg_score = audit_data.get('average_score', 0)
            status = audit_data.get('approval_status', 'N/A')
            completed_at = audit_data.get('completed_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

            status_emoji = "‚úÖ –û–î–û–ë–†–ï–ù–û" if status == 'approved' else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"

            story.append(Paragraph(f"<b>–ê–Ω–∫–µ—Ç–∞:</b> {anketa_id}", styles['normal']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞:</b> {completed_at}", styles['normal']))
            story.append(Paragraph(f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} ({status})", styles['normal']))
            story.append(Spacer(1, 0.5*cm))

            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
            story.append(Paragraph("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", styles['heading']))
            story.append(Spacer(1, 0.3*cm))
            story.append(Paragraph(f"<b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:</b> {avg_score:.2f} / 10.00", styles['normal']))

            conclusion = "–ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–∏–ª –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏." if status == 'approved' else "–ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π."
            story.append(Paragraph(conclusion, styles['normal']))
            story.append(Spacer(1, 0.5*cm))

            # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            story.append(Paragraph("–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏", styles['heading']))
            story.append(Spacer(1, 0.3*cm))

            criteria = [
                ('–ü–æ–ª–Ω–æ—Ç–∞ –∑–∞—è–≤–∫–∏ (Completeness)', audit_data.get('completeness_score', 0), '–ó–∞—è–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.'),
                ('–Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è (Clarity)', audit_data.get('clarity_score', 0), '–¶–µ–ª–∏, –∑–∞–¥–∞—á–∏ –∏ –º–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–ª–æ–∂–µ–Ω—ã —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ.'),
                ('–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å (Feasibility)', audit_data.get('feasibility_score', 0), '–ü—Ä–æ–µ–∫—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –∏–º–µ—é—â–∏—Ö—Å—è —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Å—Ä–æ–∫–æ–≤.'),
                ('–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å (Innovation)', audit_data.get('innovation_score', 0), '–ü—Ä–æ–µ–∫—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.'),
                ('–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ (Quality)', audit_data.get('quality_score', 0), '–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞.')
            ]

            for i, (name, score, comment) in enumerate(criteria, 1):
                story.append(Paragraph(f"<b>{i}. {name}</b>", styles['subheading']))
                story.append(Paragraph(f"<b>–û—Ü–µ–Ω–∫–∞:</b> {score} / 10", styles['normal']))
                story.append(Paragraph(comment, styles['normal']))
                story.append(Spacer(1, 0.3*cm))

            # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            strengths = audit_data.get('strengths', [])
            if strengths:
                story.append(Spacer(1, 0.3*cm))
                story.append(Paragraph("–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞", styles['heading']))
                story.append(Spacer(1, 0.3*cm))

                for i, strength in enumerate(strengths, 1):
                    if isinstance(strength, dict):
                        title = strength.get('title', f'–ü—É–Ω–∫—Ç {i}')
                        text = strength.get('text', '')
                    else:
                        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
                        parts = str(strength).split('\n', 1)
                        title = parts[0] if len(parts) > 0 else f'–ü—É–Ω–∫—Ç {i}'
                        text = parts[1] if len(parts) > 1 else ''

                    story.append(Paragraph(f"<b>{i}. {title}</b>", styles['bold']))
                    if text:
                        story.append(Paragraph(f"   {text}", styles['normal']))
                    story.append(Spacer(1, 0.2*cm))

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            improvements = audit_data.get('improvements', [])
            if improvements:
                story.append(Spacer(1, 0.3*cm))
                story.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é", styles['heading']))
                story.append(Spacer(1, 0.3*cm))

                for i, improvement in enumerate(improvements, 1):
                    if isinstance(improvement, dict):
                        title = improvement.get('title', f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i}')
                        text = improvement.get('text', '')
                    else:
                        parts = str(improvement).split('\n', 1)
                        title = parts[0] if len(parts) > 0 else f'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è {i}'
                        text = parts[1] if len(parts) > 1 else ''

                    story.append(Paragraph(f"<b>{i}. {title}</b>", styles['bold']))
                    if text:
                        story.append(Paragraph(f"   {text}", styles['normal']))
                    story.append(Spacer(1, 0.2*cm))

            # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
            story.append(Spacer(1, 0.5*cm))
            story.append(Paragraph("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", styles['heading']))
            story.append(Spacer(1, 0.3*cm))

            final_status = "–û–î–û–ë–†–ï–ù" if status == 'approved' else "–¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"
            story.append(Paragraph(f"–ü—Ä–æ–µ–∫—Ç <b>{final_status}</b> –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.", styles['normal']))
            story.append(Spacer(1, 0.2*cm))

            quality_text = "–≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ" if avg_score >= 8 else "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ" if avg_score >= 6 else "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"
            story.append(Paragraph(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª <b>{avg_score:.2f}</b> —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É–µ—Ç –æ {quality_text} –∑–∞—è–≤–∫–∏.", styles['normal']))

            if status == 'approved':
                story.append(Paragraph("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—á–µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞.", styles['normal']))

            # –§—É—Ç–µ—Ä —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            story.append(Spacer(1, 1*cm))
            story.append(Paragraph(f"<b>–ê—É–¥–∏—Ç–æ—Ä:</b> GigaChat AI", styles['small']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:</b> {datetime.now().strftime('%Y-%m-%d')}", styles['small']))
            story.append(Paragraph(f"<b>ID –æ—Ç—á—ë—Ç–∞:</b> AUDIT-{audit_data.get('audit_id', 'N/A')}", styles['small']))
            story.append(Spacer(1, 0.3*cm))
            story.append(Paragraph("<i>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏—Å—Ç–µ–º–æ–π GrantService</i>", styles['small']))
            story.append(Paragraph("<i>Automated Grant Application Analysis</i>", styles['small']))

            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Audit PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Audit PDF: {e}")
            import traceback
            traceback.print_exc()
            return self._generate_fallback_text(audit_data, "–ê–£–î–ò–¢").encode('utf-8')

    def generate_research_pdf(self, research_data: Dict[str, Any]) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (27 queries)

        Args:
            research_data: –î–∞–Ω–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                {
                    'anketa_id': str,
                    'research_id': str,
                    'queries': [
                        {
                            'query_id': int,
                            'question': str,
                            'answer': str,
                            'sources': [str]
                        },
                        ...
                    ],
                    'summary': str,
                    'key_findings': str,
                    'completed_at': str
                }

        Returns:
            –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from reportlab.platypus import Paragraph, Spacer, PageBreak
            from reportlab.lib.units import cm

            doc, buffer, styles = self._create_pdf_document("–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê")
            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("üìä –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê", styles['title']))
            story.append(Spacer(1, 0.5*cm))

            # Metadata
            anketa_id = research_data.get('anketa_id', 'N/A')
            research_id = research_data.get('research_id', 'N/A')
            completed_at = research_data.get('completed_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

            story.append(Paragraph(f"<b>ID –ê–Ω–∫–µ—Ç—ã:</b> {anketa_id}", styles['normal']))
            story.append(Paragraph(f"<b>ID –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b> {research_id}", styles['normal']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {completed_at}", styles['normal']))
            story.append(Spacer(1, 1*cm))

            # Queries
            queries = research_data.get('queries', [])
            story.append(Paragraph(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø ({len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤)", styles['heading']))
            story.append(Spacer(1, 0.3*cm))

            for query in queries:
                query_id = query.get('query_id', '?')
                question = query.get('question', '')
                answer = query.get('answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
                sources = query.get('sources', [])

                # –ó–ê–ü–†–û–° - –∫—Ä—É–ø–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º, –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                story.append(Paragraph(f"–ó–ê–ü–†–û–° {query_id}", styles['subheading']))
                story.append(Spacer(1, 0.2*cm))

                # –í–æ–ø—Ä–æ—Å - –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
                story.append(Paragraph(f"<b>–í–æ–ø—Ä–æ—Å:</b> {question}", styles['bold']))
                story.append(Spacer(1, 0.3*cm))

                # –û—Ç–≤–µ—Ç - –æ–±—ã—á–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º —Å –æ—Ç—Å—Ç—É–ø–æ–º
                story.append(Paragraph(f"<b>–û—Ç–≤–µ—Ç:</b>", styles['bold']))
                story.append(Spacer(1, 0.1*cm))
                story.append(Paragraph(answer, styles['normal']))
                story.append(Spacer(1, 0.3*cm))

                # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
                if sources:
                    story.append(Paragraph(f"<b>–ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(sources)}):</b>", styles['bold']))
                    story.append(Spacer(1, 0.1*cm))
                    for i, source in enumerate(sources[:5], 1):  # –ú–∞–∫—Å 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                        story.append(Paragraph(f"{i}. {source}", styles['small']))
                    story.append(Spacer(1, 0.3*cm))

                # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                story.append(Spacer(1, 0.5*cm))

                # Page break –∫–∞–∂–¥—ã–µ 5 queries
                if query_id % 5 == 0 and query_id < len(queries):
                    story.append(PageBreak())

            # –°–≤–æ–¥–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            if research_data.get('summary'):
                story.append(PageBreak())
                story.append(Paragraph("–°–í–û–î–ù–´–ô –ê–ù–ê–õ–ò–ó", styles['heading']))
                story.append(Paragraph(research_data['summary'], styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –ö–ª—é—á–µ–≤—ã–µ –Ω–∞—Ö–æ–¥–∫–∏
            if research_data.get('key_findings'):
                story.append(Paragraph("–ö–õ–Æ–ß–ï–í–´–ï –ù–ê–•–û–î–ö–ò", styles['heading']))
                story.append(Paragraph(research_data['key_findings'], styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –§—É—Ç–µ—Ä
            self._add_footer(story, styles)

            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Research PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Research PDF: {e}")
            return self._generate_fallback_text(research_data, "–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï").encode('utf-8')

    def generate_grant_pdf(self, grant_data: Dict[str, Any]) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–æ–π

        Args:
            grant_data: –î–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç–∞
                {
                    'anketa_id': str,
                    'grant_id': str,
                    'title': str,
                    'quality_score': int,
                    'sections': [
                        {'title': str, 'content': str},
                        ...
                    ],
                    'full_text': str,
                    'completed_at': str
                }

        Returns:
            –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from reportlab.platypus import Paragraph, Spacer, PageBreak
            from reportlab.lib.units import cm

            doc, buffer, styles = self._create_pdf_document("–ì–†–ê–ù–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê")
            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("‚úçÔ∏è –ì–†–ê–ù–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê", styles['title']))
            story.append(Spacer(1, 0.5*cm))

            # Metadata
            anketa_id = grant_data.get('anketa_id', 'N/A')
            grant_id = grant_data.get('grant_id', 'N/A')
            title = grant_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            quality_score = grant_data.get('quality_score', 0)
            completed_at = grant_data.get('completed_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

            story.append(Paragraph(f"<b>ID –ê–Ω–∫–µ—Ç—ã:</b> {anketa_id}", styles['normal']))
            story.append(Paragraph(f"<b>ID –ì—Ä–∞–Ω—Ç–∞:</b> {grant_id}", styles['normal']))
            story.append(Paragraph(f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:</b> {title}", styles['heading']))
            story.append(Paragraph(f"<b>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {quality_score}/10", styles['normal']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {completed_at}", styles['normal']))
            story.append(Spacer(1, 1*cm))

            # –°–µ–∫—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞
            sections = grant_data.get('sections', [])
            if sections:
                story.append(Paragraph("–°–û–î–ï–†–ñ–ê–ù–ò–ï –ì–†–ê–ù–¢–û–í–û–ô –ó–ê–Ø–í–ö–ò", styles['heading']))
                story.append(Spacer(1, 0.5*cm))

                for section in sections:
                    section_title = section.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    section_content = section.get('content', '')

                    story.append(Paragraph(section_title, styles['subheading']))
                    story.append(Paragraph(section_content, styles['normal']))
                    story.append(Spacer(1, 0.5*cm))

            # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            if grant_data.get('full_text'):
                story.append(PageBreak())
                story.append(Paragraph("–ü–û–õ–ù–´–ô –¢–ï–ö–°–¢ –ó–ê–Ø–í–ö–ò", styles['heading']))
                story.append(Spacer(1, 0.3*cm))
                story.append(Paragraph(grant_data['full_text'], styles['normal']))

            # –§—É—Ç–µ—Ä
            self._add_footer(story, styles)

            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Grant PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Grant PDF: {e}")
            return self._generate_fallback_text(grant_data, "–ì–†–ê–ù–¢").encode('utf-8')

    def generate_review_pdf(self, review_data: Dict[str, Any]) -> bytes:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º —Ä–µ–≤—å—é–≤–µ—Ä–∞

        Args:
            review_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–≤—å—é
                {
                    'anketa_id': str,
                    'grant_id': str,
                    'quality_score': int,
                    'strengths': str,
                    'weaknesses': str,
                    'recommendations': str,
                    'verdict': str,  # 'approved' / 'needs_revision'
                    'completed_at': str
                }

        Returns:
            –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        try:
            from reportlab.platypus import Paragraph, Spacer
            from reportlab.lib.units import cm

            doc, buffer, styles = self._create_pdf_document("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–í–¨–Æ–í–ï–†–ê")
            story = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            story.append(Paragraph("üëÅÔ∏è –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –†–ï–í–¨–Æ–í–ï–†–ê", styles['title']))
            story.append(Spacer(1, 0.5*cm))

            # Metadata
            anketa_id = review_data.get('anketa_id', 'N/A')
            grant_id = review_data.get('grant_id', 'N/A')
            quality_score = review_data.get('quality_score', 0)
            verdict = review_data.get('verdict', 'unknown')
            completed_at = review_data.get('completed_at', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))

            verdict_text = "‚úÖ –û–î–û–ë–†–ï–ù" if verdict == 'approved' else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò"

            story.append(Paragraph(f"<b>ID –ê–Ω–∫–µ—Ç—ã:</b> {anketa_id}", styles['normal']))
            story.append(Paragraph(f"<b>ID –ì—Ä–∞–Ω—Ç–∞:</b> {grant_id}", styles['normal']))
            story.append(Paragraph(f"<b>–î–∞—Ç–∞ —Ä–µ–≤—å—é:</b> {completed_at}", styles['normal']))
            story.append(Paragraph(f"<b>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</b> {quality_score}/10", styles['normal']))
            story.append(Paragraph(f"<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {verdict_text}", styles['heading']))
            story.append(Spacer(1, 1*cm))

            # –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            if review_data.get('strengths'):
                story.append(Paragraph("–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´", styles['heading']))
                story.append(Paragraph(review_data['strengths'], styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
            if review_data.get('weaknesses'):
                story.append(Paragraph("–°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´", styles['heading']))
                story.append(Paragraph(review_data['weaknesses'], styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if review_data.get('recommendations'):
                story.append(Paragraph("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ", styles['heading']))
                story.append(Paragraph(review_data['recommendations'], styles['normal']))
                story.append(Spacer(1, 0.5*cm))

            # –§—É—Ç–µ—Ä
            self._add_footer(story, styles)

            doc.build(story)
            pdf_bytes = buffer.getvalue()
            buffer.close()

            logger.info(f"‚úÖ Review PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
            return pdf_bytes

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Review PDF: {e}")
            return self._generate_fallback_text(review_data, "–†–ï–í–¨–Æ").encode('utf-8')

    def _generate_fallback_text(self, data: Dict[str, Any], stage_name: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ fallback –µ—Å–ª–∏ PDF –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å

        Args:
            data: –î–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞
            stage_name: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞

        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        """
        lines = [
            f"={stage_name}=".center(80, '='),
            "",
            f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            ""
        ]

        for key, value in data.items():
            if isinstance(value, (str, int, float)):
                lines.append(f"{key}: {value}")
            elif isinstance(value, list):
                lines.append(f"{key}: {len(value)} items")
            elif isinstance(value, dict):
                lines.append(f"{key}: {len(value)} fields")

        lines.append("")
        lines.append("=" * 80)
        lines.append("GrantService - AI-Powered Grant Application System")

        return "\n".join(lines)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è PDF
def generate_stage_pdf(stage: str, data: Dict[str, Any]) -> bytes:
    """
    –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–ª—è —ç—Ç–∞–ø–∞

    Args:
        stage: –ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ ('interview', 'audit', 'research', 'grant', 'review')
        data: –î–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞

    Returns:
        –ë–∞–π—Ç—ã PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞

    Example:
        >>> pdf_bytes = generate_stage_pdf('interview', anketa_data)
        >>> pdf_bytes = generate_stage_pdf('audit', audit_data)
    """
    generator = StageReportGenerator()

    stage_methods = {
        'interview': generator.generate_interview_pdf,
        'audit': generator.generate_audit_pdf,
        'research': generator.generate_research_pdf,
        'grant': generator.generate_grant_pdf,
        'review': generator.generate_review_pdf
    }

    method = stage_methods.get(stage.lower())
    if not method:
        raise ValueError(f"Unknown stage: {stage}. Must be one of: {list(stage_methods.keys())}")

    return method(data)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StageReportGenerator")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_anketa = {
        'anketa_id': '#AN-20251012-test_user-001',
        'username': 'test_user',
        'first_name': '–ò–≤–∞–Ω',
        'last_name': '–ò–≤–∞–Ω–æ–≤',
        'telegram_id': 123456789,
        'created_at': '2025-10-12 15:30:00',
        'questions_answers': [
            {'question_id': 1, 'question_text': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?', 'answer': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'},
            {'question_id': 2, 'question_text': '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?', 'answer': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'}
        ]
    }

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
    pdf_bytes = generate_stage_pdf('interview', test_anketa)
    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π PDF —Å–æ–∑–¥–∞–Ω: {len(pdf_bytes)} –±–∞–π—Ç")
