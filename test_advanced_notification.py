#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
"""

import os
import sys
import sqlite3
import json
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), 'telegram-bot', 'utils'))

async def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""

    print("üîë –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê –ë–û–¢–ê")
    print("=" * 50)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        config_path = r"C:\SnowWhiteAI\GrantService\config\.env"
        if os.path.exists(config_path):
            print(f"üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ç–æ–∫–µ–Ω –∏–∑ {config_path}")
            with open(config_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('TELEGRAM_BOT_TOKEN='):
                        bot_token = line.split('=', 1)[1].strip().strip('"\'')
                        break

    if not bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None

    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {bot_token[:8]}...{bot_token[-10:]}")
    print(f"   –î–ª–∏–Ω–∞: {len(bot_token)}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Telegram API
    try:
        from telegram import Bot
        bot = Bot(token=bot_token)

        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ getMe...")
        me = await bot.get_me()

        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{me.username}")
        print(f"   ID: {me.id}")
        print(f"   –ò–º—è: {me.first_name}")
        print(f"   –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≥—Ä—É–ø–ø—ã: {me.can_read_all_group_messages}")

        return bot_token

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

async def check_group_access(bot_token, group_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ"""

    print(f"\nüì¢ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ì–†–£–ü–ü–ï {group_id}")
    print("=" * 50)

    try:
        from telegram import Bot
        bot = Bot(token=bot_token)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        print("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ...")
        chat = await bot.get_chat(group_id)

        print(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {chat.title}")
        print(f"   –¢–∏–ø: {chat.type}")
        print(f"   ID: {chat.id}")
        print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat.get_member_count() if hasattr(chat, 'get_member_count') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ...")
        me = await bot.get_me()
        member = await bot.get_chat_member(group_id, me.id)

        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {member.status}")
        print(f"   –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {member.can_send_messages if hasattr(member, 'can_send_messages') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {e}")
        print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print(f"   1. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
        print(f"   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –≥—Ä—É–ø–ø—ã")
        print(f"   3. –ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        return False

async def send_test_message(bot_token, group_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""

    print(f"\nüì§ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø")
    print("=" * 50)

    try:
        from telegram import Bot
        from telegram.constants import ParseMode

        bot = Bot(token=bot_token)

        test_message = f"""
üß™ <b>–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>

–≠—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π GrantService.

üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: test-engineer –∞–≥–µ–Ω—Ç–æ–º
‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

#—Ç–µ—Å—Ç #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

        print("üì® –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        message = await bot.send_message(
            chat_id=group_id,
            text=test_message.strip(),
            parse_mode=ParseMode.HTML
        )

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        print(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
        print(f"   –î–∞—Ç–∞: {message.date}")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def get_last_application():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –∏–∑ –ë–î"""

    print(f"\nüíæ –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–Ø–í–ö–ò –ò–ó –ë–î")
    print("=" * 50)

    db_path = r"C:\SnowWhiteAI\GrantService\data\grantservice.db"

    if not os.path.exists(db_path):
        print(f"‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return None

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
        cursor.execute("""
            SELECT
                application_number,
                title,
                grant_fund,
                requested_amount,
                project_duration,
                created_at,
                summary,
                content_json
            FROM grant_applications
            ORDER BY created_at DESC
            LIMIT 1
        """)

        row = cursor.fetchone()

        if not row:
            print("‚ùå –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            conn.close()
            return None

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        app_data = {
            'application_number': row[0],
            'title': row[1],
            'grant_fund': row[2] or '–ù–µ —É–∫–∞–∑–∞–Ω',
            'requested_amount': row[3] or 0,
            'project_duration': row[4] or 0,
            'created_at': row[5],
            'summary': row[6]
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON
        user_data = None
        if row[7]:  # content_json
            try:
                content = json.loads(row[7])
                if 'user_info' in content:
                    user_data = content['user_info']
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        conn.close()

        print(f"‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {app_data['application_number']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {app_data['title']}")
        print(f"   –§–æ–Ω–¥: {app_data['grant_fund']}")
        print(f"   –°—É–º–º–∞: {app_data['requested_amount']:,.0f} ‚ÇΩ")

        if user_data:
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', '')} {user_data.get('last_name', '')}")
            if user_data.get('username'):
                print(f"   Username: @{user_data['username']}")

        return {'application': app_data, 'user': user_data}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return None

async def test_notification_with_real_data(bot_token, group_id):
    """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    print(f"\nüéØ –¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 50)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = get_last_application()
    if not data:
        return False

    # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    try:
        from admin_notifications import AdminNotifier
        notifier = AdminNotifier(bot_token)

        print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–µ...")
        success = await notifier.send_new_application_notification(
            data['application'],
            data['user']
        )

        if success:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    print("üß™ –ü–†–û–î–í–ò–ù–£–¢–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)
    print(f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)

    group_id = -4930683040

    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    bot_token = await check_bot_token()
    if not bot_token:
        print("\n‚ùå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–†–í–ê–ù–û: –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º")
        return

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ
    group_access = await check_group_access(bot_token, group_id)

    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if group_access:
        test_send = await send_test_message(bot_token, group_id)
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –≥—Ä—É–ø–ø–µ")
        test_send = False

    # –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if test_send:
        real_notification = await test_notification_with_real_data(bot_token, group_id)
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
        real_notification = False

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)

    results = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞", bot_token is not None),
        ("–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ", group_access),
        ("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", test_send),
        ("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏", real_notification)
    ]

    for test_name, result in results:
        status = "‚úÖ –£—Å–ø–µ—à–Ω–æ" if result else "‚ùå –û—à–∏–±–∫–∞"
        print(f"{status.ljust(12)} {test_name}")

    success_count = sum(1 for _, result in results if result)
    total_count = len(results)

    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if success_count == total_count:
        print("üéâ –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–ê!")
    elif success_count >= 2:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    else:
        print("‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")

    print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
    if not group_access:
        print("1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É -4930683040")
        print("2. –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
        print("3. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")

    if bot_token and group_access and not test_send:
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Telegram API –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()