#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞–Ω—Ç–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
current_dir = Path(__file__).parent
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

def test_database_setup():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("[–¢–ï–°–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from data.database.models import GrantServiceDatabase
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if os.name == 'nt':  # Windows
            db_path = str(current_dir / "data" / "grantservice.db")
        else:  # Linux
            db_path = "/var/GrantService/data/grantservice.db"
        
        db = GrantServiceDatabase(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã sent_documents
        with db.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='sent_documents'")
            result = cursor.fetchone()
            
            if result:
                print("[OK] –¢–∞–±–ª–∏—Ü–∞ sent_documents —Å–æ–∑–¥–∞–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                cursor.execute("PRAGMA table_info(sent_documents)")
                columns = cursor.fetchall()
                expected_columns = ['id', 'user_id', 'grant_application_id', 'file_path', 
                                  'file_name', 'file_size', 'admin_comment', 'delivery_status']
                
                column_names = [col[1] for col in columns]
                missing_columns = [col for col in expected_columns if col not in column_names]
                
                if not missing_columns:
                    print("[OK] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    print(f"[–û–®–ò–ë–ö–ê] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
            else:
                print("[–û–®–ò–ë–ö–ê] –¢–∞–±–ª–∏—Ü–∞ sent_documents –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        users = db.get_users_for_sending()
        print(f"[OK] –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, user in enumerate(users[:3]):
            print(f"   [USER] {user.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
            if i >= 2:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 3
                break
        
        return True
        
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_telegram_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram"""
    print("\n[–¢–ï–°–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    
    try:
        web_admin_path = current_dir / "web-admin"
        if str(web_admin_path) not in sys.path:
            sys.path.insert(0, str(web_admin_path))
        from utils.telegram_sender import test_telegram_connection
        
        success, message = test_telegram_connection()
        print(f"   {message}")
        return success
        
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
        return False

def test_file_operations():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("\n[–¢–ï–°–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É ready_grants
        ready_grants_dir = current_dir / "data" / "ready_grants"
        
        if ready_grants_dir.exists():
            print("[OK] –ü–∞–ø–∫–∞ ready_grants —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
            files = list(ready_grants_dir.glob("*"))
            print(f"   [INFO] –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: {len(files)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            test_file = ready_grants_dir / "test_grant.txt"
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write("–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä–∞–Ω—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            
            print(f"[OK] –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_file.name}")
            
            return True
        else:
            print("[–û–®–ò–ë–ö–ê] –ü–∞–ø–∫–∞ ready_grants –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return False

def test_applications_export():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫"""
    print("\n[–¢–ï–°–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫...")
    
    try:
        from data.database.models import GrantServiceDatabase
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if os.name == 'nt':  # Windows
            db_path = str(current_dir / "data" / "grantservice.db")
        else:  # Linux
            db_path = "/var/GrantService/data/grantservice.db"
        
        db = GrantServiceDatabase(db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        applications = db.get_all_applications(limit=5)
        print(f"[OK] –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(applications)}")
        
        if applications:
            for app in applications[:3]:
                print(f"   [APP] {app['application_number']} - {app['title'][:50]}...")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏
            if applications:
                web_admin_path = current_dir / "web-admin"
                if str(web_admin_path) not in sys.path:
                    sys.path.insert(0, str(web_admin_path))
                from utils.telegram_sender import export_application_to_pdf
                
                first_app = applications[0]
                exported_file = export_application_to_pdf(first_app['application_number'])
                
                if exported_file and os.path.exists(exported_file):
                    print(f"[OK] –ó–∞—è–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {os.path.basename(exported_file)}")
                    return True
                else:
                    print("[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–∫–∏")
                    return False
        else:
            print("[INFO] –ó–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return True
            
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_send_document():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print("\n[–¢–ï–°–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web-admin –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        web_admin_path = current_dir / "web-admin"
        if str(web_admin_path) not in sys.path:
            sys.path.insert(0, str(web_admin_path))
        
        from utils.telegram_sender import send_document_to_telegram
        from data.database.models import GrantServiceDatabase
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if os.name == 'nt':  # Windows
            db_path = str(current_dir / "data" / "grantservice.db")
        else:  # Linux
            db_path = "/var/GrantService/data/grantservice.db"
        
        db = GrantServiceDatabase(db_path)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        users = db.get_users_for_sending()
        if not users:
            print("[SKIP] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π
        
        test_user = users[0]
        user_id = test_user['telegram_id']
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        ready_grants_dir = current_dir / "data" / "ready_grants"
        test_file = ready_grants_dir / "test_document_sending.docx"
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write("–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram Bot API")
        
        print(f"[INFO] –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ {test_file.name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        success, response = send_document_to_telegram(
            user_id=user_id,
            file_path=str(test_file),
            caption="üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ—Ç GrantService"
        )
        
        if success:
            print(f"[OK] –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
        else:
            print(f"[FAIL] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            return False
            
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–•–ê–ù–ò–ó–ú–ê –û–¢–ü–†–ê–í–ö–ò –ì–†–ê–ù–¢–û–í")
    print("=" * 60)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    print(f"[INFO] –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {os.name}")
    print(f"[INFO] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    print(f"[INFO] Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print("=" * 60)
    
    results = {
        'database': test_database_setup(),
        'telegram': test_telegram_connection(),
        'files': test_file_operations(),
        'export': test_applications_export(),
        'send_document': test_send_document()
    }
    
    print("\n" + "=" * 60)
    print("[–†–ï–ó–£–õ–¨–¢–ê–¢–´] –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    for test_name, result in results.items():
        status = "[OK] –ü–†–û–®–ï–õ" if result else "[FAIL] –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name.upper()}: {status}")
    
    print(f"\n[–ò–¢–û–ì–û] –ò–¢–û–ì–û: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed_tests == total_tests:
        print("[SUCCESS] –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    elif passed_tests >= total_tests - 1:
        print("[WARNING] –ü–æ—á—Ç–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏. –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("[WARNING] –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
    
    print("\n[HELP] –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: streamlit run web-admin/app_main.py")
    print("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 'üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞–Ω—Ç–æ–≤'")
    print("   3. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É")
    
    print("\n[DEBUG] –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print("   - –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ HTTP –æ—à–∏–±–∫—É 401, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")

if __name__ == "__main__":
    main()