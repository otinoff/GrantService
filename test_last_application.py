#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–µ –∏–∑ –ë–î
"""

import os
import sys
import sqlite3
from datetime import datetime
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), 'telegram-bot', 'utils'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'data'))

def get_last_application():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É –∏–∑ –ë–î"""
    db_path = r"C:\SnowWhiteAI\GrantService\data\grantservice.db"

    if not os.path.exists(db_path):
        print(f"‚ùå –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return None

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT
                ga.application_number,
                ga.title,
                ga.grant_fund,
                ga.requested_amount,
                ga.project_duration,
                ga.created_at,
                ga.summary,
                ga.user_id,
                ga.session_id,
                u.telegram_id,
                u.username,
                u.first_name,
                u.last_name
            FROM grant_applications ga
            LEFT JOIN users u ON ga.user_id = u.id
            ORDER BY ga.created_at DESC
            LIMIT 1
        """)

        row = cursor.fetchone()
        conn.close()

        if row:
            return {
                'application': {
                    'application_number': row[0],
                    'title': row[1],
                    'grant_fund': row[2] or '–ù–µ —É–∫–∞–∑–∞–Ω',
                    'requested_amount': row[3] or 0,
                    'project_duration': row[4] or 0,
                    'created_at': row[5],
                    'summary': row[6]
                },
                'user': {
                    'telegram_id': row[9],
                    'username': row[10],
                    'first_name': row[11],
                    'last_name': row[12]
                } if row[9] else None
            }
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ë–î: {e}")
        return None

async def send_last_application_notification():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–µ"""

    print("=" * 60)
    print("üîç –ü–û–ò–°–ö –ü–û–°–õ–ï–î–ù–ï–ô –ó–ê–Ø–í–ö–ò –í –ë–î")
    print("=" * 60)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞—è–≤–∫—É
    last_data = get_last_application()

    if not last_data:
        print("‚ùå –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False

    application = last_data['application']
    user = last_data['user']

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {application['application_number']}")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {application['title']}")
    print(f"   –§–æ–Ω–¥: {application['grant_fund']}")
    print(f"   –°—É–º–º–∞: {application['requested_amount']:,.0f} ‚ÇΩ")

    if user:
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', '')} {user.get('last_name', '')}")
        if user.get('username'):
            print(f"   Username: @{user['username']}")
    print()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not bot_token:
        config_path = r"C:\SnowWhiteAI\GrantService\config\.env"
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                for line in f:
                    if line.startswith('TELEGRAM_BOT_TOKEN='):
                        bot_token = line.split('=', 1)[1].strip().strip('"\'')
                        break

    if not bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: ...{bot_token[-10:]}")

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    from admin_notifications import AdminNotifier

    notifier = AdminNotifier(bot_token)
    print(f"üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É: {notifier.admin_group_id}")
    print()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")

    try:
        success = await notifier.send_new_application_notification(
            application,
            user
        )

        if success:
            print("‚úÖ –£–°–ü–ï–®–ù–û! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤")
            print(f"   –ó–∞—è–≤–∫–∞: {application['application_number']}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

        return success

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_notification_format():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""

    print("\n" + "=" * 60)
    print("üìù –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
    print("=" * 60)

    from admin_notifications import AdminNotifier

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_app = {
        'application_number': 'TEST-FORMAT-001',
        'title': '–ü—Ä–æ–µ–∫—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–ª–æ–¥–µ–∂–∏',
        'grant_fund': '–†–æ—Å–º–æ–ª–æ–¥–µ–∂—å.–ì—Ä–∞–Ω—Ç—ã',
        'requested_amount': 2500000,
        'project_duration': 18,
        'created_at': datetime.now().isoformat()
    }

    test_user = {
        'telegram_id': 987654321,
        'username': 'admin_test',
        'first_name': '–ê–¥–º–∏–Ω',
        'last_name': '–¢–µ—Å—Ç–æ–≤—ã–π'
    }

    # –°–æ–∑–¥–∞–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—Å —Ñ–µ–π–∫–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è —Ç–µ—Å—Ç–∞)
    notifier = AdminNotifier("fake_token_for_test")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = notifier._format_notification(test_app, test_user)

    print("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    print("-" * 40)
    print(message)
    print("-" * 40)

    return True

def check_bot_in_group():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""

    print("\n" + "=" * 60)
    print("ü§ñ –ü–†–û–í–ï–†–ö–ê –ë–û–¢–ê –í –ì–†–£–ü–ü–ï")
    print("=" * 60)

    print("–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print()
    print("1. ‚úÖ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    print("2. ‚úÖ –°–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")
    print("3. ‚úÖ ID –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: -4930683040")
    print("4. ‚úÖ –£ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
    print()
    print("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –≥—Ä—É–ø–ø—ã:")
    print("  - –î–æ–±–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É @getmyid_bot")
    print("  - –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ @JsonDumpBot")
    print()

    return True

if __name__ == "__main__":
    print("\nüöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)

    # –¢–µ—Å—Ç 1: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\n[–¢–ï–°–¢ 1/3]")
    test_format = test_notification_format()

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\n[–¢–ï–°–¢ 2/3]")
    test_setup = check_bot_in_group()

    # –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\n[–¢–ï–°–¢ 3/3]")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        loop = asyncio.get_event_loop()
        test_send = loop.run_until_complete(send_last_application_notification())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        test_send = False

    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –£—Å–ø–µ—à–Ω–æ")
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: –í—ã–ø–æ–ª–Ω–µ–Ω–æ")
    print(f"{'‚úÖ' if test_send else '‚ùå'} –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–£—Å–ø–µ—à–Ω–æ' if test_send else '–û—à–∏–±–∫–∞'}")

    if test_send:
        print("\nüéâ –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –†–ê–ë–û–¢–ê–ï–¢!")
        print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ê–°–¢–†–û–ô–ö–ê")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ config/.env")
        print("2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É -4930683040")
        print("3. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ")