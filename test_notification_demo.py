#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import sqlite3
import json
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import io
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.dirname(__file__))
sys.path.append(os.path.join(os.path.dirname(__file__), 'telegram-bot', 'utils'))

def load_correct_token():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ config/.env"""
    config_path = r"C:\SnowWhiteAI\GrantService\config\.env"
    if os.path.exists(config_path):
        with open(config_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    token = line.split('=', 1)[1].strip()
                    os.environ['TELEGRAM_BOT_TOKEN'] = token
                    return token
    return os.getenv('TELEGRAM_BOT_TOKEN')

async def test_notification_functionality():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    print("üß™ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("=" * 60)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    bot_token = load_correct_token()
    if not bot_token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    print(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {bot_token[:8]}...{bot_token[-10:]}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    try:
        from telegram import Bot
        bot = Bot(token=bot_token)
        me = await bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{me.username} (ID: {me.id})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    print("\nüíæ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó –ë–î")
    print("-" * 40)

    db_path = r"C:\SnowWhiteAI\GrantService\data\grantservice.db"

    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT
                application_number,
                title,
                grant_fund,
                requested_amount,
                project_duration,
                created_at,
                summary,
                content_json
            FROM grant_applications
            ORDER BY created_at DESC
            LIMIT 1
        """)

        row = cursor.fetchone()
        conn.close()

        if not row:
            print("‚ùå –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False

        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        app_data = {
            'application_number': row[0],
            'title': row[1] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            'grant_fund': row[2] or '–§–æ–Ω–¥ –Ω–µ —É–∫–∞–∑–∞–Ω',
            'requested_amount': row[3] or 500000,  # –î–æ–±–∞–≤–∏–º —Å—É–º–º—É –¥–ª—è –¥–µ–º–æ
            'project_duration': row[4] or 12,
            'created_at': row[5],
            'summary': row[6]
        }

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON
        user_data = None
        if row[7]:
            try:
                content = json.loads(row[7])
                if 'user_info' in content:
                    user_data = content['user_info']
            except json.JSONDecodeError:
                pass

        print(f"‚úÖ –ó–∞—è–≤–∫–∞: {app_data['application_number']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {app_data['title']}")
        print(f"   –§–æ–Ω–¥: {app_data['grant_fund']}")
        print(f"   –°—É–º–º–∞: {app_data['requested_amount']:,.0f} ‚ÇΩ")

        if user_data:
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', '')} {user_data.get('last_name', '')}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("\nüìù –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
    print("-" * 40)

    try:
        from admin_notifications import AdminNotifier
        notifier = AdminNotifier(bot_token)

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_message = notifier._format_notification(app_data, user_data)

        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print(f"   –î–ª–∏–Ω–∞: {len(formatted_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("\n" + "=" * 50)
        print("–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:")
        print("=" * 50)
        print(formatted_message)
        print("=" * 50)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞
    # (ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É /start –∏ –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –≤ –ª–æ–≥–∞—Ö)
    print("\nüì§ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
    print("-" * 40)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∏–∑–≤–µ—Å—Ç–Ω—ã–π Telegram ID —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—É–¥–µ—Ç –≥—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    demo_chat_id = user_data.get('telegram_id') if user_data else None

    if demo_chat_id:
        print(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {demo_chat_id}")

        try:
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
            demo_message = f"""
üß™ <b>–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã AdminNotifier –≤ –ø—Ä–æ–µ–∫—Ç–µ GrantService.

<i>–í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.</i>

{formatted_message}

üîß <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç: @{me.username}
‚Ä¢ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

#—Ç–µ—Å—Ç #demo #—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""

            from telegram.constants import ParseMode

            message = await bot.send_message(
                chat_id=demo_chat_id,
                text=demo_message.strip(),
                parse_mode=ParseMode.HTML
            )

            print(f"‚úÖ –î–µ–º–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            print(f"   ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.message_id}")
            print(f"   –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {demo_chat_id}")

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ: {e}")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")

    print("\nüìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("-" * 40)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≥–æ—Ç–æ–≤–∞")
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    print()
    print("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è:")
    print("   1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ @Grafana_SnowWhite_bot –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–æ–≤")
    print("   2. –î–∞—Ç—å –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ")
    print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –≥—Ä—É–ø–ø—ã: -4930683040")

    return True

if __name__ == "__main__":
    try:
        asyncio.run(test_notification_functionality())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()