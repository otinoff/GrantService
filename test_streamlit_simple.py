#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç Streamlit –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å —Ä–æ–ª—è–º–∏ Admin –∏ Editor
"""

import streamlit as st
from datetime import datetime, timedelta
import hashlib
import json
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="GrantService Admin - –¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
    page_icon="üîê",
    layout="wide"
)

# –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
class SimpleAuthManager:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.users = {
            123456789: {
                "role": "ADMIN",
                "name": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "token": self.generate_token(123456789),
                "permissions": ["all"]
            },
            987654321: {
                "role": "EDITOR", 
                "name": "–†–µ–¥–∞–∫—Ç–æ—Ä",
                "token": self.generate_token(987654321),
                "permissions": ["view", "edit", "manage_agents"]
            },
            555555555: {
                "role": "VIEWER",
                "name": "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
                "token": self.generate_token(555555555),
                "permissions": ["view"]
            }
        }
    
    def generate_token(self, user_id):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
        return hashlib.md5(f"{user_id}_token".encode()).hexdigest()[:10]
    
    def authenticate(self, user_id, token):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            uid = int(user_id)
            if uid in self.users and self.users[uid]["token"] == token:
                return self.users[uid]
        except:
            pass
        return None
    
    def has_permission(self, role, permission):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        permissions_map = {
            "ADMIN": ["all"],
            "EDITOR": ["view", "edit", "manage_agents"],
            "VIEWER": ["view"],
            "USER": ["view_limited"]
        }
        
        if role == "ADMIN":
            return True
        
        return permission in permissions_map.get(role, [])

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auth_manager = SimpleAuthManager()

def show_login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    st.title("üîê GrantService - –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
    
    st.markdown("""
    ### –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏:
    
    | –†–æ–ª—å | User ID | –¢–æ–∫–µ–Ω |
    |------|---------|-------|
    | üëë **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** | `123456789` | `e807f1fcf8` |
    | ‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–æ—Ä** | `987654321` | `b8c37e33de` |
    | üëÅÔ∏è **–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å** | `555555555` | `5d7b9adcbe` |
    """)
    
    with st.form("login_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            user_id = st.text_input("Telegram User ID", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789")
        
        with col2:
            token = st.text_input("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", type="password", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: e807f1fcf8")
        
        col1, col2, col3 = st.columns([1, 1, 3])
        with col1:
            submit = st.form_submit_button("üîì –í–æ–π—Ç–∏", type="primary", use_container_width=True)
        
        if submit:
            user = auth_manager.authenticate(user_id, token)
            if user:
                st.session_state.authenticated = True
                st.session_state.user = user
                st.session_state.user_id = int(user_id)
                st.success(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∫–∞–∫ {user['name']} ({user['role']})")
                st.rerun()
            else:
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

def show_admin_panel():
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = st.session_state.user
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
    
    with col1:
        st.title("üìä GrantService Admin Panel")
    
    with col2:
        st.metric("–†–æ–ª—å", user['role'])
    
    with col3:
        st.metric("ID", st.session_state.user_id)
    
    with col4:
        if st.button("üö™ –í—ã–π—Ç–∏", use_container_width=True):
            for key in ['authenticated', 'user', 'user_id']:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
    
    st.divider()
    
    # –í–∫–ª–∞–¥–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
    if user['role'] == "ADMIN":
        tabs = st.tabs(["üìà –î–∞—à–±–æ—Ä–¥", "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üìù –ó–∞—è–≤–∫–∏", "ü§ñ –ê–≥–µ–Ω—Ç—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    elif user['role'] == "EDITOR":
        tabs = st.tabs(["üìà –î–∞—à–±–æ—Ä–¥", "üìù –ó–∞—è–≤–∫–∏", "ü§ñ –ê–≥–µ–Ω—Ç—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    else:
        tabs = st.tabs(["üìà –î–∞—à–±–æ—Ä–¥", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    
    # –í–∫–ª–∞–¥–∫–∞ –î–∞—à–±–æ—Ä–¥ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)
    with tabs[0]:
        show_dashboard(user['role'])
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user['role'] == "ADMIN":
        with tabs[1]:
            show_users_management()
        with tabs[2]:
            show_applications(can_edit=True)
        with tabs[3]:
            show_agents_management(can_edit=True)
        with tabs[4]:
            show_settings()
        with tabs[5]:
            show_analytics()
    
    elif user['role'] == "EDITOR":
        with tabs[1]:
            show_applications(can_edit=True)
        with tabs[2]:
            show_agents_management(can_edit=True)
        with tabs[3]:
            show_analytics()
    
    else:  # VIEWER
        with tabs[1]:
            show_analytics()

def show_dashboard(role):
    """–ì–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥"""
    st.header("üìà –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", "127", "+12 –∑–∞ –Ω–µ–¥–µ–ª—é")
    
    with col2:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã–µ", "23", "+3 —Å–µ–≥–æ–¥–Ω—è")
    
    with col3:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "104", "+9 –∑–∞ –Ω–µ–¥–µ–ª—é")
    
    with col4:
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "82%", "+5%")
    
    st.divider()
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    st.subheader("üîê –í–∞—à–∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    
    if role == "ADMIN":
        st.success("""
        **–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º:**
        - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏
        - ‚úÖ –ü–æ–ª–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
        - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏
        - ‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        - ‚úÖ –î–æ—Å—Ç—É–ø –∫ –ª–æ–≥–∞–º –∏ –æ—Ç–ª–∞–¥–∫–µ
        """)
    elif role == "EDITOR":
        st.info("""
        **–ü—Ä–∞–≤–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:**
        - ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
        - ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏
        - ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        - ‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        - ‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """)
    else:
        st.warning("""
        **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø:**
        - ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞—à–±–æ—Ä–¥–∞
        - ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        - ‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        - ‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
        """)

def show_users_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    st.header("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        with st.form("add_user"):
            col1, col2 = st.columns(2)
            
            with col1:
                new_id = st.text_input("Telegram User ID")
                new_name = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            with col2:
                new_role = st.selectbox("–†–æ–ª—å", ["USER", "VIEWER", "EDITOR", "ADMIN"])
                new_token = st.text_input("–¢–æ–∫–µ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)", value="–ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", disabled=True)
            
            if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", type="primary"):
                st.success(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é {new_role}")
    
    # –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.subheader("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    users_data = {
        "ID": [123456789, 987654321, 555555555, 111111111],
        "–ò–º—è": ["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–†–µ–¥–∞–∫—Ç–æ—Ä", "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"],
        "–†–æ–ª—å": ["ADMIN", "EDITOR", "VIEWER", "USER"],
        "–°—Ç–∞—Ç—É—Å": ["üü¢ –ê–∫—Ç–∏–≤–µ–Ω", "üü¢ –ê–∫—Ç–∏–≤–µ–Ω", "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω", "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"],
        "–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥": ["–°–µ–π—á–∞—Å", "2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥", "–í—á–µ—Ä–∞", "–ù–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥"],
        "–î–µ–π—Å—Ç–≤–∏—è": ["", "–ò–∑–º–µ–Ω–∏—Ç—å", "–ò–∑–º–µ–Ω–∏—Ç—å", "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"]
    }
    
    st.dataframe(users_data, use_container_width=True, hide_index=True)

def show_applications(can_edit=False):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏"""
    st.header("üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç—ã")
    
    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.selectbox("–°—Ç–∞—Ç—É—Å", ["–í—Å–µ", "–ù–æ–≤—ã–µ", "–í —Ä–∞–±–æ—Ç–µ", "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω—ã"])
    
    with col2:
        st.selectbox("–ê–≥–µ–Ω—Ç", ["–í—Å–µ", "Interviewer", "Analyst", "Researcher", "Writer", "Auditor"])
    
    with col3:
        st.date_input("–î–∞—Ç–∞ –æ—Ç", datetime.now() - timedelta(days=30))
    
    with col4:
        st.date_input("–î–∞—Ç–∞ –¥–æ", datetime.now())
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
    applications = {
        "ID": ["#2024-001", "#2024-002", "#2024-003", "#2024-004", "#2024-005"],
        "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞": [
            "–ò–ò –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—ã",
            "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞", 
            "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ù–ö–û",
            "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
        ],
        "–°—Ç–∞—Ç—É—Å": ["üü¢ –í —Ä–∞–±–æ—Ç–µ", "üîµ –ù–æ–≤–∞—è", "üü° –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞", "üü¢ –í —Ä–∞–±–æ—Ç–µ"],
        "–¢–µ–∫—É—â–∏–π –∞–≥–µ–Ω—Ç": ["Analyst", "Interviewer", "Auditor", "Completed", "Writer"],
        "–ü—Ä–æ–≥—Ä–µ—Å—Å": ["45%", "15%", "85%", "100%", "60%"],
        "–î–µ–¥–ª–∞–π–Ω": ["15.02.2024", "20.02.2024", "10.02.2024", "01.02.2024", "25.02.2024"]
    }
    
    st.dataframe(applications, use_container_width=True, hide_index=True)
    
    if can_edit:
        col1, col2, col3 = st.columns([1, 1, 4])
        with col1:
            if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", use_container_width=True):
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        with col2:
            if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", use_container_width=True):
                st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")

def show_agents_management(can_edit=False):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –∞–≥–µ–Ω—Ç–∞–º–∏"""
    st.header("ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏")
    
    # –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
    st.subheader("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å")
    
    agents = {
        "Interviewer": {"status": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω", "tasks": 3, "cpu": "12%", "memory": "256 MB"},
        "Analyst": {"status": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω", "tasks": 5, "cpu": "45%", "memory": "512 MB"},
        "Researcher": {"status": "üü° –û–∂–∏–¥–∞–Ω–∏–µ", "tasks": 0, "cpu": "2%", "memory": "128 MB"},
        "Writer": {"status": "üü¢ –ê–∫—Ç–∏–≤–µ–Ω", "tasks": 2, "cpu": "23%", "memory": "384 MB"},
        "Auditor": {"status": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "tasks": 0, "cpu": "0%", "memory": "64 MB"}
    }
    
    cols = st.columns(5)
    for i, (agent_name, info) in enumerate(agents.items()):
        with cols[i]:
            st.metric(
                agent_name,
                info["status"],
                f"{info['tasks']} –∑–∞–¥–∞—á"
            )
            st.caption(f"CPU: {info['cpu']}")
            st.caption(f"RAM: {info['memory']}")
    
    if can_edit:
        st.divider()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        selected_agent = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", list(agents.keys()))
        
        with st.expander(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ {selected_agent}"):
            st.text_area(
                "System Prompt",
                value=f"–í—ã - {selected_agent} –≤ —Å–∏—Å—Ç–µ–º–µ GrantService...",
                height=150
            )
            
            col1, col2 = st.columns(2)
            with col1:
                st.slider("Temperature", 0.0, 1.0, 0.7)
                st.slider("Max Tokens", 100, 4000, 2000)
            
            with col2:
                st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat", "GPT-4", "Claude"])
                st.number_input("Timeout (—Å–µ–∫)", 30, 300, 60)
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
                st.success(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {selected_agent} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

def show_settings():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    st.header("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    tab1, tab2, tab3, tab4 = st.tabs(["üß† LLM", "üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "üìú –õ–æ–≥–∏"])
    
    with tab1:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
        col1, col2 = st.columns(2)
        
        with col1:
            provider = st.selectbox("–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä", ["GigaChat", "OpenAI", "Anthropic", "Local Ollama"])
            api_key = st.text_input("API –∫–ª—é—á", type="password", value="*" * 30)
            
        with col2:
            st.slider("Default Temperature", 0.0, 1.0, 0.7)
            st.slider("Default Max Tokens", 100, 8000, 2000)
            st.selectbox("Fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä", ["–ù–µ—Ç", "Ollama", "GigaChat"])
        
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM", type="primary"):
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    with tab2:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.text_input("–ü—É—Ç—å –∫ –ë–î", value="/var/GrantService/data/database.db")
            st.number_input("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–º–∏–Ω)", 1, 60, 5)
        
        with col2:
            st.text_input("–ü—É—Ç—å –∫ –±—ç–∫–∞–ø–∞–º", value="/var/GrantService/backups/")
            st.number_input("–•—Ä–∞–Ω–∏—Ç—å –±—ç–∫–∞–ø–æ–≤", 1, 30, 7)
        
        if st.button("–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å–µ–π—á–∞—Å", type="secondary"):
            st.success("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    with tab3:
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        st.checkbox("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è", value=False)
        st.slider("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (—á–∞—Å—ã)", 1, 168, 24)
        st.number_input("–ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞", 1, 10, 3)
        st.checkbox("–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è", value=True)
        
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", type="primary"):
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    with tab4:
        st.subheader("–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
        
        log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", ["DEBUG", "INFO", "WARNING", "ERROR"])
        
        st.code("""
[2024-01-17 10:30:15] INFO: System started successfully
[2024-01-17 10:30:20] INFO: Database connection established
[2024-01-17 10:30:25] INFO: Admin user authenticated (ID: 123456789)
[2024-01-17 10:31:00] INFO: Agent Interviewer started processing task #2024-001
[2024-01-17 10:32:15] WARNING: High memory usage detected for Agent Analyst (512MB)
[2024-01-17 10:35:00] INFO: Application #2024-003 moved to Auditor
[2024-01-17 10:36:42] ERROR: Failed to connect to GigaChat API (timeout)
[2024-01-17 10:36:43] INFO: Fallback to Ollama activated
[2024-01-17 10:40:00] INFO: Backup created successfully
[2024-01-17 10:45:12] DEBUG: Cache cleared for expired tokens
        """, language="log")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
                st.rerun()
        with col2:
            if st.button("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏"):
                st.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å –ª–æ–≥–∞–º–∏...")

def show_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º)"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º
    st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", "3.5 –¥–Ω—è", "-0.5 –¥–Ω—è")
    
    with col2:
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "82%", "+5%")
    
    with col3:
        st.metric("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", "18%", "-5%")
    
    # –ì—Ä–∞—Ñ–∏–∫ (–∏–º–∏—Ç–∞—Ü–∏—è)
    st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü")
    chart_data = {
        "–î–∞—Ç–∞": ["01.01", "05.01", "10.01", "15.01", "20.01", "25.01", "30.01"],
        "–ù–æ–≤—ã–µ": [5, 8, 12, 6, 9, 11, 7],
        "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ": [3, 6, 10, 8, 7, 9, 5],
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ": [1, 2, 1, 0, 2, 1, 2]
    }
    st.line_chart(data=chart_data, x="–î–∞—Ç–∞", y=["–ù–æ–≤—ã–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", "–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ"])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º
    st.subheader("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
    
    agents_stats = {
        "–ê–≥–µ–Ω—Ç": ["Interviewer", "Analyst", "Researcher", "Writer", "Auditor"],
        "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á": [145, 132, 98, 127, 89],
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)": [15, 25, 45, 35, 20],
        "–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)": [95, 88, 92, 85, 97]
    }
    
    st.dataframe(agents_stats, use_container_width=True, hide_index=True)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
    if not st.session_state.authenticated:
        show_login_page()
    else:
        show_admin_panel()
    
    # –§—É—Ç–µ—Ä
    st.divider()
    with st.container():
        col1, col2, col3 = st.columns([2, 1, 2])
        with col2:
            st.caption("üîê GrantService v1.0")
            st.caption("–¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è")

if __name__ == "__main__":
    main()