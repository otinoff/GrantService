#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Writer Agent —Å Claude Opus 4
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–¥–µ–ª –≥—Ä–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from shared.llm.unified_llm_client import UnifiedLLMClient
from shared.llm.config import AGENT_CONFIGS


async def test_writer_agent():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Writer Agent —Å Claude Opus"""

    print("=" * 80)
    print("üß™ –¢–µ—Å—Ç Writer Agent —Å Claude Opus 4")
    print("=" * 80)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Writer Agent
    writer_config = AGENT_CONFIGS["writer"]
    print(f"\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Writer Agent:")
    print(f"   Provider: {writer_config['provider']}")
    print(f"   Model: {writer_config['model']}")
    print(f"   Temperature: {writer_config['temperature']}")
    print(f"   Max Tokens: {writer_config['max_tokens']}")

    # –°–æ–∑–¥–∞–µ–º LLM –∫–ª–∏–µ–Ω—Ç
    print(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedLLMClient...")

    async with UnifiedLLMClient(
        provider=writer_config["provider"],
        model=writer_config["model"],
        temperature=writer_config["temperature"]
    ) as client:

        # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∞ "–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"
        prompt = """You are a professional grant writer. Write a brief "Relevance" section for a grant application about youth mental health support program.

Requirements:
- Write in formal academic English
- 2-3 paragraphs
- Focus on current challenges in youth mental health
- Explain why this program is timely and important

Return ONLY the text of the "Relevance" section."""

        print(f"\nüìù –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ ({len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print("\n‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Claude Opus 4...")

        start_time = datetime.now()

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            result = await client.generate_async(
                prompt=prompt,
                max_tokens=500
            )

            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()

            print(f"\n‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.2f} —Å–µ–∫")
            print("\n" + "=" * 80)
            print("üìÑ –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print("=" * 80)
            print(result)
            print("=" * 80)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.2f} —Å–µ–∫")
            print(f"   –°–∫–æ—Ä–æ—Å—Ç—å: {len(result)/duration:.0f} —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫")

            # Debug log
            debug_log = client.get_debug_log()
            if debug_log:
                print(f"\nüîç Debug Log:")
                for log_entry in debug_log:
                    print(f"   {log_entry}")

            return True

        except Exception as e:
            print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
            print(f"\nüîç Debug Log:")
            for log_entry in client.get_debug_log():
                print(f"   {log_entry}")
            return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = await test_writer_agent()

    print("\n" + "=" * 80)
    if success:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
        print("\nWriter Agent —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Claude Opus 4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–æ–≤!")
        sys.exit(0)
    else:
        print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        print("\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:")
        print("1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude Code API –Ω–∞ 178.236.17.55:8000")
        print("2. –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞")
        print("3. –õ–æ–≥–∏ telegram-bot —Å–µ—Ä–≤–∏—Å–∞")
        sys.exit(1)
    print("=" * 80)


if __name__ == "__main__":
    asyncio.run(main())
