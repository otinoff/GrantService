#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Writer Agent —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import asyncio
import logging
import sys

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%H:%M:%S'
)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.append('/var/GrantService')
sys.path.append('/var/GrantService/agents')

from agents.writer_agent import WriterAgent
from data.database import GrantServiceDatabase

async def test_writer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Writer Agent"""
    print("="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WRITER AGENT –° GIGACHAT")
    print("="*60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db = GrantServiceDatabase()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        
        print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ Writer Agent...")
        agent = WriterAgent(db=db, llm_provider="gigachat")
        print("‚úÖ Writer Agent —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = {
            'user_answers': {
                'project_name': '–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –≥—Ä–∞–Ω—Ç–æ–≤',
                'description': '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫',
                'problem': '–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫',
                'solution': '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò',
                'budget': '500,000 —Ä—É–±–ª–µ–π',
                'timeline': '6 –º–µ—Å—è—Ü–µ–≤',
                'team': '–ö–æ–º–∞–Ω–¥–∞ –∏–∑ 3 —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤',
                'impact': '–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ 40%'
            },
            'research_data': {
                'relevant_grants': ['–§–æ–Ω–¥ —Ä–∞–∑–≤–∏—Ç–∏—è –ò–¢', '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–æ–Ω–¥'],
                'success_factors': ['–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å', '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å']
            },
            'selected_grant': {
                'name': '–§–æ–Ω–¥ —Ä–∞–∑–≤–∏—Ç–∏—è –ò–¢',
                'amount': '500,000 —Ä—É–±–ª–µ–π',
                'deadline': '2025-12-31'
            }
        }
        
        print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏...")
        print("üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(f"   - –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {test_data['user_answers']['project_name']}")
        print(f"   - –ë—é–¥–∂–µ—Ç: {test_data['user_answers']['budget']}")
        print(f"   - –°—Ä–æ–∫: {test_data['user_answers']['timeline']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        result = await agent.write_application_async(test_data)
        
        print("\n4Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print(f"   - –°—Ç–∞—Ç—É—Å: {result.get('status')}")
        print(f"   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', 'Unknown')}")
        print(f"   - –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result.get('quality_score', 0)}/10")
        
        if result.get('status') == 'success':
            print("\nüìÑ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–Ø–í–ö–ê:")
            print("-"*50)
            application = result.get('application', {})
            for section, content in application.items():
                print(f"\n### {section.upper()}")
                print(content[:200] + "..." if len(str(content)) > 200 else content)
        else:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {result.get('message')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º debug log –æ—Ç UnifiedLLMClient
        if hasattr(agent, 'llm_client') and hasattr(agent.llm_client, 'get_debug_log'):
            debug_log = agent.llm_client.get_debug_log()
            if debug_log:
                print("\n5Ô∏è‚É£ DEBUG LOG –æ—Ç UnifiedLLMClient:")
                print("-"*50)
                for log_entry in debug_log:
                    print(log_entry)
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ Writer Agent...")
    asyncio.run(test_writer())
