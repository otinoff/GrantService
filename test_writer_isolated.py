#!/usr/bin/env python3
"""Isolated test for WriterAgentV2 - check if it generates proper grant text"""
import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent))

from agents.writer_agent_v2 import WriterAgentV2
from data.database.models import GrantServiceDatabase

async def test_writer():
    print("="*60)
    print("ISOLATED TEST: WriterAgentV2")
    print("="*60)
    
    # Initialize
    db = GrantServiceDatabase()
    writer = WriterAgentV2(db=db, llm_provider="gigachat")
    
    # Test data
    input_data = {
        "anketa_id": "#AN-TEST-001",
        "user_answers": {
            "problem": "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º",
            "solution": "–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –æ–±—É—á–µ–Ω–∏—è",
            "goals": "–¶–µ–ª–∏: –ø–æ–≤—ã—à–µ–Ω–∏–µ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å–µ–ª–µ–Ω–∏—è",
            "activities": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ–º–∏–Ω–∞—Ä–æ–≤ –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–≤",
            "results": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –æ–±—É—á–µ–Ω–æ 100 —á–µ–ª–æ–≤–µ–∫",
            "budget_breakdown": "–ë—é–¥–∂–µ—Ç: 500 000 —Ä—É–±–ª–µ–π"
        },
        "selected_grant": {
            "name": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π –≥—Ä–∞–Ω—Ç",
            "organization": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤"
        }
    }
    
    print(f"\n‚úÖ Input data prepared")
    print(f"   Problem: {input_data['user_answers']['problem'][:50]}...")
    
    # Test grant generation
    print(f"\nüîß Calling writer.write_application_async()...")
    
    try:
        result = await writer.write_application_async(input_data)
        
        print(f"\n‚úÖ Writer returned result!")
        print(f"   Type: {type(result)}")
        print(f"   Keys: {result.keys() if isinstance(result, dict) else 'Not a dict'}")
        
        # Check grant text
        if 'grant_text' in result:
            grant_text = result['grant_text']
            print(f"\nüìä Grant Text Stats:")
            print(f"   Length: {len(grant_text)} characters")
            print(f"   Lines: {grant_text.count(chr(10))}")
            print(f"   First 200 chars:\n   {grant_text[:200]}")
            
            if len(grant_text) < 1000:
                print(f"\n‚ùå FAIL: Grant too short ({len(grant_text)} < 1000)")
                return False
            else:
                print(f"\n‚úÖ SUCCESS: Grant looks good!")
                return True
        else:
            print(f"\n‚ùå FAIL: No 'grant_text' in result")
            return False
            
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_writer())
    sys.exit(0 if success else 1)
