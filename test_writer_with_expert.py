#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç Writer Agent V2 —Å Expert Agent
–ü–µ—Ä–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –§–ü–ì —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≥—Ä–∞–Ω—Ç–∞
"""
import sys
sys.path.append('C:\\SnowWhiteAI\\GrantService')

import asyncio
import logging
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã
from data.database.models import Database
from expert_agent import ExpertAgent
from agents.writer_agent_v2 import WriterAgentV2

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—Ä–æ–µ–∫—Ç –ø—Ä–æ —Å—Ç—Ä–µ–ª—å–±—É –∏–∑ –ª—É–∫–∞)
TEST_PROJECT_DATA = {
    "project_name": "–®–∫–æ–ª–∞ –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞ '–ú–µ—Ç–∫–∏–π –ª—É—á–Ω–∏–∫'",
    "description": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–æ–ª—ã –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏ —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞",
    "problem": "–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –≤ –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è",
    "solution": "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —à–∫–æ–ª—ã —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏",
    "target_group": "–î–µ—Ç–∏ –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ 10-18 –ª–µ—Ç, –ø—Ä–æ—è–≤–ª—è—é—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞",
    "geography": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å - –ö—É–∑–±–∞—Å—Å, –≥–æ—Ä–æ–¥ –ö–µ–º–µ—Ä–æ–≤–æ",
    "budget": "2000000",
    "timeline": "12"
}

async def test_expert_agent_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Expert Agent"""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Expert Agent")
    print("="*70 + "\n")

    try:
        expert = ExpertAgent()
        logger.info("‚úÖ Expert Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        results = expert.query_knowledge(
            question="–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞—è–≤–∫–µ –Ω–∞ –≥—Ä–∞–Ω—Ç –§–ü–ì?",
            fund="fpg",
            top_k=3
        )

        print(f"\nüìö –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤:")
        for i, result in enumerate(results, 1):
            print(f"\n{i}. {result['section_name']}")
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result['relevance_score']:.3f}")
            print(f"   –û—Ç—Ä—ã–≤–æ–∫: {result['content'][:150]}...")

        expert.close()
        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Expert Agent: {e}")
        return False


async def test_writer_with_expert():
    """–¢–µ—Å—Ç Writer Agent V2 —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Expert Agent"""
    print("\n" + "="*70)
    print("–¢–ï–°–¢ 2: Writer Agent V2 + Expert Agent")
    print("="*70 + "\n")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        db = Database()
        writer = WriterAgentV2(db, llm_provider="gigachat")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChat –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Expert Agent –ø–æ–¥–∫–ª—é—á–µ–Ω
        if writer.expert_agent:
            logger.info("‚úÖ Writer Agent: Expert Agent –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è Writer Agent: Expert Agent –ù–ï –ø–æ–¥–∫–ª—é—á–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
        anketa_id = f"#AN-{datetime.now().strftime('%Y%m%d')}-test_expert-001"

        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ research_results –¥–ª—è —Ç–µ—Å—Ç–∞
        research_results = {
            "metadata": {
                "sources_count": 27,
                "quotes_count": 45,
                "created_at": datetime.now().isoformat()
            },
            "block1_problem": {
                "summary": "–í –ö–µ–º–µ—Ä–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∞–∑–≤–∏—Ç–∏—è –æ–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞. –ü–æ –¥–∞–Ω–Ω—ã–º –ú–∏–Ω—Å–ø–æ—Ä—Ç–∞, —Ä–µ–≥–∏–æ–Ω –∑–∞–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ 45 –º–µ—Å—Ç–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —à–∫–æ–ª –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞.",
                "key_facts": [
                    {
                        "fact": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –∑–∞–Ω–∏–º–∞–µ—Ç 45 –º–µ—Å—Ç–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –°–®–û–†",
                        "source": "–ú–∏–Ω—Å–ø–æ—Ä—Ç –†–§, 2024",
                        "date": "2024-03-15"
                    },
                    {
                        "fact": "–í —Ä–µ–≥–∏–æ–Ω–µ —Ç–æ–ª—å–∫–æ 2 —Ç—Ä–µ–Ω–µ—Ä–∞ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞",
                        "source": "–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–ø–æ—Ä—Ç–∞ –ö—É–∑–±–∞—Å—Å–∞",
                        "date": "2024-02-20"
                    }
                ],
                "programs": [
                    {
                        "name": "–°–ø–æ—Ä—Ç - –Ω–æ—Ä–º–∞ –∂–∏–∑–Ω–∏ (–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç)",
                        "kpi": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ–ª–∏ –≥—Ä–∞–∂–¥–∞–Ω, –∑–∞–Ω–∏–º–∞—é—â–∏—Ö—Å—è —Å–ø–æ—Ä—Ç–æ–º –¥–æ 70% –∫ 2030 –≥–æ–¥—É"
                    }
                ],
                "success_cases": [
                    {
                        "name": "–®–∫–æ–ª–∞ –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ",
                        "result": "–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ 5 –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–ø–æ—Ä—Ç–∞ –∑–∞ 3 –≥–æ–¥–∞ —Ä–∞–±–æ—Ç—ã"
                    }
                ]
            },
            "block2_geography": {
                "summary": "–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å –∏–º–µ–µ—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏–µ 2.6 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫, –∏–∑ –Ω–∏—Ö 12% - –¥–µ—Ç–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ (10-18 –ª–µ—Ç). –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å—Ç—Ä–µ–ª—å–±—ã –∏–∑ –ª—É–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.",
                "key_facts": [
                    {
                        "fact": "–ù–∞—Å–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞: 2.6 –º–ª–Ω —á–µ–ª–æ–≤–µ–∫",
                        "source": "–†–æ—Å—Å—Ç–∞—Ç, 2024"
                    },
                    {
                        "fact": "–î–µ—Ç–∏ 10-18 –ª–µ—Ç: 312,000 —á–µ–ª–æ–≤–µ–∫ (12%)",
                        "source": "–†–æ—Å—Å—Ç–∞—Ç, 2024"
                    }
                ]
            },
            "block3_goals": {
                "summary": "–°–æ–∑–¥–∞–Ω–∏–µ —à–∫–æ–ª—ã –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å 50 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞ 3 –≥–æ–¥–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.",
                "main_goal_variants": [
                    {
                        "text": "–°–æ–∑–¥–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–æ–ª—É –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–∞ –ø–æ —Å—Ç—Ä–µ–ª—å–±–µ –∏–∑ –ª—É–∫–∞, –æ–±–µ—Å–ø–µ—á–∏–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É 50 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Ä–∞–∑—Ä—è–¥–Ω–∏–∫–æ–≤ –∑–∞ 12 –º–µ—Å—è—Ü–µ–≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
                    }
                ]
            }
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º research_results –≤ –ë–î (–¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
        with db.connect() as conn:
            cursor = conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
            cursor.execute("SELECT id FROM researcher_research WHERE anketa_id = %s", (anketa_id,))
            existing = cursor.fetchone()

            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º
                cursor.execute("""
                    UPDATE researcher_research
                    SET research_results = %s, status = 'completed', completed_at = NOW()
                    WHERE anketa_id = %s
                """, (json.dumps(research_results), anketa_id))
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã research_results –¥–ª—è {anketa_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("""
                    INSERT INTO researcher_research
                    (anketa_id, research_id, research_results, status, completed_at)
                    VALUES (%s, %s, %s, 'completed', NOW())
                """, (anketa_id, f"{anketa_id}-RS-001", json.dumps(research_results)))
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã research_results –¥–ª—è {anketa_id}")

            conn.commit()

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Writer
        input_data = {
            "anketa_id": anketa_id,
            "user_answers": TEST_PROJECT_DATA,
            "selected_grant": {
                "name": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤",
                "max_amount": 3000000
            },
            "requested_amount": 2000000.0,
            "project_duration": 12,
            "admin_user": "test_expert_integration"
        }

        print("\nüìù –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞—è–≤–∫–∏ –Ω–∞ –≥—Ä–∞–Ω—Ç...")
        print(f"   –ü—Ä–æ–µ–∫—Ç: {TEST_PROJECT_DATA['project_name'][:50]}...")
        print(f"   Anketa ID: {anketa_id}")
        print(f"   LLM Provider: GigaChat (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)")
        print(f"   Expert Agent: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if writer.expert_agent else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
        print()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
        result = await writer.write_application_async(input_data)

        print("\n" + "="*70)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò:")
        print("="*70 + "\n")

        if result['status'] == 'success':
            application = result['application']

            print(f"‚úÖ –°—Ç–∞—Ç—É—Å: –£–°–ü–ï–®–ù–û")
            print(f"üìÑ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {result.get('application_number', 'N/A')}")
            print(f"‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {result['quality_score']}/10")
            print(f"üìä –¶–∏—Ç–∞—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(result['citations'])}")
            print(f"üìà –¢–∞–±–ª–∏—Ü –≤–∫–ª—é—á–µ–Ω–æ: {len(result['tables'])}")
            print(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º: {len(application.get('full_text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"ü§ñ Provider: {result.get('provider_used', 'N/A')}")
            print()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–æ–≤
            print("üìã –§–†–ê–ì–ú–ï–ù–¢–´ –ó–ê–Ø–í–ö–ò:\n")

            print("1Ô∏è‚É£ –ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(application.get('section_1_brief', '')[:300] + "...\n")

            print("2Ô∏è‚É£ –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(application.get('section_2_problem', '')[:500] + "...\n")

            print("3Ô∏è‚É£ –¶–ï–õ–¨ –ü–†–û–ï–ö–¢–ê:")
            print(application.get('section_3_goal', '')[:200] + "\n")

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if result['suggestions']:
                print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                for suggestion in result['suggestions']:
                    print(f"   ‚Ä¢ {suggestion}")
                print()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            output_file = f"C:\\SnowWhiteAI\\GrantService\\grant_{anketa_id.replace('#', '').replace('-', '_')}.md"
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(application.get('full_text', ''))

            print(f"üíæ –ü–æ–ª–Ω–∞—è –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file}")

            writer.expert_agent.close()
            return True

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('message', 'Unknown error')}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n" + "üéØ" * 35)
    print("  –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò: Writer Agent V2 + Expert Agent")
    print("  –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –§–ü–ì")
    print("üéØ" * 35 + "\n")

    # –¢–µ—Å—Ç 1: Expert Agent
    test1_success = await test_expert_agent_connection()

    if not test1_success:
        print("\n‚ùå –¢–µ—Å—Ç Expert Agent –ø—Ä–æ–≤–∞–ª–µ–Ω. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        return

    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
    await asyncio.sleep(2)

    # –¢–µ—Å—Ç 2: Writer + Expert
    test2_success = await test_writer_with_expert()

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*70)
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*70)
    print(f"–¢–µ—Å—Ç 1 (Expert Agent):        {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"–¢–µ—Å—Ç 2 (Writer + Expert):     {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_success else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print("="*70 + "\n")

    if test1_success and test2_success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")


if __name__ == "__main__":
    asyncio.run(main())
