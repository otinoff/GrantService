#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Engineer Agent - MVP Version
Autonomous E2E test runner –¥–ª—è GrantService
"""

import sys
import time
import json
import argparse
from datetime import datetime
from pathlib import Path
from typing import Dict, List

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import production E2E modules
from tests.e2e.modules.interviewer_module import InterviewerModule
from tests.e2e.modules.auditor_module import AuditorModule
from tests.e2e.modules.researcher_module import ResearcherModule
from tests.e2e.modules.writer_module import WriterModule
from tests.e2e.modules.reviewer_module import ReviewerModule


class TestEngineerAgent:
    """
    MVP Test Engineer Agent

    –ó–∞–ø—É—Å–∫–∞–µ—Ç E2E —Ç–µ—Å—Ç—ã –Ω–∞ production DB –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ñ–∏–∫—Å—ã
    """

    def __init__(self, artifacts_dir: str = None):
        """
        Initialize agent

        Args:
            artifacts_dir: Path to save artifacts (default: iterations/Iteration_66_E2E_Test_Suite/artifacts)
        """
        if artifacts_dir is None:
            artifacts_dir = project_root / "iterations" / "Iteration_66_E2E_Test_Suite" / "artifacts"

        self.artifacts_dir = Path(artifacts_dir)
        self.artifacts_dir.mkdir(parents=True, exist_ok=True)

        print(f"Test Engineer Agent initialized")
        print(f"Artifacts dir: {self.artifacts_dir}")

        # Initialize E2E modules (they connect to PRODUCTION DB!)
        self.interviewer = InterviewerModule()
        self.auditor = AuditorModule()
        self.researcher = ResearcherModule()
        self.writer = WriterModule()
        self.reviewer = ReviewerModule()

    def run_e2e_test(self, use_mock_websearch: bool = True) -> Dict:
        """
        Run full E2E test

        Args:
            use_mock_websearch: True to avoid ERROR #16 (WebSearch timeout)

        Returns:
            Test results dict
        """

        test_id = datetime.now().strftime("%Y%m%d_%H%M%S")

        print("\n" + "="*80)
        print(f"ü§ñ TEST ENGINEER AGENT - E2E TEST RUN")
        print("="*80)
        print(f"Test ID: {test_id}")
        print(f"Mock WebSearch: {use_mock_websearch}")
        print(f"Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*80)

        results = {
            "test_id": test_id,
            "timestamp": datetime.now().isoformat(),
            "mock_websearch": use_mock_websearch,
            "steps": {},
            "validations": {},
            "errors": []
        }

        try:
            # STEP 1: Interview
            print(f"\n{'‚îÄ'*80}")
            print(f"[STEP 1/5] Interview - InteractiveInterviewerAgent")
            print(f"{'‚îÄ'*80}")

            start = time.time()

            # Use test user from production DB range
            test_user_id = 999999001  # First test user

            # Simple test answers (embedded in code for MVP)
            test_answers = self._generate_simple_test_answers()

            interview_result = self.interviewer.run_interview(
                test_user_id=test_user_id,
                user_answers=test_answers
            )

            duration = time.time() - start

            results["steps"]["interview"] = {
                "status": "success",
                "anketa_id": interview_result["anketa_id"],
                "questions_count": interview_result["questions_count"],
                "anketa_length": interview_result["anketa_length"],
                "duration_sec": round(duration, 2)
            }

            print(f"‚úÖ Interview complete:")
            print(f"   - Anketa ID: {interview_result['anketa_id']}")
            print(f"   - Questions: {interview_result['questions_count']}")
            print(f"   - Length: {interview_result['anketa_length']} chars")
            print(f"   - Duration: {duration:.1f}s")

            anketa_id = interview_result["anketa_id"]

            # STEP 2: Audit
            print(f"\n{'‚îÄ'*80}")
            print(f"[STEP 2/5] Audit - AuditorAgent")
            print(f"{'‚îÄ'*80}")

            start = time.time()

            audit_result = self.auditor.run_audit(anketa_id)

            duration = time.time() - start

            results["steps"]["audit"] = {
                "status": "success",
                "session_id": audit_result["session_id"],
                "score": audit_result["score"],
                "duration_sec": round(duration, 2)
            }

            print(f"‚úÖ Audit complete:")
            print(f"   - Session ID: {audit_result['session_id']}")
            print(f"   - Score: {audit_result['score']}/10")
            print(f"   - Duration: {duration:.1f}s")

            # STEP 3: Research
            print(f"\n{'‚îÄ'*80}")
            print(f"[STEP 3/5] Research - ResearcherAgentV2")
            print(f"{'‚îÄ'*80}")

            start = time.time()

            research_result = self.researcher.run_research(
                anketa_id,
                use_mock_websearch=use_mock_websearch
            )

            duration = time.time() - start

            results["steps"]["research"] = {
                "status": "success",
                "research_id": research_result["research_id"],
                "sources_count": research_result["sources_count"],
                "duration_sec": round(duration, 2)
            }

            print(f"‚úÖ Research complete:")
            print(f"   - Research ID: {research_result['research_id']}")
            print(f"   - Sources: {research_result['sources_count']}")
            print(f"   - Duration: {duration:.1f}s")

            # STEP 4: Writer (FIX #15 validation!)
            print(f"\n{'‚îÄ'*80}")
            print(f"[STEP 4/5] Writer - WriterAgentV2 (FIX #15 CHECK!)")
            print(f"{'‚îÄ'*80}")

            start = time.time()

            writer_result = self.writer.run_writer(
                anketa_id,
                research_id=research_result["research_id"]
            )

            duration = time.time() - start

            results["steps"]["writer"] = {
                "status": "success",
                "grant_id": writer_result["grant_id"],
                "grant_length": writer_result["grant_length"],
                "duration_sec": round(duration, 2)
            }

            print(f"‚úÖ Writer complete:")
            print(f"   - Grant ID: {writer_result['grant_id']}")
            print(f"   - Length: {writer_result['grant_length']} chars")
            print(f"   - Duration: {duration:.1f}s")

            # FIX #15 Validation
            print(f"\n{'‚îÄ'*40}")
            print(f"üîç FIX #15 VALIDATION")
            print(f"{'‚îÄ'*40}")

            grant_length = writer_result["grant_length"]

            if grant_length >= 15000:
                print(f"‚úÖ FIX #15 VERIFIED: grant_length = {grant_length} >= 15000")
                results["validations"]["fix_15"] = {
                    "status": "passed",
                    "grant_length": grant_length,
                    "threshold": 15000,
                    "message": "WriterModule correctly extracts full_text from application_content"
                }
            else:
                print(f"‚ùå FIX #15 FAILED: grant_length = {grant_length} < 15000")
                results["validations"]["fix_15"] = {
                    "status": "failed",
                    "grant_length": grant_length,
                    "threshold": 15000,
                    "message": "WriterModule still returning dict length instead of text length"
                }
                raise AssertionError(f"FIX #15 validation failed: {grant_length} < 15000")

            # STEP 5: Review
            print(f"\n{'‚îÄ'*80}")
            print(f"[STEP 5/5] Review - ReviewerAgent")
            print(f"{'‚îÄ'*80}")

            start = time.time()

            review_result = self.reviewer.run_review(writer_result["grant_id"])

            duration = time.time() - start

            results["steps"]["review"] = {
                "status": "success",
                "review_score": review_result["review_score"],
                "duration_sec": round(duration, 2)
            }

            print(f"‚úÖ Review complete:")
            print(f"   - Score: {review_result['review_score']}/10")
            print(f"   - Duration: {duration:.1f}s")

            # Save artifacts
            self._save_artifacts(test_id, results)

            # Final report
            print(f"\n{'='*80}")
            print(f"‚úÖ E2E TEST PASSED: {test_id}")
            print(f"{'='*80}")
            print(f"Summary:")
            print(f"  - All 5 steps: SUCCESS")
            print(f"  - FIX #15: VERIFIED ‚úÖ")
            print(f"  - Artifacts saved: {self.artifacts_dir / f'run_{test_id}'}")
            print("="*80)

            return results

        except Exception as e:
            error_msg = str(e)
            print(f"\n{'='*80}")
            print(f"‚ùå E2E TEST FAILED: {error_msg}")
            print(f"{'='*80}")

            results["errors"].append({
                "message": error_msg,
                "timestamp": datetime.now().isoformat()
            })

            self._save_artifacts(test_id, results)

            raise

    def _generate_simple_test_answers(self) -> Dict[str, str]:
        """
        Generate simple test answers (embedded for MVP)

        –í Phase 2 –∑–∞–º–µ–Ω–∏–º –Ω–∞ GigaChat User Simulator
        """
        return {
            "answer_1": """
–ù–∞—à–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è "–¢–æ—á–∫–∞ —Ä–æ—Å—Ç–∞" - —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ù–ö–û, —Ä–∞–±–æ—Ç–∞—é—â–∞—è —Å –ø–æ–¥—Ä–æ—Å—Ç–∫–∞–º–∏
–∏–∑ –º–∞–ª–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–Ω—ã—Ö —Å–µ–º–µ–π. –ú—ã –ø–æ–º–æ–≥–∞–µ–º –∏–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤
—Å—Ñ–µ—Ä–µ IT –∏ –¥–∏–∑–∞–π–Ω–∞, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é –∫–∞—Ä—å–µ—Ä—É.
            """.strip(),

            "answer_2": """
–ú—ã —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É –Ω–µ—Ä–∞–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º—É IT-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é. –ú–Ω–æ–≥–∏–µ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–µ
–ø–æ–¥—Ä–æ—Å—Ç–∫–∏ –∏–∑ –Ω–µ–±–æ–ª—å—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ –º–æ–≥—É—Ç –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–ª–∞—Ç–Ω—ã–µ –∫—É—Ä—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é,
–≤–µ–±-–¥–∏–∑–∞–π–Ω—É –∏ –¥—Ä—É–≥–∏–º –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º.
            """.strip(),

            "answer_3": """
–ù–∞—à–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –ø–æ–¥—Ä–æ—Å—Ç–∫–∏ 14-18 –ª–µ—Ç –∏–∑ —Å–µ–º–µ–π —Å –Ω–∏–∑–∫–∏–º –¥–æ—Ö–æ–¥–æ–º, –ø—Ä–æ–∂–∏–≤–∞—é—â–∏–µ
–≤ –≥–æ—Ä–æ–¥–∞—Ö —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –¥–æ 100 —Ç—ã—Å—è—á —á–µ–ª–æ–≤–µ–∫. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–∫—É—Å - –º–æ–ª–æ–¥—ã–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ
–ø—Ä–æ—è–≤–ª—è—é—Ç –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º, –Ω–æ –Ω–µ –∏–º–µ—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.
            """.strip(),

            "answer_4": """
–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–Ω–ª–∞–π–Ω-–æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ —Å—Ç—É–¥–µ–Ω—Ç—ã –∏–∑—É—á–∞—é—Ç Python,
–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω. –ö–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –º–µ–Ω—Ç–æ—Ä - –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π
—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–∑ IT-–∫–æ–º–ø–∞–Ω–∏–π. –¢–∞–∫–∂–µ –ø—Ä–æ–≤–æ–¥–∏–º —Ö–∞–∫–∞—Ç–æ–Ω—ã –∏ –ø–æ–º–æ–≥–∞–µ–º —Å —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º.
            """.strip(),

            "answer_5": """
–ó–∞ –¥–≤–∞ –≥–æ–¥–∞ —Ä–∞–±–æ—Ç—ã –º—ã –æ–±—É—á–∏–ª–∏ 150 –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤, –∏–∑ –Ω–∏—Ö 45 —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—Ç—É –∏–ª–∏
—Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ IT-–∫–æ–º–ø–∞–Ω–∏—è—Ö. –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 40 000 —Ä—É–±–ª–µ–π, —á—Ç–æ
–≤ 2 —Ä–∞–∑–∞ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –¥–æ—Ö–æ–¥–∞ –∏—Ö —Å–µ–º–µ–π.
            """.strip(),

            "answer_6": """
–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –≥–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2 500 000 —Ä—É–±–ª–µ–π. –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤:
- –ó–∞—Ä–ø–ª–∞—Ç–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤: 1 200 000 —Ä—É–±
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ (–Ω–æ—É—Ç–±—É–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤): 800 000 —Ä—É–±
- –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—É—á–∞—é—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: 300 000 —Ä—É–±
- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 200 000 —Ä—É–±
            """.strip(),

            "answer_7": """
–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 8 —á–µ–ª–æ–≤–µ–∫:
- –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞ (–æ–ø—ã—Ç –≤ –ù–ö–û - 5 –ª–µ—Ç)
- 3 –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è IT-–¥–∏—Å—Ü–∏–ø–ª–∏–Ω (–ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏)
- 2 –∫–∞—Ä—å–µ—Ä–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞
- 1 SMM-–º–µ–Ω–µ–¥–∂–µ—Ä
- 1 –±—É—Ö–≥–∞–ª—Ç–µ—Ä
–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ.
            """.strip(),

            "answer_8": """
–£ –Ω–∞—Å –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ —Å 5 IT-–∫–æ–º–ø–∞–Ω–∏—è–º–∏ —Ä–µ–≥–∏–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –º–µ–Ω—Ç–æ—Ä–æ–≤ –∏
—Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤. –¢–∞–∫–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å –º–µ—Å—Ç–Ω–æ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π - –æ–Ω–∏
–≤—ã–¥–µ–ª–∏–ª–∏ –Ω–∞–º –ø–æ–º–µ—â–µ–Ω–∏–µ –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ.
            """.strip(),

            "answer_9": """
–ò–∑–º–µ—Ä–∏–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å–ø–µ—Ö–∞:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 100 —á–µ–ª–æ–≤–µ–∫ –≤ –≥–æ–¥
- –î–æ–ª—è –∑–∞–≤–µ—Ä—à–∏–≤—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º—É: –Ω–µ –º–µ–Ω–µ–µ 80%
- –î–æ–ª—è —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤: –Ω–µ –º–µ–Ω–µ–µ 30%
- –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: –Ω–µ –º–µ–Ω–µ–µ 4.5/5
            """.strip(),

            "answer_10": """
–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç–æ–π—á–∏–≤–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã IT-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ.
–ú—ã –ø–ª–∞–Ω–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ 10 –≥–æ—Ä–æ–¥–æ–≤ –∑–∞ 3 –≥–æ–¥–∞ –∏ –æ–±—É—á–∏—Ç—å –±–æ–ª–µ–µ 1000 –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤.
–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –±–µ–∑—Ä–∞–±–æ—Ç–∏—Ü—ã —Å—Ä–µ–¥–∏ –º–æ–ª–æ–¥–µ–∂–∏ –∏ –ø—Ä–∏–≤–ª–µ—á—å IT-–∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–µ–≥–∏–æ–Ω—ã.
            """.strip()
        }

    def _save_artifacts(self, test_id: str, results: Dict):
        """Save test artifacts"""

        run_dir = self.artifacts_dir / f"run_{test_id}"
        run_dir.mkdir(parents=True, exist_ok=True)

        # Save results.json
        results_file = run_dir / "results.json"
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)

        # Save markdown report
        report_file = run_dir / "REPORT.md"
        self._generate_markdown_report(report_file, results)

        print(f"\nüìÅ Artifacts saved:")
        print(f"   - {results_file}")
        print(f"   - {report_file}")

    def _generate_markdown_report(self, report_file: Path, results: Dict):
        """Generate markdown report"""

        report = f"""# Test Engineer Agent - E2E Test Report

**Test ID:** {results['test_id']}
**Timestamp:** {results['timestamp']}
**Mock WebSearch:** {results['mock_websearch']}

---

## üìä Summary

| Step | Status | Duration |
|------|--------|----------|
"""

        # Add step results
        for step_name, step_data in results["steps"].items():
            status_emoji = "‚úÖ" if step_data["status"] == "success" else "‚ùå"
            report += f"| {step_name.title()} | {status_emoji} {step_data['status']} | {step_data['duration_sec']}s |\n"

        report += "\n---\n\n## üîç Validations\n\n"

        # Add validations
        if results["validations"]:
            for validation_name, validation_data in results["validations"].items():
                status_emoji = "‚úÖ" if validation_data["status"] == "passed" else "‚ùå"
                report += f"### {validation_name.upper()}\n\n"
                report += f"**Status:** {status_emoji} {validation_data['status'].upper()}\n\n"
                report += f"**Message:** {validation_data['message']}\n\n"

                if "grant_length" in validation_data:
                    report += f"**Grant Length:** {validation_data['grant_length']} chars\n"
                    report += f"**Threshold:** {validation_data['threshold']} chars\n\n"

        # Add errors if any
        if results["errors"]:
            report += "\n---\n\n## ‚ùå Errors\n\n"
            for error in results["errors"]:
                report += f"- **{error['timestamp']}:** {error['message']}\n"

        report += "\n---\n\n## üéØ Conclusion\n\n"

        if not results["errors"] and results["validations"].get("fix_15", {}).get("status") == "passed":
            report += "‚úÖ **E2E TEST PASSED**\n\n"
            report += "All 5 steps completed successfully. FIX #15 verified - WriterModule correctly extracts full_text.\n"
        else:
            report += "‚ùå **E2E TEST FAILED**\n\n"
            report += "Test encountered errors. Review error details above.\n"

        report += f"\n---\n\n**Generated by:** Test Engineer Agent (MVP)\n"
        test_id = results['test_id']
        run_dir = self.artifacts_dir / f'run_{test_id}'
        report += f"**Artifacts:** `{run_dir}`\n"

        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)


def main():
    """Main CLI entry point"""

    parser = argparse.ArgumentParser(
        description="Test Engineer Agent - Autonomous E2E tester"
    )

    parser.add_argument(
        "--mock-websearch",
        action="store_true",
        default=True,
        help="Use mock WebSearch to avoid ERROR #16 (default: True)"
    )

    parser.add_argument(
        "--real-websearch",
        action="store_true",
        help="Use real WebSearch (may timeout with ERROR #16)"
    )

    parser.add_argument(
        "--artifacts-dir",
        type=str,
        help="Custom artifacts directory"
    )

    args = parser.parse_args()

    # Determine websearch mode
    use_mock_websearch = not args.real_websearch

    # Initialize agent
    agent = TestEngineerAgent(artifacts_dir=args.artifacts_dir)

    # Run E2E test
    try:
        results = agent.run_e2e_test(use_mock_websearch=use_mock_websearch)

        # Exit with success
        sys.exit(0)

    except Exception as e:
        print(f"\n‚ùå Test Engineer Agent failed: {e}")
        import traceback
        traceback.print_exc()

        # Exit with error
        sys.exit(1)


if __name__ == "__main__":
    main()
