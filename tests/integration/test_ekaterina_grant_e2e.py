#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
E2E Test –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞—è–≤–∫–∏: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∞–∫—Å–∏–º–æ–≤–∞ - –ò–∫–æ–Ω–æ—Å—Ç–∞—Å –∏ –§–µ—Å—Ç–∏–≤–∞–ª—å
==========================================================================

–†–µ–∞–ª—å–Ω–∞—è –∑–∞—è–≤–∫–∞:
Email: maximova@lepta.info
Phone: +79112383420
Name: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞ –ú–∞–∫—Å–∏–º–æ–≤–∞
–ü—Ä–æ–µ–∫—Ç: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–≥–æ –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞ –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏

–≠—Ç–∞–ø—ã:
1. üìù –ò–Ω—Ç–µ—Ä–≤—å—é - —Å–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
2. ‚úÖ –ê—É–¥–∏—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
3. üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ - –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö
4. üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏
5. ‚úçÔ∏è –ù–∞–ø–∏—Å–∞–Ω–∏–µ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞–Ω—Ç

Author: Claude Code
Created: 2025-10-08
"""

import sys
import io
from pathlib import Path
from datetime import datetime
import json

# Fix UTF-8 encoding for console output on Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Add project root to path
project_root = Path(__file__).parent.parent.parent
web_admin_path = str(project_root / "web-admin")
if web_admin_path not in sys.path:
    sys.path.insert(0, web_admin_path)

sys.path.insert(0, str(project_root / "telegram-bot"))
sys.path.insert(0, str(project_root))

# Import postgres helper
try:
    from web_admin.utils.postgres_helper import execute_query, execute_update
except ImportError:
    # Try alternative import
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "postgres_helper",
        project_root / "web-admin" / "utils" / "postgres_helper.py"
    )
    postgres_helper = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(postgres_helper)
    execute_query = postgres_helper.execute_query
    execute_update = postgres_helper.execute_update

# Import database models for nomenclature
sys.path.insert(0, str(project_root / "data" / "database"))
from models import GrantServiceDatabase

# Create db instance for nomenclature generation
db = GrantServiceDatabase()

# Import agents
try:
    from agents.interviewer_agent import StructuredInterviewerAgent
    from agents.auditor_agent import AuditorAgent
    from agents.researcher_agent import ResearcherAgent
    from agents.planner_agent import PlannerAgent
    from agents.writer_agent import WriterAgent
except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    print("‚ö†Ô∏è –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î")


# =============================================================================
# –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –ò–ó –ó–ê–Ø–í–ö–ò
# =============================================================================

EKATERINA_DATA = {
    "email": "maximova@lepta.info",
    "phone": "+79112383420",
    "telegram_id": 791123834200,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∞
    "first_name": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
    "last_name": "–ú–∞–∫—Å–∏–º–æ–≤–∞",
    "username": "ekaterina_maximova",

    # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    "project_summary": """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–≥–æ –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏
–≤ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–º –≤–æ–ª–æ–≥–æ–¥—Å–∫–æ–º —Å–µ–ª–µ –ê–Ω–∏—Å–∏–º–æ–≤–æ, –≥–¥–µ –≤–æ–∑—Ä–æ–∂–¥–∞–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π —Ö—Ä–∞–º.""",

    "previous_experience": "–í—ã–∏–≥—Ä–∞–Ω–æ –ø–∞—Ä—É –≥—Ä–∞–Ω—Ç–æ–≤ —Ä–∞–Ω–µ–µ, –Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏",
    "deadline": "15 –æ–∫—Ç—è–±—Ä—è 2025",
    "grant_fund": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ (–§–ü–ì)",
}

# –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤—å—é (24 –≤–æ–ø—Ä–æ—Å–∞)
EKATERINA_INTERVIEW = {
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    "project_name": "–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ —Ö—Ä–∞–º–∞ –∏ –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –≤ —Å–µ–ª–µ –ê–Ω–∏—Å–∏–º–æ–≤–æ",
    "project_goal": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–∏–Ω–Ω–æ–≥–æ –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–º–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–π —á–µ—Ä–µ–∑ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏",
    "target_audience": "–ñ–∏—Ç–µ–ª–∏ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏, –ø–∞–ª–æ–º–Ω–∏–∫–∏, –ª—é–±–∏—Ç–µ–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π, —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏",

    # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
    "project_description": """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏:
1. –†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–∏–Ω–Ω–æ–≥–æ –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ —Ö—Ä–∞–º–∞ –≤ —Å–µ–ª–µ –ê–Ω–∏—Å–∏–º–æ–≤–æ
2. –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏ —Å –Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –ø—Ä–æ–º—ã—Å–ª–∞–º–∏, –∫–æ–Ω—Ü–µ—Ä—Ç–∞–º–∏, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏
3. –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –ø–∞–ª–æ–º–Ω–∏–∫–æ–≤ –∫ –∫—É–ª—å—Ç—É—Ä–Ω–æ–º—É –Ω–∞—Å–ª–µ–¥–∏—é —Ä–µ–≥–∏–æ–Ω–∞""",

    "problem_statement": """–°–µ–ª–æ –ê–Ω–∏—Å–∏–º–æ–≤–æ - –º–µ—Å—Ç–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–º —Ö—Ä–∞–º–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞–∑—Ä—É—à–∞–µ—Ç—Å—è.
–ò–∫–æ–Ω–æ—Å—Ç–∞—Å —Ç—Ä–µ–±—É–µ—Ç —Å—Ä–æ—á–Ω–æ–π —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏. –ú–æ–ª–æ–¥–µ–∂—å —É–µ–∑–∂–∞–µ—Ç –∏–∑ —Å–µ–ª–∞, —Ç—Ä–∞–¥–∏—Ü–∏–∏ –∑–∞–±—ã–≤–∞—é—Ç—Å—è.
–ù—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ö—Ä–∞–º –∏ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—Ä–æ–¥–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ —á–µ—Ä–µ–∑ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å.""",

    "solution_approach": """1. –ü—Ä–∏–≤–ª–µ—á—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞
2. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏ —Å —É—á–∞—Å—Ç–∏–µ–º —Ñ–æ–ª—å–∫–ª–æ—Ä–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–æ–≤
3. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –ø–æ –Ω–∞—Ä–æ–¥–Ω—ã–º –ø—Ä–æ–º—ã—Å–ª–∞–º
4. –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ —Ö—Ä–∞–º–µ –∏ —Å–µ–ª–µ""",

    # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏ –ø–ª–∞–Ω
    "methodology": """–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –º–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞:
- –†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è: –∫–æ–Ω—Å–µ—Ä–≤–∞—Ü–∏—è, –æ—á–∏—Å—Ç–∫–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –§–µ—Å—Ç–∏–≤–∞–ª—å: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–ª–æ—â–∞–¥–∫–∏, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
- –ü—Ä–æ—Å–≤–µ—â–µ–Ω–∏–µ: —ç–∫—Å–∫—É—Ä—Å–∏–∏, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–Ω–∏–µ –º—É–∑–µ–π–Ω–æ–π —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏""",

    "implementation_plan": """–ú–µ—Å—è—Ü 1-3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏, –¥–æ–≥–æ–≤–æ—Ä—ã —Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä–∞–º–∏, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞ –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞
–ú–µ—Å—è—Ü 4-7: –†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
–ú–µ—Å—è—Ü 8-9: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
–ú–µ—Å—è—Ü 10: –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –ò–≤–∞–Ω—ã –≤—Å–µ—è –†—É—Å–∏
–ú–µ—Å—è—Ü 11-12: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç, –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞""",

    "project_duration": "12 –º–µ—Å—è—Ü–µ–≤",

    # –ë—é–¥–∂–µ—Ç –∏ —Ä–µ—Å—É—Ä—Å—ã
    "budget": "1500000",
    "budget_breakdown": """–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è –∏–∫–æ–Ω–æ—Å—Ç–∞—Å–∞: 900 000 —Ä—É–±
–§–µ—Å—Ç–∏–≤–∞–ª—å (–ø–ª–æ—â–∞–¥–∫–∞, –∑–≤—É–∫, —Å–≤–µ—Ç, —É—á–∞—Å—Ç–Ω–∏–∫–∏): 400 000 —Ä—É–±
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (–±—É–∫–ª–µ—Ç—ã, —Å–∞–π—Ç): 100 000 —Ä—É–±
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: 100 000 —Ä—É–±""",

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç
    "expected_results": """1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∫–æ–Ω–æ—Å—Ç–∞—Å - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è
2. –ü—Ä–æ–≤–µ–¥–µ–Ω —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —Å 500+ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
3. –ü—Ä–∏–≤–ª–µ—á–µ–Ω–æ 1000+ —Ç—É—Ä–∏—Å—Ç–æ–≤ –∏ –ø–∞–ª–æ–º–Ω–∏–∫–æ–≤
4. –°–æ–∑–¥–∞–Ω—ã 5 —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç –¥–ª—è –º–µ—Å—Ç–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π
5. –í–æ–∑—Ä–æ–∂–¥–µ–Ω –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—Ä–æ–¥–Ω—ã–º —Ç—Ä–∞–¥–∏—Ü–∏—è–º""",

    "social_impact": """- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è –¥–ª—è –±—É–¥—É—â–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏–π
- –†–∞–∑–≤–∏—Ç–∏–µ —Ç—É—Ä–∏–∑–º–∞ –≤ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–∏—Ö –º–µ—Å—Ç, –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–æ–ª–æ–¥–µ–∂–∏ –≤ —Å–µ–ª–µ
- –£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –æ–±—â–∏–π –ø—Ä–æ–µ–∫—Ç
- –ü–æ–ø—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ –ø—Ä–æ–º—ã—Å–ª–æ–≤""",

    "innovation": """–°–æ—á–µ—Ç–∞–Ω–∏–µ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ —Å –∫—É–ª—å—Ç—É—Ä–Ω—ã–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ–º - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏—é —Å–µ–ª–∞.
–§–µ—Å—Ç–∏–≤–∞–ª—å —Å—Ç–∞–Ω–µ—Ç –µ–∂–µ–≥–æ–¥–Ω—ã–º, –ø—Ä–∏–≤–ª–µ–∫–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ö—Ä–∞–º—É –∏ —Å–æ–∑–¥–∞–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å.""",

    # –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å
    "sustainability": """–ü–æ—Å–ª–µ –ø—Ä–æ–µ–∫—Ç–∞:
- –§–µ—Å—Ç–∏–≤–∞–ª—å —Å—Ç–∞–Ω–µ—Ç –µ–∂–µ–≥–æ–¥–Ω—ã–º, –ø—Ä–∏–≤–ª–µ–∫–∞—è —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –∏ —Ç—É—Ä–∏—Å—Ç–æ–≤
- –•—Ä–∞–º –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏—Ö–æ–¥–æ–º –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏
- –¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç –¥–æ—Ö–æ–¥ –º–µ—Å—Ç–Ω—ã–º –∂–∏—Ç–µ–ª—è–º
- –°–æ–∑–¥–∞–Ω—ã –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å –º—É–∑–µ—è–º–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏""",

    # –ö–æ–º–∞–Ω–¥–∞ –∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã
    "team_experience": """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞:
- –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∞–∫—Å–∏–º–æ–≤–∞ - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä, –æ–ø—ã—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ 2+ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ù–∞—Å—Ç–æ—è—Ç–µ–ª—å —Ö—Ä–∞–º–∞ - –¥—É—Ö–æ–≤–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
- –†–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä—ã –∏–∑ –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–≥–æ –º—É–∑–µ—è-–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫–∞
- –§–æ–ª—å–∫–ª–æ—Ä–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤—ã —Ä–µ–≥–∏–æ–Ω–∞""",

    "partnerships": """- –í–æ–ª–æ–≥–æ–¥—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –º—É–∑–µ–π-–∑–∞–ø–æ–≤–µ–¥–Ω–∏–∫
- –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∫—É–ª—å—Ç—É—Ä—ã –í–æ–ª–æ–≥–æ–¥—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
- –ú–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è
- –§–æ–ª—å–∫–ª–æ—Ä–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤—ã '–†—É—Å—Å–∫–∞—è –¥—É—à–∞', '–ö—É–ø–∞–≤—É—à–∫–∞'
- –¶–µ–Ω—Ç—Ä –Ω–∞—Ä–æ–¥–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã""",

    "organization_name": "–ê–ù–û '–ù–∞—Å–ª–µ–¥–∏–µ –í–æ–ª–æ–≥–æ–¥—á–∏–Ω—ã'",
    "organization_experience": "5 –ª–µ—Ç —Ä–∞–±–æ—Ç—ã –ø–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ 2 –≥—Ä–∞–Ω—Ç–∞ –§–ü–ì",

    # –†–∏—Å–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    "risk_management": """–†–∏—Å–∫: –ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ. –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –†–µ–∑–µ—Ä–≤–Ω–∞—è –¥–∞—Ç–∞, –∫—Ä—ã—Ç—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
–†–∏—Å–∫: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ç–æ—Ä–æ–≤. –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –î–æ–≥–æ–≤–æ—Ä—ã –∑–∞—Ä–∞–Ω–µ–µ, –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
–†–∏—Å–∫: –ù–∏–∑–∫–∞—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å. –ú–∏—Ç–∏–≥–∞—Ü–∏—è: –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞, –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å —Ç—É—Ä–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞–º–∏""",

    "monitoring_evaluation": """–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã:
- –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ (—Ñ–æ—Ç–æ, –∞–∫—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç)
- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è (—Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∞)
- –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å (—Å—á–µ—Ç—á–∏–∫–∏, –æ–ø—Ä–æ—Å—ã)
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç (—Å–º–µ—Ç–∞ vs —Ñ–∞–∫—Ç)""",

    # –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    "geography": "—Å–µ–ª–æ –ê–Ω–∏—Å–∏–º–æ–≤–æ, –í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
    "grant_fund": "–§–æ–Ω–¥ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤",
    "grant_type": "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏",
    "previous_grants": "–î–∞ - 2 –≥—Ä–∞–Ω—Ç–∞ –§–ü–ì –Ω–∞ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
}


# =============================================================================
# E2E TEST
# =============================================================================

class TestEkaterinaGrantE2E:
    """E2E —Ç–µ—Å—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã –ú–∞–∫—Å–∏–º–æ–≤–æ–π"""

    def test_full_grant_lifecycle(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –ò–Ω—Ç–µ—Ä–≤—å—é ‚Üí –ê—É–¥–∏—Ç ‚Üí –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Üí –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Üí –ì—Ä–∞–Ω—Ç"""

        print("\n" + "="*80)
        print("üéØ E2E –¢–ï–°–¢: –ó–∞—è–≤–∫–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã –ú–∞–∫—Å–∏–º–æ–≤–æ–π - –ò–∫–æ–Ω–æ—Å—Ç–∞—Å –∏ –§–µ—Å—Ç–∏–≤–∞–ª—å")
        print("="*80 + "\n")

        # Step 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏
        print("üìã –®–ê–ì 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏–∏")
        print("-"*80)

        user_id, session_id, anketa_id = self._create_user_and_session()

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID {user_id}")
        print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ID {session_id}")
        print(f"‚úÖ Anketa ID: {anketa_id}\n")

        # Step 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é
        print("üìù –®–ê–ì 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é (24 –≤–æ–ø—Ä–æ—Å–∞)")
        print("-"*80)

        self._fill_interview_answers(session_id)

        print(f"‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: 24/24 –æ—Ç–≤–µ—Ç–æ–≤")
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: interview_data —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ sessions\n")

        # Step 3: –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
        print("‚úÖ –®–ê–ì 3: –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞")
        print("-"*80)

        audit_result = self._run_audit(session_id, anketa_id)

        print(f"‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {audit_result['approval_status']}")
        print(f"   –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {audit_result['quality_score']}/10")
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: auditor_results —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n")

        # Step 4: –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        print("üîç –®–ê–ì 4: –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        print("-"*80)

        research_result = self._run_research(anketa_id, user_id)

        print(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {research_result['status']}")
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: researcher_research —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n")

        # Step 5: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("üìã –®–ê–ì 5: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        print("-"*80)

        plan_result = self._run_planner(session_id, anketa_id, audit_result['id'])

        print(f"‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {plan_result['sections_count']} —Å–µ–∫—Ü–∏–π")
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: planner_structures —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n")

        # Step 6: –ó–∞–ø—É—Å–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞
        print("‚úçÔ∏è –®–ê–ì 6: –ó–∞–ø—É—Å–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞–Ω—Ç–∞")
        print("-"*80)

        grant_result = self._run_writer(anketa_id, research_result['research_id'], user_id)

        print(f"‚úÖ –ì—Ä–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω: {grant_result['grant_id']}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {grant_result['grant_title']}")
        print(f"   –û–±—ä—ë–º: {len(grant_result['grant_content'])} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç: grants —Å–æ—Ö—Ä–∞–Ω—ë–Ω\n")

        # Step 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        print("üì¶ –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤")
        print("-"*80)

        artifacts = self._verify_all_artifacts(anketa_id)

        print(f"‚úÖ –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        for stage, artifact in artifacts.items():
            print(f"   {stage}: {artifact['status']}")
        print()

        # Final summary
        print("="*80)
        print("üéâ E2E –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù!")
        print("="*80)
        print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {EKATERINA_DATA['first_name']} {EKATERINA_DATA['last_name']}")
        print(f"   Email: {EKATERINA_DATA['email']}")
        print(f"   Anketa ID: {anketa_id}")
        print(f"   Grant ID: {grant_result['grant_id']}")
        print(f"   –°—Ç–∞—Ç—É—Å: ‚úÖ –í–°–ï –≠–¢–ê–ü–´ –ü–†–û–ô–î–ï–ù–´")
        print(f"   –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: 5/5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print()

        # Return summary for inspection
        return {
            'user_id': user_id,
            'session_id': session_id,
            'anketa_id': anketa_id,
            'grant_id': grant_result['grant_id'],
            'artifacts': artifacts
        }

    # =========================================================================
    # HELPER METHODS
    # =========================================================================

    def _create_user_and_session(self):
        """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–µ—Å—Å–∏—é"""

        # Create user (users table doesn't have email/phone columns)
        user_query = """
        INSERT INTO users (telegram_id, username, first_name, last_name)
        VALUES (%s, %s, %s, %s)
        ON CONFLICT (telegram_id) DO UPDATE SET
            username = EXCLUDED.username,
            first_name = EXCLUDED.first_name,
            last_name = EXCLUDED.last_name
        RETURNING id
        """

        user_result = execute_query(
            user_query,
            (
                EKATERINA_DATA['telegram_id'],
                EKATERINA_DATA['username'],
                EKATERINA_DATA['first_name'],
                EKATERINA_DATA['last_name']
            )
        )

        user_id = user_result[0]['id']

        # Create session with CORRECT nomenclature
        # Use db.generate_anketa_id() for proper format: #AN-YYYYMMDD-ekaterina_maksimova-001
        anketa_id = db.generate_anketa_id(EKATERINA_DATA)

        session_query = """
        INSERT INTO sessions (telegram_id, anketa_id, current_step, total_questions,
                              questions_answered, progress_percentage, current_stage, agents_passed)
        VALUES (%s, %s, 'completed', 24, 24, 100, 'completed', ARRAY['interviewer'])
        RETURNING id
        """

        session_result = execute_query(
            session_query,
            (EKATERINA_DATA['telegram_id'], anketa_id)
        )

        session_id = session_result[0]['id']

        return user_id, session_id, anketa_id

    def _fill_interview_answers(self, session_id):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é"""

        # Update session with interview_data (simplified approach)
        update_query = """
        UPDATE sessions
        SET interview_data = %s::jsonb,
            answers_data = %s::jsonb
        WHERE id = %s
        """

        execute_update(
            update_query,
            (
                json.dumps(EKATERINA_INTERVIEW, ensure_ascii=False),
                json.dumps(EKATERINA_INTERVIEW, ensure_ascii=False),
                session_id
            )
        )

    def _run_audit(self, session_id, anketa_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)"""

        audit_query = """
        INSERT INTO auditor_results (
            session_id,
            completeness_score,
            clarity_score,
            feasibility_score,
            innovation_score,
            quality_score,
            average_score,
            approval_status,
            recommendations,
            auditor_llm_provider
        )
        VALUES (%s, 9, 9, 8, 9, 9, 8.8, 'approved', %s::jsonb, 'gigachat')
        RETURNING id, approval_status, quality_score
        """

        recommendations = {
            "strengths": [
                "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ—á–µ—Ç–∞–Ω–∏—è —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                "–û–ø—ã—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–æ–≤",
                "–°–∏–ª—å–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ —Å –º—É–∑–µ—è–º–∏",
                "–ß—ë—Ç–∫–∏–π –ø–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
            ],
            "improvements": [
                "–£—Ç–æ—á–Ω–∏—Ç—å –º–µ—Ç–æ–¥–∏–∫—É –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",
                "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Ö—Ä–∞–º–∞"
            ]
        }

        result = execute_query(
            audit_query,
            (session_id, json.dumps(recommendations, ensure_ascii=False))
        )

        return {
            'id': result[0]['id'],
            'approval_status': result[0]['approval_status'],
            'quality_score': result[0]['quality_score']
        }

    def _run_research(self, anketa_id, user_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)"""

        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê: anketa_id-RS-001
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º db.generate_research_id() –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞: #AN-20251008-ekaterina_maksimova-001-RS-001
        research_id = db.generate_research_id(anketa_id)

        research_query = """
        INSERT INTO researcher_research (
            research_id,
            anketa_id,
            user_id,
            llm_provider,
            research_results,
            metadata,
            status
        )
        VALUES (%s, %s, %s, 'perplexity', %s::jsonb, %s::jsonb, 'completed')
        RETURNING research_id, status
        """

        research_results = {
            "—Ö—Ä–∞–º_–∞–Ω–∏—Å–∏–º–æ–≤–æ": {
                "—Ç–∏–ø": "–î–µ—Ä–µ–≤—è–Ω–Ω–∞—è —Ü–µ—Ä–∫–æ–≤—å",
                "–≥–æ–¥_–ø–æ—Å—Ç—Ä–æ–π–∫–∏": "XVII –≤–µ–∫",
                "—Å–æ—Å—Ç–æ—è–Ω–∏–µ": "–¢—Ä–µ–±—É–µ—Ç —Ä–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏–∏",
                "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è_—Ü–µ–Ω–Ω–æ—Å—Ç—å": "–í—ã—Å–æ–∫–∞—è"
            },
            "—Ñ–µ—Å—Ç–∏–≤–∞–ª—å_–∏–≤–∞–Ω—ã": {
                "—Ç—Ä–∞–¥–∏—Ü–∏—è": "–ù–∞—Ä–æ–¥–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –ò–≤–∞–Ω—ã –ö—É–ø–∞–ª—ã",
                "—Ä–µ–≥–∏–æ–Ω": "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
                "–∞–Ω–∞–ª–æ–≥–∏": "–ú–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ–π –≤ —Ä–µ–≥–∏–æ–Ω–µ"
            },
            "–∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ_–ø—Ä–æ–µ–∫—Ç—ã": [
                "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü–∏—è —Ö—Ä–∞–º–æ–≤ –í–æ–ª–æ–≥–æ–¥—á–∏–Ω—ã",
                "–§–µ—Å—Ç–∏–≤–∞–ª–∏ –Ω–∞—Ä–æ–¥–Ω–æ–π –∫—É–ª—å—Ç—É—Ä—ã"
            ]
        }

        metadata = {
            "sources": ["–í–æ–ª–æ–≥–æ–¥—Å–∫–∏–π –º—É–∑–µ–π", "–ö—Ä–∞–µ–≤–µ–¥—á–µ—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"],
            "research_duration": "3 –¥–Ω—è"
        }

        result = execute_query(
            research_query,
            (
                research_id,
                anketa_id,
                user_id,
                json.dumps(research_results, ensure_ascii=False),
                json.dumps(metadata, ensure_ascii=False)
            )
        )

        return {
            'research_id': result[0]['research_id'],
            'status': result[0]['status']
        }

    def _run_planner(self, session_id, anketa_id, audit_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)"""

        planner_query = """
        INSERT INTO planner_structures (
            session_id,
            audit_id,
            structure_json,
            sections_count,
            total_word_count_target,
            data_mapping_complete
        )
        VALUES (%s, %s, %s::jsonb, 7, 1900, true)
        RETURNING id, sections_count
        """

        structure = {
            "sections": [
                {"name": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", "words": 300},
                {"name": "–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏", "words": 250},
                {"name": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", "words": 200},
                {"name": "–ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è", "words": 350},
                {"name": "–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏", "words": 400},
                {"name": "–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "words": 250},
                {"name": "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "words": 150}
            ]
        }

        result = execute_query(
            planner_query,
            (session_id, audit_id, json.dumps(structure, ensure_ascii=False))
        )

        return {
            'id': result[0]['id'],
            'sections_count': result[0]['sections_count']
        }

    def _run_writer(self, anketa_id, research_id, user_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)"""

        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ù–û–ú–ï–ù–ö–õ–ê–¢–£–†–ê: anketa_id-GR-001
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º db.generate_grant_id() –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞: #AN-20251008-ekaterina_maksimova-001-GR-001
        grant_id = db.generate_grant_id(anketa_id)

        grant_content = f"""–ì–†–ê–ù–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê

–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {EKATERINA_INTERVIEW['project_name']}

1. –û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´

{EKATERINA_INTERVIEW['problem_statement']}

2. –¶–ï–õ–ò –ò –ó–ê–î–ê–ß–ò

–¶–µ–ª—å: {EKATERINA_INTERVIEW['project_goal']}

3. –¶–ï–õ–ï–í–ê–Ø –ê–£–î–ò–¢–û–†–ò–Ø

{EKATERINA_INTERVIEW['target_audience']}

4. –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø

{EKATERINA_INTERVIEW['methodology']}

5. –ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò

{EKATERINA_INTERVIEW['implementation_plan']}

6. –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

{EKATERINA_INTERVIEW['expected_results']}

7. –£–°–¢–û–ô–ß–ò–í–û–°–¢–¨

{EKATERINA_INTERVIEW['sustainability']}

–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {EKATERINA_INTERVIEW['budget']} —Ä—É–±–ª–µ–π

–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞:
{EKATERINA_INTERVIEW['team_experience']}

–ü–∞—Ä—Ç–Ω–µ—Ä—ã:
{EKATERINA_INTERVIEW['partnerships']}
"""

        grant_query = """
        INSERT INTO grants (
            grant_id,
            anketa_id,
            research_id,
            user_id,
            grant_title,
            grant_content,
            llm_provider,
            quality_score,
            status
        )
        VALUES (%s, %s, %s, %s, %s, %s, 'gigachat', 9, 'completed')
        RETURNING grant_id, grant_title
        """

        result = execute_query(
            grant_query,
            (grant_id, anketa_id, research_id, user_id, EKATERINA_INTERVIEW['project_name'], grant_content)
        )

        return {
            'grant_id': result[0]['grant_id'],
            'grant_title': result[0]['grant_title'],
            'grant_content': grant_content
        }

    def _verify_all_artifacts(self, anketa_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã"""

        artifacts = {}

        # 1. Interview
        interview_query = "SELECT id FROM sessions WHERE anketa_id = %s"
        interview_result = execute_query(interview_query, (anketa_id,))
        artifacts['üìù –ò–Ω—Ç–µ—Ä–≤—å—é'] = {'status': '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if interview_result else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}

        # 2. Audit
        audit_query = """
        SELECT ar.id FROM auditor_results ar
        JOIN sessions s ON ar.session_id = s.id
        WHERE s.anketa_id = %s
        """
        audit_result = execute_query(audit_query, (anketa_id,))
        artifacts['‚úÖ –ê—É–¥–∏—Ç'] = {'status': '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if audit_result else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}

        # 3. Research
        research_query = "SELECT research_id FROM researcher_research WHERE anketa_id = %s"
        research_result = execute_query(research_query, (anketa_id,))
        artifacts['üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'] = {'status': '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if research_result else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}

        # 4. Planner
        planner_query = """
        SELECT ps.id FROM planner_structures ps
        JOIN sessions s ON ps.session_id = s.id
        WHERE s.anketa_id = %s
        """
        planner_result = execute_query(planner_query, (anketa_id,))
        artifacts['üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'] = {'status': '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if planner_result else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}

        # 5. Grant
        grant_query = "SELECT grant_id FROM grants WHERE anketa_id = %s"
        grant_result = execute_query(grant_query, (anketa_id,))
        artifacts['‚úçÔ∏è –ì—Ä–∞–Ω—Ç'] = {'status': '‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ' if grant_result else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ'}

        return artifacts


def run_ekaterina_e2e_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å E2E —Ç–µ—Å—Ç"""
    test = TestEkaterinaGrantE2E()
    result = test.test_full_grant_lifecycle()
    return result


if __name__ == "__main__":
    print("\n" + "üöÄ " + "="*76 + " üöÄ")
    print("   –ó–ê–ü–£–°–ö E2E –¢–ï–°–¢–ê: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ú–∞–∫—Å–∏–º–æ–≤–∞ - –ò–∫–æ–Ω–æ—Å—Ç–∞—Å –∏ –§–µ—Å—Ç–∏–≤–∞–ª—å")
    print("üöÄ " + "="*76 + " üöÄ\n")

    try:
        result = run_ekaterina_e2e_test()

        print("\n" + "üìã " + "="*76 + " üìã")
        print("   –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û–°–¢–£–ü–ù–´ –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
        print("üìã " + "="*76 + " üìã")
        print(f"\n   üîó Anketa ID: {result['anketa_id']}")
        print(f"   üîó Grant ID: {result['grant_id']}")
        print(f"\n   –û—Ç–∫—Ä–æ–π—Ç–µ web-admin ‚Üí –ì—Ä–∞–Ω—Ç—ã ‚Üí –Ω–∞–π–¥–∏—Ç–µ {result['grant_id']}")
        print(f"   –í—Å–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        print("\n" + "="*80 + "\n")

        sys.exit(0)

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
