#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è Phase 1 —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ì—Ä–∞–Ω—Ç—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. get_all_grants_unified() –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã
2. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —ç—Ç–∞–ø–æ–≤
3. GRANT_VALERIA_324 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
4. –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
"""

import sys
import io
from pathlib import Path
import pytest
import pandas as pd

# Fix UTF-8 encoding for console output on Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "web-admin"))

from utils.postgres_helper import execute_query


class TestGrantsPagePhase1:
    """–¢–µ—Å—Ç—ã Phase 1: Unified grants list"""

    def test_get_all_grants_unified_function_exists(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"""
        # Import the page module using importlib (emoji filename issue)
        import importlib.util

        grants_page_path = project_root / "web-admin" / "pages" / "üìÑ_–ì—Ä–∞–Ω—Ç—ã.py"
        spec = importlib.util.spec_from_file_location("grants_page", grants_page_path)
        grants_page = importlib.util.module_from_spec(spec)

        try:
            spec.loader.exec_module(grants_page)
        except Exception as e:
            # If import fails due to streamlit, that's OK - we're testing SQL functions
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å (streamlit not available in test): {e}")
            print("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ (–±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SQL)")
            return

        # Check function exists
        assert hasattr(grants_page, 'get_all_grants_unified')
        print("‚úÖ –§—É–Ω–∫—Ü–∏—è get_all_grants_unified() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    def test_unified_grants_includes_valeria(self):
        """–¢–µ—Å—Ç 2: GRANT_VALERIA_324 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ unified —Å–ø–∏—Å–∫–µ"""
        # Query unified grants directly via SQL
        query = """
        SELECT
            'new' as source,
            g.grant_id,
            g.grant_title,
            g.anketa_id
        FROM grants g
        WHERE g.grant_id = 'GRANT_VALERIA_324'

        UNION ALL

        SELECT
            'old' as source,
            CAST(ga.id AS VARCHAR) as grant_id,
            ga.title as grant_title,
            s.anketa_id
        FROM grant_applications ga
        LEFT JOIN sessions s ON ga.session_id = s.id
        WHERE CAST(ga.id AS VARCHAR) = 'GRANT_VALERIA_324'
        """

        result = execute_query(query)

        assert result is not None, "‚ùå –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª None"
        assert len(result) >= 1, f"‚ùå GRANT_VALERIA_324 –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"

        grant = result[0]
        assert grant['grant_id'] == 'GRANT_VALERIA_324'
        assert grant['anketa_id'] == 'VALERIA_PTSD_888465306'
        assert grant['source'] == 'new'

        print(f"‚úÖ GRANT_VALERIA_324 –Ω–∞–π–¥–µ–Ω –≤ unified —Å–ø–∏—Å–∫–µ")
        print(f"   Source: {grant['source']}")
        print(f"   Anketa ID: {grant['anketa_id']}")
        print(f"   Title: {grant['grant_title'][:50]}...")

    def test_stage_statuses_for_valeria(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö 5 —ç—Ç–∞–ø–æ–≤ –¥–ª—è GRANT_VALERIA_324"""
        query = """
        SELECT
            g.grant_id,
            g.anketa_id,
            s.id as session_id,
            s.progress_percentage as progress,
            -- Stage statuses
            (SELECT COUNT(*) FROM user_answers ua WHERE ua.session_id = s.id) as interview_count,
            (SELECT approval_status FROM auditor_results ar WHERE ar.session_id = s.id ORDER BY ar.created_at DESC LIMIT 1) as audit_status,
            (SELECT status FROM researcher_research rr WHERE rr.anketa_id = g.anketa_id ORDER BY rr.created_at DESC LIMIT 1) as research_status,
            (SELECT data_mapping_complete FROM planner_structures ps WHERE ps.session_id = s.id ORDER BY ps.created_at DESC LIMIT 1) as planner_status,
            g.status as writer_status
        FROM grants g
        LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
        WHERE g.grant_id = 'GRANT_VALERIA_324'
        """

        result = execute_query(query)

        assert result is not None and len(result) > 0, "‚ùå –ì—Ä–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        grant = result[0]

        # Check interview
        interview_count = grant.get('interview_count', 0)
        assert interview_count >= 10, f"‚ùå –ò–Ω—Ç–µ—Ä–≤—å—é: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ ({interview_count}/15)"
        print(f"‚úÖ üìù –ò–Ω—Ç–µ—Ä–≤—å—é: {interview_count} –æ—Ç–≤–µ—Ç–æ–≤")

        # Check audit
        audit_status = grant.get('audit_status')
        assert audit_status in ['approved', 'completed'], f"‚ùå –ê—É–¥–∏—Ç: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({audit_status})"
        print(f"‚úÖ ‚úÖ –ê—É–¥–∏—Ç: {audit_status}")

        # Check research (can be 'completed', 'pending', or 'in_progress')
        research_status = grant.get('research_status')
        assert research_status in ['completed', 'pending', 'in_progress'], \
            f"‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({research_status})"
        print(f"‚úÖ üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {research_status}")

        # Check planner
        planner_status = grant.get('planner_status')
        assert planner_status == True, f"‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ({planner_status})"
        print(f"‚úÖ üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        # Check writer
        writer_status = grant.get('writer_status')
        assert writer_status == 'completed', f"‚ùå –ì—Ä–∞–Ω—Ç: –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å ({writer_status})"
        print(f"‚úÖ ‚úçÔ∏è –ì—Ä–∞–Ω—Ç: {writer_status}")

        # Check progress
        progress = grant.get('progress', 0)
        assert progress == 100, f"‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%, –ø–æ–ª—É—á–µ–Ω–æ {progress}%"
        print(f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")

    def test_unified_query_combines_both_tables(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ unified –∑–∞–ø—Ä–æ—Å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã"""
        # Count from new grants table
        query_new = "SELECT COUNT(*) as cnt FROM grants"
        result_new = execute_query(query_new)
        new_count = result_new[0]['cnt'] if result_new else 0

        # Count from old grant_applications table (with anketa_id)
        query_old = """
        SELECT COUNT(*) as cnt
        FROM grant_applications ga
        LEFT JOIN sessions s ON ga.session_id = s.id
        WHERE s.anketa_id IS NOT NULL
        """
        result_old = execute_query(query_old)
        old_count = result_old[0]['cnt'] if result_old else 0

        # Count unified
        query_unified = """
        SELECT COUNT(*) as cnt FROM (
            SELECT grant_id FROM grants
            UNION ALL
            SELECT CAST(ga.id AS VARCHAR) as grant_id
            FROM grant_applications ga
            LEFT JOIN sessions s ON ga.session_id = s.id
            WHERE s.anketa_id IS NOT NULL
        ) combined
        """
        result_unified = execute_query(query_unified)
        unified_count = result_unified[0]['cnt'] if result_unified else 0

        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üÜï –ù–æ–≤—ã–µ (grants): {new_count}")
        print(f"   üìÅ –°—Ç–∞—Ä—ã–µ (grant_applications): {old_count}")
        print(f"   üìã –í—Å–µ–≥–æ (unified): {unified_count}")

        assert unified_count == new_count + old_count, \
            f"‚ùå Unified count ({unified_count}) != new ({new_count}) + old ({old_count})"

        assert new_count >= 1, "‚ùå –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –∑–∞–ø–∏—Å—å –≤ grants (GRANT_VALERIA_324)"

        print(f"‚úÖ Unified –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã")

    def test_search_by_grant_id(self):
        """–¢–µ—Å—Ç 5: –ü–æ–∏—Å–∫ –ø–æ Grant ID —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        query = """
        SELECT * FROM (
            SELECT 'new' as source, g.grant_id, g.grant_title as title
            FROM grants g
            UNION ALL
            SELECT 'old' as source, CAST(ga.id AS VARCHAR) as grant_id, ga.title
            FROM grant_applications ga
            LEFT JOIN sessions s ON ga.session_id = s.id
            WHERE s.anketa_id IS NOT NULL
        ) combined
        WHERE LOWER(grant_id) LIKE LOWER(%s)
        """

        search_pattern = "%VALERIA_324%"
        result = execute_query(query, (search_pattern,))

        assert result is not None and len(result) > 0, "‚ùå –ü–æ–∏—Å–∫ –ø–æ Grant ID –Ω–µ –Ω–∞—à—ë–ª GRANT_VALERIA_324"

        found = result[0]
        assert 'VALERIA_324' in found['grant_id'].upper()

        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ Grant ID —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")

    def test_filter_by_progress_completed(self):
        """–¢–µ—Å—Ç 6: –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ) —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        query = """
        SELECT
            g.grant_id,
            COALESCE(s.progress_percentage, 0) as progress
        FROM grants g
        LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
        WHERE COALESCE(s.progress_percentage, 0) = 100
        """

        result = execute_query(query)

        assert result is not None, "‚ùå –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª None"

        # Check GRANT_VALERIA_324 is in completed list
        valeria_found = False
        for row in result:
            if row['grant_id'] == 'GRANT_VALERIA_324':
                valeria_found = True
                assert row['progress'] == 100
                break

        assert valeria_found, "‚ùå GRANT_VALERIA_324 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö"

        print(f"‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É (–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ): –Ω–∞–π–¥–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   GRANT_VALERIA_324 –≤ —Å–ø–∏—Å–∫–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö")


def run_phase1_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã Phase 1"""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PHASE 1: Unified Grants List")
    print("="*70 + "\n")

    test_suite = TestGrantsPagePhase1()

    tests = [
        ("–§—É–Ω–∫—Ü–∏—è get_all_grants_unified() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", test_suite.test_get_all_grants_unified_function_exists),
        ("GRANT_VALERIA_324 –≤ unified —Å–ø–∏—Å–∫–µ", test_suite.test_unified_grants_includes_valeria),
        ("–°—Ç–∞—Ç—É—Å—ã 5 —ç—Ç–∞–ø–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", test_suite.test_stage_statuses_for_valeria),
        ("Unified –∑–∞–ø—Ä–æ—Å –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã", test_suite.test_unified_query_combines_both_tables),
        ("–ü–æ–∏—Å–∫ –ø–æ Grant ID", test_suite.test_search_by_grant_id),
        ("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", test_suite.test_filter_by_progress_completed),
    ]

    passed = 0
    failed = 0

    for test_name, test_func in tests:
        try:
            print(f"\n{'‚îÄ'*70}")
            print(f"üß™ –¢–µ—Å—Ç: {test_name}")
            print(f"{'‚îÄ'*70}")
            test_func()
            passed += 1
            print(f"\n‚úÖ PASSED: {test_name}")
        except AssertionError as e:
            failed += 1
            print(f"\n‚ùå FAILED: {test_name}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            failed += 1
            print(f"\n‚ùå ERROR: {test_name}")
            print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    print(f"\n{'='*70}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í PHASE 1")
    print(f"{'='*70}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(tests)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{len(tests)}")

    if failed == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ PHASE 1 –ü–†–û–ô–î–ï–ù–´!")
        print(f"‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ Phase 2")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")

    print(f"{'='*70}\n")

    return failed == 0


if __name__ == "__main__":
    success = run_phase1_tests()
    sys.exit(0 if success else 1)
