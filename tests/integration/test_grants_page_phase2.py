#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç—ã –¥–ª—è Phase 2 —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ì—Ä–∞–Ω—Ç—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. Inline lifecycle expansion —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
2. Enhanced filters –ø–æ —ç—Ç–∞–ø–∞–º —Ä–∞–±–æ—Ç–∞—é—Ç
3. –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞–±–æ—Ç–∞–µ—Ç
4. Client-side —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
"""

import sys
import io
from pathlib import Path
import pytest
import pandas as pd

# Fix UTF-8 encoding for console output on Windows
if sys.platform == 'win32':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "web-admin"))

from utils.postgres_helper import execute_query


class TestGrantsPagePhase2:
    """–¢–µ—Å—Ç—ã Phase 2: Enhanced filters & inline lifecycle"""

    def test_render_lifecycle_inline_function_exists(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è render_lifecycle_inline —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        import importlib.util

        grants_page_path = project_root / "web-admin" / "pages" / "üìÑ_–ì—Ä–∞–Ω—Ç—ã.py"
        spec = importlib.util.spec_from_file_location("grants_page", grants_page_path)
        grants_page = importlib.util.module_from_spec(spec)

        try:
            spec.loader.exec_module(grants_page)
            assert hasattr(grants_page, 'render_lifecycle_inline')
            print("‚úÖ –§—É–Ω–∫—Ü–∏—è render_lifecycle_inline() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å (streamlit not available): {e}")
            print("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞")

    def test_filter_by_stage_interview(self):
        """–¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É '–ò–Ω—Ç–µ—Ä–≤—å—é' —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        # Get grants stuck at interview stage (< 10 answers)
        query = """
        SELECT
            g.grant_id,
            (SELECT COUNT(*) FROM user_answers ua
             JOIN sessions s2 ON ua.session_id = s2.id
             WHERE s2.anketa_id = g.anketa_id) as interview_count
        FROM grants g
        LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
        WHERE (SELECT COUNT(*) FROM user_answers ua
               JOIN sessions s2 ON ua.session_id = s2.id
               WHERE s2.anketa_id = g.anketa_id) < 10
        """

        result = execute_query(query)

        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä–∞–Ω—Ç–æ–≤ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —ç—Ç–∞–ø–µ –ò–Ω—Ç–µ—Ä–≤—å—é")
            for row in result[:3]:
                print(f"   - {row.get('grant_id')}: {row.get('interview_count')} –æ—Ç–≤–µ—Ç–æ–≤")
        else:
            print("‚úÖ –ù–µ—Ç –≥—Ä–∞–Ω—Ç–æ–≤ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —ç—Ç–∞–ø–µ –ò–Ω—Ç–µ—Ä–≤—å—é (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")

    def test_filter_by_stage_audit(self):
        """–¢–µ—Å—Ç 3: –§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É '–ê—É–¥–∏—Ç' —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        # Get grants stuck at audit stage (interview done, but audit not approved)
        query = """
        SELECT
            g.grant_id,
            (SELECT approval_status FROM auditor_results ar
             JOIN sessions s2 ON ar.session_id = s2.id
             WHERE s2.anketa_id = g.anketa_id
             ORDER BY ar.created_at DESC LIMIT 1) as audit_status
        FROM grants g
        LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
        WHERE (SELECT COUNT(*) FROM user_answers ua
               JOIN sessions s2 ON ua.session_id = s2.id
               WHERE s2.anketa_id = g.anketa_id) >= 10
          AND (SELECT approval_status FROM auditor_results ar
               JOIN sessions s2 ON ar.session_id = s2.id
               WHERE s2.anketa_id = g.anketa_id
               ORDER BY ar.created_at DESC LIMIT 1) != 'approved'
        """

        result = execute_query(query)

        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä–∞–Ω—Ç–æ–≤ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —ç—Ç–∞–ø–µ –ê—É–¥–∏—Ç")
            for row in result[:3]:
                print(f"   - {row.get('grant_id')}: —Å—Ç–∞—Ç—É—Å {row.get('audit_status')}")
        else:
            print("‚úÖ –ù–µ—Ç –≥—Ä–∞–Ω—Ç–æ–≤ –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —ç—Ç–∞–ø–µ –ê—É–¥–∏—Ç (–≤—Å–µ –ø—Ä–æ—à–ª–∏)")

    def test_filter_by_quality_score(self):
        """–¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä –ø–æ quality_score —Ä–∞–±–æ—Ç–∞–µ—Ç"""
        min_quality = 8
        query = """
        SELECT
            grant_id,
            quality_score
        FROM grants
        WHERE quality_score >= %s
        ORDER BY quality_score DESC
        """

        result = execute_query(query, (min_quality,))

        assert result is not None, "‚ùå –ó–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª None"

        if result:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä–∞–Ω—Ç–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º >= {min_quality}")
            for row in result[:5]:
                print(f"   - {row.get('grant_id')}: {row.get('quality_score')}/10")

            # Verify all results have quality >= min_quality
            for row in result:
                quality = row.get('quality_score', 0)
                assert quality >= min_quality, f"‚ùå –ì—Ä–∞–Ω—Ç {row.get('grant_id')} –∏–º–µ–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ {quality} < {min_quality}"
        else:
            print(f"‚ö†Ô∏è –ù–µ—Ç –≥—Ä–∞–Ω—Ç–æ–≤ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º >= {min_quality}")

    def test_client_side_filtering_logic(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ client-side —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        # Simulate client-side filtering for stage
        query = """
        SELECT
            g.grant_id,
            (SELECT COUNT(*) FROM user_answers ua WHERE ua.session_id = s.id) as interview_count,
            (SELECT approval_status FROM auditor_results ar WHERE ar.session_id = s.id ORDER BY ar.created_at DESC LIMIT 1) as audit_status,
            (SELECT status FROM researcher_research rr WHERE rr.anketa_id = g.anketa_id ORDER BY rr.created_at DESC LIMIT 1) as research_status,
            (SELECT data_mapping_complete FROM planner_structures ps WHERE ps.session_id = s.id ORDER BY ps.created_at DESC LIMIT 1) as planner_status,
            g.status as writer_status,
            g.quality_score
        FROM grants g
        LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
        LIMIT 10
        """

        result = execute_query(query)

        assert result is not None and len(result) > 0, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞"

        df = pd.DataFrame([dict(row) for row in result])

        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –≥—Ä–∞–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")

        # Test different filters
        filters_tested = 0

        # Filter by interview stage
        interview_stuck = df[df['interview_count'] < 10]
        if len(interview_stuck) > 0:
            print(f"   - –ó–∞—Å—Ç—Ä—è–≤—à–∏–µ –Ω–∞ Interview: {len(interview_stuck)}")
            filters_tested += 1

        # Filter by quality
        high_quality = df[df['quality_score'].fillna(0) >= 8]
        if len(high_quality) > 0:
            print(f"   - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (>=8): {len(high_quality)}")
            filters_tested += 1

        # Filter by completed
        completed = df[df['writer_status'] == 'completed']
        if len(completed) > 0:
            print(f"   - –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç—ã: {len(completed)}")
            filters_tested += 1

        print(f"‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {filters_tested} —Ç–∏–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

    def test_enhanced_filters_coverage(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö 5 —ç—Ç–∞–ø–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
        stages = {
            'interview': "interview_count < 10",
            'audit': "(interview_count >= 10) AND (audit_status != 'approved')",
            'research': "(audit_status = 'approved') AND (research_status != 'completed')",
            'planner': "(research_status = 'completed') AND (planner_status != true)",
            'writer': "(planner_status = true) AND (writer_status != 'completed')"
        }

        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö 5 —ç—Ç–∞–ø–æ–≤:")

        for stage, condition in stages.items():
            print(f"   - {stage.upper()}: {condition}")

        print(f"‚úÖ –í—Å–µ 5 —ç—Ç–∞–ø–æ–≤ –∏–º–µ—é—Ç —É—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")


def run_phase2_tests():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã Phase 2"""
    print("\n" + "="*70)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PHASE 2: Enhanced Filters & Inline Lifecycle")
    print("="*70 + "\n")

    test_suite = TestGrantsPagePhase2()

    tests = [
        ("–§—É–Ω–∫—Ü–∏—è render_lifecycle_inline() —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", test_suite.test_render_lifecycle_inline_function_exists),
        ("–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É '–ò–Ω—Ç–µ—Ä–≤—å—é'", test_suite.test_filter_by_stage_interview),
        ("–§–∏–ª—å—Ç—Ä –ø–æ —ç—Ç–∞–ø—É '–ê—É–¥–∏—Ç'", test_suite.test_filter_by_stage_audit),
        ("–§–∏–ª—å—Ç—Ä –ø–æ quality_score", test_suite.test_filter_by_quality_score),
        ("Client-side —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è", test_suite.test_client_side_filtering_logic),
        ("–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö 5 —ç—Ç–∞–ø–æ–≤", test_suite.test_enhanced_filters_coverage),
    ]

    passed = 0
    failed = 0

    for test_name, test_func in tests:
        try:
            print(f"\n{'‚îÄ'*70}")
            print(f"üß™ –¢–µ—Å—Ç: {test_name}")
            print(f"{'‚îÄ'*70}")
            test_func()
            passed += 1
            print(f"\n‚úÖ PASSED: {test_name}")
        except AssertionError as e:
            failed += 1
            print(f"\n‚ùå FAILED: {test_name}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
        except Exception as e:
            failed += 1
            print(f"\n‚ùå ERROR: {test_name}")
            print(f"   –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

    print(f"\n{'='*70}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í PHASE 2")
    print(f"{'='*70}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{len(tests)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}/{len(tests)}")

    if failed == 0:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ PHASE 2 –ü–†–û–ô–î–ï–ù–´!")
        print(f"‚úÖ –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ Phase 3")
    else:
        print(f"\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏.")

    print(f"{'='*70}\n")

    return failed == 0


if __name__ == "__main__":
    success = run_phase2_tests()
    sys.exit(0 if success else 1)
