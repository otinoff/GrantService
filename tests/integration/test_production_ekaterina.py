#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Production Test: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª researcher –¥–ª—è –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ô —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
- ResearcherAgentV2 –∏–∑ agents/
- GrantServiceDatabase –∏–∑ data/database/
- WebSearchRouter (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç Claude Code primary)

–ê–≤—Ç–æ—Ä: Claude Code
–î–∞—Ç–∞: 2025-10-12
"""

import sys
import os
import asyncio
from datetime import datetime
from pathlib import Path

# Set PostgreSQL environment variables
os.environ['PGHOST'] = 'localhost'
os.environ['PGPORT'] = '5432'
os.environ['PGUSER'] = 'postgres'
os.environ['PGPASSWORD'] = 'root'
os.environ['PGDATABASE'] = 'grantservice'

# Set UTF-8 encoding
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(__file__), 'agents'))
sys.path.append(os.path.join(os.path.dirname(__file__), 'web-admin'))

# Import app functionality
from data.database.models import GrantServiceDatabase
from agents.researcher_agent_v2 import ResearcherAgentV2

# For Word export
try:
    from docx import Document
    from docx.shared import Pt
    from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
    DOCX_AVAILABLE = True
except ImportError:
    DOCX_AVAILABLE = False


async def main():
    """Production test: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª researcher"""

    print("=" * 80)
    print("üöÄ PRODUCTION TEST: Researcher Agent - –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª (27 queries)")
    print("=" * 80)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"WebSearch Provider: Claude Code (primary)")
    print("=" * 80)

    # 1. Initialize database (app functionality)
    db = GrantServiceDatabase()
    print("\n‚úÖ Database initialized")

    # 2. Anketa ID
    ANKETA_ID = "EKATERINA_20251010_235448"
    print(f"\nüìã Anketa ID: {ANKETA_ID}")
    print(f"   –ü—Ä–æ–µ–∫—Ç: –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ —Ö—Ä–∞–º–∞ –∏ –Ω–∞—Ä–æ–¥–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –≤ —Å–µ–ª–µ –ê–Ω–∏—Å–∏–º–æ–≤–æ")

    # 3. Initialize Researcher Agent (app functionality)
    researcher = ResearcherAgentV2(db, llm_provider="claude_code")
    print("\n‚úÖ ResearcherAgentV2 initialized")
    print(f"   WebSearch Provider: {researcher.websearch_provider}")
    print(f"   WebSearch Fallback: {researcher.websearch_fallback}")

    # 4. Run research (27 queries)
    print("\n" + "=" * 80)
    print("üî¨ –ó–ê–ü–£–°–ö –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø (27 queries)")
    print("=" * 80)
    print(f"‚è∞ –ù–∞—á–∞–ª–æ: {datetime.now().strftime('%H:%M:%S')}")
    print("")

    try:
        result = await researcher.research_with_expert_prompts(ANKETA_ID)

        print("\n" + "=" * 80)
        print("‚úÖ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("=" * 80)

        if result['status'] == 'completed':
            research_id = result['research_id']
            metadata = result['research_results']['metadata']

            print(f"\nüìä Research ID: {research_id}")
            print(f"   Status: {result['status']}")
            print(f"   Total Queries: {metadata['total_queries']}")
            print(f"   Total Sources: {metadata['sources_count']}")
            print(f"   Processing Time: {metadata['total_processing_time']}s")
            print(f"   WebSearch Provider: {metadata.get('websearch_provider', 'N/A')}")

            # Block details
            print("\nüìë –î–µ—Ç–∞–ª–∏ –ø–æ –±–ª–æ–∫–∞–º:")
            for block_key in ['block1_problem', 'block2_geography', 'block3_goals']:
                block_data = result['research_results'].get(block_key, {})
                if block_data:
                    block_names = {
                        'block1_problem': '–ë–ª–æ–∫ 1: –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å',
                        'block2_geography': '–ë–ª–æ–∫ 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
                        'block3_goals': '–ë–ª–æ–∫ 3: –ó–∞–¥–∞—á–∏ –∏ —Ü–µ–ª–∏'
                    }
                    print(f"\n   {block_names.get(block_key, block_key)}")
                    print(f"   - Queries: {len(block_data.get('queries_used', []))}")
                    print(f"   - Sources: {block_data.get('total_sources', 0)}")
                    print(f"   - Time: {block_data.get('processing_time', 0)}s")

            # 5. Export to Word
            if DOCX_AVAILABLE:
                print("\n" + "=" * 80)
                print("üìÑ –≠–ö–°–ü–û–†–¢ –í WORD")
                print("=" * 80)

                output_dir = Path("grants_output/production_test")
                output_dir.mkdir(parents=True, exist_ok=True)

                filename = f"Research_{ANKETA_ID}_{research_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.docx"
                output_path = output_dir / filename

                export_research_to_word(result, output_path)

                print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
                print(f"   –§–∞–π–ª: {output_path}")

                # 6. Verify in DB
                print("\n" + "=" * 80)
                print("üîç –ü–†–û–í–ï–†–ö–ê –í –ë–î")
                print("=" * 80)

                with db.connect() as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        SELECT research_id, status, llm_provider,
                               research_results->'metadata'->>'total_queries' as queries,
                               research_results->'metadata'->>'sources_count' as sources,
                               research_results->'metadata'->>'websearch_provider' as ws_provider
                        FROM researcher_research
                        WHERE research_id = %s
                    """, (research_id,))

                    row = cursor.fetchone()
                    cursor.close()

                    if row:
                        print(f"\n‚úÖ Research –Ω–∞–π–¥–µ–Ω –≤ –ë–î:")
                        print(f"   Research ID: {row[0]}")
                        print(f"   Status: {row[1]}")
                        print(f"   Provider: {row[2]}")
                        print(f"   Queries: {row[3]}")
                        print(f"   Sources: {row[4]}")
                        print(f"   WebSearch: {row[5]}")

                # Final summary
                print("\n" + "=" * 80)
                print("‚úÖ PRODUCTION TEST –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–Å–ù!")
                print("=" * 80)
                print(f"\nüìÅ –§–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è:")
                print(f"   {output_path}")
                print(f"\nüí° –í—ã–≤–æ–¥—ã:")
                print(f"   ‚úÖ Researcher Agent —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Claude Code WebSearch")
                print(f"   ‚úÖ 27 queries –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                print(f"   ‚úÖ {metadata['sources_count']} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å–æ–±—Ä–∞–Ω–æ")
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word —Ä–∞–±–æ—Ç–∞–µ—Ç")

                return {
                    'success': True,
                    'research_id': research_id,
                    'file': str(output_path),
                    'metadata': metadata
                }

            else:
                print("\n‚ö†Ô∏è  python-docx –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
                return {
                    'success': True,
                    'research_id': research_id,
                    'metadata': metadata
                }

        else:
            print(f"\n‚ùå –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:")
            print(f"   Status: {result['status']}")
            print(f"   Error: {result.get('error', 'Unknown')}")
            return {'success': False, 'error': result.get('error')}

    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–´–ü–û–õ–ù–ï–ù–ò–ò:")
        print(f"   {e}")
        import traceback
        traceback.print_exc()
        return {'success': False, 'error': str(e)}


def export_research_to_word(research_result: dict, output_path: Path):
    """Export research results to Word document"""

    doc = Document()

    # Title
    title = doc.add_heading('–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏', 0)
    title.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    subtitle = doc.add_paragraph(f'Research ID: {research_result["research_id"]}')
    subtitle.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Metadata
    doc.add_heading('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ', 1)

    metadata = research_result['research_results']['metadata']

    table = doc.add_table(rows=6, cols=2)
    table.style = 'Light Grid Accent 1'

    rows_data = [
        ('Research ID', research_result['research_id']),
        ('Status', research_result['status']),
        ('Total Queries', str(metadata['total_queries'])),
        ('Total Sources', str(metadata['sources_count'])),
        ('Processing Time', f"{metadata['total_processing_time']}s"),
        ('WebSearch Provider', metadata.get('websearch_provider', 'unknown'))
    ]

    for idx, (label, value) in enumerate(rows_data):
        table.rows[idx].cells[0].text = label
        table.rows[idx].cells[1].text = value

    doc.add_paragraph()

    # Blocks
    for block_key in ['block1_problem', 'block2_geography', 'block3_goals']:
        block_data = research_result['research_results'].get(block_key, {})

        if not block_data:
            continue

        block_names = {
            'block1_problem': '–ë–ª–æ–∫ 1: –ü—Ä–æ–±–ª–µ–º–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å',
            'block2_geography': '–ë–ª–æ–∫ 2: –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
            'block3_goals': '–ë–ª–æ–∫ 3: –ó–∞–¥–∞—á–∏, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å'
        }

        doc.add_heading(block_names[block_key], 1)

        # Stats
        doc.add_paragraph(f"–ó–∞–ø—Ä–æ—Å–æ–≤: {len(block_data.get('queries_used', []))}")
        doc.add_paragraph(f"–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {block_data.get('total_sources', 0)}")
        doc.add_paragraph(f"–í—Ä–µ–º—è: {block_data.get('processing_time', 0)}s")

        # Summary
        doc.add_heading('–†–µ–∑—é–º–µ', 2)
        doc.add_paragraph(block_data.get('summary', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'))

        # Key facts
        key_facts = block_data.get('key_facts', [])
        if key_facts:
            doc.add_heading('–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã', 2)
            for idx, fact in enumerate(key_facts[:10], 1):
                p = doc.add_paragraph(style='List Number')
                p.add_run(f"{fact.get('fact', '')}\n")
                p.add_run(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {fact.get('source', 'unknown')}").font.size = Pt(9)

        # Queries used
        queries_used = block_data.get('queries_used', [])
        if queries_used:
            doc.add_heading('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã', 2)
            for idx, query in enumerate(queries_used, 1):
                doc.add_paragraph(f"{idx}. {query}", style='List Number')

        doc.add_page_break()

    # Footer
    footer = doc.add_paragraph(f'\n–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    footer.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER

    # Save
    doc.save(str(output_path))


if __name__ == "__main__":
    print("\n" + "=" * 80)
    print("üöÄ –ó–ê–ü–£–°–ö PRODUCTION TEST")
    print("=" * 80)

    try:
        result = asyncio.run(main())

        if result.get('success'):
            print("\n" + "=" * 80)
            print("‚úÖ SUCCESS!")
            print("=" * 80)
        else:
            print("\n" + "=" * 80)
            print("‚ùå FAILED")
            print("=" * 80)
            sys.exit(1)

    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
