#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
E2E —Ç–µ—Å—Ç –¥–ª—è Researcher Agent V2
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import asyncio
import sys
import os
import json
from datetime import datetime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
if os.name == 'nt':  # Windows
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'replace')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'replace')
    os.environ['PYTHONIOENCODING'] = 'utf-8'

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
sys.path.insert(0, os.path.dirname(__file__))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'data'))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'agents'))

from data.database.models import GrantServiceDatabase
from test_db_wrapper import DatabaseWrapper


async def test_researcher_v2_full_workflow():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow Researcher V2"""

    print("="*80)
    print("E2E –¢–ï–°–¢: Researcher Agent V2 - 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("="*80)
    print()

    # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    print("[STEP 1] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...")
    try:
        raw_db = GrantServiceDatabase()
        db = DatabaseWrapper(raw_db)  # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        print("[OK] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD")
        return False

    # 2. –ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞
    print("\n[STEP 2] –ü–æ–∏—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã...")
    try:
        # –ò—â–µ–º —Å–µ—Å—Å–∏—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ anketa_id
        result = db.execute_query("""
            SELECT id, anketa_id, telegram_id, started_at
            FROM sessions
            WHERE completion_status = 'completed'
              AND anketa_id IS NOT NULL
            ORDER BY started_at DESC
            LIMIT 1
        """, fetch_one=True)

        if not result or not result.get('anketa_id'):
            print("[WARN] –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã —Å anketa_id, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é...")
            # –°–æ–∑–¥–∞–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
            anketa_id = await create_test_anketa(db)
        else:
            anketa_id = result['anketa_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º anketa_id, –Ω–µ session id!
            print(f"[OK] –ù–∞–π–¥–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞: {anketa_id}")
            print(f"    Session ID: {result['id']}")
            print(f"    Telegram ID: {result['telegram_id']}")
            print(f"    Created: {result['started_at']}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–∫–µ—Ç—ã: {e}")
        import traceback
        traceback.print_exc()
        # –°–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É
        anketa_id = "TEST_RESEARCHER_" + datetime.now().strftime("%Y%m%d_%H%M%S")
        print(f"[WARN] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID: {anketa_id}")

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Researcher V2
    print("\n[STEP 3] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Researcher V2...")
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø—É—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'agents'))
        from agents.researcher_agent_v2 import ResearcherAgentV2

        researcher = ResearcherAgentV2(db, llm_provider="claude_code")
        print("[OK] Researcher V2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ResearcherAgentV2: {e}")
        return False
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Researcher V2: {e}")
        return False

    # 4. –ó–∞–ø—É—Å–∫ 27 –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\n[STEP 4] –ó–∞–ø—É—Å–∫ 27 —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
    print("‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç...")
    print()

    start_time = datetime.now()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow
        research_result = await researcher.research_with_expert_prompts(anketa_id)

        end_time = datetime.now()
        elapsed = (end_time - start_time).total_seconds()

        # 5. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*80)
        print("[STEP 5] –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("="*80)

        status = research_result.get('status')
        print(f"\n‚úì –°—Ç–∞—Ç—É—Å: {status}")

        if status == 'completed':
            metadata = research_result.get('metadata', {})

            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   - –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metadata.get('total_queries', 0)}")
            print(f"   - –£—Å–ø–µ—à–Ω—ã—Ö: {metadata.get('successful_queries', 0)}")
            print(f"   - –° –æ—à–∏–±–∫–∞–º–∏: {metadata.get('failed_queries', 0)}")
            print(f"   - –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {metadata.get('total_sources', 0)}")
            print(f"   - –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {metadata.get('total_results', 0)}")
            print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}s")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            research_data = research_result.get('research_results', {})

            print(f"\nüì¶ –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:")
            print(f"   - Block 1 (–ü—Ä–æ–±–ª–µ–º–∞): {'‚úì' if 'block1_problem' in research_data else '‚úó'}")
            print(f"   - Block 2 (–ì–µ–æ–≥—Ä–∞—Ñ–∏—è): {'‚úì' if 'block2_geography' in research_data else '‚úó'}")
            print(f"   - Block 3 (–¶–µ–ª–∏): {'‚úì' if 'block3_goals' in research_data else '‚úó'}")

            # –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if research_data.get('block1_problem'):
                block1 = research_data['block1_problem']
                print(f"\nüîç –ü–†–ò–ú–ï–†: Block 1 - –ü—Ä–æ–±–ª–µ–º–∞")
                print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–ª–æ–∫–µ: {len(block1.get('queries', []))}")

                if block1.get('queries'):
                    first_query = block1['queries'][0]
                    print(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_query.get('query', 'N/A')[:80]}...")
                    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {first_query.get('results_count', 0)}")
                    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(first_query.get('sources', []))}")

            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            print(f"\n[STEP 6] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î...")
            try:
                db_record = db.execute_query("""
                    SELECT
                        research_id,
                        status,
                        jsonb_typeof(research_results) as data_type,
                        created_at
                    FROM researcher_research
                    WHERE anketa_id = %s
                    ORDER BY created_at DESC
                    LIMIT 1
                """, (anketa_id,), fetch_one=True)

                if db_record:
                    print(f"[OK] –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î:")
                    print(f"   - Research ID: {db_record['research_id']}")
                    print(f"   - Status: {db_record['status']}")
                    print(f"   - Data Type: {db_record['data_type']}")
                    print(f"   - Created: {db_record['created_at']}")
                else:
                    print("[WARN] –ó–∞–ø–∏—Å—å –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            except Exception as e:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
                import traceback
                traceback.print_exc()

            # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
            print("\n" + "="*80)
            success_rate = metadata.get('successful_queries', 0) / 27 * 100

            if success_rate >= 90:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% (‚â•90%)")
            elif success_rate >= 70:
                print("‚ö†Ô∏è –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% (70-90%)")
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
                print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}% (<70%)")

            print("="*80)

            return success_rate >= 70

        else:
            print(f"[ERROR] –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {research_result.get('message', 'N/A')}")
            return False

    except Exception as e:
        print(f"\n[FATAL ERROR] {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        pass  # db is GrantServiceDatabase, doesn't need to be closed


async def create_test_anketa(db):
    """–°–æ–∑–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –∞–Ω–∫–µ—Ç—É"""

    print("   –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–∫–µ—Ç—ã...")

    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π anketa_id
        anketa_id = "TEST_E2E_" + datetime.now().strftime("%Y%m%d_%H%M%S")

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db.execute_query("""
            INSERT INTO users (telegram_id, username, full_name, role)
            VALUES (999999, 'test_e2e', 'Test E2E User', 'user')
            ON CONFLICT (telegram_id) DO NOTHING
        """)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é —Å anketa_id
        result = db.execute_query("""
            INSERT INTO sessions (
                telegram_id,
                anketa_id,
                current_step,
                completion_status,
                started_at,
                last_activity,
                questions_answered,
                total_questions
            )
            VALUES (999999, %s, 'completed', 'completed', NOW(), NOW(), 10, 10)
            RETURNING id, anketa_id
        """, (anketa_id,), fetch_one=True)

        if result:
            print(f"[OK] –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:")
            print(f"    Anketa ID: {result['anketa_id']}")
            print(f"    Session ID: {result['id']}")
            return result['anketa_id']
        else:
            print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É, fallback")
            return anketa_id

    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É: {e}")
        import traceback
        traceback.print_exc()
        # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π ID
        return "TEST_E2E_" + datetime.now().strftime("%Y%m%d_%H%M%S")


if __name__ == "__main__":
    try:
        result = asyncio.run(test_researcher_v2_full_workflow())
        sys.exit(0 if result else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n[FATAL] {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
