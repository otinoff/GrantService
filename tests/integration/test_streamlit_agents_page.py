#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ê–≥–µ–Ω—Ç—ã (ü§ñ_–ê–≥–µ–Ω—Ç—ã.py)
–ü—Ä–æ–≤–µ—Ä—è—é—Ç —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
"""

import pytest
import sys
from pathlib import Path

tests_dir = Path(__file__).parent.parent
project_root = tests_dir.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / 'web-admin'))

# Import from web-admin/utils
from utils.postgres_helper import execute_query


@pytest.mark.integration
class TestAgentsPageDataLoading:
    """
    –¢–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ê–≥–µ–Ω—Ç—ã

    –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏—é –æ—à–∏–±–∫–∏:
    AttributeError: 'tuple' object has no attribute 'get'
    """

    def test_get_agent_statistics_interviewer(self):
        """
        –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ get_agent_statistics –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞

        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–ª–∞ –æ—à–∏–±–∫—É –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è postgres_helper
        """
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ –∏–∑ get_agent_statistics('interviewer')
        result = execute_query("""
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN completion_status = 'completed' THEN 1 END) as completed,
                ROUND(AVG(progress_percentage), 1) as avg_progress,
                ROUND(AVG(session_duration_minutes), 1) as avg_duration_min
            FROM sessions
            WHERE started_at >= NOW() - INTERVAL '30 days'
        """)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        assert len(result) > 0, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"

        stats = result[0]

        # –ö–†–ò–¢–ò–ß–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .get() –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
        # –≠—Ç–æ—Ç –∫–æ–¥ –ø–∞–¥–∞–ª —Å: AttributeError: 'tuple' object has no attribute 'get'
        total = stats.get('total', 0)
        completed = stats.get('completed', 0)
        avg_progress = stats.get('avg_progress', 0)
        avg_duration = stats.get('avg_duration_min', 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
        assert isinstance(total, int), f"total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int, –ø–æ–ª—É—á–µ–Ω {type(total)}"
        assert isinstance(completed, int), f"completed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int, –ø–æ–ª—É—á–µ–Ω {type(completed)}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏
        assert total >= 0, "total –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        assert completed >= 0, "completed –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        assert completed <= total, "completed –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ total"

    def test_agent_stats_use_dict_access_pattern(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ê–≥–µ–Ω—Ç—ã

        –ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
        - stats.get('total', 0)
        - st.metric("–í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é", stats.get('total', 0))

        –≠—Ç–æ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–æ–∫
        """
        queries = [
            # Interviewer
            """
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN completion_status = 'completed' THEN 1 END) as completed
            FROM sessions
            WHERE started_at >= NOW() - INTERVAL '30 days'
            """,

            # Auditor
            """
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN approval_status = 'approved' THEN 1 END) as approved
            FROM auditor_results
            WHERE created_at >= NOW() - INTERVAL '30 days'
            """,

            # Writer
            """
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed
            FROM grants
            WHERE created_at >= NOW() - INTERVAL '30 days'
            """
        ]

        for query in queries:
            result = execute_query(query)

            assert isinstance(result, list), "execute_query –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"

            if len(result) > 0:
                stats = result[0]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ dict-like –æ–±—ä–µ–∫—Ç
                assert hasattr(stats, 'get'), \
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ .get(), –ø–æ–ª—É—á–µ–Ω —Ç–∏–ø {type(stats)}"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ .get() —Ä–∞–±–æ—Ç–∞–µ—Ç —Å default –∑–Ω–∞—á–µ–Ω–∏–µ–º
                total = stats.get('total', 0)
                assert total >= 0, "total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 0"

    def test_postgres_interval_syntax(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL —Å–∏–Ω—Ç–∞–∫—Å–∏—Å NOW() - INTERVAL —Ä–∞–±–æ—Ç–∞–µ—Ç

        –†–∞–Ω—å—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: datetime('now', '-30 days')
        –¢–µ–ø–µ—Ä—å PostgreSQL: NOW() - INTERVAL '30 days'
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å —Å INTERVAL –Ω–µ –ø–∞–¥–∞–µ—Ç
        result = execute_query("""
            SELECT
                COUNT(*) as total
            FROM sessions
            WHERE started_at >= NOW() - INTERVAL '30 days'
        """)

        assert len(result) > 0, "–ó–∞–ø—Ä–æ—Å —Å INTERVAL –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"

        stats = result[0]
        total = stats.get('total', 0)
        assert isinstance(total, int), "–î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ"

    def test_boolean_comparison_in_queries(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ PostgreSQL boolean —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç

        –†–∞–Ω—å—à–µ: data_mapping_complete = 1 (SQLite)
        –¢–µ–ø–µ—Ä—å: data_mapping_complete = TRUE (PostgreSQL)
        """
        result = execute_query("""
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN data_mapping_complete = TRUE THEN 1 END) as complete_mappings
            FROM planner_structures
            WHERE created_at >= NOW() - INTERVAL '30 days'
        """)

        assert isinstance(result, list), "–ó–∞–ø—Ä–æ—Å —Å boolean –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å"

        if len(result) > 0:
            stats = result[0]
            total = stats.get('total', 0)
            complete = stats.get('complete_mappings', 0)

            assert isinstance(total, int)
            assert isinstance(complete, int)
            assert complete <= total, "complete –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ total"


@pytest.mark.integration
class TestAgentsPageRegressionTests:
    """
    –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—é—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞—Ä—ã—Ö –æ—à–∏–±–æ–∫
    """

    def test_no_sqlite_datetime_syntax(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å datetime()

        –≠—Ç–æ –≤—ã–∑—ã–≤–∞–ª–æ –æ—à–∏–±–∫—É –≤ PostgreSQL:
        function datetime(unknown, unknown) does not exist
        """
        # –ï—Å–ª–∏ –±—ã –º—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SQLite —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∑–∞–ø—Ä–æ—Å —É–ø–∞–ª –±—ã
        with pytest.raises(Exception) as exc_info:
            execute_query("""
                SELECT COUNT(*) as total
                FROM sessions
                WHERE started_at >= datetime('now', '-30 days')
            """)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π datetime
        error_msg = str(exc_info.value).lower()
        assert 'datetime' in error_msg or 'function' in error_msg, \
            "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ datetime"

    def test_streamlit_metric_pattern_works(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ st.metric() –∏–∑ Streamlit

        –ö–æ–¥: st.metric("–í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é", stats.get('total', 0))
        –ù–µ –¥–æ–ª–∂–µ–Ω –ø–∞–¥–∞—Ç—å —Å AttributeError
        """
        result = execute_query("""
            SELECT
                COUNT(*) as total,
                COUNT(CASE WHEN completion_status = 'completed' THEN 1 END) as completed
            FROM sessions
            WHERE started_at >= NOW() - INTERVAL '7 days'
        """)

        stats = result[0] if result else {}

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–¥ –∏–∑ Streamlit —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total = stats.get('total', 0)
        completed = stats.get('completed', 0)
        avg_progress = stats.get('avg_progress', 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ st.metric
        assert isinstance(total, (int, type(None))), \
            f"total –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int –¥–ª—è st.metric, –ø–æ–ª—É—á–µ–Ω {type(total)}"
        assert isinstance(completed, (int, type(None))), \
            f"completed –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int –¥–ª—è st.metric, –ø–æ–ª—É—á–µ–Ω {type(completed)}"

    def test_all_agent_types_queries_work(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç

        –¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤: interviewer, auditor, planner, writer, researcher
        """
        agent_queries = {
            'interviewer': "SELECT COUNT(*) as total FROM sessions",
            'auditor': "SELECT COUNT(*) as total FROM auditor_results",
            'planner': "SELECT COUNT(*) as total FROM planner_structures",
            'writer': "SELECT COUNT(*) as total FROM grants",
            'researcher': "SELECT COUNT(*) as total FROM researcher_research"
        }

        for agent_type, query in agent_queries.items():
            result = execute_query(query)

            assert isinstance(result, list), \
                f"–ó–∞–ø—Ä–æ—Å –¥–ª—è {agent_type} –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫"

            if len(result) > 0:
                stats = result[0]
                assert hasattr(stats, 'get'), \
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {agent_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –º–µ—Ç–æ–¥ .get()"

                total = stats.get('total', 0)
                assert isinstance(total, int), \
                    f"total –¥–ª—è {agent_type} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å int, –ø–æ–ª—É—á–µ–Ω {type(total)}"
