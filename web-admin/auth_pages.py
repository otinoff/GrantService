#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∞–¥–º–∏–Ω–∫–∏
"""

import streamlit as st
import sys
import os
from functools import wraps

sys.path.append('/var/GrantService')
from data.database import auth_manager, UserRole

class PageAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    @staticmethod
    def check_page_access(page_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        if 'user_data' not in st.session_state:
            return False
        
        user_id = st.session_state.user_data.get('telegram_id')
        if not user_id:
            return False
        
        return auth_manager.can_access_page(user_id, page_name)
    
    @staticmethod
    def require_page_access(page_name: str):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        def decorator(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                if not PageAuth.check_page_access(page_name):
                    st.error(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '{page_name}'")
                    st.stop()
                return func(*args, **kwargs)
            return wrapper
        return decorator
    
    @staticmethod
    def require_admin():
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        def decorator(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                if 'user_data' not in st.session_state:
                    st.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    st.stop()
                
                user_id = st.session_state.user_data.get('telegram_id')
                if not auth_manager.is_admin(user_id):
                    st.error("‚ùå –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                    st.stop()
                    
                return func(*args, **kwargs)
            return wrapper
        return decorator
    
    @staticmethod
    def require_editor():
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤"""
        def decorator(func):
            @wraps(func)
            def wrapper(*args, **kwargs):
                if 'user_data' not in st.session_state:
                    st.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                    st.stop()
                
                user_id = st.session_state.user_data.get('telegram_id')
                if not auth_manager.can_edit_content(user_id):
                    st.error("‚ùå –≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                    st.stop()
                    
                return func(*args, **kwargs)
            return wrapper
        return decorator
    
    @staticmethod
    def get_user_role_badge() -> str:
        """–ü–æ–ª—É—á–∏—Ç—å badge —Å —Ä–æ–ª—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if 'user_data' not in st.session_state:
            return ""
        
        user_id = st.session_state.user_data.get('telegram_id')
        if not user_id:
            return ""
        
        role = auth_manager.get_user_role(user_id)
        
        role_badges = {
            UserRole.ADMIN.value: "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            UserRole.EDITOR.value: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä",
            UserRole.VIEWER.value: "üëÅÔ∏è –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å",
            UserRole.USER.value: "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }
        
        return role_badges.get(role, "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    @staticmethod
    def show_access_denied_message(required_role: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
        st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
        if required_role:
            st.info(f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: **{required_role}**")
        
        st.markdown("""
        ### –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:
        
        1. **–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É** –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤
        2. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å** –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è
        3. **–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É** –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        """)
        
        if st.button("üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é"):
            st.switch_page("pages/üìä_–ì–ª–∞–≤–Ω–∞—è.py")
    
    @staticmethod
    def get_accessible_pages() -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if 'user_data' not in st.session_state:
            return []
        
        user_id = st.session_state.user_data.get('telegram_id')
        if not user_id:
            return []
        
        return auth_manager.get_accessible_pages(user_id)
    
    @staticmethod
    def show_navigation_sidebar():
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        with st.sidebar:
            st.markdown("## üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            badge = PageAuth.get_user_role_badge()
            if badge:
                st.markdown(f"**{badge}**")
                st.markdown("---")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            accessible_pages = PageAuth.get_accessible_pages()
            
            # –ì—Ä—É–ø–ø—ã —Å—Ç—Ä–∞–Ω–∏—Ü
            page_groups = {
                "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞": [
                    ("dashboard", "üìä –ì–ª–∞–≤–Ω–∞—è", "pages/üìä_–ì–ª–∞–≤–Ω–∞—è.py"),
                    ("analytics", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "pages/üìà_–ê–Ω–∞–ª–∏—Ç–∏–∫–∞.py"),
                    ("export", "üì• –≠–∫—Å–ø–æ—Ä—Ç", "pages/üì•_–≠–∫—Å–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py"),
                ],
                "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º": [
                    ("questions", "‚ùì –í–æ–ø—Ä–æ—Å—ã", "pages/‚ùì_–í–æ–ø—Ä–æ—Å—ã_–∏–Ω—Ç–µ—Ä–≤—å—é.py"),
                    ("prompts", "ü§ñ –ü—Ä–æ–º–ø—Ç—ã", "pages/ü§ñ_–ü—Ä–æ–º–ø—Ç—ã_–∞–≥–µ–Ω—Ç–æ–≤.py"),
                    ("agents", "üë• –ê–≥–µ–Ω—Ç—ã", "pages/üë•_–ê–≥–µ–Ω—Ç—ã.py"),
                    ("applications", "üìã –ó–∞—è–≤–∫–∏", "pages/üìã_–ó–∞—è–≤–∫–∏.py"),
                ],
                "‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ": [
                    ("users", "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "pages/üë§_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.py"),
                    ("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "pages/‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py"),
                    ("logs", "üìú –õ–æ–≥–∏", "pages/üìú_–õ–æ–≥–∏.py"),
                ],
            }
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –≥—Ä—É–ø–ø–∞–º
            for group_name, pages in page_groups.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –≥—Ä—É–ø–ø–µ
                group_accessible = [p for p in pages if p[0] in accessible_pages]
                
                if group_accessible:
                    st.markdown(f"### {group_name}")
                    for page_key, page_title, page_file in group_accessible:
                        if st.button(page_title, key=f"nav_{page_key}"):
                            st.switch_page(page_file)
                    st.markdown("")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
def check_auth():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    if 'user_data' not in st.session_state:
        st.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        st.markdown("""
        ### –ö–∞–∫ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:
        1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ @GrantServiceBot
        2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/login` –∏–ª–∏ `/admin`
        3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ
        """)
        st.stop()
    
    return st.session_state.user_data

def check_role(required_role: UserRole):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_data = check_auth()
    user_id = user_data.get('telegram_id')
    
    user_role = auth_manager.get_user_role(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–æ–ª–µ–π
    role_hierarchy = {
        UserRole.USER.value: 0,
        UserRole.VIEWER.value: 1,
        UserRole.EDITOR.value: 2,
        UserRole.ADMIN.value: 3
    }
    
    user_level = role_hierarchy.get(user_role, 0)
    required_level = role_hierarchy.get(required_role.value, 999)
    
    if user_level < required_level:
        PageAuth.show_access_denied_message(required_role.value)
        st.stop()
    
    return user_data

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
require_admin = PageAuth.require_admin
require_editor = PageAuth.require_editor
require_page_access = PageAuth.require_page_access