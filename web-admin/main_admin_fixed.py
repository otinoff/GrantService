#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –í–µ–±-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
–î–æ–º–µ–Ω: grantservice.onff.ru
"""

import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime, timedelta
import sqlite3
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/var/GrantService/config/.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Streamlit
st.set_page_config(
    page_title="üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
.main-header {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-card {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #667eea;
}
.status-running {
    color: #28a745;
    font-weight: bold;
}
.status-error {
    color: #dc3545;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
@st.cache_data(ttl=60)
def get_bot_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞"""
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN', '7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo')}/getMe",
            timeout=5
        )
        if response.status_code == 200:
            return {"status": "running", "data": response.json()}
        else:
            return {"status": "error", "data": None}
    except:
        return {"status": "error", "data": None}

@st.cache_data(ttl=300)
def get_analytics_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    return {
        "total_sessions": 142,
        "completed_apps": 67,
        "conversion_rate": 47.2,
        "avg_time_minutes": 12,
        "daily_stats": {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 15,
            "–í—Ç–æ—Ä–Ω–∏–∫": 23, 
            "–°—Ä–µ–¥–∞": 18,
            "–ß–µ—Ç–≤–µ—Ä–≥": 31,
            "–ü—è—Ç–Ω–∏—Ü–∞": 42,
            "–°—É–±–±–æ—Ç–∞": 12,
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 8
        }
    }

@st.cache_data(ttl=60)
def get_system_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
        result = os.system("systemctl is-active --quiet grantservice-bot.service")
        systemd_status = "active" if result == 0 else "inactive"
        
        return {
            "telegram_bot": "running",  # –ó–∞–≥–ª—É—à–∫–∞
            "systemd_service": systemd_status,
            "web_admin": "running"
        }
    except:
        return {
            "telegram_bot": "error",
            "systemd_service": "error", 
            "web_admin": "running"
        }

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫</p>
</div>
""", unsafe_allow_html=True)

# Sidebar –Ω–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.markdown("### üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", [
    "üè† –ì–ª–∞–≤–Ω–∞—è", 
    "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", 
    "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
    "üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤", 
    "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
    "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
])

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ sidebar
st.sidebar.markdown("---")
st.sidebar.markdown("### üì° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
system_status = get_system_status()

if system_status["telegram_bot"] == "running":
    st.sidebar.markdown("üü¢ **Telegram Bot:** –†–∞–±–æ—Ç–∞–µ—Ç")
else:
    st.sidebar.markdown("üî¥ **Telegram Bot:** –û—à–∏–±–∫–∞")

if system_status["systemd_service"] == "active":
    st.sidebar.markdown("üü¢ **SystemD:** –ê–∫—Ç–∏–≤–µ–Ω")
else:
    st.sidebar.markdown("üî¥ **SystemD:** –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")

st.sidebar.markdown("üü¢ **–í–µ–±-–∞–¥–º–∏–Ω–∫–∞:** –†–∞–±–æ—Ç–∞–µ—Ç")

# === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===
if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
    st.markdown("## üéØ –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)
    analytics = get_analytics_data()
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π", 
            analytics["total_sessions"], 
            "+12"
        )
    with col2:
        st.metric(
            "–ì–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", 
            analytics["completed_apps"], 
            "+5"
        )
    with col3:
        st.metric(
            "–ö–æ–Ω–≤–µ—Ä—Å–∏—è", 
            f"{analytics['conversion_rate']}%", 
            "+3%"
        )
    with col4:
        st.metric(
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", 
            f"{analytics['avg_time_minutes']} –º–∏–Ω", 
            "-2 –º–∏–Ω"
        )
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    st.markdown("### üîß –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    col1, col2 = st.columns(2)
    
    with col1:
        bot_status = get_bot_status()
        if bot_status["status"] == "running":
            st.success("ü§ñ **Telegram Bot** - –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            if bot_status["data"]:
                bot_info = bot_status["data"]["result"]
                st.info(f"@{bot_info['username']} | ID: {bot_info['id']}")
        else:
            st.error("ü§ñ **Telegram Bot** - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with col2:
        if system_status["systemd_service"] == "active":
            st.success("‚öôÔ∏è **SystemD Service** - –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            st.error("‚öôÔ∏è **SystemD Service** - –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    activities = [
        {"time": "10:30", "user": "–ù–∏–∫–æ–ª–∞–π –°—Ç–µ–ø–∞–Ω–æ–≤", "action": "–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –ü–æ—Ç–∞–Ω–∏–Ω–∞"},
        {"time": "09:15", "user": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "action": "–ü—Ä–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–≤—å—é"},
        {"time": "08:45", "user": "Admin", "action": "–û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞"},
    ]
    
    for activity in activities:
        st.markdown(f"**{activity['time']}** - {activity['user']}: {activity['action']}")

# === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
elif page == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.markdown("## üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å–∞")
    
    analytics = get_analytics_data()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π", analytics["total_sessions"], "+12")
    with col2:
        st.metric("–ì–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", analytics["completed_apps"], "+5")
    with col3:
        st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{analytics['conversion_rate']}%", "+3%")
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{analytics['avg_time_minutes']} –º–∏–Ω", "-2 –º–∏–Ω")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    st.markdown("### üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    daily_data = analytics["daily_stats"]
    df_daily = pd.DataFrame(list(daily_data.items()), columns=['–î–µ–Ω—å', '–°–µ—Å—Å–∏–∏'])
    
    st.bar_chart(df_daily.set_index('–î–µ–Ω—å'))
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**")
        users = [
            {"name": "–ù–∏–∫–æ–ª–∞–π –°—Ç–µ–ø–∞–Ω–æ–≤", "sessions": 15, "completed": 8},
            {"name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "sessions": 12, "completed": 6},
            {"name": "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "sessions": 8, "completed": 3},
        ]
        
        for user in users:
            st.markdown(f"- {user['name']}: {user['sessions']} —Å–µ—Å—Å–∏–π, {user['completed']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    with col2:
        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º:**")
        stages = [
            {"stage": "–ò–Ω—Ç–µ—Ä–≤—å—é", "completed": 142, "conversion": "100%"},
            {"stage": "–ê—É–¥–∏—Ç", "completed": 98, "conversion": "69%"},
            {"stage": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "completed": 67, "conversion": "47%"},
            {"stage": "–ù–∞–ø–∏—Å–∞–Ω–∏–µ", "completed": 67, "conversion": "47%"},
        ]
        
        for stage in stages:
            st.markdown(f"- {stage['stage']}: {stage['completed']} ({stage['conversion']})")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–ê–ú–ò ===
elif page == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏":
    st.markdown("## üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown("### –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é")
        with col2:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", type="primary"):
                st.session_state.add_question = True
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        questions = db.get_active_questions()
        
        if not questions:
            st.warning("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            for i, question in enumerate(questions):
                with st.expander(f"–í–æ–ø—Ä–æ—Å {question['question_number']}: {question['question_text'][:50]}..."):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:** {question['question_text']}")
                        if question['hint_text']:
                            st.markdown(f"**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {question['hint_text']}")
                        st.markdown(f"**–¢–∏–ø:** {question['question_type']} | **–ü–æ–ª–µ –ë–î:** {question['field_name']}")
                        st.markdown(f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π:** {'‚úÖ' if question['is_required'] else '‚ùå'}")
                        
                        if question['validation_rules']:
                            rules = question['validation_rules']
                            rules_text = []
                            if 'min_length' in rules:
                                rules_text.append(f"–º–∏–Ω. –¥–ª–∏–Ω–∞: {rules['min_length']}")
                            if 'max_length' in rules:
                                rules_text.append(f"–º–∞–∫—Å. –¥–ª–∏–Ω–∞: {rules['max_length']}")
                            st.markdown(f"**–í–∞–ª–∏–¥–∞—Ü–∏—è:** {', '.join(rules_text)}")
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{i}"):
                            st.session_state.edit_question = question
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}"):
                            if db.delete_question(question['id']):
                                st.success("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            if st.session_state.get('add_question') or st.session_state.get('edit_question'):
                st.markdown("---")
                st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
                
                question = st.session_state.get('edit_question', {})
                
                with st.form("question_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        question_number = st.number_input("–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", 1, 100, question.get('question_number', 1))
                        question_text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", question.get('question_text', ''), height=100)
                        field_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î", question.get('field_name', ''))
                        question_type = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", 
                            ['text', 'textarea', 'select', 'number', 'date'], 
                            index=['text', 'textarea', 'select', 'number', 'date'].index(question.get('question_type', 'text')))
                    
                    with col2:
                        hint_text = st.text_area("–ü–æ–¥—Å–∫–∞–∑–∫–∞/–ø—Ä–∏–º–µ—Ä", question.get('hint_text', ''), height=100)
                        is_required = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å", question.get('is_required', True))
                        is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å", question.get('is_active', True))
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è
                        st.markdown("**–ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**")
                        min_length = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞", 0, 1000, question.get('validation_rules', {}).get('min_length', 0))
                        max_length = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞", 0, 10000, question.get('validation_rules', {}).get('max_length', 1000))
                    
                    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            validation_rules = {}
                            if min_length > 0:
                                validation_rules['min_length'] = min_length
                            if max_length > 0:
                                validation_rules['max_length'] = max_length
                            
                            question_data = {
                                'question_number': question_number,
                                'question_text': question_text,
                                'field_name': field_name,
                                'question_type': question_type,
                                'hint_text': hint_text,
                                'is_required': is_required,
                                'is_active': is_active,
                                'validation_rules': validation_rules
                            }
                            
                            if st.session_state.get('edit_question'):
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                if db.update_question(question['id'], question_data):
                                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    del st.session_state.edit_question
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ
                                new_id = db.create_question(question_data)
                                if new_id:
                                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!")
                                    del st.session_state.add_question
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if st.session_state.get('edit_question'):
                                del st.session_state.edit_question
                            if st.session_state.get('add_question'):
                                del st.session_state.add_question
                            st.rerun()
                    
                    with col3:
                        if st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ /var/GrantService/data/")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –†–ï–î–ê–ö–¢–û–† –ü–†–û–ú–ü–¢–û–í ===
elif page == "üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤":
    st.markdown("## üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts = load_prompts()
    
    # –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
    agent_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:",
        ["interviewer", "auditor", "planner", "writer"],
        format_func=lambda x: {
            "interviewer": "üé§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä",
            "auditor": "üîç –ê—É–¥–∏—Ç–æ—Ä", 
            "planner": "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
            "writer": "‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å"
        }[x]
    )
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
    st.markdown(f"### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞: {agent_type}")
    
    current_prompt = prompts.get(agent_type, "")
    
    new_prompt = st.text_area(
        "–ü—Ä–æ–º–ø—Ç:",
        value=current_prompt,
        height=400,
        help="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        temperature = st.slider("Temperature", 0.0, 1.0, 0.7, 0.1)
    with col2:
        max_tokens = st.number_input("Max tokens", 100, 4000, 2000, 100)
    with col3:
        model = st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat-Max", "GigaChat-Pro", "GigaChat"])
    
    # –ö–Ω–æ–ø–∫–∏
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="primary"):
            prompts[agent_type] = new_prompt
            save_prompts(prompts)
            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            st.info("–§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
    st.markdown("## üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    st.info("üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    users_data = [
        {"id": 1, "name": "–ù–∏–∫–æ–ª–∞–π –°—Ç–µ–ø–∞–Ω–æ–≤", "telegram_id": "123456789", "sessions": 15, "last_active": "2025-07-18 10:30"},
        {"id": 2, "name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "telegram_id": "987654321", "sessions": 8, "last_active": "2025-07-18 09:15"},
        {"id": 3, "name": "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "telegram_id": "555666777", "sessions": 3, "last_active": "2025-07-18 08:45"},
    ]
    
    df_users = pd.DataFrame(users_data)
    st.dataframe(df_users, use_container_width=True)

# === –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ ===
elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã":
    st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
    st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò")
    col1, col2 = st.columns(2)
    
    with col1:
        temperature = st.slider("Temperature", 0.0, 1.0, 0.7, 0.1)
        max_tokens = st.number_input("Max tokens", 100, 4000, 2000, 100)
    
    with col2:
        model = st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat-Max", "GigaChat-Pro", "GigaChat"])
        timeout = st.number_input("Timeout (—Å–µ–∫)", 5, 60, 30)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    st.markdown("### üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
    welcome_message = st.text_area(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        value="""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å!

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∑–∞ 15-20 –º–∏–Ω—É—Ç.

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–≤—å—é - —Å–æ–±–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ
2Ô∏è‚É£ –ê—É–¥–∏—Ç - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
3Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
4Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–Ω–∏–µ - —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /interview üëá""",
        height=200
    )
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    col1, col2 = st.columns(2)
    
    with col1:
        log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", ["DEBUG", "INFO", "WARNING", "ERROR"])
        auto_backup = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", value=True)
    
    with col2:
        maintenance_mode = st.checkbox("–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", value=False)
        debug_mode = st.checkbox("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=True)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
elif page == "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
    st.markdown("## üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("### üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("CPU", "15%", "‚Üì5%")
    with col2:
        st.metric("RAM", "512MB", "‚Üë50MB")
    with col3:
        st.metric("–î–∏—Å–∫", "2.1GB", "‚Üë100MB")
    
    # –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤
    col1, col2, col3 = st.columns(3)
    with col1:
        log_level_filter = st.selectbox("–£—Ä–æ–≤–µ–Ω—å", ["ALL", "INFO", "WARNING", "ERROR"])
    with col2:
        log_component = st.selectbox("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", ["ALL", "Telegram Bot", "Web Admin", "SystemD"])
    with col3:
        log_lines = st.number_input("–°—Ç—Ä–æ–∫", 10, 100, 20)
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
    sample_logs = [
        "2025-07-18 03:45:30 - INFO - HTTP Request: getUpdates 200 OK",
        "2025-07-18 03:45:25 - INFO - User 123456789 started interview",
        "2025-07-18 03:45:20 - INFO - SystemD service healthy",
        "2025-07-18 03:45:15 - WARNING - High CPU usage detected",
        "2025-07-18 03:45:10 - INFO - Prompt updated for agent –ê—É–¥–∏—Ç–æ—Ä",
    ]
    
    st.code("\n".join(sample_logs))
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
            st.rerun()
    with col2:
        if st.button("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏"):
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
            st.warning("–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; margin-top: 2rem;'>
    <p>üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å –í–µ–±-–∞–¥–º–∏–Ω–∫–∞ v1.0 | 
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: –ê–Ω–¥—Ä–µ–π –û—Ç–∏–Ω–æ–≤ | 
    –î–æ–º–µ–Ω: <a href='https://grantservice.onff.ru'>grantservice.onff.ru</a></p>
</div>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∏)
def load_prompts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    return {
        "interviewer": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ó–∞–¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.",
        "auditor": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—É–¥–∏—Ç—É –ø—Ä–æ–µ–∫—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        "planner": "–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        "writer": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    }

def save_prompts(prompts):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î
    pass 