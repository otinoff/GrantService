#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –í–µ–±-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –±–æ—Ç–æ–º
–î–æ–º–µ–Ω: grantservice.onff.ru
"""

import streamlit as st
import requests
import json
import pandas as pd
from datetime import datetime, timedelta
import sqlite3
import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv('/var/GrantService/config/.env')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Streamlit
st.set_page_config(
    page_title="üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
.main-header {
    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin-bottom: 2rem;
}
.metric-card {
    background: #f8f9fa;
    padding: 1rem;
    border-radius: 8px;
    border-left: 4px solid #667eea;
}
.status-running {
    color: #28a745;
    font-weight: bold;
}
.status-error {
    color: #dc3545;
    font-weight: bold;
}
</style>
""", unsafe_allow_html=True)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
@st.cache_data(ttl=60)
def get_bot_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞"""
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN', '7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo')}/getMe",
            timeout=5
        )
        if response.status_code == 200:
            return {"status": "running", "data": response.json()}
        else:
            return {"status": "error", "data": None}
    except:
        return {"status": "error", "data": None}

@st.cache_data(ttl=300)
def get_analytics_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã
        stats = db.get_users_statistics()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        total_sessions = stats.get('total_sessions', 0)
        completed_sessions = stats.get('completed_sessions', 0)
        conversion_rate = (completed_sessions / total_sessions * 100) if total_sessions > 0 else 0
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ–∫–∞ –Ω–µ—Ç –≤ –ë–î)
        daily_stats = {
            "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 15,
            "–í—Ç–æ—Ä–Ω–∏–∫": 23, 
            "–°—Ä–µ–¥–∞": 18,
            "–ß–µ—Ç–≤–µ—Ä–≥": 31,
            "–ü—è—Ç–Ω–∏—Ü–∞": 42,
            "–°—É–±–±–æ—Ç–∞": 12,
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 8
        }
        
        return {
            "total_sessions": total_sessions,
            "completed_apps": completed_sessions,
            "conversion_rate": round(conversion_rate, 1),
            "avg_time_minutes": 12,  # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
            "daily_stats": daily_stats
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        # Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
        return {
            "total_sessions": 142,
            "completed_apps": 67,
            "conversion_rate": 47.2,
            "avg_time_minutes": 12,
            "daily_stats": {
                "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 15,
                "–í—Ç–æ—Ä–Ω–∏–∫": 23, 
                "–°—Ä–µ–¥–∞": 18,
                "–ß–µ—Ç–≤–µ—Ä–≥": 31,
                "–ü—è—Ç–Ω–∏—Ü–∞": 42,
                "–°—É–±–±–æ—Ç–∞": 12,
                "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 8
            }
        }

@st.cache_data(ttl=60)
def get_system_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞
        result = os.system("systemctl is-active --quiet grantservice-bot.service")
        systemd_status = "active" if result == 0 else "inactive"
        
        return {
            "telegram_bot": "running",  # –ó–∞–≥–ª—É—à–∫–∞
            "systemd_service": systemd_status,
            "web_admin": "running"
        }
    except:
        return {
            "telegram_bot": "error",
            "systemd_service": "error", 
            "web_admin": "running"
        }

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="main-header">
    <h1>üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h1>
    <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫</p>
</div>
""", unsafe_allow_html=True)

# Sidebar –Ω–∞–≤–∏–≥–∞—Ü–∏—è
st.sidebar.markdown("### üéõÔ∏è –ù–∞–≤–∏–≥–∞—Ü–∏—è")
            page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", [
                "üè† –ì–ª–∞–≤–Ω–∞—è", 
                "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏",
                "üîç –ü—Ä–æ–º–ø—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è",
                "‚úçÔ∏è –ü—Ä–æ–º–ø—Ç—ã –ø–∏—Å–∞—Ç–µ–ª—è",
                "üîç –ü—Ä–æ–º–ø—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è",
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
            ])

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –≤ sidebar
st.sidebar.markdown("---")
st.sidebar.markdown("### üì° –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
system_status = get_system_status()

if system_status["telegram_bot"] == "running":
    st.sidebar.markdown("üü¢ **Telegram Bot:** –†–∞–±–æ—Ç–∞–µ—Ç")
else:
    st.sidebar.markdown("üî¥ **Telegram Bot:** –û—à–∏–±–∫–∞")

if system_status["systemd_service"] == "active":
    st.sidebar.markdown("üü¢ **SystemD:** –ê–∫—Ç–∏–≤–µ–Ω")
else:
    st.sidebar.markdown("üî¥ **SystemD:** –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")

st.sidebar.markdown("üü¢ **–í–µ–±-–∞–¥–º–∏–Ω–∫–∞:** –†–∞–±–æ—Ç–∞–µ—Ç")

# === –ì–õ–ê–í–ù–ê–Ø –°–¢–†–ê–ù–ò–¶–ê ===
if page == "üè† –ì–ª–∞–≤–Ω–∞—è":
    st.markdown("## üéØ –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)
    analytics = get_analytics_data()
    
    with col1:
        st.metric(
            "–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π", 
            analytics["total_sessions"], 
            ""  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        )
    with col2:
        st.metric(
            "–ì–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", 
            analytics["completed_apps"], 
            ""  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        )
    with col3:
        st.metric(
            "–ö–æ–Ω–≤–µ—Ä—Å–∏—è", 
            f"{analytics['conversion_rate']}%", 
            ""  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        )
    with col4:
        st.metric(
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", 
            f"{analytics['avg_time_minutes']} –º–∏–Ω", 
            ""  # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        )
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    st.markdown("### üîß –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    col1, col2 = st.columns(2)
    
    with col1:
        bot_status = get_bot_status()
        if bot_status["status"] == "running":
            st.success("ü§ñ **Telegram Bot** - –†–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
            if bot_status["data"]:
                bot_info = bot_status["data"]["result"]
                st.info(f"@{bot_info['username']} | ID: {bot_info['id']}")
        else:
            st.error("ü§ñ **Telegram Bot** - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    with col2:
        if system_status["systemd_service"] == "active":
            st.success("‚öôÔ∏è **SystemD Service** - –ê–∫—Ç–∏–≤–µ–Ω")
        else:
            st.error("‚öôÔ∏è **SystemD Service** - –ù–µ–∞–∫—Ç–∏–≤–µ–Ω")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.get_all_users()
        if users:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            users_sorted = sorted(users, key=lambda x: x.get('last_active', ''), reverse=True)
            
            for user in users_sorted[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                last_active = user.get('last_active', '')
                if last_active:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ISO —Ñ–æ—Ä–º–∞—Ç –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (GMT+7)
                    try:
                        from datetime import datetime
                        import pytz
                        
                        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞
                        dt = datetime.fromisoformat(last_active.replace('Z', '+00:00'))
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ GMT+7 (–ö–µ–º–µ—Ä–æ–≤–æ)
                        kuzbass_tz = pytz.timezone('Asia/Novosibirsk')  # GMT+7
                        dt_local = dt.astimezone(kuzbass_tz)
                        
                        time_str = dt_local.strftime('%H:%M')
                        date_str = dt_local.strftime('%d.%m')
                    except Exception as e:
                        # Fallback –±–µ–∑ pytz
                        try:
                            from datetime import datetime, timedelta
                            dt = datetime.fromisoformat(last_active.replace('Z', '+00:00'))
                            # –î–æ–±–∞–≤–ª—è–µ–º 7 —á–∞—Å–æ–≤ –¥–ª—è GMT+7
                            dt_local = dt + timedelta(hours=7)
                            time_str = dt_local.strftime('%H:%M')
                            date_str = dt_local.strftime('%d.%m')
                        except:
                            time_str = "??:??"
                            date_str = "??.??"
                    
                    user_name = user.get('first_name', '') or user.get('username', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['telegram_id']}")
                    action = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ"
                    
                    st.markdown(f"**{time_str}** - {user_name}: {action}")
        else:
            st.info("üìä –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        # Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É
        activities = [
            {"time": "10:30", "user": "–ù–∏–∫–æ–ª–∞–π –°—Ç–µ–ø–∞–Ω–æ–≤", "action": "–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≥—Ä–∞–Ω—Ç –ü–æ—Ç–∞–Ω–∏–Ω–∞"},
            {"time": "09:15", "user": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "action": "–ü—Ä–æ—à–µ–ª –∏–Ω—Ç–µ—Ä–≤—å—é"},
            {"time": "08:45", "user": "Admin", "action": "–û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–º–ø—Ç –∞–≥–µ–Ω—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞"},
        ]
        
        for activity in activities:
            st.markdown(f"**{activity['time']}** - {activity['user']}: {activity['action']}")

# === –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
elif page == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.markdown("## üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å–∞")
    
    analytics = get_analytics_data()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π", analytics["total_sessions"], "")
    with col2:
        st.metric("–ì–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫", analytics["completed_apps"], "") 
    with col3:
        st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{analytics['conversion_rate']}%", "")
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", f"{analytics['avg_time_minutes']} –º–∏–Ω", "")
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
    st.markdown("### üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    daily_data = analytics["daily_stats"]
    df_daily = pd.DataFrame(list(daily_data.items()), columns=['–î–µ–Ω—å', '–°–µ—Å—Å–∏–∏'])
    
    st.bar_chart(df_daily.set_index('–î–µ–Ω—å'))
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**")
        try:
            sys.path.append('/var/GrantService/data')
            from database import db
            
            users = db.get_all_users()
            if users:
                for user in users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
                    user_name = user.get('first_name', '') or user.get('username', f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['telegram_id']}")
                    total_sessions = user.get('total_sessions', 0)
                    completed_sessions = user.get('completed_sessions', 0)
                    st.markdown(f"- {user_name}: {total_sessions} —Å–µ—Å—Å–∏–π, {completed_sessions} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            else:
                st.info("üìä –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            st.markdown("- –ù–∏–∫–æ–ª–∞–π –°—Ç–µ–ø–∞–Ω–æ–≤: 15 —Å–µ—Å—Å–∏–π, 8 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            st.markdown("- –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 12 —Å–µ—Å—Å–∏–π, 6 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            st.markdown("- –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 8 —Å–µ—Å—Å–∏–π, 3 –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    with col2:
        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç—Ç–∞–ø–∞–º:**")
        stages = [
            {"stage": "–ò–Ω—Ç–µ—Ä–≤—å—é", "completed": 142, "conversion": "100%"},
            {"stage": "–ê—É–¥–∏—Ç", "completed": 98, "conversion": "69%"},
            {"stage": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "completed": 67, "conversion": "47%"},
            {"stage": "–ù–∞–ø–∏—Å–∞–Ω–∏–µ", "completed": 67, "conversion": "47%"},
        ]
        
        for stage in stages:
            st.markdown(f"- {stage['stage']}: {stage['completed']} ({stage['conversion']})")

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–ü–†–û–°–ê–ú–ò ===
elif page == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏":
    st.markdown("## üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown("### –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–Ω—Ç–µ—Ä–≤—å—é")
        with col2:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", type="primary"):
                st.session_state.add_question = True
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        questions = db.get_active_questions()
        
        if not questions:
            st.warning("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
            
            for i, question in enumerate(questions):
                with st.expander(f"–í–æ–ø—Ä–æ—Å {question['question_number']}: {question['question_text'][:50]}..."):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:** {question['question_text']}")
                        if question['hint_text']:
                            st.markdown(f"**–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {question['hint_text']}")
                        st.markdown(f"**–¢–∏–ø:** {question['question_type']} | **–ü–æ–ª–µ –ë–î:** {question['field_name']}")
                        st.markdown(f"**–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π:** {'‚úÖ' if question['is_required'] else '‚ùå'}")
                        
                        if question['validation_rules']:
                            rules = question['validation_rules']
                            rules_text = []
                            if 'min_length' in rules:
                                rules_text.append(f"–º–∏–Ω. –¥–ª–∏–Ω–∞: {rules['min_length']}")
                            if 'max_length' in rules:
                                rules_text.append(f"–º–∞–∫—Å. –¥–ª–∏–Ω–∞: {rules['max_length']}")
                            st.markdown(f"**–í–∞–ª–∏–¥–∞—Ü–∏—è:** {', '.join(rules_text)}")
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{i}"):
                            st.session_state.edit_question = question
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{i}"):
                            if db.delete_question(question['id']):
                                st.success("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            if st.session_state.get('add_question') or st.session_state.get('edit_question'):
                st.markdown("---")
                st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
                
                question = st.session_state.get('edit_question', {})
                
                with st.form("question_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        question_number = st.number_input("–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", 1, 100, question.get('question_number', 1))
                        question_text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", question.get('question_text', ''), height=100)
                        field_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤ –ë–î", question.get('field_name', ''))
                        question_type = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", 
                            ['text', 'textarea', 'select', 'number', 'date'], 
                            index=['text', 'textarea', 'select', 'number', 'date'].index(question.get('question_type', 'text')))
                    
                    with col2:
                        hint_text = st.text_area("–ü–æ–¥—Å–∫–∞–∑–∫–∞/–ø—Ä–∏–º–µ—Ä", question.get('hint_text', ''), height=100)
                        is_required = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å", question.get('is_required', True))
                        is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å", question.get('is_active', True))
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è
                        st.markdown("**–ü—Ä–∞–≤–∏–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:**")
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                        if question_type in ['text', 'textarea']:
                            min_length = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (—Å–∏–º–≤–æ–ª–æ–≤)", 0, 1000, question.get('validation_rules', {}).get('min_length', 0))
                            max_length = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ (—Å–∏–º–≤–æ–ª–æ–≤)", 0, 10000, question.get('validation_rules', {}).get('max_length', 1000))
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                        elif question_type == 'number':
                            min_value = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", -1000000, 1000000, question.get('validation_rules', {}).get('min_value', 0))
                            max_value = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", -1000000, 1000000, question.get('validation_rules', {}).get('max_value', 1000000))
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞—Ç
                        elif question_type == 'date':
                            min_date = st.date_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=None)
                            max_date = st.date_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞", value=None)
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
                        elif question_type == 'select':
                            options_text = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)", 
                                value='\n'.join(question.get('validation_rules', {}).get('options', [])), 
                                height=100,
                                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏")
                    
                    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            validation_rules = {}
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
                            if question_type in ['text', 'textarea']:
                                if min_length > 0:
                                    validation_rules['min_length'] = min_length
                                if max_length > 0:
                                    validation_rules['max_length'] = max_length
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                            elif question_type == 'number':
                                if 'min_value' in locals() and min_value is not None:
                                    validation_rules['min_value'] = min_value
                                if 'max_value' in locals() and max_value is not None:
                                    validation_rules['max_value'] = max_value
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–∞—Ç
                            elif question_type == 'date':
                                if 'min_date' in locals() and min_date is not None:
                                    validation_rules['min_date'] = min_date.isoformat()
                                if 'max_date' in locals() and max_date is not None:
                                    validation_rules['max_date'] = max_date.isoformat()
                            
                            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
                            elif question_type == 'select':
                                if 'options_text' in locals() and options_text.strip():
                                    options = [opt.strip() for opt in options_text.split('\n') if opt.strip()]
                                    validation_rules['options'] = options
                            
                            question_data = {
                                'question_number': question_number,
                                'question_text': question_text,
                                'field_name': field_name,
                                'question_type': question_type,
                                'hint_text': hint_text,
                                'is_required': is_required,
                                'is_active': is_active,
                                'validation_rules': validation_rules
                            }
                            
                            if st.session_state.get('edit_question'):
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                if db.update_question(question['id'], question_data):
                                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    del st.session_state.edit_question
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ
                                new_id = db.create_question(question_data)
                                if new_id:
                                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!")
                                    del st.session_state.add_question
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if st.session_state.get('edit_question'):
                                del st.session_state.edit_question
                            if st.session_state.get('add_question'):
                                del st.session_state.add_question
                            st.rerun()
                    
                    with col3:
                        if st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ /var/GrantService/data/")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –ü–†–û–ú–ü–¢–´ –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–Ø ===
elif page == "üîç –ü—Ä–æ–º–ø—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è":
    st.markdown("## üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")
    
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown("### –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")
        with col2:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="primary"):
                st.session_state.add_researcher_prompt = True
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        prompts = db.get_agent_prompts('researcher')
        
        if not prompts:
            st.warning("‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤")
            
            for i, prompt in enumerate(prompts):
                with st.expander(f"{prompt['prompt_name']} (ID: {prompt['id']})"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {prompt['prompt_name']}")
                        st.markdown(f"**–¢–∏–ø:** {prompt['prompt_type']} | **–ü–æ—Ä—è–¥–æ–∫:** {prompt['order_num']}")
                        st.markdown(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if prompt['is_active'] else '‚ùå'}")
                        st.markdown(f"**–ú–æ–¥–µ–ª—å:** {prompt['model_name']}")
                        st.markdown(f"**Temperature:** {prompt['temperature']} | **Max tokens:** {prompt['max_tokens']}")
                        st.markdown(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {prompt['prompt_content'][:100]}...")
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_researcher_{i}"):
                            st.session_state.edit_researcher_prompt = prompt
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_researcher_{i}"):
                            if db.delete_agent_prompt(prompt['id']):
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            if st.session_state.get('add_researcher_prompt') or st.session_state.get('edit_researcher_prompt'):
                st.markdown("---")
                st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
                
                prompt = st.session_state.get('edit_researcher_prompt', {})
                
                with st.form("researcher_prompt_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        prompt_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_name', ''))
                        prompt_content = st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_content', ''), height=300)
                        prompt_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞", 
                            ['system', 'task', 'context'], 
                            index=['system', 'task', 'context'].index(prompt.get('prompt_type', 'system')))
                    
                    with col2:
                        order_num = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1, 100, prompt.get('order_num', 1))
                        temperature = st.slider("Temperature", 0.0, 1.0, prompt.get('temperature', 0.7), 0.1)
                        max_tokens = st.number_input("Max tokens", 100, 4000, prompt.get('max_tokens', 2000), 100)
                        model_name = st.selectbox("–ú–æ–¥–µ–ª—å", 
                            ["GigaChat-Pro", "GigaChat-Max", "GigaChat"], 
                            index=["GigaChat-Pro", "GigaChat-Max", "GigaChat"].index(prompt.get('model_name', 'GigaChat-Pro')))
                        is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç", prompt.get('is_active', True))
                    
                    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            prompt_data = {
                                'agent_type': 'researcher',
                                'prompt_name': prompt_name,
                                'prompt_content': prompt_content,
                                'prompt_type': prompt_type,
                                'order_num': order_num,
                                'temperature': temperature,
                                'max_tokens': max_tokens,
                                'model_name': model_name,
                                'is_active': is_active
                            }
                            
                            if st.session_state.get('edit_researcher_prompt'):
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                if db.update_agent_prompt(prompt['id'], prompt_data):
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    del st.session_state.edit_researcher_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ
                                new_id = db.create_agent_prompt(prompt_data)
                                if new_id:
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω!")
                                    del st.session_state.add_researcher_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if st.session_state.get('edit_researcher_prompt'):
                                del st.session_state.edit_researcher_prompt
                            if st.session_state.get('add_researcher_prompt'):
                                del st.session_state.add_researcher_prompt
                            st.rerun()
                    
                    with col3:
                        if st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –ü–†–û–ú–ü–¢–´ –ü–ò–°–ê–¢–ï–õ–Ø ===
elif page == "‚úçÔ∏è –ü—Ä–æ–º–ø—Ç—ã –ø–∏—Å–∞—Ç–µ–ª—è":
    st.markdown("## ‚úçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –ø–∏—Å–∞—Ç–µ–ª—è")
    
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown("### –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–∏—Å–∞—Ç–µ–ª—è")
        with col2:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="primary"):
                st.session_state.add_writer_prompt = True
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–∏—Å–∞—Ç–µ–ª—è
        prompts = db.get_agent_prompts('writer')
        
        if not prompts:
            st.warning("‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤")
            
            for i, prompt in enumerate(prompts):
                with st.expander(f"{prompt['prompt_name']} (ID: {prompt['id']})"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {prompt['prompt_name']}")
                        st.markdown(f"**–¢–∏–ø:** {prompt['prompt_type']} | **–ü–æ—Ä—è–¥–æ–∫:** {prompt['order_num']}")
                        st.markdown(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if prompt['is_active'] else '‚ùå'}")
                        st.markdown(f"**–ú–æ–¥–µ–ª—å:** {prompt['model_name']}")
                        st.markdown(f"**Temperature:** {prompt['temperature']} | **Max tokens:** {prompt['max_tokens']}")
                        st.markdown(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {prompt['prompt_content'][:100]}...")
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_writer_{i}"):
                            st.session_state.edit_writer_prompt = prompt
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_writer_{i}"):
                            if db.delete_agent_prompt(prompt['id']):
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            if st.session_state.get('add_writer_prompt') or st.session_state.get('edit_writer_prompt'):
                st.markdown("---")
                st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
                
                prompt = st.session_state.get('edit_writer_prompt', {})
                
                with st.form("writer_prompt_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        prompt_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_name', ''))
                        prompt_content = st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_content', ''), height=300)
                        prompt_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞", 
                            ['system', 'task', 'context'], 
                            index=['system', 'task', 'context'].index(prompt.get('prompt_type', 'system')))
                    
                    with col2:
                        order_num = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1, 100, prompt.get('order_num', 1))
                        temperature = st.slider("Temperature", 0.0, 1.0, prompt.get('temperature', 0.7), 0.1)
                        max_tokens = st.number_input("Max tokens", 100, 4000, prompt.get('max_tokens', 2000), 100)
                        model_name = st.selectbox("–ú–æ–¥–µ–ª—å", 
                            ["GigaChat-Pro", "GigaChat-Max", "GigaChat"], 
                            index=["GigaChat-Pro", "GigaChat-Max", "GigaChat"].index(prompt.get('model_name', 'GigaChat-Pro')))
                        is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç", prompt.get('is_active', True))
                    
                    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            prompt_data = {
                                'agent_type': 'writer',
                                'prompt_name': prompt_name,
                                'prompt_content': prompt_content,
                                'prompt_type': prompt_type,
                                'order_num': order_num,
                                'temperature': temperature,
                                'max_tokens': max_tokens,
                                'model_name': model_name,
                                'is_active': is_active
                            }
                            
                            if st.session_state.get('edit_writer_prompt'):
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                if db.update_agent_prompt(prompt['id'], prompt_data):
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    del st.session_state.edit_writer_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ
                                new_id = db.create_agent_prompt(prompt_data)
                                if new_id:
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω!")
                                    del st.session_state.add_writer_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if st.session_state.get('edit_writer_prompt'):
                                del st.session_state.edit_writer_prompt
                            if st.session_state.get('add_writer_prompt'):
                                del st.session_state.add_writer_prompt
                            st.rerun()
                    
                    with col3:
                        if st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–Ø ===
elif page == "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è":
    st.markdown("## üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")
    
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            stats = db.get_researcher_statistics(30)
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", stats.get('total_queries', 0))
        
        with col2:
            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", stats.get('successful_queries', 0))
        
        with col3:
            success_rate = stats.get('success_rate', 0)
            st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞", f"{success_rate:.1f}%")
        
        with col4:
            total_cost = stats.get('total_cost', 0)
            st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${total_cost:.4f}")
        
        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("–ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º")
            daily_stats = stats.get('daily_stats', [])
            if daily_stats:
                df_daily = pd.DataFrame(daily_stats)
                st.line_chart(df_daily.set_index('date')['queries'])
        
        with col2:
            st.subheader("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
            if daily_stats:
                st.line_chart(df_daily.set_index('date')['cost'])
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        st.subheader("–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        popular_queries = stats.get('popular_queries', [])
        if popular_queries:
            df_popular = pd.DataFrame(popular_queries)
            st.dataframe(df_popular, use_container_width=True)
        
        # –õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # –§–∏–ª—å—Ç—Ä—ã
        col1, col2 = st.columns(2)
        with col1:
            user_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", ["–í—Å–µ"] + [str(i) for i in range(1, 11)])
        with col2:
            status_filter = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", ["–í—Å–µ", "success", "error"])
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏
        logs = db.get_researcher_logs(limit=50)
        
        if logs:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏
            if user_filter != "–í—Å–µ":
                logs = [log for log in logs if str(log['user_id']) == user_filter]
            
            if status_filter != "–í—Å–µ":
                logs = [log for log in logs if log['status'] == status_filter]
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
            for log in logs:
                with st.expander(f"–ó–∞–ø—Ä–æ—Å {log['id']} - {log['created_at']}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**–ó–∞–ø—Ä–æ—Å:**")
                        st.text(log['query_text'])
                        
                        st.write("**–°—Ç–∞—Ç—É—Å:**")
                        status_color = "green" if log['status'] == 'success' else "red"
                        st.markdown(f":{status_color}[{log['status']}]")
                        
                        st.write("**–°—Ç–æ–∏–º–æ—Å—Ç—å:**")
                        st.write(f"${log['cost']:.4f}")
                    
                    with col2:
                        st.write("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**")
                        st.write(f"ID: {log['user_id']}")
                        
                        st.write("**–°–µ—Å—Å–∏—è:**")
                        st.write(f"ID: {log['session_id']}")
                        
                        if log['sources']:
                            st.write("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                            for i, source in enumerate(log['sources'][:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                st.write(f"{i+1}. {source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                    
                    if log['perplexity_response']:
                        st.write("**–û—Ç–≤–µ—Ç:**")
                        st.text(log['perplexity_response'][:500] + "..." if len(log['perplexity_response']) > 500 else log['perplexity_response'])
                    
                    if log['error_message']:
                        st.write("**–û—à–∏–±–∫–∞:**")
                        st.error(log['error_message'])
        else:
            st.info("–õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –ü–†–û–ú–ü–¢–´ –ê–ù–ê–õ–ò–¢–ò–ö–ê ===
elif page == "üîç –ü—Ä–æ–º–ø—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞":
    st.markdown("## üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown("### –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        with col2:
            if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="primary"):
                st.session_state.add_auditor_prompt = True
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        prompts = db.get_agent_prompts('auditor')
        
        if not prompts:
            st.warning("‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
            st.markdown("### üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤")
            
            for i, prompt in enumerate(prompts):
                with st.expander(f"{prompt['prompt_name']} (ID: {prompt['id']})"):
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {prompt['prompt_name']}")
                        st.markdown(f"**–¢–∏–ø:** {prompt['prompt_type']} | **–ü–æ—Ä—è–¥–æ–∫:** {prompt['order_num']}")
                        st.markdown(f"**–ê–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if prompt['is_active'] else '‚ùå'}")
                        st.markdown(f"**–ú–æ–¥–µ–ª—å:** {prompt['model_name']}")
                        st.markdown(f"**Temperature:** {prompt['temperature']} | **Max tokens:** {prompt['max_tokens']}")
                        st.markdown(f"**–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {prompt['prompt_content'][:100]}...")
                    
                    with col2:
                        if st.button(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_auditor_{i}"):
                            st.session_state.edit_auditor_prompt = prompt
                        if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_auditor_{i}"):
                            if db.delete_agent_prompt(prompt['id']):
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
            
            # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
            if st.session_state.get('add_auditor_prompt') or st.session_state.get('edit_auditor_prompt'):
                st.markdown("---")
                st.markdown("### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
                
                prompt = st.session_state.get('edit_auditor_prompt', {})
                
                with st.form("auditor_prompt_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        prompt_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_name', ''))
                        prompt_content = st.text_area("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞", prompt.get('prompt_content', ''), height=300)
                        prompt_type = st.selectbox("–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞", 
                            ['system', 'task', 'context'], 
                            index=['system', 'task', 'context'].index(prompt.get('prompt_type', 'system')))
                    
                    with col2:
                        order_num = st.number_input("–ü–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 1, 100, prompt.get('order_num', 1))
                        temperature = st.slider("Temperature", 0.0, 1.0, prompt.get('temperature', 0.7), 0.1)
                        max_tokens = st.number_input("Max tokens", 100, 4000, prompt.get('max_tokens', 2000), 100)
                        model_name = st.selectbox("–ú–æ–¥–µ–ª—å", 
                            ["GigaChat-Pro", "GigaChat-Max", "GigaChat"], 
                            index=["GigaChat-Pro", "GigaChat-Max", "GigaChat"].index(prompt.get('model_name', 'GigaChat-Pro')))
                        is_active = st.checkbox("–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç", prompt.get('is_active', True))
                    
                    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º—ã
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            prompt_data = {
                                'agent_type': 'auditor',
                                'prompt_name': prompt_name,
                                'prompt_content': prompt_content,
                                'prompt_type': prompt_type,
                                'order_num': order_num,
                                'temperature': temperature,
                                'max_tokens': max_tokens,
                                'model_name': model_name,
                                'is_active': is_active
                            }
                            
                            if st.session_state.get('edit_auditor_prompt'):
                                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                                if db.update_agent_prompt(prompt['id'], prompt_data):
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    del st.session_state.edit_auditor_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                            else:
                                # –°–æ–∑–¥–∞–Ω–∏–µ
                                new_id = db.create_agent_prompt(prompt_data)
                                if new_id:
                                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω!")
                                    del st.session_state.add_auditor_prompt
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            if st.session_state.get('edit_auditor_prompt'):
                                del st.session_state.edit_auditor_prompt
                            if st.session_state.get('add_auditor_prompt'):
                                del st.session_state.add_auditor_prompt
                            st.rerun()
                    
                    with col3:
                        if st.form_submit_button("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                            st.info("–§—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    except ImportError as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ë–î: {e}")
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")

# === –†–ï–î–ê–ö–¢–û–† –ü–†–û–ú–ü–¢–û–í ===
elif page == "üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤":
    st.markdown("## üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
    prompts = load_prompts()
    
    # –í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞
    agent_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞:",
        ["interviewer", "auditor", "planner", "writer"],
        format_func=lambda x: {
            "interviewer": "üé§ –ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä",
            "auditor": "üîç –ê—É–¥–∏—Ç–æ—Ä", 
            "planner": "üìã –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫",
            "writer": "‚úçÔ∏è –ü–∏—Å–∞—Ç–µ–ª—å"
        }[x]
    )
    
    # –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
    st.markdown(f"### –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞: {agent_type}")
    
    current_prompt = prompts.get(agent_type, "")
    
    new_prompt = st.text_area(
        "–ü—Ä–æ–º–ø—Ç:",
        value=current_prompt,
        height=400,
        help="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        temperature = st.slider("Temperature", 0.0, 1.0, 0.7, 0.1)
    with col2:
        max_tokens = st.number_input("Max tokens", 100, 4000, 2000, 100)
    with col3:
        model = st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat-Max", "GigaChat-Pro", "GigaChat"])
    
    # –ö–Ω–æ–ø–∫–∏
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç", type="primary"):
            prompts[agent_type] = new_prompt
            save_prompts(prompts)
            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
            st.info("–§—É–Ω–∫—Ü–∏—è —Å–±—Ä–æ—Å–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ü–†–û–ì–†–ï–°–° ===
elif page == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏":
    st.markdown("## üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    try:
        sys.path.append('/var/GrantService/data')
        from database import db
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = db.get_users_statistics()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", stats.get('total_users', 0))
        with col2:
            st.metric("üìã –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π", stats.get('total_sessions', 0))
        with col3:
            st.metric("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö", stats.get('completed_sessions', 0))
        with col4:
            st.metric("üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{stats.get('conversion_rate', 0)}%")
        
        # –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã
        tab1, tab2, tab3, tab4 = st.tabs(["üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏", "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã", "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        
        with tab1:
            st.markdown("### üë§ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            # –§–∏–ª—å—Ç—Ä—ã
            col1, col2, col3 = st.columns(3)
            with col1:
                search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏:", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            with col2:
                status_filter = st.selectbox("üìä –°—Ç–∞—Ç—É—Å:", ["–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"])
            with col3:
                date_filter = st.selectbox("üìÖ –ü–µ—Ä–∏–æ–¥:", ["–í—Å–µ –≤—Ä–µ–º—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = db.get_all_users()
            
            if users:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
                if search_query:
                    users = [u for u in users if search_query.lower() in (u.get('first_name', '') + ' ' + u.get('last_name', '')).lower()]
                
                # –°–æ–∑–¥–∞–µ–º DataFrame
                users_data = []
                for user in users:
                    users_data.append({
                        'ID': user.get('telegram_id'),
                        '–ò–º—è': f"{user.get('first_name', '')} {user.get('last_name', '')}".strip(),
                        'Username': user.get('username', ''),
                        '–°–µ—Å—Å–∏–π': user.get('total_sessions', 0),
                        '–ó–∞–≤–µ—Ä—à–µ–Ω–æ': user.get('completed_sessions', 0),
                        '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å': f"{user.get('avg_progress', 0):.1f}%",
                        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è': user.get('registration_date', '')[:10] if user.get('registration_date') else '',
                        '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': user.get('last_session_activity', '')[:16] if user.get('last_session_activity') else ''
                    })
                
                df_users = pd.DataFrame(users_data)
                st.dataframe(df_users, use_container_width=True)
                
                # –≠–∫—Å–ø–æ—Ä—Ç
                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"):
                    csv = df_users.to_csv(index=False)
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name=f"users_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                        mime="text/csv"
                    )
            else:
                st.info("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with tab2:
            st.markdown("### üîÑ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
            
            active_sessions = db.get_active_sessions()
            
            if active_sessions:
                sessions_data = []
                for session in active_sessions:
                    user_name = f"{session.get('first_name', '')} {session.get('last_name', '')}".strip()
                    if not user_name:
                        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {session.get('telegram_id')}"
                    
                    sessions_data.append({
                        'ID —Å–µ—Å—Å–∏–∏': session.get('id'),
                        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': user_name,
                        '–ü—Ä–æ–≥—Ä–µ—Å—Å': f"{session.get('progress_percentage', 0)}%",
                        '–û—Ç–≤–µ—Ç–æ–≤': f"{session.get('answers_count', 0)}/{session.get('total_questions', 24)}",
                        '–ù–∞—á–∞—Ç–∞': session.get('started_at', '')[:16] if session.get('started_at') else '',
                        '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å': session.get('last_activity', '')[:16] if session.get('last_activity') else ''
                    })
                
                df_sessions = pd.DataFrame(sessions_data)
                st.dataframe(df_sessions, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–µ—Å—Å–∏–∏
                if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏"):
                    if sessions_data:
                        selected_session = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é:", sessions_data, format_func=lambda x: f"{x['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} - {x['–ü—Ä–æ–≥—Ä–µ—Å—Å']}")
                        if selected_session:
                            session_id = selected_session['ID —Å–µ—Å—Å–∏–∏']
                            session_progress = db.get_session_progress(session_id)
                            user_answers = db.get_user_answers(session_id)
                            
                            st.markdown(f"#### üìã –î–µ—Ç–∞–ª–∏ —Å–µ—Å—Å–∏–∏ {session_id}")
                            
                            col1, col2 = st.columns(2)
                            with col1:
                                st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{session_progress.get('progress_percentage', 0)}%")
                                st.metric("–û—Ç–≤–µ—Ç–æ–≤", f"{session_progress.get('answers_count', 0)}/{session_progress.get('total_questions', 24)}")
                            with col2:
                                st.metric("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", session_progress.get('started_at', '')[:16] if session_progress.get('started_at') else '')
                                st.metric("–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", session_progress.get('last_activity', '')[:16] if session_progress.get('last_activity') else '')
                            
                            if user_answers:
                                st.markdown("#### üìù –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
                                for answer in user_answers:
                                    with st.expander(f"–í–æ–ø—Ä–æ—Å {answer.get('question_number')}: {answer.get('question_text', '')[:50]}..."):
                                        st.write(f"**–û—Ç–≤–µ—Ç:** {answer.get('answer_text', '')}")
                                        st.write(f"**–í—Ä–µ–º—è:** {answer.get('answer_timestamp', '')[:16]}")
            else:
                st.info("üì≠ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with tab3:
            st.markdown("### ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã")
            
            completed_sessions = db.get_completed_sessions()
            
            if completed_sessions:
                completed_data = []
                for session in completed_sessions:
                    user_name = f"{session.get('first_name', '')} {session.get('last_name', '')}".strip()
                    if not user_name:
                        user_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {session.get('telegram_id')}"
                    
                    completed_data.append({
                        'ID —Å–µ—Å—Å–∏–∏': session.get('id'),
                        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': user_name,
                        '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞': session.get('project_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                        '–û—Ç–≤–µ—Ç–æ–≤': f"{session.get('answers_count', 0)}/{session.get('total_questions', 24)}",
                        '–ó–∞–≤–µ—Ä—à–µ–Ω–∞': session.get('completed_at', '')[:16] if session.get('completed_at') else '',
                        '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': f"{session.get('session_duration_minutes', 0)} –º–∏–Ω"
                    })
                
                df_completed = pd.DataFrame(completed_data)
                st.dataframe(df_completed, use_container_width=True)
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
                if st.button("üîç –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã"):
                    if completed_data:
                        selected_completed = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É:", completed_data, format_func=lambda x: f"{x['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']} - {x['–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞']}")
                        if selected_completed:
                            session_id = selected_completed['ID —Å–µ—Å—Å–∏–∏']
                            user_answers = db.get_user_answers(session_id)
                            
                            st.markdown(f"#### üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ {session_id}")
                            
                            if user_answers:
                                st.markdown("#### üìù –í—Å–µ –æ—Ç–≤–µ—Ç—ã:")
                                for answer in user_answers:
                                    with st.expander(f"–í–æ–ø—Ä–æ—Å {answer.get('question_number')}: {answer.get('question_text', '')}"):
                                        st.write(f"**–û—Ç–≤–µ—Ç:** {answer.get('answer_text', '')}")
                                        st.write(f"**–ü–æ–ª–µ:** {answer.get('field_name', '')}")
                                        st.write(f"**–í—Ä–µ–º—è:** {answer.get('answer_timestamp', '')[:16]}")
                                
                                # –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤
                                if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ CSV"):
                                    answers_data = []
                                    for answer in user_answers:
                                        answers_data.append({
                                            '–í–æ–ø—Ä–æ—Å': answer.get('question_text', ''),
                                            '–û—Ç–≤–µ—Ç': answer.get('answer_text', ''),
                                            '–ü–æ–ª–µ': answer.get('field_name', ''),
                                            '–í—Ä–µ–º—è': answer.get('answer_timestamp', '')[:16]
                                        })
                                    
                                    df_answers = pd.DataFrame(answers_data)
                                    csv = df_answers.to_csv(index=False)
                                    st.download_button(
                                        label="üíæ –°–∫–∞—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã CSV",
                                        data=csv,
                                        file_name=f"answers_session_{session_id}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
                                        mime="text/csv"
                                    )
            else:
                st.info("üì≠ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        with tab4:
            st.markdown("### üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º
            if stats.get('daily_stats'):
                st.markdown("#### üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")
                daily_df = pd.DataFrame(stats['daily_stats'])
                st.line_chart(daily_df.set_index('date')['sessions_count'])
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º
                st.markdown("#### üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º")
                daily_stats_df = pd.DataFrame(stats['daily_stats'])
                daily_stats_df.columns = ['–î–∞—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π', '–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å (%)']
                st.dataframe(daily_stats_df, use_container_width=True)
            else:
                st.info("üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", f"{stats.get('avg_progress', 0):.1f}%")
                st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π", stats.get('active_sessions', 0))
            with col2:
                st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π", stats.get('completed_sessions', 0))
                st.metric("–û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è", f"{stats.get('conversion_rate', 0)}%")
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        st.info("üìä –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")

# === –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ ===
elif page == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã":
    st.markdown("## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò
    st.markdown("### ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò")
    col1, col2 = st.columns(2)
    
    with col1:
        temperature = st.slider("Temperature", 0.0, 1.0, 0.7, 0.1)
        max_tokens = st.number_input("Max tokens", 100, 4000, 2000, 100)
    
    with col2:
        model = st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat-Max", "GigaChat-Pro", "GigaChat"])
        timeout = st.number_input("Timeout (—Å–µ–∫)", 5, 60, 30)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    st.markdown("### üì± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞")
    welcome_message = st.text_area(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        value="""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å!

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∑–∞ 15-20 –º–∏–Ω—É—Ç.

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1Ô∏è‚É£ –ò–Ω—Ç–µ—Ä–≤—å—é - —Å–æ–±–µ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ
2Ô∏è‚É£ –ê—É–¥–∏—Ç - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏  
3Ô∏è‚É£ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞—è–≤–∫–∏
4Ô∏è‚É£ –ù–∞–ø–∏—Å–∞–Ω–∏–µ - —Å—Ñ–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç

–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –ñ–º–∏ /interview üëá""",
        height=200
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    st.markdown("### ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**")
        default_min_length = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 0, 1000, 3)
        default_max_length = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", 100, 10000, 1000)
        default_min_number = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", -1000000, 1000000, 0)
        default_max_number = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", -1000000, 1000000, 1000000)
    
    with col2:
        st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é:**")
        show_hints = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ –±–æ—Ç–µ", value=True)
        strict_validation = st.checkbox("–°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è", value=True)
        allow_skip_optional = st.checkbox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö", value=True)
        auto_save_answers = st.checkbox("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤", value=True)
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    col1, col2 = st.columns(2)
    
    with col1:
        log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", ["DEBUG", "INFO", "WARNING", "ERROR"])
        auto_backup = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ", value=True)
    
    with col2:
        maintenance_mode = st.checkbox("–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", value=False)
        debug_mode = st.checkbox("–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", value=True)
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# === –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
elif page == "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
    st.markdown("## üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    st.markdown("### üíª –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("CPU", "15%", "‚Üì5%")
    with col2:
        st.metric("RAM", "512MB", "‚Üë50MB")
    with col3:
        st.metric("–î–∏—Å–∫", "2.1GB", "‚Üë100MB")
    
    # –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
    st.markdown("### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏")
    
    # –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–æ–≤
    col1, col2, col3 = st.columns(3)
    with col1:
        log_level_filter = st.selectbox("–£—Ä–æ–≤–µ–Ω—å", ["ALL", "INFO", "WARNING", "ERROR"])
    with col2:
        log_component = st.selectbox("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç", ["ALL", "Telegram Bot", "Web Admin", "SystemD"])
    with col3:
        log_lines = st.number_input("–°—Ç—Ä–æ–∫", 10, 100, 20)
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤
    sample_logs = [
        "2025-07-18 03:45:30 - INFO - HTTP Request: getUpdates 200 OK",
        "2025-07-18 03:45:25 - INFO - User 123456789 started interview",
        "2025-07-18 03:45:20 - INFO - SystemD service healthy",
        "2025-07-18 03:45:15 - WARNING - High CPU usage detected",
        "2025-07-18 03:45:10 - INFO - Prompt updated for agent –ê—É–¥–∏—Ç–æ—Ä",
    ]
    
    st.code("\n".join(sample_logs))
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns(3)
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
            st.rerun()
    with col2:
        if st.button("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏"):
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"):
            st.warning("–¢—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; margin-top: 2rem;'>
    <p>üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å –í–µ–±-–∞–¥–º–∏–Ω–∫–∞ v1.0 | 
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: –ê–Ω–¥—Ä–µ–π –û—Ç–∏–Ω–æ–≤ | 
    –î–æ–º–µ–Ω: <a href='https://grantservice.onff.ru'>grantservice.onff.ru</a></p>
</div>
""", unsafe_allow_html=True) 

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ (–∑–∞–≥–ª—É—à–∫–∏)
def load_prompts():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    return {
        "interviewer": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö. –ó–∞–¥–∞–≤–∞–π —á–µ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã.",
        "auditor": "–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞—É–¥–∏—Ç—É –ø—Ä–æ–µ–∫—Ç–æ–≤. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –¥–∞–≤–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
        "planner": "–¢—ã - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –°–æ–∑–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        "writer": "–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    }

def save_prompts(prompts):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏–ª–∏ –ë–î
    pass 