#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Settings Page - GrantService Admin (v2.0)
System settings: –í–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é | –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è | –°–∏—Å—Ç–µ–º–∞
"""

import streamlit as st
import sys
from pathlib import Path

# PATH SETUP
sys.path.insert(0, str(Path(__file__).parent.parent))
import setup_paths

# IMPORTS
try:
    from utils.database import AdminDatabase
    from utils.ui_helpers import render_page_header, render_metric_cards, render_tabs, show_success_message
    from utils.logger import setup_logger
except ImportError as e:
    st.error(f"Error importing: {e}")
    st.stop()

# PAGE CONFIG
st.set_page_config(page_title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", page_icon="‚öôÔ∏è", layout="wide")
logger = setup_logger('settings_page')

# DATABASE
@st.cache_resource
def get_database():
    return AdminDatabase()

db = get_database()

# MAIN
render_page_header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")

# TABS
tab_names = ["–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–°–∏—Å—Ç–µ–º–∞"]
tab_icons = ["üîê", "‚öôÔ∏è"]
selected_tab = render_tabs(tab_names, icons=tab_icons)

if selected_tab == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
    st.markdown("### üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
    
    # Auth stats
    render_metric_cards([
        {'label': '–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∫–∏', 'value': 0, 'icon': 'üë•'},
        {'label': '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤', 'value': 0, 'icon': 'üîë'},
        {'label': '–í—Ö–æ–¥–æ–≤ –∑–∞ 24—á', 'value': 0, 'icon': 'üìä'}
    ], columns=3)
    
    st.markdown("---")
    
    # Add admin user
    st.markdown("#### ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    with st.form("add_admin_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            admin_username = st.text_input("Username")
            admin_role = st.selectbox("–†–æ–ª—å", ["admin", "coordinator", "viewer"])
        
        with col2:
            admin_token = st.text_input("–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞", type="password")
            admin_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
        
        if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", use_container_width=True):
            show_success_message("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    st.markdown("---")
    
    # Token management
    st.markdown("#### üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏")
    
    st.info("–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤")

elif selected_tab == "–°–∏—Å—Ç–µ–º–∞":
    st.markdown("### ‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    # System status
    st.markdown("#### üíö –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.markdown("**–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö**")
        st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞")
        st.caption("PostgreSQL: grantservice")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Claude Code (–¥–æ –∫–æ–ª–æ–Ω–æ–∫)
    import os
    import requests

    claude_api_key = os.getenv('CLAUDE_CODE_API_KEY', '1f79b062cf00b8d28546f5bd283dc59a1c6a7f9e9fe5a8e5ef25b0cc27aa0732')
    claude_base_url = os.getenv('CLAUDE_CODE_BASE_URL', 'http://178.236.17.55:8000')

    claude_status = "unknown"
    claude_status_code = None

    try:
        response = requests.get(f"{claude_base_url}/health", timeout=3)
        claude_status_code = response.status_code
        if response.status_code == 200:
            claude_status = "connected"
        else:
            claude_status = "error"
    except Exception as e:
        claude_status = "error"
        claude_status_message = str(e)[:30]

    with col2:
        st.markdown("**Claude Code API**")
        if claude_status == "connected":
            st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω")
            st.caption(f"Sonnet 4.5 (–±–µ–∑–ª–∏–º–∏—Ç)")
        elif claude_status == "error":
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            st.caption(f"HTTP {claude_status_code}" if claude_status_code else "Timeout/Error")
        else:
            st.warning("üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            st.caption("–ü—Ä–æ–≤–µ—Ä–∫–∞...")

    with col3:
        st.markdown("**Telegram Bot**")
        st.warning("üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        st.caption("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞")

    with col4:
        st.markdown("**GigaChat API**")
        st.warning("üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        st.caption("Fallback, –ª–∏–º–∏—Ç—ã")
    
    st.markdown("---")

    # Claude Code API Settings
    st.markdown("#### ü§ñ Claude Code API (–û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å)")

    col1, col2 = st.columns([2, 1])

    with col1:
        st.markdown(f"**API URL:** `{claude_base_url}`")
        st.markdown(f"**API Key:** `{claude_api_key[:8]}...{claude_api_key[-8:]}`")
        st.markdown(f"**–ú–æ–¥–µ–ª—å:** Claude Sonnet 4.5 (200k –∫–æ–Ω—Ç–µ–∫—Å—Ç)")
        st.markdown(f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if claude_status == 'connected' else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        st.markdown(f"**–õ–∏–º–∏—Ç—ã:** –ë–µ–∑–ª–∏–º–∏—Ç–Ω–∞—è (–ø–æ –ø–æ–¥–ø–∏—Å–∫–µ)")

    with col2:
        if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", key="check_claude"):
            try:
                test_response = requests.get(f"{claude_base_url}/health", timeout=3)
                if test_response.status_code == 200:
                    st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: HTTP {test_response.status_code}")
            except Exception as e:
                st.error(f"‚ùå {str(e)}")

        if st.button("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª–∏", key="check_models"):
            try:
                headers = {"Authorization": f"Bearer {claude_api_key}"}
                models_response = requests.get(f"{claude_base_url}/models", headers=headers, timeout=3)
                if models_response.status_code == 200:
                    models_data = models_response.json()
                    if "models" in models_data:
                        models_list = [f"{m['name']} ({m['id']})" for m in models_data["models"]]
                        st.success(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models_list)}")
                    else:
                        st.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models_data)}")
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: HTTP {models_response.status_code}")
            except Exception as e:
                st.error(f"‚ùå {str(e)}")

    st.markdown("---")

    # API Settings
    st.markdown("#### üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ API (Fallback)")

    with st.form("api_settings_form"):
        st.markdown("**GigaChat API (Fallback)**")
        gigachat_token = st.text_input("API Token", type="password", value="********")
        gigachat_model = st.selectbox("–ú–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro", "GigaChat-Plus"])
        st.caption("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ Claude Code –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ï—Å—Ç—å –ª–∏–º–∏—Ç—ã –Ω–∞ —Ç–æ–∫–µ–Ω—ã.")

        st.markdown("**Telegram Bot**")
        telegram_token = st.text_input("Bot Token", type="password", value="********")
        telegram_webhook = st.text_input("Webhook URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
            show_success_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    st.markdown("---")
    
    # Database settings
    st.markdown("#### üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.write(f"**–ü—É—Ç—å:** {db.db_path if hasattr(db, 'db_path') else 'N/A'}")
        st.write("**–¢–∏–ø:** PostgreSQL")
    
    with col2:
        if st.button("üîÑ –°–æ–∑–¥–∞—Ç—å backup", use_container_width=True):
            show_success_message("Backup —Å–æ–∑–¥–∞–Ω!")
        
        if st.button("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å", use_container_width=True):
            show_success_message("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ!")
    
    st.markdown("---")
    
    # Limits and quotas
    st.markdown("#### üìä –õ–∏–º–∏—Ç—ã –∏ –∫–≤–æ—Ç—ã")
    
    with st.form("limits_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            max_users = st.number_input("–ú–∞–∫—Å. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", min_value=10, value=1000)
            max_grants_per_day = st.number_input("–ú–∞–∫—Å. –≥—Ä–∞–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å", min_value=1, value=100)
        
        with col2:
            token_limit_daily = st.number_input("–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ –¥–µ–Ω—å", min_value=1000, value=100000)
            api_rate_limit = st.number_input("API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É", min_value=1, value=60)
        
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã", use_container_width=True):
            show_success_message("–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")

    st.markdown("---")

    # PDF Notifications Settings
    st.markdown("#### üìÑ PDF –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç")

    st.info("üì± **–ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç:** -4930683040 (GrantService Admin)")
    st.caption("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –æ—Ç—á–µ—Ç–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —ç—Ç–∞–ø–æ–≤ workflow –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç")

    # Load current settings
    try:
        current_settings = db.get_notification_settings()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        current_settings = {
            'notifications_enabled': True,
            'notify_on_interview': True,
            'notify_on_audit': True,
            'notify_on_research': True,
            'notify_on_grant': True,
            'notify_on_review': True
        }

    with st.form("pdf_notifications_form"):
        # Main toggle
        notifications_enabled = st.toggle(
            "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ PDF —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            value=current_settings.get('notifications_enabled', True),
            help="–ì–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω, –Ω–∏–∫–∞–∫–∏–µ PDF –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è"
        )

        st.markdown("---")

        # Stage-specific toggles
        if notifications_enabled:
            st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**")

            col1, col2 = st.columns(2)

            with col1:
                notify_interview = st.checkbox(
                    "üìù –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
                    value=current_settings.get('notify_on_interview', True),
                    help="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤—å—é (24 Q&A)"
                )

                notify_audit = st.checkbox(
                    "üîç –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
                    value=current_settings.get('notify_on_audit', True),
                    help="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF –∞—É–¥–∏—Ç–∞ —Å –æ—Ü–µ–Ω–∫–æ–π –ø—Ä–æ–µ–∫—Ç–∞"
                )

                notify_research = st.checkbox(
                    "üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ",
                    value=current_settings.get('notify_on_research', True),
                    help="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (27 queries + –∞–Ω–∞–ª–∏–∑)"
                )

            with col2:
                notify_grant = st.checkbox(
                    "‚úçÔ∏è –ì—Ä–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω",
                    value=current_settings.get('notify_on_grant', True),
                    help="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏"
                )

                notify_review = st.checkbox(
                    "üëÅÔ∏è –†–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                    value=current_settings.get('notify_on_review', True),
                    help="–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å PDF –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–≤—å—é–≤–µ—Ä–∞"
                )
        else:
            notify_interview = False
            notify_audit = False
            notify_research = False
            notify_grant = False
            notify_review = False

            st.warning("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç–µ –≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤—ã—à–µ.")

        st.markdown("---")

        # Statistics
        st.markdown("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF**")

        col1, col2, col3 = st.columns(3)

        with col1:
            st.metric("PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è", "0", help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö PDF —Å–µ–≥–æ–¥–Ω—è")

        with col2:
            st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏", "100%", help="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫")

        with col3:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–∏–π PDF", "‚Äî", help="–ö–æ–≥–¥–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π PDF")

        st.markdown("---")

        # Save button
        submit_btn = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", use_container_width=True)

        if submit_btn:
            try:
                # Prepare settings dict
                new_settings = {
                    'notifications_enabled': notifications_enabled,
                    'notify_on_interview': notify_interview,
                    'notify_on_audit': notify_audit,
                    'notify_on_research': notify_research,
                    'notify_on_grant': notify_grant,
                    'notify_on_review': notify_review
                }

                # Update in database
                success = db.update_notification_settings_bulk(new_settings, updated_by='admin')

                if success:
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.balloons()

                    # Show summary
                    enabled_stages = []
                    if notifications_enabled:
                        if notify_interview:
                            enabled_stages.append("üìù –ê–Ω–∫–µ—Ç–∞")
                        if notify_audit:
                            enabled_stages.append("üîç –ê—É–¥–∏—Ç")
                        if notify_research:
                            enabled_stages.append("üìä –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ")
                        if notify_grant:
                            enabled_stages.append("‚úçÔ∏è –ì—Ä–∞–Ω—Ç")
                        if notify_review:
                            enabled_stages.append("üëÅÔ∏è –†–µ–≤—å—é")

                    if enabled_stages:
                        st.info(f"–í–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è: {', '.join(enabled_stages)}")
                    else:
                        st.warning("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                logger.error(f"Error saving notification settings: {e}", exc_info=True)
