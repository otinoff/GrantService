#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ Researcher Agent - –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
"""

import streamlit as st
import sys
import os
from datetime import datetime
import json

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É üîê –í—Ö–æ–¥")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    st.stop()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, os.path.join(grandparent_dir, 'telegram-bot'))
sys.path.insert(0, os.path.join(grandparent_dir, 'agents'))

# –ò–º–ø–æ—Ä—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    from services.llm_router import LLMRouter, LLMProvider
    from services.gigachat_service import GigaChatService
    from services.local_llm_service import LocalLLMService
    from agents.researcher_agent import ResearcherAgent
    from data.database.prompts import (
        get_prompts_by_agent, get_prompt_by_name, format_prompt,
        create_prompt, update_prompt, delete_prompt, get_all_categories
    )
    from data.database import GrantServiceDatabase
    AGENTS_AVAILABLE = True
    PROMPTS_AVAILABLE = True
    DATABASE_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    AGENTS_AVAILABLE = False
    PROMPTS_AVAILABLE = False
    DATABASE_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üîç Researcher Agent",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'agent_results' not in st.session_state:
    st.session_state.agent_results = {}
if 'researcher_timestamp' not in st.session_state:
    st.session_state.researcher_timestamp = None

def show_prompt_management(agent_type: str):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    if not PROMPTS_AVAILABLE:
        st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–∞
    prompts = get_prompts_by_agent(agent_type)
    
    if not prompts:
        st.info(f"üìù –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_type}")
        return
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompt_names = [p['name'] for p in prompts]
    selected_prompt_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        prompt_names,
        key=f"prompt_select_{agent_type}"
    )
    
    selected_prompt = next((p for p in prompts if p['name'] == selected_prompt_name), None)
    
    if selected_prompt:
        with st.expander(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {selected_prompt['name']}"):
            with st.form(f"prompt_form_{agent_type}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    name = st.text_input(
                        "–ù–∞–∑–≤–∞–Ω–∏–µ",
                        value=selected_prompt['name'],
                        key=f"name_{agent_type}"
                    )
                    
                    priority = st.number_input(
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                        min_value=0,
                        max_value=100,
                        value=selected_prompt['priority'],
                        key=f"priority_{agent_type}"
                    )
                
                with col2:
                    description = st.text_area(
                        "–û–ø–∏—Å–∞–Ω–∏–µ",
                        value=selected_prompt['description'] or '',
                        height=100,
                        key=f"desc_{agent_type}"
                    )
                    
                    variables_text = st.text_area(
                        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                        value='\n'.join(selected_prompt['variables']),
                        height=100,
                        key=f"vars_{agent_type}"
                    )
                
                # –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
                prompt_template = st.text_area(
                    "–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞",
                    value=selected_prompt['prompt_template'],
                    height=200,
                    key=f"template_{agent_type}"
                )
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                if prompt_template and variables_text:
                    variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
                    test_data = {var: f"[{var}]" for var in variables_list}
                    
                    try:
                        preview = format_prompt(prompt_template, test_data)
                        st.write("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**")
                        st.code(preview, language="text")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                        variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
                        
                        success = update_prompt(
                            prompt_id=selected_prompt['id'],
                            name=name,
                            description=description,
                            prompt_template=prompt_template,
                            variables=variables_list,
                            priority=priority
                        )
                        
                        if success:
                            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞!")
                
                with col2:
                    if st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", type="secondary"):
                        if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                            success = delete_prompt(selected_prompt['id'])
                            if success:
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")
                
                with col3:
                    if st.form_submit_button("üß™ –¢–µ—Å—Ç"):
                        st.info("–ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã Researcher Agent"""
    st.header("üîç Researcher Agent")
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
            ["auto", "gigachat", "local"],
            key="researcher_provider"
        )
        
        if llm_provider == "local":
            model = st.selectbox("–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", ["qwen2.5:3b", "qwen2.5:7b"], key="researcher_local_model")
        elif llm_provider == "gigachat":
            model = st.selectbox("GigaChat –º–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro"], key="researcher_giga_model")
        else:
            model = "auto"
        
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.3, key="researcher_temp")
        max_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 100, 2000, 1000, key="researcher_tokens")
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è", "12")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "2.3 —Å–µ–∫")
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "95%")
    
    # –†—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç
    st.subheader("üéØ –†—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç")
    
    if DATABASE_AVAILABLE:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db = GrantServiceDatabase()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
            all_sessions = db.get_all_sessions(limit=1000)
            anketas = [s for s in all_sessions if s.get('anketa_id')]
            
            if anketas:
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                anketa_options = []
                for anketa in anketas:
                    user_display = anketa.get('username', f"ID:{anketa['telegram_id']}")
                    date_str = anketa.get('started_at', 'Unknown')[:10] if anketa.get('started_at') else 'Unknown'
                    anketa_options.append(f"{anketa['anketa_id']} - {user_display} ({date_str})")
                
                selected_anketa_display = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
                    anketa_options,
                    key="selected_anketa_researcher"
                )
                
                if selected_anketa_display:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º anketa_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    selected_anketa_id = selected_anketa_display.split(' - ')[0]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ
                    selected_anketa = next((a for a in anketas if a['anketa_id'] == selected_anketa_id), None)
                    
                    if selected_anketa:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            user_display = selected_anketa.get('username', f"ID:{selected_anketa['telegram_id']}")
                            st.info(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}")
                        with col2:
                            date_display = selected_anketa.get('started_at', 'Unknown')[:10] if selected_anketa.get('started_at') else 'Unknown'
                            st.info(f"**–î–∞—Ç–∞:** {date_display}")
                        with col3:
                            st.info(f"**–°—Ç–∞—Ç—É—Å:** {selected_anketa.get('status', 'Unknown')}")
                        
                        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
                        if st.button("üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", type="primary", key="research_anketa_btn"):
                            if AGENTS_AVAILABLE:
                                with st.spinner("üîç –ò—Å—Å–ª–µ–¥—É—é –∞–Ω–∫–µ—Ç—É..."):
                                    try:
                                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                                        agent = ResearcherAgent(db=db, llm_provider=llm_provider)
                                        
                                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
                                        result = agent.research_anketa(selected_anketa_id)
                                        
                                        if result.get('status') == 'success':
                                            st.success(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ID: {result.get('research_id')}")
                                            
                                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                            with st.expander("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", expanded=True):
                                                st.text_area(
                                                    "–†–µ–∑—É–ª—å—Ç–∞—Ç",
                                                    result.get('result', ''),
                                                    height=300,
                                                    disabled=True
                                                )
                                        else:
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                            
                                    except Exception as e:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                st.info("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    st.markdown("---")
    
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if 'writer_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Writer Agent")
        default_input = st.session_state.writer_input
    elif 'auditor_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Auditor Agent")
        default_input = st.session_state.auditor_input
    else:
        default_input = ""
    
    research_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        value=default_input,
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–ª–∏, –±—é–¥–∂–µ—Ç...",
        height=200,
        key="researcher_input"
    )
    
    # –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", type="primary", use_container_width=True):
            if research_data and AGENTS_AVAILABLE:
                with st.spinner("üîç –ü—Ä–æ–≤–æ–∂—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                        agent = ResearcherAgent(db=None, llm_provider=llm_provider)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                        result = agent.research_grant({
                            'description': research_data,
                            'llm_provider': llm_provider,
                            'model': model,
                            'temperature': temperature,
                            'max_tokens': max_tokens
                        })
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.session_state.agent_results['researcher'] = result
                        st.session_state.researcher_timestamp = datetime.now()
                        
                        st.success("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            if 'researcher' in st.session_state.agent_results:
                del st.session_state.agent_results['researcher']
            if 'researcher_timestamp' in st.session_state:
                del st.session_state.researcher_timestamp
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'researcher' in st.session_state.agent_results:
        st.markdown("---")
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        result = st.session_state.agent_results['researcher']
        timestamp = st.session_state.researcher_timestamp
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", result.get('provider', 'Unknown'))
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time', 0):.2f} —Å–µ–∫")
        with col3:
            st.metric("–î–∞—Ç–∞", timestamp.strftime("%H:%M:%S"))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        st.text_area(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            result.get('result', ''),
            height=300,
            disabled=True
        )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.subheader("üì§ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì§ ‚Üí Writer", use_container_width=True):
                st.session_state.writer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Writer Agent!")
        
        with col2:
            if st.button("üì§ ‚Üí Auditor", use_container_width=True):
                st.session_state.auditor_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Auditor Agent!")
        
        with col3:
            if st.button("üì§ ‚Üí Interviewer", use_container_width=True):
                st.session_state.interviewer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Interviewer Agent!")
        
        with col4:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    show_prompt_management("researcher")

if __name__ == "__main__":
    main()
