#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import streamlit as st
import sys
import os
import json
from datetime import datetime
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)
sys.path.insert(0, parent_dir)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
try:
    from utils.auth import is_user_authorized, get_current_user
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ / Please login via bot")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.stop()

# –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
import sqlite3
from pathlib import Path

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞ (–∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ)
current_file = Path(__file__).resolve()
db_path = current_file.parent.parent.parent / "data" / "grantservice.db"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
if not db_path.exists():
    st.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {db_path}")
    st.stop()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ì—Ä–∞–Ω—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏",
    page_icon="üìÑ",
    layout="wide"
)

st.title("üìÑ –ì—Ä–∞–Ω—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
st.markdown("---")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ - –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å
def get_grant_applications():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥—Ä–∞–Ω—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î"""
    try:
        # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(str(db_path))
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        query = """
        SELECT
            ga.id,
            ga.application_number,
            ga.title,
            ga.content_json,
            ga.summary,
            ga.status,
            ga.user_id,
            ga.session_id,
            ga.quality_score,
            ga.grant_fund,
            ga.requested_amount,
            ga.project_duration,
            ga.created_at,
            ga.updated_at,
            ga.admin_user,
            ga.llm_provider,
            ga.model_used,
            ga.processing_time,
            ga.tokens_used
        FROM grant_applications ga
        ORDER BY ga.created_at DESC
        """
        
        cursor.execute(query)
        columns = [description[0] for description in cursor.description]
        applications = []
        
        for row in cursor.fetchall():
            app = dict(zip(columns, row))
            # –ü–∞—Ä—Å–∏–º JSON –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if app.get('content_json'):
                try:
                    app['content_data'] = json.loads(app['content_json'])
                except:
                    app['content_data'] = {}
            else:
                app['content_data'] = {}
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            app.setdefault('username', None)
            app.setdefault('first_name', None)
            app.setdefault('last_name', None)
            app.setdefault('telegram_id', None)
            
            applications.append(app)
        
        conn.close()
        return applications
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
        st.error(f"–ü—É—Ç—å –∫ –ë–î: {db_path}")
        import traceback
        st.error(traceback.format_exc())
        return []

# –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏
applications = get_grant_applications()

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", len(applications))

with col2:
    draft_count = len([a for a in applications if a['status'] == 'draft'])
    st.metric("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏", draft_count)

with col3:
    completed_count = len([a for a in applications if a['status'] == 'completed'])
    st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", completed_count)

with col4:
    if applications:
        avg_score = sum(a['quality_score'] or 0 for a in applications) / len(applications)
        st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{avg_score:.1f}")
    else:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", "0.0")

st.markdown("---")

# –§–∏–ª—å—Ç—Ä—ã
st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
filter_col1, filter_col2, filter_col3 = st.columns(3)

with filter_col1:
    status_filter = st.selectbox(
        "–°—Ç–∞—Ç—É—Å",
        ["–í—Å–µ"] + list(set(a['status'] for a in applications if a['status']))
    )

with filter_col2:
    user_filter = st.selectbox(
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        ["–í—Å–µ"] + list(set(f"{a['first_name']} {a['last_name']}" 
                          for a in applications 
                          if a['first_name'] or a['last_name']))
    )

with filter_col3:
    date_filter = st.date_input(
        "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è (–æ—Ç)",
        value=None,
        format="DD.MM.YYYY"
    )

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_apps = applications

if status_filter != "–í—Å–µ":
    filtered_apps = [a for a in filtered_apps if a['status'] == status_filter]

if user_filter != "–í—Å–µ":
    filtered_apps = [a for a in filtered_apps 
                    if f"{a['first_name']} {a['last_name']}" == user_filter]

if date_filter:
    filtered_apps = [a for a in filtered_apps 
                    if a['created_at'] and 
                    datetime.fromisoformat(a['created_at']).date() >= date_filter]

st.markdown("---")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫
if filtered_apps:
    st.subheader(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(filtered_apps)}")
    
    # Tabs –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tab1, tab2, tab3 = st.tabs(["üìä –¢–∞–±–ª–∏—Ü–∞", "üìá –ö–∞—Ä—Ç–æ—á–∫–∏", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"])
    
    with tab1:
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
        df_data = []
        for app in filtered_apps:
            df_data.append({
                "ID": app['id'],
                "–ù–æ–º–µ—Ä": app['application_number'],
                "–ù–∞–∑–≤–∞–Ω–∏–µ": app['title'][:50] + "..." if len(app['title']) > 50 else app['title'],
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": f"{app['first_name']} {app['last_name']}" if app['first_name'] else "–ù–µ —É–∫–∞–∑–∞–Ω",
                "–°—Ç–∞—Ç—É—Å": app['status'],
                "–ë–∞–ª–ª": app['quality_score'] or 0,
                "–°—É–º–º–∞": f"{app['requested_amount']:,.0f} ‚ÇΩ" if app['requested_amount'] else "-",
                "–°–æ–∑–¥–∞–Ω–∞": datetime.fromisoformat(app['created_at']).strftime("%d.%m.%Y %H:%M") if app['created_at'] else "-"
            })
        
        df = pd.DataFrame(df_data)
        st.dataframe(df, use_container_width=True, hide_index=True)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        csv = df.to_csv(index=False, encoding='utf-8-sig')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"grant_applications_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime='text/csv'
        )
    
    with tab2:
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        for i, app in enumerate(filtered_apps):
            with st.expander(f"üìÑ {app['title']}", expanded=(i == 0)):
                col1, col2 = st.columns([2, 1])
                
                with col1:
                    st.write(f"**–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:** {app['application_number']}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {app['first_name']} {app['last_name']}" 
                            if app['first_name'] else "–ù–µ —É–∫–∞–∑–∞–Ω")
                    
                    if app['summary']:
                        st.write("**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**")
                        st.info(app['summary'])
                    
                    if app['content_data']:
                        st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:**")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ JSON
                        for key, value in app['content_data'].items():
                            if isinstance(value, dict):
                                st.write(f"**{key}:**")
                                for sub_key, sub_value in value.items():
                                    st.write(f"  ‚Ä¢ {sub_key}: {sub_value}")
                            elif isinstance(value, list):
                                st.write(f"**{key}:** {', '.join(str(v) for v in value)}")
                            else:
                                st.write(f"**{key}:** {value}")
                
                with col2:
                    # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞—è–≤–∫–∏
                    st.metric("–°—Ç–∞—Ç—É—Å", app['status'])
                    if app['quality_score']:
                        st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", f"{app['quality_score']:.1f}/10")
                    if app['requested_amount']:
                        st.metric("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞", f"{app['requested_amount']:,.0f} ‚ÇΩ")
                    if app['project_duration']:
                        st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{app['project_duration']} –º–µ—Å.")
                    
                    # –î–∞—Ç—ã
                    st.caption(f"**–°–æ–∑–¥–∞–Ω–∞:** {datetime.fromisoformat(app['created_at']).strftime('%d.%m.%Y %H:%M')}" 
                              if app['created_at'] else "-")
                    st.caption(f"**–û–±–Ω–æ–≤–ª–µ–Ω–∞:** {datetime.fromisoformat(app['updated_at']).strftime('%d.%m.%Y %H:%M')}" 
                              if app['updated_at'] else "-")
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π
                action_col1, action_col2, action_col3 = st.columns(3)
                
                with action_col1:
                    if st.button(f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{app['id']}"):
                        st.session_state[f'edit_mode_{app["id"]}'] = True
                        st.rerun()
                
                with action_col2:
                    if st.button(f"üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ Word", key=f"export_{app['id']}"):
                        st.info("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                
                with action_col3:
                    if app['status'] == 'draft':
                        if st.button(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key=f"submit_{app['id']}"):
                            st.success("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    with tab3:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        st.subheader("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_counts = {}
        for app in applications:
            status = app['status'] or 'unknown'
            status_counts[status] = status_counts.get(status, 0) + 1
        
        if status_counts:
            chart_col1, chart_col2 = st.columns(2)
            
            with chart_col1:
                st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:**")
                chart_data = pd.DataFrame.from_dict(status_counts, orient='index', columns=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                st.bar_chart(chart_data)
            
            with chart_col2:
                st.write("**–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫:**")
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–∞–º
                date_counts = {}
                for app in applications:
                    if app['created_at']:
                        date = datetime.fromisoformat(app['created_at']).date()
                        date_counts[date] = date_counts.get(date, 0) + 1
                
                if date_counts:
                    date_df = pd.DataFrame.from_dict(date_counts, orient='index', columns=['–ó–∞—è–≤–∫–∏'])
                    date_df = date_df.sort_index()
                    st.line_chart(date_df)
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        st.write("**–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**")
        user_counts = {}
        for app in applications:
            user_name = f"{app['first_name']} {app['last_name']}" if app['first_name'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
            user_counts[user_name] = user_counts.get(user_name, 0) + 1
        
        if user_counts:
            sorted_users = sorted(user_counts.items(), key=lambda x: x[1], reverse=True)[:5]
            for user, count in sorted_users:
                st.write(f"‚Ä¢ {user}: {count} –∑–∞—è–≤–æ–∫")

else:
    st.info("üîç –ù–µ—Ç –∑–∞—è–≤–æ–∫, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
st.markdown("---")
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
    st.cache_data.clear()
    st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
st.caption(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
