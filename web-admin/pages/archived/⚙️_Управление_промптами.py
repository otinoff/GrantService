import streamlit as st
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
sys.path.append('/var/GrantService/data')

try:
    from database.prompts import (
        init_prompts_tables, insert_default_prompts, get_prompts_by_agent,
        get_prompts_by_category, create_prompt, update_prompt, delete_prompt,
        get_all_categories, format_prompt, get_prompt_by_name
    )
    PROMPTS_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
    PROMPTS_AVAILABLE = False

st.set_page_config(
    page_title="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏",
    page_icon="‚öôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    if st.button("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –ø—Ä–æ–º–ø—Ç–æ–≤"):
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü..."):
            init_prompts_tables()
        with st.spinner("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤..."):
            insert_default_prompts()
        st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")

def show_prompt_editor(prompt_data=None):
    """–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞"""
    st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
    categories = get_all_categories()
    category_options = {cat['name']: cat['description'] for cat in categories}
    
    with st.form("prompt_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            category_name = st.selectbox(
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
                options=list(category_options.keys()),
                index=0 if not prompt_data else list(category_options.keys()).index(prompt_data.get('category_name', '')),
                help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–∞"
            )
            
            name = st.text_input(
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞",
                value=prompt_data.get('name', '') if prompt_data else '',
                help="–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞"
            )
            
            priority = st.number_input(
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                min_value=0,
                max_value=100,
                value=prompt_data.get('priority', 0) if prompt_data else 0,
                help="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ–º–ø—Ç–∞ (–≤—ã—à–µ = –≤–∞–∂–Ω–µ–µ)"
            )
        
        with col2:
            description = st.text_area(
                "–û–ø–∏—Å–∞–Ω–∏–µ",
                value=prompt_data.get('description', '') if prompt_data else '',
                height=100,
                help="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"
            )
            
            # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞
            variables_text = st.text_area(
                "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                value='\n'.join(prompt_data.get('variables', [])) if prompt_data else '',
                height=100,
                help="–°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø—Ä–æ–º–ø—Ç–µ"
            )
        
        # –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
        prompt_template = st.text_area(
            "–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞",
            value=prompt_data.get('prompt_template', '') if prompt_data else '',
            height=300,
            help="–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö {variable_name}"
        )
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        if prompt_template and variables_text:
            st.subheader("üëÅÔ∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
            
            # –ü–∞—Ä—Å–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = {}
            for var in variables_list:
                test_data[var] = f"[{var}]"
            
            try:
                preview = format_prompt(prompt_template, test_data)
                st.code(preview, language="text")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        
        with col2:
            if prompt_data:
                delete_clicked = st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", type="secondary")
            else:
                delete_clicked = False
        
        with col3:
            test_clicked = st.form_submit_button("üß™ –¢–µ—Å—Ç")
        
        if submitted:
            if not name or not prompt_template:
                st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞!")
                return
            
            variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
            
            if prompt_data:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                success = update_prompt(
                    prompt_id=prompt_data['id'],
                    name=name,
                    description=description,
                    prompt_template=prompt_template,
                    variables=variables_list,
                    priority=priority
                )
                if success:
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞!")
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ
                success = create_prompt(
                    category_name=category_name,
                    name=name,
                    description=description,
                    prompt_template=prompt_template,
                    variables=variables_list,
                    priority=priority
                )
                if success:
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞!")
        
        if delete_clicked and prompt_data:
            if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                success = delete_prompt(prompt_data['id'])
                if success:
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞!")

def show_prompts_by_agent():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –ø–æ –∞–≥–µ–Ω—Ç–∞–º"""
    st.subheader("ü§ñ –ü—Ä–æ–º–ø—Ç—ã –ø–æ –∞–≥–µ–Ω—Ç–∞–º")
    
    agent_types = ["researcher", "writer", "auditor", "interviewer"]
    selected_agent = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞", agent_types)
    
    prompts = get_prompts_by_agent(selected_agent)
    
    if not prompts:
        st.info(f"üìù –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {selected_agent}")
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for prompt in prompts:
        cat = prompt['category_name']
        if cat not in categories:
            categories[cat] = []
        categories[cat].append(prompt)
    
    for category_name, category_prompts in categories.items():
        with st.expander(f"üìÅ {category_name} ({len(category_prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤)"):
            for prompt in category_prompts:
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.write(f"**{prompt['name']}**")
                    if prompt['description']:
                        st.caption(prompt['description'])
                
                with col2:
                    st.write(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {prompt['priority']}")
                
                with col3:
                    if st.button("‚úèÔ∏è", key=f"edit_{prompt['id']}"):
                        st.session_state.editing_prompt = prompt
                        st.rerun()

def show_prompts_by_category():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    st.subheader("üìÅ –ü—Ä–æ–º–ø—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    
    categories = get_all_categories()
    
    if not categories:
        st.info("üìù –ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–º–ø—Ç–æ–≤")
        return
    
    selected_category = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
        options=[cat['name'] for cat in categories],
        format_func=lambda x: f"{x} ({next((cat['agent_type'] for cat in categories if cat['name'] == x), '')})"
    )
    
    prompts = get_prompts_by_category(selected_category)
    
    if not prompts:
        st.info(f"üìù –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_category}")
        return
    
    for prompt in prompts:
        with st.expander(f"üìÑ {prompt['name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {prompt['priority']})"):
            st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {prompt['description'] or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}")
            st.write(f"**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:** {', '.join(prompt['variables']) if prompt['variables'] else '–ù–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö'}")
            
            st.write("**–®–∞–±–ª–æ–Ω:**")
            st.code(prompt['prompt_template'], language="text")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_cat_{prompt['id']}"):
                    st.session_state.editing_prompt = prompt
                    st.rerun()
            
            with col2:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_cat_{prompt['id']}"):
                    if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", key=f"confirm_{prompt['id']}"):
                        success = delete_prompt(prompt['id'])
                        if success:
                            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")

def show_prompt_tester():
    """–¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤"""
    st.subheader("üß™ –¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤")
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
    all_prompts = []
    for agent_type in ["researcher", "writer", "auditor", "interviewer"]:
        prompts = get_prompts_by_agent(agent_type)
        all_prompts.extend(prompts)
    
    if not all_prompts:
        st.info("üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    selected_prompt_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        options=[p['name'] for p in all_prompts],
        format_func=lambda x: f"{x} ({next((p['agent_type'] for p in all_prompts if p['name'] == x), '')})"
    )
    
    prompt_data = get_prompt_by_name(selected_prompt_name)
    
    if not prompt_data:
        st.error("‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {prompt_data['description']}")
    st.write(f"**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:** {', '.join(prompt_data['variables'])}")
    
    # –í–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    st.write("**–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:**")
    test_data = {}
    
    for variable in prompt_data['variables']:
        test_data[variable] = st.text_area(
            f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {variable}",
            value=f"–¢–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {variable}",
            height=100
        )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if st.button("üîß –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç"):
        try:
            formatted_prompt = format_prompt(prompt_data['prompt_template'], test_data)
            st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**")
            st.code(formatted_prompt, language="text")
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
            st.text_area("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç", formatted_prompt, height=200)
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    st.title("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∞–≥–µ–Ω—Ç–æ–≤")
    st.markdown("---")
    
    if not PROMPTS_AVAILABLE:
        st.error("‚ùå –ú–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    if 'editing_prompt' not in st.session_state:
        st.session_state.editing_prompt = None
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.title("üéØ –î–µ–π—Å—Ç–≤–∏—è")
    
    action = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        [
            "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î",
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤",
            "ü§ñ –ü–æ –∞–≥–µ–Ω—Ç–∞–º",
            "üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            "üß™ –¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤"
        ]
    )
    
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.info("""
    **–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ GrantService**
    
    –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤:
    - Researcher (–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å)
    - Writer (–ø–∏—Å–∞—Ç–µ–ª—å)
    - Auditor (–∞—É–¥–∏—Ç–æ—Ä)
    - Interviewer (–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä)
    
    –ü—Ä–æ–º–ø—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω—ã –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
    """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if action == "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î":
        init_database()
        
    elif action == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤":
        if st.session_state.editing_prompt:
            show_prompt_editor(st.session_state.editing_prompt)
            if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
                st.session_state.editing_prompt = None
                st.rerun()
        else:
            show_prompt_editor()
            
    elif action == "ü§ñ –ü–æ –∞–≥–µ–Ω—Ç–∞–º":
        show_prompts_by_agent()
        
    elif action == "üìÅ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        show_prompts_by_category()
        
    elif action == "üß™ –¢–µ—Å—Ç–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤":
        show_prompt_tester()

if __name__ == "__main__":
    main()
