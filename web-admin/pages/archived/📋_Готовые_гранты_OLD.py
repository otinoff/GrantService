#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã–º–∏ –≥—Ä–∞–Ω—Ç–∞–º–∏
"""

import streamlit as st
import sys
import os

# Simple imports without path manipulation
# The environment will be set up by the launcher

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ launcher.py / Run via launcher.py")
    st.stop()

import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ config –∏ data
sys.path.insert(0, parent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils

from data.database.models import GrantServiceDatabase
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = GrantServiceDatabase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('grants_page')

st.set_page_config(
    page_title="üìã –ì–æ—Ç–æ–≤—ã–µ –≥—Ä–∞–Ω—Ç—ã",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üìã –ì–æ—Ç–æ–≤—ã–µ –≥—Ä–∞–Ω—Ç—ã")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
try:
    db_instance = db
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.title("üéØ –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
status_filter = st.sidebar.selectbox(
    "–°—Ç–∞—Ç—É—Å",
    ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "draft", "completed", "submitted", "approved", "rejected"],
    key="status_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
period_filter = st.sidebar.selectbox(
    "–ü–µ—Ä–∏–æ–¥",
    ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
    key="period_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
provider_filter = st.sidebar.selectbox(
    "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
    ["–í—Å–µ", "gigachat", "perplexity", "ollama"],
    key="provider_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_filter = st.sidebar.text_input(
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (username –∏–ª–∏ ID)",
    placeholder="–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ telegram_id",
    key="user_filter"
)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä–∞–Ω—Ç–æ–≤")

try:
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥—Ä–∞–Ω—Ç–æ–≤
    with db_instance.connect() as conn:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–Ω—Ç–æ–≤
        cursor.execute("SELECT COUNT(*) FROM grants")
        total_grants = cursor.fetchone()[0]
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM grants 
            GROUP BY status
        """)
        status_counts = dict(cursor.fetchall())
        
        # –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute("""
            SELECT username, COUNT(*) 
            FROM grants 
            WHERE username IS NOT NULL
            GROUP BY username
            ORDER BY COUNT(*) DESC
            LIMIT 10
        """)
        user_counts = dict(cursor.fetchall())
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="–í—Å–µ–≥–æ –≥—Ä–∞–Ω—Ç–æ–≤",
            value=total_grants
        )
    
    with col2:
        completed = status_counts.get('completed', 0)
        st.metric(
            label="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö",
            value=completed
        )
    
    with col3:
        submitted = status_counts.get('submitted', 0)
        st.metric(
            label="–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö",
            value=submitted
        )
    
    with col4:
        approved = status_counts.get('approved', 0)
        st.metric(
            label="–û–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö",
            value=approved
        )
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if user_counts:
        st.subheader("üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥—Ä–∞–Ω—Ç–æ–≤:**")
            for user, count in list(user_counts.items())[:5]:
                if user:
                    st.write(f"‚Ä¢ @{user}: {count}")
                else:
                    st.write(f"‚Ä¢ –ë–µ–∑ username: {count}")
    
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –°–ø–∏—Å–æ–∫ –≥—Ä–∞–Ω—Ç–æ–≤
st.subheader("üìã –°–ø–∏—Å–æ–∫ –≥—Ä–∞–Ω—Ç–æ–≤")

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä–∞–Ω—Ç—ã
    with db_instance.connect() as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT g.*, s.username, s.first_name, s.last_name
            FROM grants g
            LEFT JOIN sessions s ON g.anketa_id = s.anketa_id
            ORDER BY g.created_at DESC
            LIMIT 100
        """)
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        all_grants = []
        for row in results:
            grant_data = dict(zip(columns, row))
            
            # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            if grant_data.get('grant_sections'):
                try:
                    grant_data['grant_sections'] = json.loads(grant_data['grant_sections'])
                except:
                    grant_data['grant_sections'] = {}
            
            if grant_data.get('metadata'):
                try:
                    grant_data['metadata'] = json.loads(grant_data['metadata'])
                except:
                    grant_data['metadata'] = {}
            
            all_grants.append(grant_data)
    
    if not all_grants:
        st.info("üîç –ì—Ä–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_grants = all_grants
        
        if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
            filtered_grants = [g for g in filtered_grants if g['status'] == status_filter]
        
        if provider_filter != "–í—Å–µ":
            filtered_grants = [g for g in filtered_grants if g['llm_provider'] == provider_filter]
        
        if user_filter:
            user_filter_lower = user_filter.lower()
            filtered_grants = [g for g in filtered_grants 
                              if (g.get('username', '').lower().find(user_filter_lower) != -1 or 
                                  str(g.get('user_id', '')).find(user_filter) != -1)]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞–Ω—Ç–æ–≤: {len(filtered_grants)}**")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞–Ω—Ç—ã
        for grant in filtered_grants:
            with st.expander(f"üìã {grant['grant_id']} - {grant.get('username', 'Unknown')}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**ID –≥—Ä–∞–Ω—Ç–∞:** {grant['grant_id']}")
                    st.write(f"**–ê–Ω–∫–µ—Ç–∞:** {grant['anketa_id']}")
                    st.write(f"**–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:** {grant['research_id']}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{grant.get('username', 'N/A')} ({grant.get('first_name', '')} {grant.get('last_name', '')})")
                    st.write(f"**Telegram ID:** {grant['user_id']}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {grant['status']}")
                
                with col2:
                    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {grant.get('grant_title', 'N/A')}")
                    st.write(f"**LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {grant['llm_provider']}")
                    st.write(f"**–ú–æ–¥–µ–ª—å:** {grant.get('model', 'N/A')}")
                    st.write(f"**–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {grant.get('quality_score', 0)}/10")
                    st.write(f"**–°–æ–∑–¥–∞–Ω:** {grant['created_at']}")
                    if grant.get('submitted_at'):
                        st.write(f"**–û—Ç–ø—Ä–∞–≤–ª–µ–Ω:** {grant['submitted_at']}")
                
                # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞
                if grant.get('grant_sections'):
                    st.write("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞:**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤
                    sections = grant['grant_sections']
                    if isinstance(sections, dict):
                        for i, (key, value) in enumerate(list(sections.items())[:3]):
                            st.write(f"‚Ä¢ **{key}:** {value[:100]}..." if len(str(value)) > 100 else f"‚Ä¢ **{key}:** {value}")
                        
                        if len(sections) > 3:
                            st.write(f"... –∏ –µ—â–µ {len(sections) - 3} —Ä–∞–∑–¥–µ–ª–æ–≤")
                    
                    # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
                    with st.expander("üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞"):
                        st.json(sections)
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if grant.get('metadata'):
                    metadata = grant['metadata']
                    st.write("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {metadata.get('tokens_used', 0)}")
                    with col2:
                        st.write(f"‚Ä¢ –í—Ä–µ–º—è: {metadata.get('processing_time_seconds', 0)} —Å–µ–∫")
                    with col3:
                        st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {metadata.get('cost', 0.0)} ‚ÇΩ")
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if st.button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{grant['id']}"):
                        st.session_state.selected_grant_id = grant['grant_id']
                        st.rerun()
                
                with col2:
                    if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{grant['id']}"):
                        st.session_state.edit_grant_id = grant['grant_id']
                        st.rerun()
                
                with col3:
                    if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", key=f"submit_{grant['id']}"):
                        st.session_state.submit_grant_id = grant['grant_id']
                        st.rerun()
                
                with col4:
                    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{grant['id']}"):
                        st.session_state.export_grant_id = grant['grant_id']
                        st.rerun()

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞–Ω—Ç–æ–≤: {e}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞–Ω—Ç–∞
if 'selected_grant_id' in st.session_state:
    st.subheader("üëÅÔ∏è –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞–Ω—Ç–∞")
    
    try:
        with db_instance.connect() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM grants WHERE grant_id = ?", (st.session_state.selected_grant_id,))
            grant = cursor.fetchone()
            
            if grant:
                columns = [description[0] for description in cursor.description]
                grant_data = dict(zip(columns, grant))
                
                # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
                if grant_data.get('grant_sections'):
                    try:
                        grant_data['grant_sections'] = json.loads(grant_data['grant_sections'])
                    except:
                        grant_data['grant_sections'] = {}
                
                st.json(grant_data)
            else:
                st.error("–ì—Ä–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≥—Ä–∞–Ω—Ç–∞: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.sidebar.info("""
**–ì–æ—Ç–æ–≤—ã–µ –≥—Ä–∞–Ω—Ç—ã**

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≥—Ä–∞–Ω—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ Writer Agent –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ ID:**
- –ì—Ä–∞–Ω—Ç: `#GR-YYYYMMDD-username-001-AN-anketa_id`

**–°—Ç–∞—Ç—É—Å—ã:**
- **draft** - —á–µ—Ä–Ω–æ–≤–∏–∫
- **completed** - –∑–∞–≤–µ—Ä—à–µ–Ω
- **submitted** - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
- **approved** - –æ–¥–æ–±—Ä–µ–Ω
- **rejected** - –æ—Ç–∫–ª–æ–Ω–µ–Ω

**–ü—Ä–æ—Ü–µ—Å—Å:**
1. –ê–Ω–∫–µ—Ç–∞ ‚Üí –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ‚Üí –ì—Ä–∞–Ω—Ç
2. –ì—Ä–∞–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è Writer Agent
3. –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–æ–Ω–¥
4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è
""")

if __name__ == "__main__":
    pass
