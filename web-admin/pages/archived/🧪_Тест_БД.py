#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
"""

import streamlit as st
import sqlite3
import os
import json

st.title("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
st.markdown("---")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ë–î –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
import os
if os.name == 'nt':  # Windows
    db_path = "C:/SnowWhiteAI/GrantService/data/grantservice.db"
else:  # Linux/Unix
    db_path = "/var/GrantService/data/grantservice.db"

st.write(f"**–ü—É—Ç—å –∫ –ë–î:** `{db_path}`")
st.write(f"**–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:** {os.path.exists(db_path)}")

if os.path.exists(db_path):
    try:
        # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        st.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É grant_applications
        st.subheader("üìä –¢–∞–±–ª–∏—Ü–∞ grant_applications")
        
        cursor.execute("SELECT COUNT(*) FROM grant_applications")
        count = cursor.fetchone()[0]
        st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –ë–î", count)
        
        if count > 0:
            st.write("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫:**")
            cursor.execute("""
                SELECT id, application_number, title, status, created_at 
                FROM grant_applications 
                ORDER BY created_at DESC 
                LIMIT 5
            """)
            
            for row in cursor.fetchall():
                st.write(f"- **ID {row[0]}**: {row[1]} - {row[2]} (—Å—Ç–∞—Ç—É—Å: {row[3]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        st.subheader("üìä –î—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã")
        
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            st.write(f"- **{table_name}**: {count} –∑–∞–ø–∏—Å–µ–π")
        
        conn.close()
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
        import traceback
        st.code(traceback.format_exc())
else:
    st.error(f"‚ùå –§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {db_path}")
    st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")