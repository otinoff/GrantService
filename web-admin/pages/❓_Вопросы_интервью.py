#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Questions management page for GrantService admin panel
"""

import streamlit as st
import sys
import json
import logging
from datetime import datetime

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

from utils.database import AdminDatabase
from utils.logger import setup_logger
from data.database import get_interview_questions, insert_interview_question, update_interview_question, delete_interview_question

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('questions_page', level=logging.DEBUG)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏
st.title("‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ç–µ—Ä–≤—å—é")

# –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ session_state
if hasattr(st.session_state, 'success_message'):
    st.success(st.session_state.success_message)
    del st.session_state.success_message

if hasattr(st.session_state, 'error_message'):
    st.error(st.session_state.error_message)
    del st.session_state.error_message

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = AdminDatabase()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
questions = get_interview_questions()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")

with st.form("new_question_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        question_text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", height=100, key="new_question")
        question_type = st.selectbox(
            "–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞",
            ["text", "select", "choice", "number", "date", "textarea"],
            key="new_type"
        )
        order_num = st.number_input("–ü–æ—Ä—è–¥–æ–∫", min_value=1, value=1, key="new_order")
    
    with col2:
        is_required = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π", value=True, key="new_required")
        is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True, key="new_active")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
        if question_type == "choice":
            options = st.text_area(
                "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                height=100,
                key="new_options"
            )
        else:
            options = ""
    
    submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    
    if submitted:
        if question_text:
            try:
                result = insert_interview_question(
                    question_text=question_text,
                    question_type=question_type,
                    order_num=order_num,
                    is_required=is_required,
                    is_active=is_active,
                    options=options if options else None
                )
                
                if result:
                    st.session_state.success_message = "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
                else:
                    st.session_state.error_message = "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω"
                st.rerun()
            except Exception as e:
                st.session_state.error_message = f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞: {e}"
                st.rerun()
        else:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")

# –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

if questions:
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    questions.sort(key=lambda x: x['question_number'])
    
    for i, question in enumerate(questions):
        with st.expander(f"–í–æ–ø—Ä–æ—Å {question['question_number']}: {question['question_text'][:50]}..."):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–¢–µ–∫—Å—Ç:** {question['question_text']}")
                st.write(f"**–¢–∏–ø:** {question['question_type']}")
                
                if question.get('options'):
                    st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                    options_list = question['options'].split('\n')
                    for option in options_list:
                        if option.strip():
                            st.write(f"‚Ä¢ {option.strip()}")
            
            with col2:
                required_icon = "üî¥" if question['is_required'] else "‚ö™"
                active_icon = "üü¢" if question['is_active'] else "üî¥"
                
                st.write(f"{required_icon} **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π:** {'–î–∞' if question['is_required'] else '–ù–µ—Ç'}")
                st.write(f"{active_icon} **–ê–∫—Ç–∏–≤–µ–Ω:** {'–î–∞' if question['is_active'] else '–ù–µ—Ç'}")
                st.write(f"**ID:** {question['id']}")
                st.write(f"**–°–æ–∑–¥–∞–Ω:** {question['created_at']}")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_q_{question['id']}"):
                    st.session_state.editing_question = question['id']
                    st.rerun()
            
            with col2:
                if st.button("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"toggle_q_{question['id']}"):
                    try:
                        new_status = not question['is_active']
                        update_interview_question(
                            question['id'],
                            is_active=new_status
                        )
                        st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            with col3:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_q_{question['id']}"):
                    try:
                        delete_interview_question(question['id'])
                        st.success("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            
            # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.session_state.get('editing_question') == question['id']:
                st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")
                
                with st.form(f"edit_q_form_{question['id']}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        edit_text = st.text_area(
                            "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
                            value=question['question_text'],
                            height=100,
                            key=f"edit_q_text_{question['id']}"
                        )
                        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –≤–∫–ª—é—á–∞—è –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –º–æ–¥–µ–ª–∏
                        question_types = ["text", "select", "choice", "number", "date", "textarea"]
                        try:
                            default_index = question_types.index(question['question_type'])
                        except ValueError:
                            default_index = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "text"
                        
                        edit_type = st.selectbox(
                            "–¢–∏–ø",
                            question_types,
                            index=default_index,
                            key=f"edit_q_type_{question['id']}"
                        )
                        edit_order = st.number_input(
                            "–ü–æ—Ä—è–¥–æ–∫",
                            min_value=1,
                            value=question['question_number'],
                            key=f"edit_q_order_{question['id']}"
                        )
                    
                    with col2:
                        edit_required = st.checkbox(
                            "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π",
                            value=question['is_required'],
                            key=f"edit_q_required_{question['id']}"
                        )
                        edit_active = st.checkbox(
                            "–ê–∫—Ç–∏–≤–µ–Ω",
                            value=question['is_active'],
                            key=f"edit_q_active_{question['id']}"
                        )
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞
                        if edit_type == "choice":
                            edit_options = st.text_area(
                                "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                                value=question.get('options', ''),
                                height=100,
                                key=f"edit_q_options_{question['id']}"
                            )
                        else:
                            edit_options = ""
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            try:
                                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ï–†–ï–î –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                                logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ ID: {question['id']}")
                                logger.debug(f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: text='{question['question_text']}', type='{question['question_type']}', order={question['question_number']}")
                                logger.debug(f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: text='{edit_text}', type='{edit_type}', order={edit_order}")
                                
                                result = update_interview_question(
                                    question['id'],
                                    question_text=edit_text,
                                    question_type=edit_type,
                                    order_num=edit_order,
                                    is_required=edit_required,
                                    is_active=edit_active,
                                    options=edit_options if edit_options else None
                                )
                                
                                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ID {question['id']}: {result}")
                                
                                if result:
                                    logger.info(f"‚úÖ –í–æ–ø—Ä–æ—Å ID {question['id']} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                                    st.session_state.success_message = "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!"
                                    del st.session_state.editing_question
                                    st.rerun()
                                else:
                                    logger.warning(f"‚ùå –í–æ–ø—Ä–æ—Å ID {question['id']} –ù–ï –æ–±–Ω–æ–≤–ª–µ–Ω - —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ False")
                                    st.session_state.error_message = "‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å. –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –ª–æ–≥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
                                    del st.session_state.editing_question
                                    st.rerun()
                            except Exception as e:
                                logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ID {question['id']}: {e}")
                                import traceback
                                logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
                                st.session_state.error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
                                del st.session_state.editing_question
                                st.rerun()
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            del st.session_state.editing_question
                            st.rerun()
else:
    st.info("üìù –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é")

# –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç
st.subheader("üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")

col1, col2 = st.columns(2)

with col1:
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤"):
        if questions:
            # –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "questions": questions,
                "export_date": datetime.now().isoformat()
            }
            
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å JSON",
                data=json.dumps(export_data, indent=2, ensure_ascii=False),
                file_name=f"interview_questions_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        else:
            st.warning("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

with col2:
    uploaded_file = st.file_uploader("üì§ –ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤", type=['json'])
    
    if uploaded_file is not None:
        try:
            import_data = json.load(uploaded_file)
            
            if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                imported_count = 0
                
                for question_data in import_data.get('questions', []):
                    try:
                        insert_interview_question(
                            question_text=question_data['question_text'],
                            question_type=question_data['question_type'],
                            order_num=question_data['question_number'],
                            is_required=question_data['is_required'],
                            is_active=question_data['is_active'],
                            options=question_data.get('options')
                        )
                        imported_count += 1
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞: {e}")
                
                st.success(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –≤–æ–ø—Ä–æ—Å–æ–≤!")
                st.rerun()
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}") 