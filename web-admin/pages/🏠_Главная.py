#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard page for GrantService admin panel
"""

import streamlit as st
import sys
import os
import requests
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page",
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()

from utils.database import AdminDatabase
from utils.charts import create_metrics_cards, create_daily_chart
from utils.logger import setup_logger, log_exception, log_performance

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
logger = setup_logger('main_page', level=logging.INFO)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@log_exception(logger, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
def init_database():
    return AdminDatabase()

try:
    db = init_database()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

col1, col2 = st.columns(2)

@log_performance(logger)
def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞"""
    response = requests.get(
        f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN', '7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo')}/getMe",
        timeout=5
    )
    return response



with col1:
    try:
        response = check_telegram_bot()
        if response.status_code == 200:
            st.success("‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            bot_info = response.json()['result']
            st.info(f"–ë–æ—Ç: @{bot_info['username']}")
            logger.info(f"Telegram bot @{bot_info['username']} online")
        else:
            st.error("‚ùå Telegram –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            logger.warning(f"Telegram bot offline: HTTP {response.status_code}")
    except requests.exceptions.Timeout:
        logger.error("Telegram bot connection timeout", exc_info=True)
        st.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É (>5 —Å–µ–∫)")
    except requests.exceptions.RequestException as e:
        logger.error(f"Telegram bot request error: {e}", exc_info=True)
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É")
    except Exception as e:
        logger.error(f"Telegram bot unexpected error: {e}", exc_info=True)
        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

with col2:
    st.success("‚úÖ Nginx –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    st.info("admin.grantservice.ru ‚Üí Streamlit –∞–¥–º–∏–Ω–∫–∞")
    logger.info("Nginx proxy to Streamlit admin panel active")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

@log_performance(logger)
def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    return db.get_basic_stats()

try:
    stats = get_metrics()
    create_metrics_cards(stats)
    logger.info(f"Metrics loaded: {stats['total_users']} users, {stats['recent_sessions']} sessions")
except Exception as e:
    logger.error(f"Error loading metrics: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    stats = {"total_users": 0, "recent_sessions": 0, "completed_apps": 0, "conversion_rate": 0}
    create_metrics_cards(stats)

# –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.subheader("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")

@log_performance(logger)
def get_daily_activity():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º"""
    return db.get_daily_stats(days=7)

try:
    daily_stats = get_daily_activity()
    create_daily_chart(daily_stats, "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    logger.info(f"Daily stats loaded for {len(daily_stats)} days")
except Exception as e:
    logger.error(f"Error loading daily stats: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏")

@log_performance(logger)
def get_recent_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π"""
    return db.get_user_sessions(limit=10)

try:
    recent_sessions = get_recent_sessions()
    logger.info(f"Loaded {len(recent_sessions) if recent_sessions else 0} recent sessions")
except Exception as e:
    logger.error(f"Error loading recent sessions: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π")
    recent_sessions = []

if recent_sessions:
    for session in recent_sessions:
        with st.expander(f"–°–µ—Å—Å–∏—è {session['id']} - {session['started_at']}"):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {session['telegram_id']}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {session['status']}")
            with col2:
                st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {session['started_at']}")
                if session['completed_at']:
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∞:** {session['completed_at']}")
else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")

col1, col2, col3 = st.columns(3)

with col1:
    st.info(f"**–í–µ—Ä—Å–∏—è:** 2.0")
    st.info(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}")

with col2:
    st.info(f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}")
    st.info("**–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω")

with col3:
    st.info("**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ê–Ω–¥—Ä–µ–π –û—Ç–∏–Ω–æ–≤")
    st.info("**–î–æ–º–µ–Ω:** grantservice.onff.ru")

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ª–æ–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
logger.info("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞") 