#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard page for GrantService admin panel
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –û–°
"""

import streamlit as st
import sys
import os
import requests
import logging
from datetime import datetime
from pathlib import Path

# Add paths for imports
current_file = Path(__file__).resolve()
web_admin_dir = current_file.parent.parent  # web-admin directory
base_dir = web_admin_dir.parent  # GrantService directory

# Add to sys.path if not already there
if str(web_admin_dir) not in sys.path:
    sys.path.insert(0, str(web_admin_dir))
if str(base_dir) not in sys.path:
    sys.path.insert(0, str(base_dir))

# Import modules using importlib for better reliability
import importlib.util

# First, check if there's a token in the URL
try:
    query_params = st.query_params  # Streamlit >= 1.30
except AttributeError:
    query_params = st.experimental_get_query_params()  # Streamlit < 1.30
token_from_url = query_params.get('token', [None])[0] if isinstance(query_params.get('token', None), list) else query_params.get('token', None)

# Debug output
if token_from_url:
    st.sidebar.success(f"üîë –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ URL: {token_from_url[:20]}...")
    
    # Try to validate the token
    try:
        # Import validate_login_token
        auth_file = web_admin_dir / "utils" / "auth.py"
        spec = importlib.util.spec_from_file_location("auth", str(auth_file))
        if spec and spec.loader:
            auth_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(auth_module)
            validate_login_token = auth_module.validate_login_token
            check_user_access = auth_module.check_user_access
            
            # Validate the token
            user_data = validate_login_token(token_from_url)
            if user_data:
                st.sidebar.success(f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('telegram_id')}")
                
                # Check access
                has_access = check_user_access(user_data.get('telegram_id'))
                if has_access:
                    # Save to session
                    st.session_state['auth_token'] = token_from_url
                    st.session_state['user'] = user_data
                    st.sidebar.success("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    
                    # Clear token from URL for security
                    try:
                        st.query_params.clear()  # Streamlit >= 1.30
                    except AttributeError:
                        st.experimental_set_query_params()  # Streamlit < 1.30
                    
                    # Reload the page
                    st.rerun()
                else:
                    st.error("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            else:
                st.sidebar.error("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω")
    except Exception as e:
        st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
else:
    st.sidebar.info("‚ÑπÔ∏è –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL")

# Authorization check
try:
    # Try direct import first
    from utils.auth import is_user_authorized
except ImportError:
    # Fallback to importlib
    auth_file = web_admin_dir / "utils" / "auth.py"
    spec = importlib.util.spec_from_file_location("auth", str(auth_file))
    if spec and spec.loader:
        auth_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(auth_module)
        is_user_authorized = auth_module.is_user_authorized
    else:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Failed to load auth module")
        st.stop()

# Check authorization - if token was just validated, user should be authorized now
if not is_user_authorized():
    # Import and show impressive login page
    auth_pages_file = web_admin_dir / "auth_pages.py"
    spec = importlib.util.spec_from_file_location("auth_pages", str(auth_pages_file))
    if spec and spec.loader:
        auth_module = importlib.util.module_from_spec(spec)
        try:
            spec.loader.exec_module(auth_module)
            # Call the impressive login page function
            if hasattr(auth_module, 'show_impressive_login_page'):
                auth_module.show_impressive_login_page()
            else:
                st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
                st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—Ö–æ–¥–∞: {e}")
            st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ @GrantServiceHelperBot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞")
    else:
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
    st.stop()

# Import utilities
try:
    # Import database
    try:
        from utils.database import AdminDatabase
    except ImportError:
        database_file = web_admin_dir / "utils" / "database.py"
        spec = importlib.util.spec_from_file_location("database", str(database_file))
        if spec and spec.loader:
            database_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(database_module)
            AdminDatabase = database_module.AdminDatabase
    
    # Import charts
    try:
        from utils.charts import create_metrics_cards, create_daily_chart
    except ImportError:
        charts_file = web_admin_dir / "utils" / "charts.py"
        spec = importlib.util.spec_from_file_location("charts", str(charts_file))
        if spec and spec.loader:
            charts_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(charts_module)
            create_metrics_cards = charts_module.create_metrics_cards
            create_daily_chart = charts_module.create_daily_chart
    
    # Import logger
    try:
        from utils.logger import setup_logger, log_exception, log_performance
    except ImportError:
        logger_file = web_admin_dir / "utils" / "logger.py"
        spec = importlib.util.spec_from_file_location("logger", str(logger_file))
        if spec and spec.loader:
            logger_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(logger_module)
            setup_logger = logger_module.setup_logger
            log_exception = logger_module.log_exception
            log_performance = logger_module.log_performance

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç / Utilities import error: {e}")
    st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π / Check dependencies installation")
    st.stop()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º
logger = setup_logger('main_page', level=logging.INFO)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
@log_exception(logger, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
def init_database():
    return AdminDatabase()

try:
    db = init_database()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
    st.stop()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

col1, col2 = st.columns(2)

@log_performance(logger)
def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Telegram –±–æ—Ç–∞"""
    response = requests.get(
        f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN', '7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo')}/getMe",
        timeout=5
    )
    return response

with col1:
    try:
        response = check_telegram_bot()
        if response.status_code == 200:
            st.success("‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            bot_info = response.json()['result']
            st.info(f"–ë–æ—Ç: @{bot_info['username']}")
            logger.info(f"Telegram bot @{bot_info['username']} online")
        else:
            st.error("‚ùå Telegram –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
            logger.warning(f"Telegram bot offline: HTTP {response.status_code}")
    except requests.exceptions.Timeout:
        logger.error("Telegram bot connection timeout", exc_info=True)
        st.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É (>5 —Å–µ–∫)")
    except requests.exceptions.RequestException as e:
        logger.error(f"Telegram bot request error: {e}", exc_info=True)
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–æ—Ç—É")
    except Exception as e:
        logger.error(f"Telegram bot unexpected error: {e}", exc_info=True)
        st.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

with col2:
    st.success("‚úÖ Nginx –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    st.info("admin.grantservice.ru ‚Üí Streamlit –∞–¥–º–∏–Ω–∫–∞")
    logger.info("Nginx proxy to Streamlit admin panel active")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

@log_performance(logger)
def get_metrics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    return db.get_basic_stats()

try:
    stats = get_metrics()
    create_metrics_cards(stats)
    logger.info(f"Metrics loaded: {stats['total_users']} users, {stats['recent_sessions']} sessions")
except Exception as e:
    logger.error(f"Error loading metrics: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    stats = {"total_users": 0, "recent_sessions": 0, "completed_apps": 0, "conversion_rate": 0}
    create_metrics_cards(stats)

# –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.subheader("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")

@log_performance(logger)
def get_daily_activity():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –¥–Ω—è–º"""
    return db.get_daily_stats(days=7)

try:
    daily_stats = get_daily_activity()
    create_daily_chart(daily_stats, "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
    logger.info(f"Daily stats loaded for {len(daily_stats)} days")
except Exception as e:
    logger.error(f"Error loading daily stats: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–Ω—è–º")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏")

@log_performance(logger)
def get_recent_sessions():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π"""
    return db.get_user_sessions(limit=10)

try:
    recent_sessions = get_recent_sessions()
    logger.info(f"Loaded {len(recent_sessions) if recent_sessions else 0} recent sessions")
except Exception as e:
    logger.error(f"Error loading recent sessions: {e}", exc_info=True)
    st.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π")
    recent_sessions = []

if recent_sessions:
    for session in recent_sessions:
        with st.expander(f"–°–µ—Å—Å–∏—è {session['id']} - {session['started_at']}"):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {session['telegram_id']}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {session['status']}")
            with col2:
                st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {session['started_at']}")
                if session['completed_at']:
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∞:** {session['completed_at']}")
else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")

col1, col2, col3 = st.columns(3)

with col1:
    st.info(f"**–í–µ—Ä—Å–∏—è:** 2.0")
    st.info(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}")

with col2:
    st.info(f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}")
    st.info("**–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω")

with col3:
    st.info("**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ê–Ω–¥—Ä–µ–π –û—Ç–∏–Ω–æ–≤")
    st.info("**–î–æ–º–µ–Ω:** grantservice.onff.ru")

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –ª–æ–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
logger.info("üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")