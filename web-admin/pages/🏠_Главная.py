#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Dashboard page for GrantService admin panel
"""

import streamlit as st
import sys
import os
import requests
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

from utils.database import AdminDatabase
from utils.charts import create_metrics_cards, create_daily_chart
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('main_page')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üèÜ –ì—Ä–∞–Ω—Ç–°–µ—Ä–≤–∏—Å - –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = AdminDatabase()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")

col1, col2 = st.columns(2)

with col1:
    try:
        response = requests.get(
            f"https://api.telegram.org/bot{os.getenv('TELEGRAM_BOT_TOKEN', '7685915842:AAGcW0kgtljyIob8enM3zvFSLuZ-BZzcPOo')}/getMe",
            timeout=5
        )
        if response.status_code == 200:
            st.success("‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            bot_info = response.json()['result']
            st.info(f"–ë–æ—Ç: @{bot_info['username']}")
        else:
            st.error("‚ùå Telegram –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    except Exception as e:
        logger.error(f"Telegram bot connection error: {e}", exc_info=True)
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É: {e}")

with col2:
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ FastAPI
        response = requests.get("http://localhost:8000/status", timeout=5)
        if response.status_code == 200:
            st.success("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            st.warning("‚ö†Ô∏è FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except:
        st.warning("‚ö†Ô∏è FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

stats = db.get_basic_stats()
create_metrics_cards(stats)

# –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.subheader("üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º")

daily_stats = db.get_daily_stats(days=7)
create_daily_chart(daily_stats, "–°–µ—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")

# –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
st.subheader("üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏")

recent_sessions = db.get_user_sessions(limit=10)

if recent_sessions:
    for session in recent_sessions:
        with st.expander(f"–°–µ—Å—Å–∏—è {session['id']} - {session['started_at']}"):
            col1, col2 = st.columns(2)
            with col1:
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {session['telegram_id']}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {session['status']}")
            with col2:
                st.write(f"**–°–æ–∑–¥–∞–Ω–∞:** {session['started_at']}")
                if session['completed_at']:
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–∞:** {session['completed_at']}")
else:
    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Å—Å–∏—è—Ö")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")

col1, col2, col3 = st.columns(3)

with col1:
    st.info(f"**–í–µ—Ä—Å–∏—è:** 2.0")
    st.info(f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y')}")

with col2:
    st.info(f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}")
    st.info("**–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω")

with col3:
    st.info("**–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –ê–Ω–¥—Ä–µ–π –û—Ç–∏–Ω–æ–≤")
    st.info("**–î–æ–º–µ–Ω:** grantservice.onff.ru") 