#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Users management page for GrantService admin panel - Progress-based approach
"""

import streamlit as st
import sys
import pandas as pd
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

from data.database import get_all_users_progress, get_questions_with_answers, export_user_form, get_total_users
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('users_page')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
st.title("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    users_progress = get_all_users_progress()
    total_users = get_total_users()
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É –∞–Ω–∫–µ—Ç
    completed_users = len([u for u in users_progress if u['progress']['status'] == 'completed'])
    in_progress_users = len([u for u in users_progress if u['progress']['status'] == 'in_progress'])
    not_started_users = len([u for u in users_progress if u['progress']['status'] == 'not_started'])
    
    avg_progress = sum([u['progress']['progress_percent'] for u in users_progress]) / len(users_progress) if users_progress else 0
    
    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", total_users)
    
    with col2:
        st.metric("–ó–∞–≤–µ—Ä—à–∏–ª–∏ –∞–Ω–∫–µ—Ç—É", completed_users, delta=f"{round((completed_users/total_users)*100, 1)}%" if total_users > 0 else "0%")
    
    with col3:
        st.metric("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", in_progress_users)
    
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", f"{round(avg_progress, 1)}%")
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã",
            ["–í—Å–µ", "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–ù–µ –Ω–∞—á–∞—Ç–æ"]
        )
    
    with col2:
        search_user = st.text_input("–ü–æ–∏—Å–∫ –ø–æ Telegram ID", placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    with col3:
        sort_by = st.selectbox(
            "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞",
            ["–ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É", "–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"]
        )
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    filtered_users = users_progress.copy()
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status_filter != "–í—Å–µ":
        status_map = {
            "–ó–∞–≤–µ—Ä—à–µ–Ω–æ": "completed",
            "–í –ø—Ä–æ—Ü–µ—Å—Å–µ": "in_progress", 
            "–ù–µ –Ω–∞—á–∞—Ç–æ": "not_started"
        }
        filtered_users = [u for u in filtered_users if u['progress']['status'] == status_map[status_filter]]
    
    # –ü–æ–∏—Å–∫ –ø–æ ID
    if search_user:
        filtered_users = [u for u in filtered_users if search_user in str(u['telegram_id'])]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if sort_by == "–ü–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É":
        filtered_users.sort(key=lambda x: x['progress']['progress_percent'], reverse=True)
    elif sort_by == "–ü–æ –¥–∞—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏":
        filtered_users.sort(key=lambda x: x['registration_date'] or '', reverse=True)
    else:  # –ü–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        filtered_users.sort(key=lambda x: x['last_activity'] or '', reverse=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if filtered_users:
        st.subheader(f"üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(filtered_users)})")
        
        for user in filtered_users:
            telegram_id = user['telegram_id']
            progress = user['progress']
            current_question = user['current_question_info']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_colors = {
                'completed': 'üü¢',
                'in_progress': 'üü°',
                'not_started': 'üîµ'
            }
            status_color = status_colors.get(progress['status'], '‚ö™')
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            progress_bar_length = 20
            filled_length = int(progress_bar_length * progress['progress_percent'] / 100)
            progress_bar = "‚ñà" * filled_length + "‚ñë" * (progress_bar_length - filled_length)
            
            # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_display_name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip()
            if user['username']:
                user_display_name += f" (@{user['username']})"
            if not user_display_name:
                user_display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}"
            
            with st.expander(f"{status_color} {user_display_name}"):
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.write(f"**Telegram ID:** {telegram_id}")
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar} {progress['answered_questions']}/{progress['total_questions']} ({progress['progress_percent']}%)")
                    
                    # –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
                    if progress['status'] == 'completed':
                        st.success("‚úÖ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
                    elif progress['status'] == 'in_progress':
                        st.write(f"**–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å #{current_question['question_number']}:** {current_question['question_text'][:100]}...")
                    else:
                        st.info("üìù –ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞")
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    if user['last_activity']:
                        try:
                            last_activity = datetime.fromisoformat(user['last_activity'].replace('Z', '+00:00'))
                            time_diff = datetime.now(last_activity.tzinfo) - last_activity
                            
                            if time_diff.days > 0:
                                activity_text = f"{time_diff.days} –¥–Ω. –Ω–∞–∑–∞–¥"
                            elif time_diff.seconds > 3600:
                                activity_text = f"{time_diff.seconds // 3600} —á. –Ω–∞–∑–∞–¥"
                            else:
                                activity_text = f"{time_diff.seconds // 60} –º–∏–Ω. –Ω–∞–∑–∞–¥"
                            
                            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {activity_text}")
                        except:
                            st.write(f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {user['last_activity']}")
                
                with col2:
                    if st.button("üìã –í—Å–µ –æ—Ç–≤–µ—Ç—ã", key=f"answers_{telegram_id}"):
                        st.session_state.selected_user = telegram_id
                        st.session_state.view_mode = 'answers'
                        st.rerun()
                    
                    if st.button("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", key=f"progress_{telegram_id}"):
                        st.session_state.selected_user = telegram_id
                        st.session_state.view_mode = 'progress'
                        st.rerun()
                    
                    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{telegram_id}"):
                        try:
                            export_text = export_user_form(telegram_id)
                            
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                            file_name = f"anketa_{telegram_id}"
                            if user_display_name and user_display_name != f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}":
                                # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                                clean_name = "".join(c for c in user_display_name if c.isalnum() or c in (' ', '-', '_')).strip()
                                clean_name = clean_name.replace(' ', '_')
                                if clean_name:
                                    file_name = f"anketa_{clean_name}"
                            
                            file_name += f"_{datetime.now().strftime('%Y%m%d')}.txt"
                            
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
                                data=export_text,
                                file_name=file_name,
                                mime="text/plain",
                                key=f"download_{telegram_id}"
                            )
                        except Exception as e:
                            logger.error(f"Error exporting user form: {e}", exc_info=True)
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    else:
        st.info("üìù –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º")

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if st.session_state.get('selected_user'):
        user_id = st.session_state.selected_user
        view_mode = st.session_state.get('view_mode', 'answers')
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_user_data = next((u for u in users_progress if u['telegram_id'] == user_id), None)
        
        if selected_user_data:
            user_display_name = f"{selected_user_data['first_name'] or ''} {selected_user_data['last_name'] or ''}".strip()
            if selected_user_data['username']:
                user_display_name += f" (@{selected_user_data['username']})"
            if not user_display_name:
                user_display_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}"
            
            st.subheader(f"üîç {user_display_name}")
            
            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                if st.button("üìã –û—Ç–≤–µ—Ç—ã", disabled=(view_mode == 'answers')):
                    st.session_state.view_mode = 'answers'
                    st.rerun()
            with col2:
                if st.button("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", disabled=(view_mode == 'progress')):
                    st.session_state.view_mode = 'progress'
                    st.rerun()
            with col3:
                if st.button("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", disabled=(view_mode == 'stats')):
                    st.session_state.view_mode = 'stats'
                    st.rerun()
            with col4:
                if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å"):
                    del st.session_state.selected_user
                    if 'view_mode' in st.session_state:
                        del st.session_state.view_mode
                    st.rerun()
            
            st.divider()
            
            try:
                if view_mode == 'answers':
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                    questions_with_answers = get_questions_with_answers(user_id)
                    
                    for qa in questions_with_answers:
                        with st.container():
                            if qa['answered']:
                                st.success(f"‚úÖ **–í–æ–ø—Ä–æ—Å {qa['question_number']}:** {qa['question_text']}")
                                st.write(f"**–û—Ç–≤–µ—Ç:** {qa['answer']}")
                            else:
                                st.warning(f"‚ùì **–í–æ–ø—Ä–æ—Å {qa['question_number']}:** {qa['question_text']}")
                                st.write("**–û—Ç–≤–µ—Ç:** _(–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)_")
                            
                            if qa['hint_text']:
                                st.caption(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {qa['hint_text']}")
                            
                            st.divider()
                
                elif view_mode == 'progress':
                    # –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress = selected_user_data['progress']
                    
                    # –ë–æ–ª—å—à–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_percent = progress['progress_percent']
                    st.progress(progress_percent / 100, text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress['answered_questions']}/{progress['total_questions']} ({progress_percent}%)")
                    
                    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("–û—Ç–≤–µ—á–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤", progress['answered_questions'])
                    with col2:
                        st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", progress['total_questions'])
                    with col3:
                        st.metric("–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å", progress['current_question'])
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
                    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
                    
                    questions_with_answers = get_questions_with_answers(user_id)
                    
                    for qa in questions_with_answers:
                        col1, col2 = st.columns([1, 4])
                        
                        with col1:
                            if qa['answered']:
                                st.success(f"‚úÖ #{qa['question_number']}")
                            else:
                                st.error(f"‚ùå #{qa['question_number']}")
                        
                        with col2:
                            st.write(qa['question_text'])
                
                elif view_mode == 'stats':
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    progress = selected_user_data['progress']
                    
                    st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write("**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**")
                        st.write(f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {selected_user_data['registration_date']}")
                        st.write(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {selected_user_data['last_activity']}")
                        st.write(f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã: {progress['status']}")
                    
                    with col2:
                        st.write("**–ü—Ä–æ–≥—Ä–µ—Å—Å:**")
                        st.write(f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {progress['progress_percent']}%")
                        st.write(f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: {progress['total_questions'] - progress['answered_questions']}")
                        
                        if progress['status'] == 'in_progress':
                            st.write(f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: #{progress['current_question']}")
                
            except Exception as e:
                logger.error(f"Error in user detail view: {e}", exc_info=True)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

except Exception as e:
    logger.error(f"Critical error in users page: {e}", exc_info=True)
    st.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")