import streamlit as st
import sys
import os
import json
from datetime import datetime, timedelta
import pandas as pd

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService/data')
sys.path.append('/var/GrantService')

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import GrantServiceDatabase
    DATABASE_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    DATABASE_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìÑ –ì—Ä–∞–Ω—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def show_applications_list():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    if not DATABASE_AVAILABLE:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    db = GrantServiceDatabase()
    
    st.header("üìÑ –°–ø–∏—Å–æ–∫ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
    st.markdown("---")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_applications_statistics()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if stats:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫", stats.get('total_applications', 0))
        
        with col2:
            st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{stats.get('average_quality_score', 0):.1f}/10")
        
        with col3:
            draft_count = stats.get('status_distribution', {}).get('draft', 0)
            st.metric("–ß–µ—Ä–Ω–æ–≤–∏–∫–∏", draft_count)
        
        with col4:
            submitted_count = stats.get('status_distribution', {}).get('submitted', 0)
            st.metric("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", submitted_count)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        if stats.get('status_distribution'):
            st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
            
            status_data = stats['status_distribution']
            status_names = {
                'draft': '–ß–µ—Ä–Ω–æ–≤–∏–∫',
                'submitted': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                'approved': '–û–¥–æ–±—Ä–µ–Ω–∞',
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }
            
            status_df = pd.DataFrame([
                {'–°—Ç–∞—Ç—É—Å': status_names.get(status, status), '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count}
                for status, count in status_data.items()
            ])
            
            col1, col2 = st.columns([2, 1])
            with col1:
                st.bar_chart(status_df.set_index('–°—Ç–∞—Ç—É—Å'))
            with col2:
                st.dataframe(status_df, use_container_width=True)
    
    # –§–∏–ª—å—Ç—Ä—ã
    st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "draft", "submitted", "approved", "rejected"],
            format_func=lambda x: {
                "–í—Å–µ": "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã",
                "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫", 
                "submitted": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                "approved": "–û–¥–æ–±—Ä–µ–Ω–∞",
                "rejected": "–û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            }.get(x, x)
        )
    
    with col2:
        date_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"]
        )
    
    with col3:
        provider_filter = st.selectbox(
            "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
            ["–í—Å–µ", "gigachat", "local", "fallback"]
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
    applications = db.get_all_applications(limit=50)
    
    if not applications:
        st.info("üìù –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏
    seen_numbers = set()
    unique_applications = []
    for app in applications:
        app_number = app.get('application_number', '')
        if app_number and app_number not in seen_numbers:
            seen_numbers.add(app_number)
            unique_applications.append(app)
    
    applications = unique_applications
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    filtered_apps = applications
    
    if status_filter != "–í—Å–µ":
        filtered_apps = [app for app in filtered_apps if app.get('status') == status_filter]
    
    if provider_filter != "–í—Å–µ":
        filtered_apps = [app for app in filtered_apps if app.get('llm_provider') == provider_filter]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
    if date_filter != "–í—Å–µ –≤—Ä–µ–º—è":
        now = datetime.now()
        if date_filter == "–°–µ–≥–æ–¥–Ω—è":
            cutoff_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        elif date_filter == "–ù–µ–¥–µ–ª—è":
            cutoff_date = now - timedelta(days=7)
        elif date_filter == "–ú–µ—Å—è—Ü":
            cutoff_date = now - timedelta(days=30)
        
        date_filtered_apps = []
        for app in filtered_apps:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            try:
                created_at = datetime.fromisoformat(app.get('created_at', ''))
                if created_at >= cutoff_date:
                    date_filtered_apps.append(app)
            except:
                continue
        filtered_apps = date_filtered_apps
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏
    st.subheader(f"üìÑ –ó–∞—è–≤–∫–∏ ({len(filtered_apps)})")
    
    if not filtered_apps:
        st.info("üîç –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –∑–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    for app in filtered_apps:
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = app.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        if len(title) > 80:
            display_title = title[:80] + "..."
        else:
            display_title = title
            
        app_number = app.get('application_number', '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞')
        
        with st.expander(f"üìÑ {display_title} (#{app_number})", expanded=False):
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                status_emoji = {
                    'draft': 'üìù',
                    'submitted': 'üì§',
                    'approved': '‚úÖ',
                    'rejected': '‚ùå'
                }.get(app.get('status', 'draft'), 'üìù')
                
                st.metric("–°—Ç–∞—Ç—É—Å", f"{status_emoji} {app.get('status', 'draft')}")
            
            with col2:
                st.metric("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{app.get('quality_score', 0):.1f}/10")
            
            with col3:
                st.metric("LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä", app.get('llm_provider', 'Unknown'))
            
            with col4:
                created_date = app.get('created_at', '')
                if created_date:
                    try:
                        date_obj = datetime.fromisoformat(created_date)
                        formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
                    except:
                        formatted_date = created_date
                else:
                    formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                st.metric("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", formatted_date)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if app.get('summary'):
                st.write("**–û–ø–∏—Å–∞–Ω–∏–µ:**")
                st.write(app['summary'])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                if st.button(f"üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_{app['id']}"):
                    st.session_state.selected_application = app['application_number']
                    st.switch_page("pages/üìÑ_–ü—Ä–æ—Å–º–æ—Ç—Ä_–∑–∞—è–≤–∫–∏.py")
            
            with col2:
                if st.button(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"status_{app['id']}"):
                    change_status_modal(app)
            
            with col3:
                if st.button(f"üì• –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{app['id']}"):
                    export_application(app['application_number'])
            
            with col4:
                if st.button(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy_{app['id']}"):
                    st.session_state.copy_source = app['application_number']
                    st.success("‚úÖ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
            
            with col5:
                if app.get('status') == 'draft':
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{app['id']}", type="secondary"):
                        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è
                        st.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ")

def change_status_modal(app):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    with st.container():
        st.subheader(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{app['application_number']}")
        
        current_status = app.get('status', 'draft')
        
        new_status = st.selectbox(
            "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
            ["draft", "submitted", "approved", "rejected"],
            index=["draft", "submitted", "approved", "rejected"].index(current_status),
            format_func=lambda x: {
                "draft": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
                "submitted": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
                "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            }.get(x, x),
            key=f"new_status_{app['id']}"
        )
        
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", key=f"save_status_{app['id']}"):
            if DATABASE_AVAILABLE:
                db = GrantServiceDatabase()
                success = db.update_application_status(app['application_number'], new_status)
                
                if success:
                    st.success(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

def export_application(application_number):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    if not DATABASE_AVAILABLE:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    db = GrantServiceDatabase()
    app = db.get_application_by_number(application_number)
    
    if not app:
        st.error("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # JSON —ç–∫—Å–ø–æ—Ä—Ç
    export_data = {
        'application_number': app['application_number'],
        'title': app['title'],
        'status': app['status'],
        'created_at': app['created_at'],
        'content': app.get('content', {}),
        'quality_score': app['quality_score']
    }
    
    json_str = json.dumps(export_data, ensure_ascii=False, indent=2)
    
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_str.encode('utf-8'),
        file_name=f"grant_application_{application_number}.json",
        mime="application/json",
        key=f"download_json_{application_number}"
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.title("üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω—Ç–æ–≤—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏")
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
    st.sidebar.title("üéØ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    page_mode = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º",
        ["üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    )
    
    if page_mode == "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫":
        show_applications_list()
    elif page_mode == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        show_analytics()
    elif page_mode == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        show_settings()

def show_analytics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")
    st.markdown("---")
    
    if not DATABASE_AVAILABLE:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    db = GrantServiceDatabase()
    applications = db.get_all_applications(limit=1000)  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    if not applications:
        st.info("üìù –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    df = pd.DataFrame(applications)
    
    # –ì—Ä–∞—Ñ–∏–∫ –ø–æ –¥–Ω—è–º
    st.subheader("üìà –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ –¥–Ω—è–º")
    
    if 'created_at' in df.columns:
        try:
            df['date'] = pd.to_datetime(df['created_at']).dt.date
            daily_counts = df.groupby('date').size().reset_index(name='count')
            
            if not daily_counts.empty:
                st.line_chart(daily_counts.set_index('date'))
            else:
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç: {e}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
    st.subheader("ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    
    if 'llm_provider' in df.columns:
        provider_counts = df['llm_provider'].value_counts()
        if not provider_counts.empty:
            st.bar_chart(provider_counts)
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    st.subheader("‚≠ê –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
    
    if 'quality_score' in df.columns:
        quality_scores = df['quality_score'].dropna()
        if not quality_scores.empty:
            hist_data = pd.DataFrame({'–û—Ü–µ–Ω–∫–∞': quality_scores})
            st.histogram_chart(hist_data, x='–û—Ü–µ–Ω–∫–∞')

def show_settings():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫"""
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫")
    st.markdown("---")
    
    st.subheader("üîß –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        auto_save = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫", value=True)
        show_debug = st.checkbox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=False)
        
    with col2:
        default_status = st.selectbox(
            "–°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            ["draft", "submitted"],
            format_func=lambda x: {"draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫", "submitted": "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"}.get(x, x)
        )
    
    st.subheader("üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    export_formats = st.multiselect(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞",
        ["JSON", "PDF", "DOCX", "TXT"],
        default=["JSON"]
    )
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    
    if DATABASE_AVAILABLE:
        db = GrantServiceDatabase()
        stats = db.get_applications_statistics()
        
        st.info(f"""
        **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:**
        - ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞
        - üìÑ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats.get('total_applications', 0)}
        - ‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {stats.get('average_quality_score', 0):.1f}/10
        - üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        """)
    else:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

if __name__ == "__main__":
    main()

