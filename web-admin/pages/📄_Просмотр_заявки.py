import streamlit as st
import sys
import os
import json
from datetime import datetime

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService/data')
sys.path.append('/var/GrantService')

# –ò–º–ø–æ—Ä—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from database import GrantServiceDatabase
    DATABASE_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    DATABASE_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

def show_application_details(application_number: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    if not DATABASE_AVAILABLE:
        st.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    db = GrantServiceDatabase()
    app = db.get_application_by_number(application_number)
    
    if not app:
        st.error(f"‚ùå –ó–∞—è–≤–∫–∞ #{application_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title(f"üìÑ –ó–∞—è–≤–∫–∞ #{app['application_number']}")
    st.markdown("---")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        status_emoji = {
            'draft': 'üìù',
            'submitted': 'üì§',
            'approved': '‚úÖ',
            'rejected': '‚ùå'
        }.get(app.get('status', 'draft'), 'üìù')
        
        st.metric("–°—Ç–∞—Ç—É—Å", f"{status_emoji} {app.get('status', 'draft')}")
    
    with col2:
        st.metric("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{app.get('quality_score', 0):.1f}/10")
    
    with col3:
        st.metric("LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä", app.get('llm_provider', 'Unknown'))
    
    with col4:
        created_date = app.get('created_at', '')
        if created_date:
            try:
                date_obj = datetime.fromisoformat(created_date)
                formatted_date = date_obj.strftime("%d.%m.%Y %H:%M")
            except:
                formatted_date = created_date
        else:
            formatted_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        st.metric("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", formatted_date)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", expanded=False):
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–ú–æ–¥–µ–ª—å", app.get('model_used', 'Unknown'))
        
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{app.get('processing_time', 0):.2f} —Å–µ–∫")
        
        with col3:
            st.metric("–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ", app.get('tokens_used', 0))
        
        with col4:
            st.metric("–ê–≤—Ç–æ—Ä", app.get('admin_user', 'Unknown'))
        
        if app.get('grant_fund'):
            st.metric("–ì—Ä–∞–Ω—Ç–æ–¥–∞—Ç–µ–ª—å", app['grant_fund'])
        
        if app.get('requested_amount'):
            st.metric("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞", f"{app['requested_amount']:,.0f} ‚ÇΩ")
        
        if app.get('project_duration'):
            st.metric("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞", f"{app['project_duration']} –º–µ—Å.")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    st.subheader("üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    content = app.get('content', {})
    
    if not content:
        # –ï—Å–ª–∏ –Ω–µ—Ç content, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å content_json
        try:
            content = json.loads(app.get('content_json', '{}'))
        except:
            content = {}
    
    if content:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        section_order = [
            'title', 'summary', 'problem', 'solution', 
            'implementation', 'budget', 'timeline', 
            'team', 'impact', 'sustainability'
        ]
        
        section_names = {
            'title': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            'summary': 'üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
            'problem': '‚ùó –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            'solution': 'üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ',
            'implementation': 'üõ†Ô∏è –ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
            'budget': 'üí∞ –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞',
            'timeline': '‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏',
            'team': 'üë• –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞',
            'impact': 'üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
            'sustainability': '‚ôªÔ∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞'
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for section_key in section_order:
            if section_key in content and content[section_key]:
                section_name = section_names.get(section_key, section_key.title())
                
                with st.expander(section_name, expanded=True):
                    st.write(content[section_key])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–æ—Ä—è–¥–∫–µ
        other_sections = set(content.keys()) - set(section_order)
        for section_key in sorted(other_sections):
            if content[section_key]:
                with st.expander(f"üìÑ {section_key.title()}", expanded=False):
                    st.write(content[section_key])
    
    else:
        st.warning("‚ö†Ô∏è –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if app.get('summary'):
            st.subheader("üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
            st.write(app['summary'])
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π
    st.markdown("---")
    st.subheader("üîß –î–µ–π—Å—Ç–≤–∏—è")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", use_container_width=True):
            change_status_section(app)
    
    with col2:
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç JSON", use_container_width=True):
            export_application_json(app)
    
    with col3:
        if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", use_container_width=True):
            copy_application_text(content)
    
    with col4:
        if st.button("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", use_container_width=True):
            share_application(app['application_number'])
    
    with col5:
        if st.button("üîô –ö —Å–ø–∏—Å–∫—É", use_container_width=True):
            st.switch_page("pages/üìÑ_–ì—Ä–∞–Ω—Ç–æ–≤—ã–µ_–∑–∞—è–≤–∫–∏.py")

def change_status_section(app):
    """–°–µ–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    st.subheader("‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞")
    
    current_status = app.get('status', 'draft')
    
    new_status = st.selectbox(
        "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
        ["draft", "submitted", "approved", "rejected"],
        index=["draft", "submitted", "approved", "rejected"].index(current_status),
        format_func=lambda x: {
            "draft": "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
            "submitted": "üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–∞",
            "rejected": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        }.get(x, x)
    )
    
    reason = st.text_area(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞..."
    )
    
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
        if DATABASE_AVAILABLE:
            db = GrantServiceDatabase()
            success = db.update_application_status(app['application_number'], new_status)
            
            if success:
                st.success(f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

def export_application_json(app):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏ –≤ JSON"""
    export_data = {
        'application_number': app['application_number'],
        'title': app['title'],
        'status': app['status'],
        'created_at': app['created_at'],
        'content': app.get('content', {}),
        'quality_score': app['quality_score'],
        'technical_info': {
            'llm_provider': app.get('llm_provider'),
            'model_used': app.get('model_used'),
            'processing_time': app.get('processing_time'),
            'tokens_used': app.get('tokens_used')
        }
    }
    
    json_str = json.dumps(export_data, ensure_ascii=False, indent=2)
    
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_str.encode('utf-8'),
        file_name=f"grant_application_{app['application_number']}.json",
        mime="application/json"
    )

def copy_application_text(content):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏"""
    if not content:
        st.warning("‚ö†Ô∏è –ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏
    text_parts = []
    
    section_names = {
        'title': '–ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê',
        'summary': '–ö–†–ê–¢–ö–û–ï –û–ü–ò–°–ê–ù–ò–ï',
        'problem': '–û–ü–ò–°–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´',
        'solution': '–ü–†–ï–î–õ–ê–ì–ê–ï–ú–û–ï –†–ï–®–ï–ù–ò–ï',
        'implementation': '–ü–õ–ê–ù –†–ï–ê–õ–ò–ó–ê–¶–ò–ò',
        'budget': '–ë–Æ–î–ñ–ï–¢ –ü–†–û–ï–ö–¢–ê',
        'timeline': '–í–†–ï–ú–ï–ù–ù–´–ï –†–ê–ú–ö–ò',
        'team': '–ö–û–ú–ê–ù–î–ê –ü–†–û–ï–ö–¢–ê',
        'impact': '–û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢',
        'sustainability': '–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨ –ü–†–û–ï–ö–¢–ê'
    }
    
    for key, value in content.items():
        if value:
            section_title = section_names.get(key, key.upper())
            text_parts.append(f"{section_title}\n{'='*len(section_title)}\n{value}\n")
    
    full_text = '\n'.join(text_parts)
    
    st.text_area(
        "üìã –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è",
        value=full_text,
        height=300,
        help="–í—ã–¥–µ–ª–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç (Ctrl+A) –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ (Ctrl+C)"
    )

def share_application(application_number):
    """–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∑–∞—è–≤–∫—É"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞)
    share_url = f"http://localhost:8501/üìÑ_–ü—Ä–æ—Å–º–æ—Ç—Ä_–∑–∞—è–≤–∫–∏?app={application_number}"
    
    st.text_input(
        "üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ",
        value=share_url,
        help="–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–µ"
    )
    
    # QR –∫–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    st.info("üí° –í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç QR-–∫–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏
    query_params = st.query_params
    
    if 'app' in query_params:
        application_number = query_params['app']
    elif 'selected_application' in st.session_state:
        application_number = st.session_state.selected_application
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
        st.title("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏")
        st.markdown("---")
        
        application_number = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏",
            placeholder="GA-20241201-ABCD1234",
            help="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        )
        
        if st.button("üîç –ù–∞–π—Ç–∏ –∑–∞—è–≤–∫—É", type="primary"):
            if application_number:
                show_application_details(application_number)
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
        
        # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        st.markdown("---")
        st.info("üí° –ò–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ [—Å–ø–∏—Å–∫—É –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫](üìÑ_–ì—Ä–∞–Ω—Ç–æ–≤—ã–µ_–∑–∞—è–≤–∫–∏)")
        
        return
    
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    if application_number:
        show_application_details(application_number)

if __name__ == "__main__":
    main()

