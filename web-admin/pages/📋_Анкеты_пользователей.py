#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import streamlit as st
import sys
import os

# Simple imports without path manipulation
# The environment will be set up by the launcher

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ launcher.py / Run via launcher.py")
    st.stop()

import streamlit as st
import sys
import os
from datetime import datetime
import json

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ config –∏ data
sys.path.insert(0, parent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page",
        os.path.join(current_dir, "üîê_–í—Ö–æ–¥.py")
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()

from data.database.models import GrantServiceDatabase
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = GrantServiceDatabase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('user_anketas')

st.set_page_config(
    page_title="üìã –ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üìã –ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
try:
    db_instance = db
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.title("üéØ –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
status_filter = st.sidebar.selectbox(
    "–°—Ç–∞—Ç—É—Å",
    ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "completed", "active", "pending"],
    key="status_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
period_filter = st.sidebar.selectbox(
    "–ü–µ—Ä–∏–æ–¥",
    ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
    key="period_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_filter = st.sidebar.text_input(
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (username –∏–ª–∏ ID)",
    placeholder="–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ telegram_id",
    key="user_filter"
)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∫–µ—Ç")

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å –∞–Ω–∫–µ—Ç–∞–º–∏
    with db_instance.connect() as conn:
        cursor = conn.cursor()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∫–µ—Ç
        cursor.execute("SELECT COUNT(*) FROM sessions WHERE anketa_id IS NOT NULL")
        total_anketas = cursor.fetchone()[0]
        
        # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
        cursor.execute("""
            SELECT status, COUNT(*) 
            FROM sessions 
            WHERE anketa_id IS NOT NULL
            GROUP BY status
        """)
        status_counts = dict(cursor.fetchall())
        
        # –ü–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute("""
            SELECT u.username, COUNT(*) 
            FROM sessions s
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            WHERE s.anketa_id IS NOT NULL
            GROUP BY u.username
            ORDER BY COUNT(*) DESC
            LIMIT 10
        """)
        user_counts = dict(cursor.fetchall())
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            label="–í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç",
            value=total_anketas
        )
    
    with col2:
        completed = status_counts.get('completed', 0)
        st.metric(
            label="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö",
            value=completed
        )
    
    with col3:
        active = status_counts.get('active', 0)
        st.metric(
            label="–ê–∫—Ç–∏–≤–Ω—ã—Ö",
            value=active
        )
    
    with col4:
        pending = status_counts.get('pending', 0)
        st.metric(
            label="–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
            value=pending
        )
    
    # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    if user_counts:
        st.subheader("üë• –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∞–Ω–∫–µ—Ç:**")
            for user, count in list(user_counts.items())[:5]:
                if user:
                    st.write(f"‚Ä¢ @{user}: {count}")
                else:
                    st.write(f"‚Ä¢ –ë–µ–∑ username: {count}")
    
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
st.subheader("üìã –°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç")

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏ —Å –∞–Ω–∫–µ—Ç–∞–º–∏
    with db_instance.connect() as conn:
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT s.*, u.username, u.first_name, u.last_name
            FROM sessions s
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            WHERE s.anketa_id IS NOT NULL
            ORDER BY s.created_at DESC
            LIMIT 100
        """)
        
        results = cursor.fetchall()
        columns = [description[0] for description in cursor.description]
        
        all_anketas = []
        for row in results:
            anketa_data = dict(zip(columns, row))
            
            # –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            if anketa_data.get('interview_data'):
                try:
                    anketa_data['interview_data'] = json.loads(anketa_data['interview_data'])
                except:
                    anketa_data['interview_data'] = {}
            
            all_anketas.append(anketa_data)
    
    if not all_anketas:
        st.info("üîç –ê–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_anketas = all_anketas
        
        if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
            filtered_anketas = [a for a in filtered_anketas if a['status'] == status_filter]
        
        if user_filter:
            user_filter_lower = user_filter.lower()
            filtered_anketas = [a for a in filtered_anketas 
                              if (a.get('username', '').lower().find(user_filter_lower) != -1 or 
                                  str(a.get('telegram_id', '')).find(user_filter) != -1)]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {len(filtered_anketas)}**")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∫–µ—Ç—ã
        for anketa in filtered_anketas:
            with st.expander(f"üìã {anketa['anketa_id']} - {anketa.get('username', 'Unknown')}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**ID –∞–Ω–∫–µ—Ç—ã:** {anketa['anketa_id']}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{anketa.get('username', 'N/A')} ({anketa.get('first_name', '')} {anketa.get('last_name', '')})")
                    st.write(f"**Telegram ID:** {anketa['telegram_id']}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {anketa['status']}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {anketa['started_at']}")
                
                with col2:
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {anketa.get('completed_at', 'N/A')}")
                    st.write(f"**–°–æ–æ–±—â–µ–Ω–∏–π:** {anketa.get('total_messages', 0)}")
                    st.write(f"**AI –∑–∞–ø—Ä–æ—Å–æ–≤:** {anketa.get('ai_requests_count', 0)}")
                    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:** {anketa.get('project_name', 'N/A')}")
                
                # –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
                if anketa.get('interview_data'):
                    st.write("**–î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é:**")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤
                    interview_data = anketa['interview_data']
                    if isinstance(interview_data, dict):
                        for i, (key, value) in enumerate(list(interview_data.items())[:5]):
                            st.write(f"‚Ä¢ **{key}:** {value}")
                        
                        if len(interview_data) > 5:
                            st.write(f"... –∏ –µ—â–µ {len(interview_data) - 5} –≤–æ–ø—Ä–æ—Å–æ–≤")
                    
                    # –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–µ–º—Å—è –±–ª–æ–∫–µ
                    with st.expander("üìÑ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é"):
                        st.json(interview_data)
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.button("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", key=f"research_{anketa['id']}"):
                        st.session_state.selected_anketa_for_research = anketa['anketa_id']
                        st.rerun()
                
                with col2:
                    if st.button("üìä –î–µ—Ç–∞–ª–∏", key=f"details_{anketa['id']}"):
                        st.session_state.selected_anketa_details = anketa['anketa_id']
                        st.rerun()
                
                with col3:
                    if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID", key=f"copy_{anketa['id']}"):
                        st.code(anketa['anketa_id'])
                        st.success("ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π –¥–ª—è –∞–Ω–∫–µ—Ç—ã
if 'selected_anketa_for_research' in st.session_state:
    st.subheader("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∫–µ—Ç—ã")
    
    try:
        research_list = db_instance.get_research_by_anketa_id(st.session_state.selected_anketa_for_research)
        
        if research_list:
            st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(research_list)}**")
            
            for research in research_list:
                with st.expander(f"üî¨ {research['research_id']}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**ID –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {research['research_id']}")
                        st.write(f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** {research['llm_provider']}")
                        st.write(f"**–ú–æ–¥–µ–ª—å:** {research.get('model', 'N/A')}")
                        st.write(f"**–°—Ç–∞—Ç—É—Å:** {research['status']}")
                    
                    with col2:
                        st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {research['created_at']}")
                        st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {research.get('completed_at', 'N/A')}")
                        
                        if research.get('metadata'):
                            metadata = research['metadata']
                            st.write(f"**–¢–æ–∫–µ–Ω–æ–≤:** {metadata.get('tokens_used', 0)}")
                            st.write(f"**–í—Ä–µ–º—è:** {metadata.get('processing_time_seconds', 0)} —Å–µ–∫")
                    
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                    if research.get('research_results'):
                        st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                        st.text_area(
                            "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                            value=research['research_results'],
                            height=150,
                            key=f"research_results_{research['id']}"
                        )
        else:
            st.info("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {e}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã
if 'selected_anketa_details' in st.session_state:
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã")
    
    try:
        anketa = db_instance.get_session_by_anketa_id(st.session_state.selected_anketa_details)
        
        if anketa:
            st.json(anketa)
        else:
            st.error("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–Ω–∫–µ—Ç—ã: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.sidebar.info("""
**–ê–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–Ω–∫–µ—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ ID:**
- –ê–Ω–∫–µ—Ç–∞: `#AN-YYYYMMDD-username-001`

**–ü—Ä–æ—Ü–µ—Å—Å:**
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –≤ Telegram –±–æ—Ç–µ
2. –°–æ–∑–¥–∞–µ—Ç—Å—è –∞–Ω–∫–µ—Ç–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
3. Researcher Agent –ø—Ä–æ–≤–æ–¥–∏—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç—ã
4. –ê–Ω–∫–µ—Ç–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∏—Å–∞—Ç–µ–ª—é –∫–∞–∫ –µ–¥–∏–Ω—ã–π –ø–∞–∫–µ—Ç
""")
