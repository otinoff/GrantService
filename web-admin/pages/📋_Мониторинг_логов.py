#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –¥–ª—è GrantService Admin Panel
–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import sys
import os
import pandas as pd
from datetime import datetime, timedelta
import re
from pathlib import Path

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

from utils.logger import setup_logger, get_log_stats

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('log_monitoring')

st.title("üìã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤")

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –õ–û–ì–û–í ===
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–æ–≤")

log_stats = get_log_stats()

if 'error' in log_stats:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {log_stats['error']}")
else:
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤", "üìÅ")
        st.code(log_stats['log_directory'])
    
    with col2:
        st.metric("–§–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤", len(log_stats['files']))
    
    with col3:
        total_size_mb = log_stats['total_size'] / (1024 * 1024)
        st.metric("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{total_size_mb:.1f} MB")
    
    with col4:
        if log_stats['last_modified']:
            st.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                     log_stats['last_modified'].strftime('%H:%M:%S'))

# === –§–ê–ô–õ–´ –õ–û–ì–û–í ===
st.subheader("üìÅ –§–∞–π–ª—ã –ª–æ–≥–æ–≤")

if log_stats['files']:
    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    df_files = pd.DataFrame(log_stats['files'])
    df_files['size_mb'] = (df_files['size'] / (1024 * 1024)).round(2)
    df_files = df_files.sort_values('modified', ascending=False)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∞–π–ª–æ–≤
    st.dataframe(
        df_files[['name', 'size_mb', 'modified']].rename(columns={
            'name': '–§–∞–π–ª',
            'size_mb': '–†–∞–∑–º–µ—Ä (MB)',
            'modified': '–ò–∑–º–µ–Ω–µ–Ω'
        }),
        use_container_width=True
    )
    
    # === –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í ===
    st.subheader("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")
    
    # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    log_files = [f['name'] for f in log_stats['files']]
    selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–∞:", log_files)
    
    if selected_file:
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            lines_count = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫:", 10, 1000, 100)
            
        with col2:
            # –§–∏–ª—å—Ç—Ä—ã
            log_level = st.selectbox("–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤:", 
                                   ["–í—Å–µ", "ERROR", "WARNING", "INFO", "DEBUG"])
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"):
                st.rerun()
        
        with col2:
            if st.button("üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥"):
                log_path = os.path.join(log_stats['log_directory'], selected_file)
                try:
                    with open(log_path, 'r', encoding='utf-8') as f:
                        log_content = f.read()
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                        data=log_content,
                        file_name=selected_file,
                        mime="text/plain"
                    )
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        
        with col3:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥"):
                if st.session_state.get('confirm_clear'):
                    log_path = os.path.join(log_stats['log_directory'], selected_file)
                    try:
                        open(log_path, 'w').close()
                        st.success("‚úÖ –õ–æ–≥ –æ—á–∏—â–µ–Ω")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
                else:
                    st.session_state['confirm_clear'] = True
                    st.warning("‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        
        # === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –°–û–î–ï–†–ñ–ò–ú–û–ì–û ===
        st.subheader(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {selected_file}")
        
        log_path = os.path.join(log_stats['log_directory'], selected_file)
        
        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            recent_lines = lines[-lines_count:] if len(lines) > lines_count else lines
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–æ–≤
            if log_level != "–í—Å–µ":
                filtered_lines = []
                for line in recent_lines:
                    if f" - {log_level} - " in line:
                        filtered_lines.append(line)
                recent_lines = filtered_lines
            
            if recent_lines:
                # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
                error_count = sum(1 for line in recent_lines if " - ERROR - " in line)
                warning_count = sum(1 for line in recent_lines if " - WARNING - " in line)
                
                if error_count > 0 or warning_count > 0:
                    col1, col2 = st.columns(2)
                    with col1:
                        if error_count > 0:
                            st.error(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {error_count}")
                    with col2:
                        if warning_count > 0:
                            st.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
                log_container = st.container()
                
                with log_container:
                    log_text = ""
                    for line in recent_lines:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∞ –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                        if " - ERROR - " in line:
                            log_text += f"üî¥ {line}"
                        elif " - WARNING - " in line:
                            log_text += f"üü° {line}"
                        elif " - INFO - " in line:
                            log_text += f"üü¢ {line}"
                        elif " - DEBUG - " in line:
                            log_text += f"üîµ {line}"
                        else:
                            log_text += f"‚ö™ {line}"
                    
                    st.code(log_text, language=None)
                    
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                st.info(f"üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {len(recent_lines)} —Å—Ç—Ä–æ–∫ –∏–∑ {len(lines)} –æ–±—â–∏—Ö")
                
            else:
                st.info("üìù –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É")
                
        except FileNotFoundError:
            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_path}")
        except PermissionError:
            st.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É: {log_path}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            logger.error(f"Error reading log file {selected_file}: {e}", exc_info=True)

else:
    st.info("üìÇ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤")

# === –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö ===
st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫")

if st.button("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏"):
    error_analysis = {}
    
    for file_info in log_stats.get('files', []):
        if 'error' in file_info['name'].lower():
            log_path = os.path.join(log_stats['log_directory'], file_info['name'])
            try:
                with open(log_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                
                # –ò—â–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
                errors = []
                for line in lines[-100:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫
                    if " - ERROR - " in line:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                        parts = line.split(" - ERROR - ")
                        if len(parts) > 1:
                            error_msg = parts[1].strip()
                            errors.append(error_msg)
                
                if errors:
                    error_analysis[file_info['name']] = {
                        'count': len(errors),
                        'unique': len(set(errors)),
                        'recent': errors[-5:]  # 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
                    }
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {file_info['name']}: {e}")
    
    if error_analysis:
        for filename, analysis in error_analysis.items():
            st.write(f"**{filename}:**")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫", analysis['count'])
            with col2:
                st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", analysis['unique'])
            
            if analysis['recent']:
                st.write("**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:**")
                for error in analysis['recent']:
                    st.code(error, language=None)
            st.markdown("---")
    else:
        st.success("‚úÖ –ù–µ–¥–∞–≤–Ω–∏—Ö –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# === –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

with st.expander("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞"):
    st.code(f"""
–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
    
üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤: {log_stats['log_directory']}
üìä –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
    - DEBUG: –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    - INFO: –û–±—â–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
    - WARNING: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
    - ERROR: –û—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    - CRITICAL: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏

üîÑ –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤:
    - –ü–æ —Ä–∞–∑–º–µ—Ä—É: 10MB (5 –±—ç–∫–∞–ø–æ–≤)
    - –ü–æ –≤—Ä–µ–º–µ–Ω–∏: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (30 –¥–Ω–µ–π)
    - –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—à–∏–±–æ–∫

üìù –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤:
    - [component].log - –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏
    - [component]_errors.log - —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏  
    - [component]_daily.log - –¥–Ω–µ–≤–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è
    """, language=None)

# === REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì ===
st.subheader("‚ö° Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

if st.button("üî¥ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –æ—à–∏–±–∫—É"):
    logger.error("üß™ –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.warning("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
    logger.info("‚ÑπÔ∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.checkbox("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫)"):
    import time
    time.sleep(30)
    st.rerun()

logger.info("üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")