#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Researcher analytics page for GrantService admin panel
"""

import streamlit as st
import sys
import os

# Simple imports without path manipulation
# The environment will be set up by the launcher

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ launcher.py / Run via launcher.py")
    st.stop()

import streamlit as st
import sys
import pandas as pd
from datetime import datetime, timedelta

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ config –∏ data
sys.path.insert(0, parent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        os.path.join(current_dir, "üîê_–í—Ö–æ–¥.py")
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(grandparent_dir)

from utils.database import AdminDatabase
from utils.charts import create_researcher_metrics, create_cost_chart, create_popular_queries_chart

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
st.title("üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = AdminDatabase()

# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–ö–ê–£–ù–¢–ê =====
st.markdown("---")
st.subheader("üí∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞")

# –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ API
try:
    import sys
    sys.path.append(os.path.join(grandparent_dir, 'telegram-bot'))
    from services.perplexity_service import PerplexityService
    perplexity_service = PerplexityService()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ + –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∏–Ω–æ–≤)
    account_stats = perplexity_service.get_combined_statistics()
    
    account_info = account_stats.get('account_info', {})
    usage_stats = account_stats.get('usage_stats', {})
    # –£–±–∏—Ä–∞–µ–º rate_limits, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –Ω–µ—Ç –≤ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    
    col1, col2, col3 = st.columns(3)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏—è—Ö
    screen_data = perplexity_service.get_latest_screen_data()
    
    with col1:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        from data.database import get_latest_credit_balance, update_latest_credit_balance
        
        current_balance = get_latest_credit_balance()

        balance_emoji = "üí∞"
        tier = account_info.get('current_tier', 'Tier 0')
        spent = account_info.get('total_spent', 0.02)
        balance_str = f"{current_balance:.6f}"
        spent_str = f"{spent:.2f}"
        st.markdown(f"""
        **{balance_emoji} –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:**
        - **Credit balance:** {balance_str} USD
        - **–£—Ä–æ–≤–µ–Ω—å:** {tier}
        - **–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:** {spent_str} USD
        """)
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å"):
            new_balance = st.number_input(
                "–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (USD)",
                min_value=0.0,
                max_value=10000.0,
                value=float(current_balance),
                step=0.000001,
                format="%.6f",
                help="–í–≤–µ–¥–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ Perplexity dashboard"
            )
            
            col1_edit, col2_edit = st.columns(2)
            
            with col1_edit:
                if st.button("üíæ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å", type="primary"):
                    if update_latest_credit_balance(new_balance):
                        st.success(f"‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${new_balance:.6f} USD")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
            
            with col2_edit:
                if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏"):
                    from data.database import update_all_credit_balances
                    if update_all_credit_balances(new_balance):
                        st.success(f"‚úÖ –í—Å–µ –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${new_balance:.6f} USD")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–∏–µ—Ä–∞
        tier_progress = account_info.get('tier_progress', {})
        if tier_progress.get('next_tier'):
            remaining = tier_progress.get('remaining_to_next', 249.98)
            st.info(f"üìà –î–æ {tier_progress['next_tier']}: ${remaining:.2f}")
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Input Tokens
        with st.expander("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å Input Tokens"):
            st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –º–æ–¥–µ–ª—è–º:**")
            
            col1_tokens, col2_tokens, col3_tokens = st.columns(3)
            
            with col1_tokens:
                sonar_tokens = st.number_input(
                    "sonar:",
                    min_value=0,
                    max_value=100000,
                    value=int(screen_data.get('sonar_input_tokens', 0)),
                    step=1
                )
            
            with col2_tokens:
                reasoning_tokens = st.number_input(
                    "reasoning-pro:",
                    min_value=0,
                    max_value=100000,
                    value=int(screen_data.get('reasoning_pro_input_tokens', 0)),
                    step=1
                )
            
            with col3_tokens:
                sonar_pro_tokens = st.number_input(
                    "sonar-pro:",
                    min_value=0,
                    max_value=100000,
                    value=int(screen_data.get('sonar_pro_input_tokens', 0)),
                    step=1
                )
            
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Input Tokens", type="primary"):
                try:
                    from data.database import update_input_tokens_by_model
                    update_input_tokens_by_model('sonar', sonar_tokens)
                    update_input_tokens_by_model('reasoning-pro', reasoning_tokens)
                    update_input_tokens_by_model('sonar-pro', sonar_pro_tokens)
                    st.success("‚úÖ Input Tokens –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    with col2:
        chart_emoji = "üìä"
        st.markdown(f"""
        **{chart_emoji} API Requests:**
        - **sonar-pro, low:** {screen_data.get('sonar_pro_low', 0)}
        - **sonar, medium:** {screen_data.get('sonar_medium', 0)}
        - **sonar, low:** {screen_data.get('sonar_low', 0)}
        - **reasoning-pro, none:** {screen_data.get('reasoning_pro', 0)}
        """)
    
    with col3:
        
        st.markdown("**üì• Input Tokens:**")
        st.markdown(f"""
        - **sonar:** {screen_data.get('sonar_input_tokens', 0):,}
        - **reasoning-pro:** {screen_data.get('reasoning_pro_input_tokens', 0):,}
        - **sonar-pro:** {screen_data.get('sonar_pro_input_tokens', 0):,}
        - **–û–±—â–∏–µ:** {screen_data.get('total_input_tokens', 0):,}
        """)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if 'note' in account_stats:
        st.success(f"‚úÖ {account_stats['note']}")
        if 'last_updated' in account_stats:
            st.caption(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {account_stats['last_updated']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ–ª—è–º –∫–∞–∫ –≤ Perplexity
    st.markdown("---")
    st.subheader("üìä API Requests (–∫–∞–∫ –≤ Perplexity)")
    
    # –°–æ–∑–¥–∞–µ–º 4 –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("**sonar-pro, low**")
        st.metric(
            label="",
            value=screen_data.get('sonar_pro_low', 0),
            help="Sonar Pro —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º"
        )
    
    with col2:
        st.markdown("**sonar, medium**")
        st.metric(
            label="",
            value=screen_data.get('sonar_medium', 0),
            help="Sonar —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º"
        )
    
    with col3:
        st.markdown("**sonar, low**")
        st.metric(
            label="",
            value=screen_data.get('sonar_low', 0),
            help="Sonar —Å –Ω–∏–∑–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º"
        )
    
    with col4:
        st.markdown("**reasoning-pro, none**")
        st.metric(
            label="",
            value=screen_data.get('reasoning_pro', 0),
            help="Reasoning Pro –±–µ–∑ –∫–∞—á–µ—Å—Ç–≤–∞"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    total_requests = (
        screen_data.get('sonar_pro_low', 0) + 
        screen_data.get('sonar_medium', 0) + 
        screen_data.get('sonar_low', 0) + 
        screen_data.get('reasoning_pro', 0)
    )

    chart_emoji2 = "üìä"
    st.markdown(f"**{chart_emoji2} –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é Input Tokens –∫–∞–∫ –≤ Perplexity
    st.markdown("---")
    st.subheader("üì• Input Tokens (–∫–∞–∫ –≤ Perplexity)")
    
    # –°–æ–∑–¥–∞–µ–º 3 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è Input Tokens
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**sonar**")
        st.metric(
            label="",
            value=screen_data.get('sonar_input_tokens', 0),
            help="Input tokens –¥–ª—è sonar"
        )
    
    with col2:
        st.markdown("**reasoning-pro**")
        st.metric(
            label="",
            value=screen_data.get('reasoning_pro_input_tokens', 0),
            help="Input tokens –¥–ª—è reasoning-pro"
        )
    
    with col3:
        st.markdown("**sonar-pro**")
        st.metric(
            label="",
            value=screen_data.get('sonar_pro_input_tokens', 0),
            help="Input tokens –¥–ª—è sonar-pro"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    st.caption(f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –õ–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    st.markdown("---")
    st.subheader("üö¶ –õ–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞ –º–∏–Ω—É—Ç—É)")
    
    st.markdown("""
    **ü§ñ Sonar –º–æ–¥–µ–ª–∏:**
    - **sonar:** 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
    - **sonar-pro:** 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
    
    **üß† Reasoning –º–æ–¥–µ–ª–∏:**
    - **reasoning-pro:** 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
    - **sonar-reasoning:** 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
    
    **üî¨ Research –º–æ–¥–µ–ª–∏:**
    - **sonar-deep-research:** 50 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω
    """)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    model_settings = perplexity_service.get_model_settings("sonar")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    st.markdown("---")
    st.warning("""
    **‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ú–æ–¥–µ–ª—å `sonar` - —Å–∞–º–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. 
    –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥–∏—Ö –º–æ–¥–µ–ª–µ–π:
    - ‚ùå `sonar-deep-research` - —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ
    - ‚ùå `sonar-reasoning-pro` - –¥–æ—Ä–æ–≥–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
    - ‚ùå –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ - $12 –∑–∞ 1K –∑–∞–ø—Ä–æ—Å–æ–≤
    """)
    
    # ===== –ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´ =====
    st.markdown("---")
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    col1, col2, col3 = st.columns(3)

    with col1:
        robot_emoji = "ü§ñ"
        st.markdown(f"""
        **{robot_emoji} –ú–æ–¥–µ–ª—å Perplexity API:**
        - **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{model_settings['model_name']}`
        - **–¢–∏–ø:** {model_settings['model_type']}
        - **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** {model_settings['context_size']}
        """)

    with col2:
        pricing = model_settings['pricing']
        money_emoji = "üí∞"
        checkmark = "‚úÖ"
        st.markdown(f"""
        **{money_emoji} –°—Ç–æ–∏–º–æ—Å—Ç—å:**
        - **–í—Ö–æ–¥:** {pricing['input_tokens']}
        - **–í—ã—Ö–æ–¥:** {pricing['output_tokens']}
        - **–ü–æ–∏—Å–∫:** {pricing['search_queries']}
        - **–°—Ç–∞—Ç—É—Å:** {checkmark} {pricing['status']}
        """)

    with col3:
        performance = model_settings['performance']
        lightning_emoji = "‚ö°"
        check = "‚úÖ"
        cross = "‚ùå"
        web_search_icon = check if performance['web_search'] else cross
        sources_icon = check if performance['sources'] else cross
        citations_icon = check if performance['citations'] else cross
        st.markdown(f"""
        **{lightning_emoji} –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
        - **–ó–∞–ø—Ä–æ—Å—ã/–º–∏–Ω:** {performance['requests_per_minute']}
        - **–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:** {web_search_icon}
        - **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {sources_icon}
        - **–¶–∏—Ç–∞—Ç—ã:** {citations_icon}
        """)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    col1, col2 = st.columns(2)

    with col1:
        capabilities = model_settings['capabilities']
        check_emoji = "‚úÖ"
        capabilities_text = "\n".join([f"- {check_emoji} {cap}" for cap in capabilities])
        target_emoji = "üéØ"
        st.markdown(f"""
        **{target_emoji} –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ `{model_settings['model_name']}`:**
        {capabilities_text}
        """)

    with col2:
        chart_emoji3 = "üìä"
        st.markdown(f"""
        **{chart_emoji3} –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
        - **Max tokens:** {model_settings['max_tokens']} (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        - **Temperature:** {model_settings['temperature']} (—Ç–æ—á–Ω–æ—Å—Ç—å)
        - **Timeout:** {model_settings['timeout']} —Å–µ–∫—É–Ω–¥
        - **Retry attempts:** {model_settings['retry_attempts']}
        - **Search mode:** {model_settings['search_mode']}
        - **Context size:** {model_settings['web_search_options']['search_context_size']}
        """)

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if 'last_updated' in model_settings:
        clock_emoji = "üïí"
        st.info(f"{clock_emoji} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {model_settings['last_updated']}")

    if 'note' in model_settings:
        warning_emoji = "‚ö†Ô∏è"
        st.warning(f"{warning_emoji} {model_settings['note']}")
    
    # ===== –ù–ê–°–¢–†–û–ô–ö–ò –ö–û–ù–¢–ï–ö–°–¢–ê =====
    st.markdown("---")
    st.subheader("üìè –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫–æ–Ω–æ–º–∏–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        **üí∞ –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤:**
        - **–ë—ã–ª–æ:** 128K —Ç–æ–∫–µ–Ω–æ–≤ = $0.128
        - **–°—Ç–∞–Ω–µ—Ç:** 4K —Ç–æ–∫–µ–Ω–æ–≤ = $0.004
        - **–≠–∫–æ–Ω–æ–º–∏—è:** 97% = $0.124 –∑–∞ –∑–∞–ø—Ä–æ—Å
        """)
    
    with col2:
        st.markdown("""
        **‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
        - **–°–∫–æ—Ä–æ—Å—Ç—å:** –ë—ã—Å—Ç—Ä–µ–µ –≤ 3-5 —Ä–∞–∑
        - **–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:** –ú–µ–Ω—å—à–µ —Ç–∞–π–º–∞—É—Ç–æ–≤
        - **Rate limits:** –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        """)
    
    with col3:
        st.markdown("""
        **üéØ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:**
        - **–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** –§–æ–∫—É—Å –Ω–∞ –≤–∞–∂–Ω–æ–º
        - **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å:** –õ—É—á—à–µ —Ñ–æ—Ä–º–∞—Ç
        - **–¢–æ—á–Ω–æ—Å—Ç—å:** –ú–µ–Ω—å—à–µ —à—É–º–∞
        """)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    st.markdown("---")
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
        
        # –°–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        max_context_tokens = st.slider(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", 
            min_value=1000, 
            max_value=8000, 
            value=4000, 
            step=500,
            help="–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API"
        )
        
        max_description_tokens = st.slider(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è", 
            min_value=500, 
            max_value=3000, 
            value=1500, 
            step=100,
            help="–†–∞–∑–º–µ—Ä –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
        )
        
        max_tech_tokens = st.slider(
            "–ú–∞–∫—Å–∏–º—É–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π", 
            min_value=300, 
            max_value=2000, 
            value=1000, 
            step=100,
            help="–†–∞–∑–º–µ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
        )
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∫–∏
        strategy = st.selectbox(
            "–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            ["–£–º–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞", "–ü—Ä–æ—Å—Ç–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ", "–°–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞"],
            help="–ö–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )
    
    with col2:
        st.subheader("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–ª—è")
        
        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
        priority_fields = {
            "project_name": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            "budget": "–ë—é–¥–∂–µ—Ç", 
            "team_size": "–†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã",
            "region": "–†–µ–≥–∏–æ–Ω",
            "project_description": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            "tech_requirements": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
            "timeline": "–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏",
            "target_audience": "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è"
        }
        
        selected_fields = []
        for field_key, field_name in priority_fields.items():
            if st.checkbox(field_name, value=field_key in ["project_name", "budget", "team_size", "region", "project_description"]):
                selected_fields.append(field_key)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        if selected_fields:
            st.success(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –ø–æ–ª–µ–π: {len(selected_fields)}")
            for field in selected_fields[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                st.write(f"‚Ä¢ {priority_fields[field]}")
            if len(selected_fields) > 3:
                st.write(f"‚Ä¢ ... –∏ –µ—â–µ {len(selected_fields) - 3} –ø–æ–ª–µ–π")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", type="primary"):
            # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ë–î
            st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
    
    with col2:
        if st.button("üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"):
            # TODO: –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            st.info("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
    
    with col3:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º"):
            # TODO: –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ —É–º–æ–ª—á–∞–Ω–∏—è–º")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    st.markdown("---")
    clipboard_emoji = "üìã"
    context_tokens = f"{max_context_tokens:,}"
    desc_tokens = f"{max_description_tokens:,}"
    tech_tokens = f"{max_tech_tokens:,}"
    fields_count = len(selected_fields)
    st.info(f"""
    **{clipboard_emoji} –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:**
    - **–û–±—â–∏–π –ª–∏–º–∏—Ç:** {context_tokens} —Ç–æ–∫–µ–Ω–æ–≤
    - **–û–ø–∏—Å–∞–Ω–∏–µ:** {desc_tokens} —Ç–æ–∫–µ–Ω–æ–≤
    - **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏:** {tech_tokens} —Ç–æ–∫–µ–Ω–æ–≤
    - **–°—Ç—Ä–∞—Ç–µ–≥–∏—è:** {strategy}
    - **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π:** {fields_count}
    """)

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ API: {e}")
    
    # Fallback –∫ —Å—Ç–∞—Ç–∏—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("""
        **ü§ñ –ú–æ–¥–µ–ª—å Perplexity API:**
        - **–ù–∞–∑–≤–∞–Ω–∏–µ:** `sonar`
        - **–¢–∏–ø:** –ü–æ–∏—Å–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å
        - **–ö–æ–Ω—Ç–µ–∫—Å—Ç:** 128K —Ç–æ–∫–µ–Ω–æ–≤
        """)

    with col2:
        st.markdown("""
        **üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:**
        - **–í—Ö–æ–¥:** $1 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤
        - **–í—ã—Ö–æ–¥:** $1 –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤
        - **–ü–æ–∏—Å–∫:** $5 –∑–∞ 1K –∑–∞–ø—Ä–æ—Å–æ–≤
        - **–°—Ç–∞—Ç—É—Å:** ‚úÖ –°–ê–ú–ê–Ø –≠–ö–û–ù–û–ú–ò–ß–ù–ê–Ø
        """)

    with col3:
        st.markdown("""
        **‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**
        - **–ó–∞–ø—Ä–æ—Å—ã/–º–∏–Ω:** 50
        - **–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ:** ‚úÖ
        - **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** ‚úÖ
        - **–¶–∏—Ç–∞—Ç—ã:** ‚úÖ
        """)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    st.markdown("---")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("""
        **üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ `sonar`:**
        - ‚úÖ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (–∫–∞–∫ –Ω–∞ —Å–∞–π—Ç–µ Perplexity)
        - ‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ü–∏—Ç–∞—Ç—ã
        - ‚úÖ –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∞–∫—Ç—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏
        - ‚úÖ –ü—Ä–æ—Å—Ç—ã–µ Q&A
        - ‚úÖ –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """)

    with col2:
        st.markdown("""
        **üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
        - **Max tokens:** 2000 (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        - **Temperature:** 0.2 (—Ç–æ—á–Ω–æ—Å—Ç—å)
        - **Timeout:** 30 —Å–µ–∫—É–Ω–¥
        - **Retry attempts:** 3
        - **Search mode:** web
        """)

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    st.markdown("---")
    st.warning("""
    **‚ö†Ô∏è –í–∞–∂–Ω–æ:** –ú–æ–¥–µ–ª—å `sonar` - —Å–∞–º–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö. 
    –ò–∑–±–µ–≥–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥–∏—Ö –º–æ–¥–µ–ª–µ–π:
    - ‚ùå `sonar-deep-research` - —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ
    - ‚ùå `sonar-reasoning-pro` - –¥–æ—Ä–æ–≥–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
    - ‚ùå –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞ - $12 –∑–∞ 1K –∑–∞–ø—Ä–æ—Å–æ–≤
    """)

# ===== –û–°–ù–û–í–ù–ê–Ø –ê–ù–ê–õ–ò–¢–ò–ö–ê =====
st.markdown("---")
st.subheader("üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
researcher_stats = db.get_researcher_statistics()

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
create_researcher_metrics(researcher_stats)

# –ì—Ä–∞—Ñ–∏–∫–∏
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìà –ó–∞–ø—Ä–æ—Å—ã –ø–æ –¥–Ω—è–º")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    st.info("–ì—Ä–∞—Ñ–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –¥–Ω—è–º")

with col2:
    st.subheader("üí∞ –ó–∞—Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è–º
    # –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞
    st.info("–ì—Ä–∞—Ñ–∏–∫ –∑–∞—Ç—Ä–∞—Ç –ø–æ –¥–Ω—è–º")

# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
st.subheader("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
logs = db.get_researcher_logs(limit=1000)

if logs:
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    query_counts = {}
    for log in logs:
        query = log['query_text'][:50] + "..." if len(log['query_text']) > 50 else log['query_text']
        query_counts[query] = query_counts.get(query, 0) + 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    popular_queries = sorted(query_counts.items(), key=lambda x: x[1], reverse=True)
    
    if popular_queries:
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        queries_df = pd.DataFrame(popular_queries[:10], columns=['–ó–∞–ø—Ä–æ—Å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        create_popular_queries_chart(popular_queries[:10])
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
else:
    st.info("–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

# –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏")

# –§–∏–ª—å—Ç—Ä—ã
col1, col2, col3 = st.columns(3)

with col1:
    user_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
        ["–í—Å–µ"] + [str(log['user_id']) for log in logs[:50] if log.get('user_id')]
    )

with col2:
    status_filter = st.selectbox(
        "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
        ["–í—Å–µ", "success", "error"]
    )

with col3:
    limit_filter = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", 10, 100, 50)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
filtered_logs = logs

if user_filter != "–í—Å–µ":
    filtered_logs = [log for log in filtered_logs if str(log.get('user_id', '')) == user_filter]

if status_filter != "–í—Å–µ":
    filtered_logs = [log for log in filtered_logs if log.get('status') == status_filter]

filtered_logs = filtered_logs[:limit_filter]

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ª–æ–≥–∏
if filtered_logs:
    for log in filtered_logs:
        with st.expander(f"–ó–∞–ø—Ä–æ—Å {log['id']} - {log['created_at']}"):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**–ó–∞–ø—Ä–æ—Å:** {log['query_text']}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {log['status']}")
                st.write(f"**–ó–∞—Ç—Ä–∞—Ç—ã:** {log.get('cost', 0):.2f}‚ÇΩ")
            
            with col2:
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {log.get('user_id', 'N/A')}")
                st.write(f"**–°–µ—Å—Å–∏—è:** {log.get('session_id', 'N/A')}")
                st.write(f"**–í—Ä–µ–º—è:** {log['created_at']}")
            
            if log['perplexity_response']:
                st.write("**–û—Ç–≤–µ—Ç:**")
                st.text(log['perplexity_response'][:500] + "..." if len(log['perplexity_response']) > 500 else log['perplexity_response'])
            
            if log['error_message']:
                st.write("**–û—à–∏–±–∫–∞:**")
                st.error(log['error_message'])
else:
    st.info("–õ–æ–≥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

# –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
st.subheader("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

col1, col2 = st.columns(2)

with col1:
    if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"):
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        stats_df = pd.DataFrame([researcher_stats])
        csv = stats_df.to_csv(index=False)
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å CSV",
            data=csv,
            file_name=f"researcher_analytics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

with col2:
    if st.button("üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤"):
        if filtered_logs:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–æ–≥–æ–≤
            logs_df = pd.DataFrame(filtered_logs)
            csv = logs_df.to_csv(index=False)
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏ CSV",
                data=csv,
                file_name=f"researcher_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
        else:
            st.warning("–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")