#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π Researcher Agent
"""

import streamlit as st
import sys
import os
from datetime import datetime
import json

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from web_admin.utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        "/var/GrantService/web-admin/pages/üîê_–í—Ö–æ–¥.py"
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/var/GrantService')

from data.database.models import GrantServiceDatabase
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = GrantServiceDatabase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('researcher_research')

st.set_page_config(
    page_title="üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
try:
    db_instance = db
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ë–î: {e}", exc_info=True)
    st.stop()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.title("üéØ –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
status_filter = st.sidebar.selectbox(
    "–°—Ç–∞—Ç—É—Å",
    ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "completed", "pending", "processing", "error"],
    key="status_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É
period_filter = st.sidebar.selectbox(
    "–ü–µ—Ä–∏–æ–¥",
    ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
    key="period_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
provider_filter = st.sidebar.selectbox(
    "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
    ["–í—Å–µ", "perplexity", "gigachat", "ollama"],
    key="provider_filter"
)

# –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
user_filter = st.sidebar.text_input(
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (username –∏–ª–∏ ID)",
    placeholder="–í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ telegram_id",
    key="user_filter"
)

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")

try:
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db_instance.get_research_statistics()
    
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="–í—Å–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π",
                value=stats.get('total_research', 0)
            )
        
        with col2:
            completed = stats.get('status_distribution', {}).get('completed', 0)
            st.metric(
                label="–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö",
                value=completed
            )
        
        with col3:
            pending = stats.get('status_distribution', {}).get('pending', 0)
            st.metric(
                label="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                value=pending
            )
        
        with col4:
            error = stats.get('status_distribution', {}).get('error', 0)
            st.metric(
                label="–û—à–∏–±–æ–∫",
                value=error
            )
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        st.subheader("üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º")
        provider_dist = stats.get('provider_distribution', {})
        
        if provider_dist:
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–ü–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:**")
                for provider, count in provider_dist.items():
                    st.write(f"‚Ä¢ {provider}: {count}")
            
            with col2:
                st.write("**–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**")
                top_users = stats.get('top_users', {})
                for user, count in list(top_users.items())[:5]:
                    st.write(f"‚Ä¢ @{user}: {count}")
    
except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –°–ø–∏—Å–æ–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
st.subheader("üìã –°–ø–∏—Å–æ–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π")

try:
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    all_research = db_instance.get_all_research(limit=100)
    
    if not all_research:
        st.info("üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filtered_research = all_research
        
        if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
            filtered_research = [r for r in filtered_research if r['status'] == status_filter]
        
        if provider_filter != "–í—Å–µ":
            filtered_research = [r for r in filtered_research if r['llm_provider'] == provider_filter]
        
        if user_filter:
            user_filter_lower = user_filter.lower()
            filtered_research = [r for r in filtered_research 
                               if (r.get('username', '').lower().find(user_filter_lower) != -1 or 
                                   str(r.get('user_id', '')).find(user_filter) != -1)]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(filtered_research)}**")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        for research in filtered_research:
            with st.expander(f"üî¨ {research['research_id']} - {research.get('username', 'Unknown')}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write(f"**ID –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {research['research_id']}")
                    st.write(f"**ID –∞–Ω–∫–µ—Ç—ã:** {research['anketa_id']}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{research.get('username', 'N/A')} ({research.get('first_name', '')} {research.get('last_name', '')})")
                    st.write(f"**Telegram ID:** {research['user_id']}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {research['status']}")
                
                with col2:
                    st.write(f"**LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {research['llm_provider']}")
                    st.write(f"**–ú–æ–¥–µ–ª—å:** {research.get('model', 'N/A')}")
                    st.write(f"**–¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {research.get('research_type', 'comprehensive')}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {research['created_at']}")
                    if research.get('completed_at'):
                        st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {research['completed_at']}")
                
                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if research.get('metadata'):
                    metadata = research['metadata']
                    st.write("**–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:**")
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.write(f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {metadata.get('tokens_used', 0)}")
                    with col2:
                        st.write(f"‚Ä¢ –í—Ä–µ–º—è: {metadata.get('processing_time_seconds', 0)} —Å–µ–∫")
                    with col3:
                        st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: {metadata.get('cost', 0.0)} ‚ÇΩ")
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
                if research.get('research_results'):
                    st.write("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**")
                    st.text_area(
                        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                        value=research['research_results'],
                        height=200,
                        key=f"results_{research['id']}"
                    )
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if st.button("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç—ã", key=f"view_anketa_{research['id']}"):
                        st.session_state.selected_anketa_id = research['anketa_id']
                        st.rerun()
                
                with col2:
                    if st.button("üìä –î–µ—Ç–∞–ª–∏", key=f"details_{research['id']}"):
                        st.session_state.selected_research_id = research['research_id']
                        st.rerun()
                
                with col3:
                    if st.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID", key=f"copy_{research['id']}"):
                        st.code(research['research_id'])
                        st.success("ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
                
                with col4:
                    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{research['id']}"):
                        st.session_state.selected_research_export = research['research_id']
                        st.rerun()

except Exception as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {e}")
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {e}")

# –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if 'selected_research_id' in st.session_state:
    st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    try:
        research = db_instance.get_research_by_id(st.session_state.selected_research_id)
        
        if research:
            st.json(research)
        else:
            st.error("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {e}")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤—è–∑–∞–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã
if 'selected_anketa_id' in st.session_state:
    st.subheader("üìÑ –°–≤—è–∑–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞")
    
    try:
        anketa = db_instance.get_session_by_anketa_id(st.session_state.selected_anketa_id)
        
        if anketa:
            st.write(f"**ID –∞–Ω–∫–µ—Ç—ã:** {anketa['anketa_id']}")
            st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{anketa.get('username', 'N/A')} ({anketa.get('first_name', '')} {anketa.get('last_name', '')})")
            st.write(f"**–°—Ç–∞—Ç—É—Å:** {anketa['status']}")
            st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {anketa['started_at']}")
            
            if anketa.get('interview_data'):
                st.write("**–î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é:**")
                st.json(anketa['interview_data'])
        else:
            st.error("–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã: {e}")

# –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
if 'selected_research_export' in st.session_state:
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    try:
        research = db_instance.get_research_by_id(st.session_state.selected_research_export)
        
        if research:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∞–Ω–∫–µ—Ç—É
            anketa = db_instance.get_session_by_anketa_id(research['anketa_id'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "research_id": research['research_id'],
                "anketa_id": research['anketa_id'],
                "user": {
                    "username": research.get('username'),
                    "first_name": research.get('first_name'),
                    "last_name": research.get('last_name'),
                    "telegram_id": research['user_id']
                },
                "research_info": {
                    "status": research['status'],
                    "llm_provider": research['llm_provider'],
                    "model": research.get('model'),
                    "research_type": research.get('research_type'),
                    "created_at": research['created_at'],
                    "completed_at": research.get('completed_at')
                },
                "metadata": research.get('metadata', {}),
                "research_results": research.get('research_results', ''),
                "logs": research.get('logs', ''),
                "anketa_data": anketa.get('interview_data', {}) if anketa else {}
            }
            
            # –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_format = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                ["JSON", "TXT", "Markdown"],
                key="export_format"
            )
            
            if export_format == "JSON":
                # JSON —ç–∫—Å–ø–æ—Ä—Ç
                json_data = json.dumps(export_data, ensure_ascii=False, indent=2)
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å JSON",
                    data=json_data,
                    file_name=f"research_{research['research_id']}.json",
                    mime="application/json"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                st.subheader("üìÑ –ü—Ä–µ–≤—å—é JSON:")
                st.json(export_data)
            
            elif export_format == "TXT":
                # TXT —ç–∫—Å–ø–æ—Ä—Ç
                txt_content = f"""–ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: {research['research_id']}
–ê–Ω–∫–µ—Ç–∞: {research['anketa_id']}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{research.get('username', 'N/A')} ({research.get('first_name', '')} {research.get('last_name', '')})
Telegram ID: {research['user_id']}

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ò:
–°—Ç–∞—Ç—É—Å: {research['status']}
LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {research['llm_provider']}
–ú–æ–¥–µ–ª—å: {research.get('model', 'N/A')}
–¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {research.get('research_type', 'comprehensive')}
–°–æ–∑–¥–∞–Ω–æ: {research['created_at']}
–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {research.get('completed_at', 'N/A')}

–ú–ï–¢–ê–î–ê–ù–ù–´–ï:
{json.dumps(research.get('metadata', {}), ensure_ascii=False, indent=2)}

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{research.get('research_results', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

–õ–û–ì–ò –ü–†–û–¶–ï–°–°–ê:
{research.get('logs', '–ù–µ—Ç –ª–æ–≥–æ–≤')}

–î–ê–ù–ù–´–ï –ê–ù–ö–ï–¢–´:
{json.dumps(anketa.get('interview_data', {}), ensure_ascii=False, indent=2) if anketa else '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
"""
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å TXT",
                    data=txt_content,
                    file_name=f"research_{research['research_id']}.txt",
                    mime="text/plain"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                st.subheader("üìÑ –ü—Ä–µ–≤—å—é TXT:")
                st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", value=txt_content, height=400, key="txt_preview")
            
            elif export_format == "Markdown":
                # Markdown —ç–∫—Å–ø–æ—Ä—Ç
                md_content = f"""# –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: {research['research_id']}

## –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- **–ê–Ω–∫–µ—Ç–∞:** {research['anketa_id']}
- **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{research.get('username', 'N/A')} ({research.get('first_name', '')} {research.get('last_name', '')})
- **Telegram ID:** {research['user_id']}

## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏
- **–°—Ç–∞—Ç—É—Å:** {research['status']}
- **LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {research['llm_provider']}
- **–ú–æ–¥–µ–ª—å:** {research.get('model', 'N/A')}
- **–¢–∏–ø –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {research.get('research_type', 'comprehensive')}
- **–°–æ–∑–¥–∞–Ω–æ:** {research['created_at']}
- **–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {research.get('completed_at', 'N/A')}

## –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
```json
{json.dumps(research.get('metadata', {}), ensure_ascii=False, indent=2)}
```

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
{research.get('research_results', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

## –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
```
{research.get('logs', '–ù–µ—Ç –ª–æ–≥–æ–≤')}
```

## –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
```json
{json.dumps(anketa.get('interview_data', {}), ensure_ascii=False, indent=2) if anketa else '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
```
"""
                
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Markdown",
                    data=md_content,
                    file_name=f"research_{research['research_id']}.md",
                    mime="text/markdown"
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                st.subheader("üìÑ –ü—Ä–µ–≤—å—é Markdown:")
                st.markdown(md_content)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
            if st.button("‚ùå –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Å–ø–æ—Ä—Ç"):
                del st.session_state.selected_research_export
                st.rerun()
                
        else:
            st.error("–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.sidebar.info("""
**–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è Researcher Agent**

–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ Researcher Agent –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ ID:**
- –ê–Ω–∫–µ—Ç–∞: `#AN-YYYYMMDD-username-001`
- –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ: `#RS-YYYYMMDD-username-001-AN-anketa_id`

**–°–≤—è–∑–∏:**
- –ö–∞–∂–¥–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∫–µ—Ç–µ
- –ê–Ω–∫–µ—Ç–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–∏—Å–∞—Ç–µ–ª—é –∫–∞–∫ –µ–¥–∏–Ω—ã–π –ø–∞–∫–µ—Ç

**–≠–∫—Å–ø–æ—Ä—Ç:**
- JSON: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
- TXT: —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
- Markdown: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
""")
