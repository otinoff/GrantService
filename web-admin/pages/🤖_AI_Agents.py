import streamlit as st
import sys
import os

# Simple imports without path manipulation
# The environment will be set up by the launcher

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ launcher.py / Run via launcher.py")
    st.stop()

current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ config –∏ data
sys.path.insert(0, parent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        os.path.join(current_dir, "üîê_–í—Ö–æ–¥.py")
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(grandparent_dir, 'telegram-bot'))
sys.path.append(os.path.join(grandparent_dir, 'data'))
sys.path.append(grandparent_dir)

# –ò–º–ø–æ—Ä—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
try:
    from services.llm_router import LLMRouter, LLMProvider
    from services.gigachat_service import GigaChatService
    from services.local_llm_service import LocalLLMService
    # –ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –æ–±—â–µ–π –ø–∞–ø–∫–∏
    sys.path.append(os.path.join(grandparent_dir, 'agents'))
    from agents.researcher_agent import ResearcherAgent
    from agents.writer_agent import WriterAgent
    from agents.auditor_agent import AuditorAgent
    from agents.interviewer_agent import InterviewerAgent
    from agents.grant_crew import GrantCrew
    from database.prompts import (
        get_prompts_by_agent, get_prompt_by_name, format_prompt,
        create_prompt, update_prompt, delete_prompt, get_all_categories
    )
    # –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–Ω–∫–µ—Ç–∞–º–∏
    from data.database.models import GrantServiceDatabase
    AGENTS_AVAILABLE = True
    PROMPTS_AVAILABLE = True
    DATABASE_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    AGENTS_AVAILABLE = False
    PROMPTS_AVAILABLE = False
    DATABASE_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="ü§ñ AI –ê–≥–µ–Ω—Ç—ã GrantService",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'agent_results' not in st.session_state:
    st.session_state.agent_results = {}
if 'current_agent' not in st.session_state:
    st.session_state.current_agent = "researcher"

def show_llm_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    try:
        router = LLMRouter()
        status = router.get_provider_status()
        
        st.subheader("ü§ñ –°—Ç–∞—Ç—É—Å LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä", status['current_provider'].upper())
        
        with col2:
            available_count = len(status['available_providers'])
            st.metric("–î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", available_count)
        
        with col3:
            if status['providers'].get('local', {}).get('available', False):
                models = status['providers']['local'].get('models', [])
                st.metric("–õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏", len(models))
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        st.subheader("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
        
        for provider_name, provider_info in status['providers'].items():
            col1, col2, col3 = st.columns([1, 2, 1])
            
            with col1:
                if provider_info['available']:
                    st.success(f"‚úÖ {provider_name.upper()}")
                else:
                    st.error(f"‚ùå {provider_name.upper()}")
            
            with col2:
                if provider_name == 'local' and 'models' in provider_info:
                    st.write(f"–ú–æ–¥–µ–ª–∏: {', '.join(provider_info['models'])}")
                else:
                    st.write("–°—Ç–∞—Ç—É—Å: " + ("–î–æ—Å—Ç—É–ø–µ–Ω" if provider_info['available'] else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
            
            with col3:
                if st.button(f"üîÑ –¢–µ—Å—Ç {provider_name}", key=f"test_{provider_name}"):
                    test_provider(provider_name)
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

def show_prompt_management(agent_type: str):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
    if not PROMPTS_AVAILABLE:
        st.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    st.subheader("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–∞
    prompts = get_prompts_by_agent(agent_type)
    
    if not prompts:
        st.info(f"üìù –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_type}")
        return
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    prompt_names = [p['name'] for p in prompts]
    selected_prompt_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        prompt_names,
        key=f"prompt_select_{agent_type}"
    )
    
    selected_prompt = next((p for p in prompts if p['name'] == selected_prompt_name), None)
    
    if selected_prompt:
        with st.expander(f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞: {selected_prompt['name']}"):
            with st.form(f"prompt_form_{agent_type}"):
                col1, col2 = st.columns(2)
                
                with col1:
                    name = st.text_input(
                        "–ù–∞–∑–≤–∞–Ω–∏–µ",
                        value=selected_prompt['name'],
                        key=f"name_{agent_type}"
                    )
                    
                    priority = st.number_input(
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                        min_value=0,
                        max_value=100,
                        value=selected_prompt['priority'],
                        key=f"priority_{agent_type}"
                    )
                
                with col2:
                    description = st.text_area(
                        "–û–ø–∏—Å–∞–Ω–∏–µ",
                        value=selected_prompt['description'] or '',
                        height=100,
                        key=f"desc_{agent_type}"
                    )
                    
                    variables_text = st.text_area(
                        "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
                        value='\n'.join(selected_prompt['variables']),
                        height=100,
                        key=f"vars_{agent_type}"
                    )
                
                # –®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞
                prompt_template = st.text_area(
                    "–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞",
                    value=selected_prompt['prompt_template'],
                    height=200,
                    key=f"template_{agent_type}"
                )
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                if prompt_template and variables_text:
                    variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
                    test_data = {var: f"[{var}]" for var in variables_list}
                    
                    try:
                        preview = format_prompt(prompt_template, test_data)
                        st.write("**–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:**")
                        st.code(preview, language="text")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                        variables_list = [v.strip() for v in variables_text.split('\n') if v.strip()]
                        
                        success = update_prompt(
                            prompt_id=selected_prompt['id'],
                            name=name,
                            description=description,
                            prompt_template=prompt_template,
                            variables=variables_list,
                            priority=priority
                        )
                        
                        if success:
                            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞!")
                
                with col2:
                    if st.form_submit_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", type="secondary"):
                        if st.checkbox("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"):
                            success = delete_prompt(selected_prompt['id'])
                            if success:
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                                st.rerun()
                            else:
                                st.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")
                
                with col3:
                    if st.form_submit_button("üß™ –¢–µ—Å—Ç"):
                        st.info("–ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")

def test_provider(provider_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–π UnifiedLLMClient
        if provider_name == "gigachat":
            test_gigachat_unified()
        else:
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            router = LLMRouter()
            
            if provider_name == "local":
                provider = LLMProvider.LOCAL
            elif provider_name == "gigachat":
                provider = LLMProvider.GIGACHAT
            else:
                provider = LLMProvider.AUTO
            
            result = router.analyze_grant_application(
                "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
                "–ö—Ä–∏—Ç–µ—Ä–∏–∏: –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å",
                provider
            )
            
            if result.get('error'):
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {provider_name}: {result['error']}")
            else:
                st.success(f"‚úÖ {provider_name.upper()} —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', 'Unknown')}")
                
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {provider_name}: {e}")

def test_gigachat_unified():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç GigaChat —á–µ—Ä–µ–∑ UnifiedLLMClient"""
    import asyncio
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ UnifiedLLMClient
        sys.path.append('/var/GrantService/shared')
        from llm.unified_llm_client import UnifiedLLMClient
        
        async def run_test():
            async with UnifiedLLMClient() as client:
                response = await client.generate_async(
                    "–ö—Ä–∞—Ç–∫–æ –æ—Ç–≤–µ—Ç—å: —á—Ç–æ —Ç–∞–∫–æ–µ –≥—Ä–∞–Ω—Ç?",
                    provider="gigachat",
                    max_tokens=50
                )
                return response
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        with st.spinner("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat..."):
            response = asyncio.run(run_test())
            
        if response and len(response) > 10:
            st.success(f"‚úÖ GIGACHAT —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ UnifiedLLMClient!")
            with st.expander("üìù –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞"):
                st.write(response[:200] + "..." if len(response) > 200 else response)
        else:
            st.error("‚ùå GigaChat –¥–∞–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GigaChat: {e}")
        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        try:
            router = LLMRouter()
            result = router.analyze_grant_application(
                "–¢–µ—Å—Ç",
                "–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                LLMProvider.GIGACHAT
            )
            if not result.get('error'):
                st.warning("‚ö†Ô∏è GigaChat —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π —Ä–æ—É—Ç–µ—Ä")
        except:
            pass

def show_researcher_agent():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≥–µ–Ω—Ç–∞-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è"""
    st.header("üîç Researcher Agent")
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
            ["auto", "gigachat", "local"],
            key="researcher_provider"
        )
        
        if llm_provider == "local":
            model = st.selectbox("–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", ["qwen2.5:3b", "qwen2.5:7b"], key="researcher_local_model")
        elif llm_provider == "gigachat":
            model = st.selectbox("GigaChat –º–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro"], key="researcher_giga_model")
        else:
            model = "auto"
        
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.3, key="researcher_temp")
        max_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 100, 2000, 1000, key="researcher_tokens")
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("–ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è", "12")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "2.3 —Å–µ–∫")
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "95%")
    
    # –†—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç
    st.subheader("üéØ –†—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç")
    
    if DATABASE_AVAILABLE:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db = GrantServiceDatabase()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç
            all_sessions = db.get_all_sessions(limit=1000)
            anketas = [s for s in all_sessions if s.get('anketa_id')]
            
            if anketas:
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                anketa_options = []
                for anketa in anketas:
                    user_display = anketa.get('username', f"ID:{anketa['telegram_id']}")
                    date_str = anketa.get('started_at', 'Unknown')[:10] if anketa.get('started_at') else 'Unknown'
                    anketa_options.append(f"{anketa['anketa_id']} - {user_display} ({date_str})")
                
                selected_anketa_display = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:",
                    anketa_options,
                    key="selected_anketa_researcher"
                )
                
                if selected_anketa_display:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º anketa_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    selected_anketa_id = selected_anketa_display.split(' - ')[0]
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∫–µ—Ç–µ
                    selected_anketa = next((a for a in anketas if a['anketa_id'] == selected_anketa_id), None)
                    
                    if selected_anketa:
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            user_display = selected_anketa.get('username', f"ID:{selected_anketa['telegram_id']}")
                            st.info(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}")
                        with col2:
                            date_display = selected_anketa.get('started_at', 'Unknown')[:10] if selected_anketa.get('started_at') else 'Unknown'
                            st.info(f"**–î–∞—Ç–∞:** {date_display}")
                        with col3:
                            st.info(f"**–°—Ç–∞—Ç—É—Å:** {selected_anketa.get('status', 'Unknown')}")
                        
                        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
                        if st.button("üöÄ –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É", type="primary", key="research_anketa_btn"):
                            if AGENTS_AVAILABLE:
                                with st.spinner("üîç –ò—Å—Å–ª–µ–¥—É—é –∞–Ω–∫–µ—Ç—É..."):
                                    try:
                                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                                        agent = ResearcherAgent(db=db, llm_provider=llm_provider)
                                        
                                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
                                        result = agent.research_anketa(selected_anketa_id)
                                        
                                        if result.get('status') == 'success':
                                            st.success(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ID: {result.get('research_id')}")
                                            
                                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                            with st.expander("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", expanded=True):
                                                st.text_area(
                                                    "–†–µ–∑—É–ª—å—Ç–∞—Ç",
                                                    result.get('result', ''),
                                                    height=300,
                                                    disabled=True
                                                )
                                        else:
                                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                                            
                                    except Exception as e:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                st.info("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    st.markdown("---")
    
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if 'writer_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Writer Agent")
        default_input = st.session_state.writer_input
    elif 'auditor_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Auditor Agent")
        default_input = st.session_state.auditor_input
    else:
        default_input = ""
    
    research_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
        value=default_input,
        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–ª–∏, –±—é–¥–∂–µ—Ç...",
        height=200,
        key="researcher_input"
    )
    
    # –ó–∞–ø—É—Å–∫ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", type="primary", use_container_width=True):
            if research_data and AGENTS_AVAILABLE:
                with st.spinner("üîç –ü—Ä–æ–≤–æ–∂—É –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                        agent = ResearcherAgent(db=None, llm_provider=llm_provider)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                        result = agent.research_grant({
                            'description': research_data,
                            'llm_provider': llm_provider,
                            'model': model,
                            'temperature': temperature,
                            'max_tokens': max_tokens
                        })
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.session_state.agent_results['researcher'] = result
                        st.session_state.researcher_timestamp = datetime.now()
                        
                        st.success("‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            if 'researcher' in st.session_state.agent_results:
                del st.session_state.agent_results['researcher']
            if 'researcher_timestamp' in st.session_state:
                del st.session_state.researcher_timestamp
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'researcher' in st.session_state.agent_results:
        st.markdown("---")
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        result = st.session_state.agent_results['researcher']
        timestamp = st.session_state.researcher_timestamp
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", result.get('provider', 'Unknown'))
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time', 0):.2f} —Å–µ–∫")
        with col3:
            st.metric("–î–∞—Ç–∞", timestamp.strftime("%H:%M:%S"))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        st.text_area(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è",
            result.get('result', ''),
            height=300,
            disabled=True
        )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.subheader("üì§ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì§ ‚Üí Writer", use_container_width=True):
                st.session_state.writer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Writer Agent!")
        
        with col2:
            if st.button("üì§ ‚Üí Auditor", use_container_width=True):
                st.session_state.auditor_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Auditor Agent!")
        
        with col3:
            if st.button("üì§ ‚Üí Interviewer", use_container_width=True):
                st.session_state.interviewer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Interviewer Agent!")
        
        with col4:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    show_prompt_management("researcher")

def show_writer_agent():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≥–µ–Ω—Ç–∞-–ø–∏—Å–∞—Ç–µ–ª—è"""
    st.header("‚úçÔ∏è Writer Agent")
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
            ["auto", "gigachat", "local"],
            key="writer_provider"
        )
        
        if llm_provider == "local":
            model = st.selectbox("–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", ["qwen2.5:3b", "qwen2.5:7b"], key="writer_local_model")
        elif llm_provider == "gigachat":
            model = st.selectbox("GigaChat –º–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro"], key="writer_giga_model")
        else:
            model = "auto"
        
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.4, key="writer_temp")
        max_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 100, 3000, 1500, key="writer_tokens")
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("–ó–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω–æ", "8")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "3.1 —Å–µ–∫")
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "92%")
    
    # –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
    st.subheader("üìã –í—ã–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è")
    
    if DATABASE_AVAILABLE:
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_instance = GrantServiceDatabase()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏
            all_sessions = db_instance.get_all_sessions(limit=1000)
            anketas_with_research = []
            
            for session in all_sessions:
                if session.get('anketa_id'):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –∞–Ω–∫–µ—Ç—ã
                    research_list = db_instance.get_research_by_anketa_id(session['anketa_id'])
                    if research_list:
                        anketas_with_research.append({
                            'session': session,
                            'research': research_list[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
                        })
            
            if anketas_with_research:
                # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
                anketa_options = []
                for item in anketas_with_research:
                    session = item['session']
                    research = item['research']
                    user_display = session.get('username', f"ID:{session['telegram_id']}")
                    date_str = session.get('started_at', 'Unknown')[:10] if session.get('started_at') else 'Unknown'
                    status = research.get('status', 'unknown')
                    anketa_options.append(f"{session['anketa_id']} - {user_display} ({date_str}) [{status}]")
                
                selected_anketa_display = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º:",
                    ["--- –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É ---"] + anketa_options,
                    key="selected_anketa_writer"
                )
                
                if selected_anketa_display and selected_anketa_display != "--- –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É ---":
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º anketa_id –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    selected_anketa_id = selected_anketa_display.split(' - ')[0]
                    
                    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    selected_data = next((item for item in anketas_with_research 
                                        if item['session']['anketa_id'] == selected_anketa_id), None)
                    
                    if selected_data:
                        session = selected_data['session']
                        research = selected_data['research']
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            user_display = session.get('username', f"ID:{session['telegram_id']}")
                            st.info(f"**üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display}")
                        with col2:
                            st.info(f"**üìã –ê–Ω–∫–µ—Ç–∞:** {session['anketa_id']}")
                        with col3:
                            st.info(f"**üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ:** {research['research_id']}")
                        
                        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞
                        if st.button("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≥—Ä–∞–Ω—Ç", type="primary", key="write_grant_btn"):
                            if AGENTS_AVAILABLE:
                                with st.spinner("‚úçÔ∏è –ü–∏—à—É –≥—Ä–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."):
                                    try:
                                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∏—Å–∞—Ç–µ–ª—è
                                        combined_data = f"""üìã –ê–ù–ö–ï–¢–ê: {session['anketa_id']}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{session.get('username', 'N/A')} ({session.get('first_name', '')} {session.get('last_name', '')})
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {session.get('started_at', 'Unknown')[:10]}

üî¨ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï: {research['research_id']}
ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {research['llm_provider']}
üìä –°—Ç–∞—Ç—É—Å: {research['status']}
‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {research.get('completed_at', 'N/A')}

üìù –î–ê–ù–ù–´–ï –ê–ù–ö–ï–¢–´:
{json.dumps(session.get('interview_data', {}), ensure_ascii=False, indent=2)}

üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:
{research.get('research_results', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}

üìã –õ–û–ì–ò –ü–†–û–¶–ï–°–°–ê:
{research.get('logs', '–ù–µ—Ç –ª–æ–≥–æ–≤')}
"""
                                        
                                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                                        db = GrantServiceDatabase()
                                        agent = WriterAgent(db=db, llm_provider=llm_provider)
                                        
                                        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞
                                        result = agent.write_application({
                                            'research_data': combined_data,
                                            'llm_provider': llm_provider,
                                            'model': model,
                                            'temperature': temperature,
                                            'max_tokens': max_tokens,
                                            'anketa_id': session['anketa_id'],
                                            'research_id': research['research_id']
                                        })
                                        
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                                        st.session_state.agent_results['writer'] = result
                                        st.session_state.writer_timestamp = datetime.now()
                                        st.session_state.writer_anketa_id = session['anketa_id']
                                        st.session_state.writer_research_id = research['research_id']
                                        
                                        st.success("‚úÖ –ì—Ä–∞–Ω—Ç –Ω–∞–ø–∏—Å–∞–Ω!")
                                        st.rerun()
                                        
                                    except Exception as e:
                                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                            else:
                                st.warning("‚ö†Ô∏è –ê–≥–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                        
                        # –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö
                        with st.expander("üëÅÔ∏è –ü—Ä–µ–≤—å—é –¥–∞–Ω–Ω—ã—Ö", expanded=False):
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                st.write("**üìã –î–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã:**")
                                if session.get('interview_data'):
                                    st.json(session['interview_data'])
                                else:
                                    st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                            
                            with col2:
                                st.write("**üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**")
                                st.text_area(
                                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                                    research.get('research_results', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'),
                                    height=200,
                                    disabled=True
                                )
            else:
                st.info("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º–∏")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
    else:
        st.warning("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    st.markdown("---")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞
    if 'writer' in st.session_state.agent_results:
        st.subheader("üìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä–∞–Ω—Ç")
        
        result = st.session_state.agent_results['writer']
        timestamp = st.session_state.writer_timestamp
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –≥—Ä–∞–Ω—Ç–µ
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", result.get('provider', result.get('provider_used', 'Unknown')))
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time', 0):.2f} —Å–µ–∫")
        with col3:
            st.metric("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è", timestamp.strftime("%H:%M:%S"))
        with col4:
            if 'application_number' in result:
                st.metric("–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", result['application_number'])
                st.success("‚úÖ –ì—Ä–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î!")
            else:
                st.metric("–°—Ç–∞—Ç—É—Å", "–°–æ–∑–¥–∞–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä–∞–Ω—Ç
        application = result.get('application', {})
        if application:
            st.subheader("üìã –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –≥—Ä–∞–Ω—Ç–∞
            for section_key, section_content in application.items():
                section_name = {
                    'title': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
                    'summary': 'üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
                    'problem': '‚ùó –ü—Ä–æ–±–ª–µ–º–∞',
                    'solution': 'üí° –†–µ—à–µ–Ω–∏–µ',
                    'implementation': 'üõ†Ô∏è –ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
                    'budget': 'üí∞ –ë—é–¥–∂–µ—Ç',
                    'timeline': '‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏',
                    'team': 'üë• –ö–æ–º–∞–Ω–¥–∞',
                    'impact': 'üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç',
                    'sustainability': '‚ôªÔ∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å'
                }.get(section_key, section_key.title())
                
                with st.expander(section_name, expanded=False):
                    st.write(section_content)
        else:
            st.text_area(
                "–°–æ–∑–¥–∞–Ω–Ω—ã–π –≥—Ä–∞–Ω—Ç",
                result.get('result', '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'),
                height=400,
                disabled=True
            )
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º –≥—Ä–∞–Ω—Ç–æ–º
        st.subheader("üì§ –î–µ–π—Å—Ç–≤–∏—è —Å –≥—Ä–∞–Ω—Ç–æ–º")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì§ ‚Üí Auditor", use_container_width=True):
                st.session_state.auditor_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Auditor Agent!")
        
        with col2:
            if st.button("üì§ ‚Üí Researcher", use_container_width=True):
                st.session_state.researcher_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Researcher Agent!")
        
        with col3:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                st.success("‚úÖ –ì—Ä–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
        with col4:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
                if 'writer' in st.session_state.agent_results:
                    del st.session_state.agent_results['writer']
                if 'writer_timestamp' in st.session_state:
                    del st.session_state.writer_timestamp
                if 'writer_anketa_id' in st.session_state:
                    del st.session_state.writer_anketa_id
                if 'writer_research_id' in st.session_state:
                    del st.session_state.writer_research_id
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
                st.rerun()
    
    # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (—Å–∫—Ä—ã—Ç–∞, –Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    if st.checkbox("üîß –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)", key="manual_mode_writer"):
        st.subheader("üìù –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if 'researcher_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Researcher Agent")
        default_input = st.session_state.researcher_input
    elif 'auditor_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Auditor Agent")
        default_input = st.session_state.auditor_input
    else:
        default_input = ""
    
    writing_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∑–∞—è–≤–∫–∏",
        value=default_input,
        placeholder="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞, –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞...",
        height=200,
        key="writer_input"
    )
    
    # –ó–∞–ø—É—Å–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    col1, col2 = st.columns(2)
    
    with col1:
            if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º)", type="primary", use_container_width=True):
            if writing_data and AGENTS_AVAILABLE:
                with st.spinner("‚úçÔ∏è –°–æ–∑–¥–∞—é –∑–∞—è–≤–∫—É..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
                        db = GrantServiceDatabase()
                        agent = WriterAgent(db=db, llm_provider=llm_provider)
                        
                            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                            result = agent.write_application({
                                'research_data': writing_data,
                                'llm_provider': llm_provider,
                                'model': model,
                                'temperature': temperature,
                                'max_tokens': max_tokens
                            })
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            st.session_state.agent_results['writer'] = result
                            st.session_state.writer_timestamp = datetime.now()
                            
                            st.success("‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
                            
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
                else:
                    st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è")
        
        with col2:
            if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
                if 'writer' in st.session_state.agent_results:
                    del st.session_state.agent_results['writer']
                if 'writer_timestamp' in st.session_state:
                    del st.session_state.writer_timestamp
                st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
                st.rerun()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    show_prompt_management("writer")

def show_auditor_agent():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≥–µ–Ω—Ç–∞-–∞—É–¥–∏—Ç–æ—Ä–∞"""
    st.header("üîç Auditor Agent")
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
            ["auto", "gigachat", "local"],
            key="auditor_provider"
        )
        
        if llm_provider == "local":
            model = st.selectbox("–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", ["qwen2.5:3b", "qwen2.5:7b"], key="auditor_local_model")
        elif llm_provider == "gigachat":
            model = st.selectbox("GigaChat –º–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro"], key="auditor_giga_model")
        else:
            model = "auto"
        
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.2, key="auditor_temp")
        max_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 100, 2000, 1000, key="auditor_tokens")
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("–ó–∞—è–≤–æ–∫ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", "15")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "1.8 —Å–µ–∫")
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "88%")
    
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if 'writer_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Writer Agent")
        default_input = st.session_state.writer_input
    elif 'researcher_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Researcher Agent")
        default_input = st.session_state.researcher_input
    else:
        default_input = ""
    
    audit_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–∞",
        value=default_input,
        placeholder="–ó–∞—è–≤–∫–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞...",
        height=200,
        key="auditor_input"
    )
    
    # –ó–∞–ø—É—Å–∫ –∞—É–¥–∏—Ç–∞
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç", type="primary", use_container_width=True):
            if audit_data and AGENTS_AVAILABLE:
                with st.spinner("üîç –ü—Ä–æ–≤–æ–∂—É –∞—É–¥–∏—Ç..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                        agent = AuditorAgent(db=None, llm_provider=llm_provider)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
                        result = agent.audit_application({
                            'application': audit_data,
                            'llm_provider': llm_provider,
                            'model': model,
                            'temperature': temperature,
                            'max_tokens': max_tokens
                        })
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.session_state.agent_results['auditor'] = result
                        st.session_state.auditor_timestamp = datetime.now()
                        
                        st.success("‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–∞")
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            if 'auditor' in st.session_state.agent_results:
                del st.session_state.agent_results['auditor']
            if 'auditor_timestamp' in st.session_state:
                del st.session_state.auditor_timestamp
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'auditor' in st.session_state.agent_results:
        st.markdown("---")
        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞")
        
        result = st.session_state.agent_results['auditor']
        timestamp = st.session_state.auditor_timestamp
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", result.get('provider', 'Unknown'))
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time', 0):.2f} —Å–µ–∫")
        with col3:
            st.metric("–î–∞—Ç–∞", timestamp.strftime("%H:%M:%S"))
        
        # –û—Ü–µ–Ω–∫–∞
        if 'overall_score' in result:
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞", f"{result['overall_score']:.1f}/10")
            with col2:
                st.metric("–ü–æ–ª–Ω–æ—Ç–∞", f"{result.get('completeness_score', 0):.1f}/10")
            with col3:
                st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", f"{result.get('quality_score', 0):.1f}/10")
            with col4:
                st.metric("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ", f"{result.get('compliance_score', 0):.1f}/10")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        st.text_area(
            "–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞",
            result.get('result', ''),
            height=300,
            disabled=True
        )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.subheader("üì§ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì§ ‚Üí Writer", use_container_width=True):
                st.session_state.writer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Writer Agent!")
        
        with col2:
            if st.button("üì§ ‚Üí Researcher", use_container_width=True):
                st.session_state.researcher_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Researcher Agent!")
        
        with col3:
            if st.button("üì§ ‚Üí Interviewer", use_container_width=True):
                st.session_state.interviewer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Interviewer Agent!")
        
        with col4:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                st.success("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    show_prompt_management("auditor")

def show_interviewer_agent():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≥–µ–Ω—Ç–∞-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞"""
    st.header("üí¨ Interviewer Agent")
    st.markdown("---")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞")
        
        llm_provider = st.selectbox(
            "–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM",
            ["auto", "gigachat", "local"],
            key="interviewer_provider"
        )
        
        if llm_provider == "local":
            model = st.selectbox("–õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å", ["qwen2.5:3b", "qwen2.5:7b"], key="interviewer_local_model")
        elif llm_provider == "gigachat":
            model = st.selectbox("GigaChat –º–æ–¥–µ–ª—å", ["GigaChat", "GigaChat-Pro"], key="interviewer_giga_model")
        else:
            model = "auto"
        
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.1, 1.0, 0.5, key="interviewer_temp")
        max_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 100, 1500, 800, key="interviewer_tokens")
    
    with col2:
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        st.metric("–ò–Ω—Ç–µ—Ä–≤—å—é –ø—Ä–æ–≤–µ–¥–µ–Ω–æ", "23")
        st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è", "15 –º–∏–Ω")
        st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", "96%")
    
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìù –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
    if 'auditor_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Auditor Agent")
        default_input = st.session_state.auditor_input
    elif 'researcher_input' in st.session_state:
        st.info("üì§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Researcher Agent")
        default_input = st.session_state.researcher_input
    else:
        default_input = ""
    
    interview_data = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤",
        value=default_input,
        placeholder="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞, –Ω–µ–¥–æ—Å—Ç–∞—é—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...",
        height=200,
        key="interviewer_input"
    )
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üöÄ –°–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã", type="primary", use_container_width=True):
            if interview_data and AGENTS_AVAILABLE:
                with st.spinner("üí¨ –°–æ–∑–¥–∞—é –≤–æ–ø—Ä–æ—Å—ã..."):
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                        agent = InterviewerAgent(db=None, llm_provider=llm_provider)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
                        result = agent.create_questions({
                            'user_profile': interview_data,
                            'llm_provider': llm_provider,
                            'model': model,
                            'temperature': temperature,
                            'max_tokens': max_tokens
                        })
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        st.session_state.agent_results['interviewer'] = result
                        st.session_state.interviewer_timestamp = datetime.now()
                        
                        st.success("‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–æ–∑–¥–∞–Ω—ã!")
                        
                    except Exception as e:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            else:
                st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    
    with col2:
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True):
            if 'interviewer' in st.session_state.agent_results:
                del st.session_state.agent_results['interviewer']
            if 'interviewer_timestamp' in st.session_state:
                del st.session_state.interviewer_timestamp
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if 'interviewer' in st.session_state.agent_results:
        st.markdown("---")
        st.subheader("üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
        
        result = st.session_state.agent_results['interviewer']
        timestamp = st.session_state.interviewer_timestamp
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–ü—Ä–æ–≤–∞–π–¥–µ—Ä", result.get('provider', 'Unknown'))
        with col2:
            st.metric("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{result.get('processing_time', 0):.2f} —Å–µ–∫")
        with col3:
            st.metric("–î–∞—Ç–∞", timestamp.strftime("%H:%M:%S"))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        st.text_area(
            "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã",
            result.get('result', ''),
            height=300,
            disabled=True
        )
        
        # –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.subheader("üì§ –ü–µ—Ä–µ–¥–∞—á–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("üì§ ‚Üí Researcher", use_container_width=True):
                st.session_state.researcher_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Researcher Agent!")
        
        with col2:
            if st.button("üì§ ‚Üí Writer", use_container_width=True):
                st.session_state.writer_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Writer Agent!")
        
        with col3:
            if st.button("üì§ ‚Üí Auditor", use_container_width=True):
                st.session_state.auditor_input = result.get('result', '')
                st.success("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Auditor Agent!")
        
        with col4:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", use_container_width=True):
                st.success("‚úÖ –í–æ–ø—Ä–æ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
    show_prompt_management("interviewer")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    st.title("ü§ñ AI –ê–≥–µ–Ω—Ç—ã GrantService")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≥–µ–Ω—Ç–∞
    st.sidebar.title("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞")
    
    selected_agent = st.sidebar.selectbox(
        "–ê–≥–µ–Ω—Ç",
        [
            "üìä –°—Ç–∞—Ç—É—Å LLM",
            "üîç Researcher Agent",
            "‚úçÔ∏è Writer Agent", 
            "üîç Auditor Agent",
            "üí¨ Interviewer Agent"
        ],
        index=0
    )
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    default_provider = st.sidebar.selectbox(
        "–ü—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        ["auto", "gigachat", "local"],
        help="Auto: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä, GigaChat: –æ–±–ª–∞—á–Ω—ã–π, Local: –ª–æ–∫–∞–ª—å–Ω—ã–π"
    )
    
    # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    if selected_agent == "üìä –°—Ç–∞—Ç—É—Å LLM":
        show_llm_status()
    elif selected_agent == "üîç Researcher Agent":
        show_researcher_agent()
    elif selected_agent == "‚úçÔ∏è Writer Agent":
        show_writer_agent()
    elif selected_agent == "üîç Auditor Agent":
        show_auditor_agent()
    elif selected_agent == "üí¨ Interviewer Agent":
        show_interviewer_agent()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    st.sidebar.markdown("---")
    st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.sidebar.info("""
    **GrantService AI Agents**
    
    –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≥—Ä–∞–Ω—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Å –ø–æ–º–æ—â—å—é –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤.
    
    –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –∏ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.
    """)

if __name__ == "__main__":
    main()
