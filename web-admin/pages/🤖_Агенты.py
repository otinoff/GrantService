#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI Agents Management Page - GrantService Admin (v3.0)
====================================================
Unified page for all 5 agents with FULL functionality from archived files:
- Interviewer | Auditor | Planner | Researcher | Writer

Integrated from:
- ü§ñ_AI_Agents.py - Base structure
- ‚úçÔ∏è_Writer_Agent.py - Writer logic
- üîç_Researcher_Agent.py - Researcher logic
- üî¨_–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è_–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è.py - Researcher investigations table
- üî¨_–ê–Ω–∞–ª–∏—Ç–∏–∫–∞_–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è.py - Researcher cost analytics

Author: Grant Architect Agent + Streamlit Admin Developer
Date: 2025-10-03
Version: 3.0.0 (Full integration)
"""

import streamlit as st
import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json

# PATH SETUP - CRITICAL: Import setup_paths FIRST before any project imports
sys.path.insert(0, str(Path(__file__).parent.parent))  # Add web-admin to path
import setup_paths  # Centralized path configuration

# AUTHENTICATION (disabled for now)
# TODO: Implement auth module
# try:
#     from utils.auth import is_user_authorized
#     if not is_user_authorized():
#         st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É üîê –í—Ö–æ–¥")
#         st.stop()
# except ImportError as e:
#     st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
#     st.stop()

# IMPORTS
AdminDatabase = None
render_page_header = None
render_metric_cards = None
render_tabs = None
render_agent_header = None
render_prompt_management = None
render_agent_stats = None
create_researcher_metrics = None
create_cost_chart = None
create_popular_queries_chart = None
GrantServiceDatabase = None
get_interview_questions = None
insert_interview_question = None
update_interview_question = None
delete_interview_question = None

try:
    from utils.database import AdminDatabase
except ImportError as e:
    st.warning(f"‚ö†Ô∏è AdminDatabase not available: {e}")

try:
    from utils.postgres_helper import execute_query, execute_update
except ImportError as e:
    st.warning(f"‚ö†Ô∏è postgres_helper not available: {e}")
    execute_query = None
    execute_update = None

try:
    from utils.ui_helpers import render_page_header, render_metric_cards, render_tabs
except ImportError as e:
    st.warning(f"‚ö†Ô∏è UI helpers not available: {e}")

try:
    from utils.agent_components import render_agent_header, render_prompt_management, render_agent_stats
except ImportError as e:
    st.warning(f"‚ö†Ô∏è Agent components not available: {e}")

try:
    from utils.charts import create_researcher_metrics, create_cost_chart, create_popular_queries_chart
except ImportError:
    pass  # Charts are optional

try:
    from data.database import GrantServiceDatabase
except ImportError:
    # Fallback to AdminDatabase
    pass

try:
    from data.database import get_interview_questions, insert_interview_question, update_interview_question, delete_interview_question
except ImportError as e:
    st.warning(f"‚ö†Ô∏è Interview questions functions not available: {e}")

# AI Agent Settings
try:
    from utils.agent_settings import (
        get_agent_settings,
        save_agent_settings,
        is_claude_code_enabled,
        get_interviewer_mode
    )
    AGENT_SETTINGS_AVAILABLE = True
except ImportError as e:
    logger_warning = f"Agent settings not available: {e}"
    # Will show warning in UI later
    AGENT_SETTINGS_AVAILABLE = False

# Prompt Manager
try:
    from utils.prompt_manager import (
        get_agent_prompts,
        get_prompt_by_key,
        save_prompt,
        set_default_prompt,
        format_prompt as format_prompt_template,
        DatabasePromptManager,
        get_database_prompt_manager
    )
    PROMPT_MANAGER_AVAILABLE = True
    PROMPT_MANAGER_ERROR = None
except ImportError as e:
    PROMPT_MANAGER_AVAILABLE = False
    PROMPT_MANAGER_ERROR = str(e)

# Prompt Editor Component
try:
    from utils.prompt_editor import PromptEditor
    PROMPT_EDITOR_AVAILABLE = True
except ImportError as e:
    PROMPT_EDITOR_AVAILABLE = False
    PromptEditor = None

# Stage Tracker
try:
    from utils.stage_tracker import (
        format_stage_badge,
        format_stage_progress_compact,
        get_stage_emoji,
        get_stage_name,
        get_stage_progress,
        get_stage_info,
        update_stage
    )
    STAGE_TRACKER_AVAILABLE = True
except ImportError as e:
    STAGE_TRACKER_AVAILABLE = False
    # logger not available yet at this point in imports

# Logger setup with fallback
try:
    from utils.logger import setup_logger
    logger = setup_logger('agents_page')
except ImportError:
    import logging
    logger = logging.getLogger('agents_page')
    logger.setLevel(logging.INFO)

# Optional agent imports
try:
    from services.llm_router import LLMRouter, LLMProvider
    from services.gigachat_service import GigaChatService
    from services.local_llm_service import LocalLLMService
    from agents.writer_agent import WriterAgent
    from agents.researcher_agent import ResearcherAgent
    from data.database.prompts import (
        get_prompts_by_agent, get_prompt_by_name, format_prompt,
        create_prompt, update_prompt, delete_prompt
    )
    AGENTS_AVAILABLE = True
    PROMPTS_AVAILABLE = True
except ImportError:
    AGENTS_AVAILABLE = False
    PROMPTS_AVAILABLE = False

# PAGE CONFIG
st.set_page_config(page_title="AI –ê–≥–µ–Ω—Ç—ã", page_icon="ü§ñ", layout="wide")

# DATABASE
@st.cache_resource
def get_database():
    if GrantServiceDatabase:
        return GrantServiceDatabase()
    elif AdminDatabase:
        return AdminDatabase()
    else:
        st.error("‚ùå No database available")
        return None

@st.cache_resource
def get_admin_database():
    if AdminDatabase:
        return AdminDatabase()
    else:
        return None

db = get_database()
admin_db = get_admin_database()

# SESSION STATE
if 'agent_results' not in st.session_state:
    st.session_state.agent_results = {}
if 'selected_research_id' not in st.session_state:
    st.session_state.selected_research_id = None
if 'selected_anketa_id' not in st.session_state:
    st.session_state.selected_anketa_id = None
if 'selected_research_export' not in st.session_state:
    st.session_state.selected_research_export = None

# =============================================================================
# AGENT CONFIGURATION
# =============================================================================

AGENT_INFO = {
    'interviewer': {
        'name': 'Interviewer Agent',
        'emoji': 'üìù',
        'description': '–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é',
        'status': 'active',
        'table': 'sessions',
        'future': 'AI-powered dynamic questioning'
    },
    'auditor': {
        'name': 'Auditor Agent',
        'emoji': '‚úÖ',
        'description': '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º',
        'status': 'active',
        'table': 'auditor_results',
        'future': 'Multi-criteria weighted scoring'
    },
    'planner': {
        'name': 'Planner Agent',
        'emoji': 'üìê',
        'description': '–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞—è–≤–∫–∏',
        'status': 'active',
        'table': 'planner_structures',
        'future': 'Multiple templates per grant type'
    },
    'researcher': {
        'name': 'Researcher Agent',
        'emoji': 'üîç',
        'description': '–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Perplexity API',
        'status': 'active',
        'table': 'researcher_research',
        'future': 'Multi-source aggregation'
    },
    'writer': {
        'name': 'Writer Agent',
        'emoji': '‚úçÔ∏è',
        'description': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GigaChat',
        'status': 'active',
        'table': 'grants',
        'future': 'Collaborative editing with user'
    }
}

# =============================================================================
# DATA FUNCTIONS
# =============================================================================

# Interview Questions Functions
def get_interview_questions():
    """Get all interview questions from database"""
    if not execute_query:
        return []
    try:
        result = execute_query("""
            SELECT id, question_number, question_text, field_name, question_type,
                   options, hint_text, is_required, is_active, created_at, updated_at
            FROM interview_questions
            ORDER BY question_number
        """)
        return result if result else []
    except Exception as e:
        logger.error(f"Error getting interview questions: {e}")
        return []

def update_interview_question(question_id, **kwargs):
    """Update interview question fields"""
    if not execute_update:
        raise Exception("execute_update not available")

    # Build UPDATE query dynamically based on provided kwargs
    valid_fields = ['question_text', 'hint_text', 'question_type', 'field_name',
                    'is_required', 'is_active', 'question_number', 'options']

    update_fields = []
    values = []

    for field, value in kwargs.items():
        if field in valid_fields:
            update_fields.append(f"{field} = %s")
            values.append(value)

    if not update_fields:
        raise Exception("No valid fields to update")

    # Add updated_at timestamp
    update_fields.append("updated_at = NOW()")

    # Add question_id at the end for WHERE clause
    values.append(question_id)

    query = f"""
        UPDATE interview_questions
        SET {', '.join(update_fields)}
        WHERE id = %s
    """

    try:
        execute_update(query, tuple(values))
        return True
    except Exception as e:
        logger.error(f"Error updating question {question_id}: {e}")
        raise

def insert_interview_question(question_text, question_type, question_number,
                               is_required, is_active, options=None):
    """Insert new interview question"""
    if not execute_update:
        raise Exception("execute_update not available")

    query = """
        INSERT INTO interview_questions
        (question_text, question_type, question_number, is_required, is_active, options)
        VALUES (%s, %s, %s, %s, %s, %s)
    """

    try:
        execute_update(query, (question_text, question_type, question_number,
                               is_required, is_active, options))
        return True
    except Exception as e:
        logger.error(f"Error inserting question: {e}")
        raise

def delete_interview_question(question_id):
    """Delete interview question"""
    if not execute_update:
        raise Exception("execute_update not available")

    query = "DELETE FROM interview_questions WHERE id = %s"

    try:
        execute_update(query, (question_id,))
        return True
    except Exception as e:
        logger.error(f"Error deleting question {question_id}: {e}")
        raise

@st.cache_data(ttl=300)
def get_agent_statistics(agent_type: str, _db, days: int = 30):
    """Get statistics for specific agent"""
    try:
        if agent_type == 'interviewer':
            # Get from sessions table with calculated duration
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN completion_status = 'completed' THEN 1 END) as completed,
                    ROUND(AVG(progress_percentage), 1) as avg_progress,
                    ROUND(AVG(
                        CASE
                            WHEN completed_at IS NOT NULL THEN
                                EXTRACT(EPOCH FROM (completed_at - started_at)) / 60
                            ELSE
                                EXTRACT(EPOCH FROM (last_activity - started_at)) / 60
                        END
                    ), 1) as avg_duration_min
                FROM sessions
                WHERE started_at >= NOW() - INTERVAL '30 days'
            """)
            return result[0] if result else {}

        elif agent_type == 'auditor':
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN approval_status = 'approved' THEN 1 END) as approved,
                    COUNT(CASE WHEN approval_status = 'needs_revision' THEN 1 END) as needs_revision,
                    ROUND(AVG(average_score), 2) as avg_score
                FROM auditor_results
                WHERE created_at >= NOW() - INTERVAL '30 days'
            """)
            return result[0] if result else {}

        elif agent_type == 'planner':
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN data_mapping_complete = TRUE THEN 1 END) as complete_mappings,
                    ROUND(AVG(sections_count), 1) as avg_sections
                FROM planner_structures
                WHERE created_at >= NOW() - INTERVAL '30 days'
            """)
            return result[0] if result else {}

        elif agent_type == 'researcher':
            # Get from researcher_research table
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,
                    COUNT(CASE WHEN status IN ('pending', 'processing') THEN 1 END) as processing,
                    COUNT(CASE WHEN status = 'error' THEN 1 END) as errors
                FROM researcher_research
                WHERE created_at >= NOW() - INTERVAL '30 days'
            """)
            return result[0] if result else {}

        elif agent_type == 'writer':
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed,
                    COUNT(CASE WHEN status = 'draft' THEN 1 END) as draft,
                    ROUND(AVG(quality_score), 2) as avg_quality_score
                FROM grants
                WHERE created_at >= NOW() - INTERVAL '30 days'
            """)
            return result[0] if result else {}

        elif agent_type == 'reviewer':
            # Get from grants table (review_score field)
            result = execute_query("""
                SELECT
                    COUNT(*) as total,
                    COUNT(CASE WHEN review_score IS NOT NULL THEN 1 END) as reviewed,
                    COUNT(CASE WHEN final_status = 'approved' THEN 1 END) as approved,
                    COUNT(CASE WHEN final_status = 'needs_revision' THEN 1 END) as needs_revision,
                    ROUND(AVG(review_score), 2) as avg_score
                FROM grants
                WHERE created_at >= NOW() - INTERVAL '30 days'
            """)
            if result and result[0]:
                data = result[0]
                return {
                    'total': data.get('reviewed', 0),  # Only reviewed grants count
                    'approved': data.get('approved', 0),
                    'needs_revision': data.get('needs_revision', 0),
                    'avg_score': data.get('avg_score', 0)
                }
            return {}

        # Default fallback
        return {}

    except Exception as e:
        logger.error(f"Error getting stats for {agent_type}: {e}")
        return {}

@st.cache_data(ttl=60)
def get_researcher_investigations(_db, filters: dict = None):
    """Get list of researcher investigations - USES POSTGRESQL"""
    try:
        query = """
            SELECT
                rr.id,
                rr.research_id,
                rr.anketa_id,
                rr.research_results,
                rr.status,
                rr.llm_provider,
                rr.model,
                rr.created_at,
                rr.completed_at,
                u.username,
                u.telegram_id as user_id
            FROM researcher_research rr
            LEFT JOIN sessions s ON rr.anketa_id = s.anketa_id
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            ORDER BY rr.created_at DESC
            LIMIT 100
        """
        result = execute_query(query)
        # execute_query already returns list of dicts (RealDictCursor)
        return result if result else []
    except Exception as e:
        logger.error(f"Error getting investigations: {e}")
        return []

@st.cache_data(ttl=60)
def get_writer_generated_texts(_db, filters: dict = None):
    """Get list of writer generated texts"""
    try:
        result = execute_query("""
            SELECT
                id, grant_id, user_id, status,
                created_at, updated_at, quality_score
            FROM grants
            ORDER BY created_at DESC
            LIMIT 50
        """)
        return result if result else []
    except Exception as e:
        logger.error(f"Error getting writer texts: {e}")
        return []


def render_agent_execution_controls(agent_name: str):
    """
    Render execution mode controls and queue display for an agent

    Args:
        agent_name: Name of the agent (interviewer, auditor, researcher, writer, reviewer)
    """
    from utils.agent_settings import get_agent_settings, save_agent_settings
    from utils.agent_queue import get_all_queue_sizes

    # Get current settings
    settings = get_agent_settings(agent_name)
    current_mode = settings.get('execution_mode', 'manual')

    # Get queue size
    queues = get_all_queue_sizes()
    queue_size = queues.get(agent_name, 0)

    # Display execution mode and queue in a nice card
    st.markdown("---")

    col1, col2, col3 = st.columns([2, 2, 2])

    with col1:
        st.markdown("##### ‚öôÔ∏è –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞")
        new_mode = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
            options=['manual', 'automatic'],
            index=0 if current_mode == 'manual' else 1,
            format_func=lambda x: "üîß –†—É—á–Ω–æ–π" if x == 'manual' else "‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
            key=f"execution_mode_{agent_name}",
            horizontal=True
        )

        # Save if changed
        if new_mode != current_mode:
            if save_agent_settings(agent_name, execution_mode=new_mode):
                st.success(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {'–†—É—á–Ω–æ–π' if new_mode == 'manual' else '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π'}")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

    with col2:
        st.markdown("##### üìã –û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        if queue_size > 0:
            st.metric(
                label="–≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏",
                value=queue_size,
                delta=f"{'‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏' if current_mode == 'manual' else '‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è'}"
            )
        else:
            st.info("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞")

    with col3:
        st.markdown("##### üîÑ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞")
        if current_mode == 'automatic':
            st.success("‚ö° **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫**\n–ê–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            st.warning("üîß **–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫**\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            if queue_size > 0:
                if st.button(f"‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É ({queue_size})", key=f"process_{agent_name}"):
                    # –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
                    from utils.agent_processor import process_agent_queue

                    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    with st.spinner(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ {agent_name}..."):
                        try:
                            # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å (–º–∞–∫—Å–∏–º—É–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ —Ä–∞–∑)
                            stats = process_agent_queue(agent_name, limit=10)

                            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                            if stats.succeeded > 0:
                                st.success(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {stats.succeeded}/{stats.total_items}")
                                st.info(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get_duration():.1f}s")

                                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
                                with st.expander("üìã –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                                    for result in stats.results:
                                        if result.success:
                                            st.success(f"‚úÖ {result.item_id}: {result.message}")
                                        else:
                                            st.error(f"‚ùå {result.item_id}: {result.message}")

                            if stats.failed > 0:
                                st.warning(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {stats.failed}/{stats.total_items}")

                            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏
                            st.rerun()

                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
                            import traceback
                            with st.expander("üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"):
                                st.code(traceback.format_exc())

    st.markdown("---")


def render_auditor_prompt_editor():
    """
    Fallback prompt editor for Auditor (if render_agent_prompts not available)
    """
    st.markdown("**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–º:**")

    # Get current prompt from database
    try:
        result = execute_query("""
            SELECT ap.id, ap.name, ap.prompt_template, ap.description
            FROM agent_prompts ap
            JOIN prompt_categories pc ON ap.category_id = pc.id
            WHERE pc.agent_type = 'auditor'
            ORDER BY ap.id
            LIMIT 1
        """)

        if result:
            prompt = result[0]
            prompt_id = prompt['id']
            current_name = prompt['name']
            current_template = prompt['prompt_template']
            current_desc = prompt.get('description', '')

            st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:", value=current_name, key="auditor_prompt_name", disabled=True)
            st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ:", value=current_desc, key="auditor_prompt_desc", disabled=True)

            # Editable prompt template
            new_template = st.text_area(
                "–ü—Ä–æ–º–ø—Ç —à–∞–±–ª–æ–Ω:",
                value=current_template,
                height=400,
                key="auditor_prompt_template",
                help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {anketa_json}, {questions_with_hints}"
            )

            col1, col2 = st.columns([1, 4])
            with col1:
                if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key="save_auditor_prompt"):
                    if new_template != current_template:
                        rowcount = execute_update(
                            "UPDATE agent_prompts SET prompt_template = %s, updated_at = NOW() WHERE id = %s",
                            (new_template, prompt_id)
                        )
                        if rowcount > 0:
                            st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                            st.rerun()
                        else:
                            st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            with col2:
                st.info("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –∞—É–¥–∏—Ç–∞")

        else:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –¥–ª—è Auditor –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            st.info("–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏—é database/update_auditor_prompt.sql")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        logger.error(f"Error loading auditor prompt: {e}")


def render_auditor_mode_switcher():
    """
    Render Auditor mode switcher (live/batch/hybrid)
    """
    from utils.agent_settings import get_auditor_mode, save_auditor_mode

    st.markdown("---")
    st.markdown("#### üéØ –†–µ–∂–∏–º –∞—É–¥–∏—Ç–∞ –∞–Ω–∫–µ—Ç—ã")

    # Get current mode
    current_mode = get_auditor_mode()

    col1, col2 = st.columns([3, 2])

    with col1:
        # Mode descriptions
        mode_descriptions = {
            'batch': {
                'icon': 'üì¶',
                'title': 'Batch (–ü–∞–∫–µ—Ç–Ω—ã–π)',
                'desc': '–ê—É–¥–∏—Ç –≤—Å–µ–π –∞–Ω–∫–µ—Ç—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)'
            },
            'hybrid': {
                'icon': '‚öñÔ∏è',
                'title': 'Hybrid (–ì–∏–±—Ä–∏–¥–Ω—ã–π)',
                'desc': '–ê—É–¥–∏—Ç –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ 3-5 –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏'
            },
            'live': {
                'icon': '‚ö°',
                'title': 'Live (–í —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)',
                'desc': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å —É—Ç–æ—á–Ω—è—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)'
            }
        }

        # Radio button for mode selection
        selected_mode = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞—É–¥–∏—Ç–∞:",
            options=['batch', 'hybrid', 'live'],
            index=['batch', 'hybrid', 'live'].index(current_mode),
            format_func=lambda x: f"{mode_descriptions[x]['icon']} {mode_descriptions[x]['title']}",
            key="auditor_mode_selector"
        )

        # Show description for selected mode
        st.info(f"‚ÑπÔ∏è {mode_descriptions[selected_mode]['desc']}")

        # Save if changed
        if selected_mode != current_mode:
            if save_auditor_mode(selected_mode):
                st.success(f"‚úÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_descriptions[selected_mode]['title']}")
                st.rerun()
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞")

    with col2:
        st.markdown("##### üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤")

        with st.expander("üì¶ Batch", expanded=(current_mode == 'batch')):
            st.markdown("""
            **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            - Auditor –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é –∞–Ω–∫–µ—Ç—É
            - –í—ã–¥–∞–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î

            **–ü–ª—é—Å—ã:** –±—ã—Å—Ç—Ä–æ, –Ω–µ —É—Ç–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            **–ú–∏–Ω—É—Å—ã:** –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            """)

        with st.expander("‚öñÔ∏è Hybrid", expanded=(current_mode == 'hybrid')):
            st.markdown("""
            **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
            - Auditor –Ω–∞—Ö–æ–¥–∏—Ç 3-5 –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ (score < 4)
            - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –±–æ—Ç: "–£—Ç–æ—á–Ω–∏—Ç–µ 3 –º–æ–º–µ–Ω—Ç–∞..."
            - –ü–æ—Å–ª–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ ‚Üí Researcher ‚Üí Writer

            **–ü–ª—é—Å—ã:** –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            **–ú–∏–Ω—É—Å—ã:** +10 –º–∏–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É
            """)

        with st.expander("‚ö° Live (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)", expanded=(current_mode == 'live')):
            st.markdown("""
            **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
            - –ü–æ—Å–ª–µ –ö–ê–ñ–î–û–ì–û –æ—Ç–≤–µ—Ç–∞ ‚Üí Auditor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
            - –ï—Å–ª–∏ score < 6 ‚Üí —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
            - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ø–æ–ª–Ω—è–µ—Ç ‚Üí —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å

            **–ü–ª—é—Å—ã:** –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            **–ú–∏–Ω—É—Å—ã:** 60-90 –º–∏–Ω –∏–Ω—Ç–µ—Ä–≤—å—é, –≤—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤

            ‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –º–æ–∂–µ—Ç —É—Ç–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
            """)

    st.markdown("---")


# =============================================================================
# UI RENDERING FUNCTIONS
# =============================================================================

def render_interviewer_tab():
    """Render Interviewer Agent tab with sub-tabs"""
    st.markdown("### üìù Interviewer Agent")

    # Get active questions count dynamically
    try:
        active_count_result = execute_query("SELECT COUNT(*) as count FROM interview_questions WHERE is_active = true")
        active_count = active_count_result[0]['count'] if active_count_result else 0
        st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é ({active_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)")
    except:
        st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é")

    # SUB-TABS for Interviewer
    interviewer_subtabs = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò–Ω—Ç–µ—Ä–≤—å—é"]
    interviewer_icons = ["üìä", "üí¨"]

    tab1, tab2 = st.tabs([f"{icon} {name}" for icon, name in zip(interviewer_icons, interviewer_subtabs)])

    # TAB 1: Statistics
    with tab1:
        render_interviewer_statistics()

    # TAB 2: Interviews
    with tab2:
        render_interviewer_interviews()


def render_interviewer_statistics():
    """Render Interviewer statistics sub-tab"""
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Interviewer")

    # Execution mode controls and queue display
    render_agent_execution_controls('interviewer')

    # Statistics
    stats = get_agent_statistics('interviewer', db)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é", stats.get('total', 0))
    with col2:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", stats.get('completed', 0))
    with col3:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å", f"{stats.get('avg_progress', 0)}%")
    with col4:
        st.metric("–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", f"{stats.get('avg_duration_min', 0)} –º–∏–Ω")

    st.markdown("---")

    # Interview questions management
    st.markdown("### ‚ùì –í–æ–ø—Ä–æ—Å—ã –∏–Ω—Ç–µ—Ä–≤—å—é")

    try:
        questions = get_interview_questions()

        # Statistics
        total_q = len(questions) if questions else 0
        active_q = len([q for q in questions if q.get('is_active', True)]) if questions else 0

        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", total_q)
        with col2:
            st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö", active_q)
        with col3:
            st.metric("–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö", total_q - active_q)

        st.markdown("---")

        # Add new question
        with st.expander("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å"):
            with st.form("add_question_form"):
                col1, col2 = st.columns(2)

                with col1:
                    q_text = st.text_area("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", height=100)
                    q_type = st.selectbox("–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", ["text", "select", "choice", "number", "date", "textarea"])
                    q_number = st.number_input("–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞", min_value=1, max_value=50, value=total_q + 1)

                with col2:
                    is_req = st.checkbox("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π", value=True)
                    is_act = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True)
                    q_options = st.text_area("–í–∞—Ä–∏–∞–Ω—Ç—ã (–ø–æ —Å—Ç—Ä–æ–∫–µ)", height=100) if q_type == "choice" else ""

                if st.form_submit_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å", use_container_width=True):
                    if q_text:
                        try:
                            insert_interview_question(q_text, q_type, q_number, is_req, is_act, q_options or None)
                            st.success("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    else:
                        st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")

        # List existing questions
        st.markdown("#### üìã –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")

        if questions:
            questions_sorted = sorted(questions, key=lambda x: x.get('question_number', 0))

            for q in questions_sorted:
                status_icon = "üü¢" if q.get('is_active', True) else "üî¥"
                req_icon = "üî¥" if q.get('is_required', False) else "‚ö™"

                with st.expander(f"{status_icon} –í–æ–ø—Ä–æ—Å {q.get('question_number', '?')}: {q.get('question_text', '')[:60]}..."):
                    st.write(f"**–¢–µ–∫—Å—Ç:** {q.get('question_text', '')}")
                    st.write(f"**–¢–∏–ø:** {q.get('question_type', 'text')}")
                    st.write(f"{req_icon} **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π:** {'–î–∞' if q.get('is_required', False) else '–ù–µ—Ç'}")
                    st.write(f"{status_icon} **–ê–∫—Ç–∏–≤–µ–Ω:** {'–î–∞' if q.get('is_active', True) else '–ù–µ—Ç'}")

                    # Show hint_text if exists
                    if q.get('hint_text'):
                        st.info(f"üí° **–ü–æ–¥—Å–∫–∞–∑–∫–∞:** {q.get('hint_text')}")

                    if q.get('options'):
                        st.write("**–í–∞—Ä–∏–∞–Ω—Ç—ã:**")
                        # Handle both string and dict options
                        opts = q['options']
                        if isinstance(opts, str):
                            for opt in opts.split('\n'):
                                if opt.strip():
                                    st.write(f"‚Ä¢ {opt.strip()}")
                        elif isinstance(opts, dict):
                            for key, val in opts.items():
                                st.write(f"‚Ä¢ {key}: {val}")
                        elif isinstance(opts, list):
                            for opt in opts:
                                st.write(f"‚Ä¢ {opt}")

                    # Edit form toggle
                    if f"edit_mode_{q['id']}" not in st.session_state:
                        st.session_state[f"edit_mode_{q['id']}"] = False

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_{q['id']}"):
                            st.session_state[f"edit_mode_{q['id']}"] = not st.session_state[f"edit_mode_{q['id']}"]
                            st.rerun()

                    with col2:
                        if st.button("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"toggle_{q['id']}"):
                            try:
                                update_interview_question(q['id'], is_active=not q.get('is_active', True))
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                    with col3:
                        if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{q['id']}"):
                            try:
                                delete_interview_question(q['id'])
                                st.success("‚úÖ –£–¥–∞–ª–µ–Ω–æ")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                    # Edit form (shown when edit button is clicked)
                    if st.session_state.get(f"edit_mode_{q['id']}", False):
                        st.markdown("---")
                        st.markdown("##### ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞")

                        with st.form(key=f"edit_form_{q['id']}"):
                            edit_question_number = st.number_input(
                                "–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞",
                                min_value=1,
                                max_value=100,
                                value=q.get('question_number', 1),
                                key=f"edit_num_{q['id']}"
                            )

                            edit_question_text = st.text_area(
                                "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
                                value=q.get('question_text', ''),
                                height=100,
                                key=f"edit_text_{q['id']}"
                            )

                            edit_hint_text = st.text_area(
                                "–ü–æ–¥—Å–∫–∞–∑–∫–∞ (hint_text)",
                                value=q.get('hint_text', ''),
                                height=80,
                                help="–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ - –ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                key=f"edit_hint_{q['id']}"
                            )

                            edit_question_type = st.selectbox(
                                "–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞",
                                options=['text', 'textarea', 'number', 'select', 'multiselect', 'date'],
                                index=['text', 'textarea', 'number', 'select', 'multiselect', 'date'].index(q.get('question_type', 'text')),
                                key=f"edit_type_{q['id']}"
                            )

                            edit_field_name = st.text_input(
                                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è (field_name)",
                                value=q.get('field_name', ''),
                                help="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞",
                                key=f"edit_field_{q['id']}"
                            )

                            col_req, col_active = st.columns(2)
                            with col_req:
                                edit_is_required = st.checkbox(
                                    "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å",
                                    value=q.get('is_required', False),
                                    key=f"edit_req_{q['id']}"
                                )
                            with col_active:
                                edit_is_active = st.checkbox(
                                    "–ê–∫—Ç–∏–≤–µ–Ω",
                                    value=q.get('is_active', True),
                                    key=f"edit_active_{q['id']}"
                                )

                            col_save, col_cancel = st.columns(2)
                            with col_save:
                                submit_edit = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è", use_container_width=True)
                            with col_cancel:
                                cancel_edit = st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞", use_container_width=True)

                            if submit_edit:
                                try:
                                    update_interview_question(
                                        q['id'],
                                        question_number=edit_question_number,
                                        question_text=edit_question_text,
                                        hint_text=edit_hint_text if edit_hint_text else None,
                                        question_type=edit_question_type,
                                        field_name=edit_field_name if edit_field_name else None,
                                        is_required=edit_is_required,
                                        is_active=edit_is_active
                                    )
                                    st.session_state[f"edit_mode_{q['id']}"] = False
                                    st.success("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                    st.rerun()
                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                            if cancel_edit:
                                st.session_state[f"edit_mode_{q['id']}"] = False
                                st.rerun()
        else:
            st.info("–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ.")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        render_agent_prompts('interviewer', 'Interviewer Agent')

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_interviewer_settings()


def render_interviewer_interviews():
    """Render Interviewer interviews list"""
    st.markdown("#### üí¨ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é")

    # Filters
    col1, col2, col3 = st.columns(3)

    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "completed", "in_progress", "draft"],
            key="interviewer_status_filter"
        )

    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            key="interviewer_period_filter"
        )

    with col3:
        limit = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π",
            min_value=10,
            max_value=100,
            value=20,
            key="interviewer_limit"
        )

    st.markdown("---")

    # Get interviews from sessions table
    try:
        query = """
            SELECT
                s.id as session_id,
                s.telegram_id,
                u.username,
                s.anketa_id,
                s.current_step,
                s.answers_data,
                s.status,
                s.started_at as created_at,
                s.last_activity as updated_at,
                s.questions_answered as answered_questions
            FROM sessions s
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            WHERE s.anketa_id IS NOT NULL
                AND s.answers_data IS NOT NULL
            ORDER BY s.last_activity DESC
            LIMIT %s
        """

        interviews = execute_query(query, (limit,)) or []

        # Apply filters
        if status_filter != "–í—Å–µ":
            interviews = [i for i in interviews if i.get('status') == status_filter]

        # Display count
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤—å—é: {len(interviews)}**")

        if not interviews:
            st.info("üí¨ –ò–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Display interviews
        for interview in interviews:
            status_emoji = "‚úÖ" if interview.get('status') == 'completed' else "üîÑ" if interview.get('status') == 'in_progress' else "üìù"
            username = interview.get('username', 'Unknown')
            session_id = interview.get('session_id', 'N/A')
            anketa_id = interview.get('anketa_id', 'N/A')
            answered = interview.get('answered_questions', 0)

            # Format title with anketa_id if available (15 active questions)
            title = f"{status_emoji} üìã {anketa_id} - @{username} ({answered}/15 –æ—Ç–≤–µ—Ç–æ–≤)" if anketa_id != 'N/A' else f"{status_emoji} –ò–Ω—Ç–µ—Ä–≤—å—é #{session_id} - @{username} ({answered}/15 –æ—Ç–≤–µ—Ç–æ–≤)"

            with st.expander(title):
                col1, col2 = st.columns(2)

                with col1:
                    if anketa_id != 'N/A':
                        st.write(f"**üìã Anketa ID:** `{anketa_id}`")
                    st.write(f"**ID —Å–µ—Å—Å–∏–∏:** {session_id}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}")
                    st.write(f"**Telegram ID:** {interview.get('user_id', 'N/A')}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {interview.get('status', 'N/A')}")

                with col2:
                    st.write(f"**–¢–µ–∫—É—â–∏–π —à–∞–≥:** {interview.get('current_step', 'N/A')}")
                    st.write(f"**–û—Ç–≤–µ—á–µ–Ω–æ:** {answered}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {interview.get('created_at', 'N/A')}")
                    st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {interview.get('updated_at', 'N/A')}")

                # Show answers
                if interview.get('answers_data'):
                    st.markdown("**–û—Ç–≤–µ—Ç—ã:**")
                    answers = interview['answers_data']
                    if isinstance(answers, dict):
                        for q_num, answer in sorted(answers.items(), key=lambda x: int(x[0]) if x[0].isdigit() else 0):
                            st.text(f"Q{q_num}: {answer[:100]}..." if len(str(answer)) > 100 else f"Q{q_num}: {answer}")

    except Exception as e:
        logger.error(f"Error loading interviews: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ç–µ—Ä–≤—å—é: {e}")


def render_auditor_tab():
    """Render Auditor Agent tab with sub-tabs"""
    st.markdown("### ‚úÖ Auditor Agent (–ê–Ω–∞–ª–∏—Ç–∏–∫)")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ 5 –∫—Ä–∏—Ç–µ—Ä–∏—è–º (—à–∫–∞–ª–∞ 1-10)")

    # SUB-TABS for Auditor
    auditor_subtabs = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ü—Ä–æ–≤–µ—Ä–∫–∏"]
    auditor_icons = ["üìä", "‚úÖ"]

    tab1, tab2 = st.tabs([f"{icon} {name}" for icon, name in zip(auditor_icons, auditor_subtabs)])

    # TAB 1: Statistics
    with tab1:
        render_auditor_statistics()

    # TAB 2: Audits
    with tab2:
        render_auditor_audits()


def render_auditor_statistics():
    """Render Auditor statistics sub-tab"""
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Auditor")

    # Execution mode controls and queue display
    render_agent_execution_controls('auditor')

    # Auditor mode switcher
    render_auditor_mode_switcher()

    # Statistics
    stats = get_agent_statistics('auditor', db)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫", stats.get('total', 0))
    with col2:
        st.metric("–û–¥–æ–±—Ä–µ–Ω–æ", stats.get('approved', 0))
    with col3:
        st.metric("–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", stats.get('needs_revision', 0))
    with col4:
        st.metric("–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", f"{stats.get('avg_score', 0)}/10")

    st.markdown("---")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        render_agent_prompts('auditor', 'Auditor Agent')
    else:
        st.markdown("### üìù –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞—É–¥–∏—Ç–∞")
        render_auditor_prompt_editor()

    st.markdown("---")

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_generic_agent_settings('auditor', 'Auditor Agent')


def render_auditor_audits():
    """Render Auditor audits list"""
    st.markdown("#### ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ü–µ–Ω–∫–∏")

    # Filters
    col1, col2, col3 = st.columns(3)

    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "approved", "needs_revision", "rejected"],
            key="auditor_status_filter"
        )

    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            key="auditor_period_filter"
        )

    with col3:
        limit = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π",
            min_value=10,
            max_value=100,
            value=20,
            key="auditor_limit"
        )

    st.markdown("---")

    # Get audits from auditor_results (new unified approach)
    try:
        query = """
            SELECT
                ar.id as audit_id,
                ar.session_id,
                s.telegram_id as user_id,
                u.username,
                u.first_name,
                u.last_name,
                s.anketa_id,
                ar.average_score as audit_score,
                ar.approval_status,
                ar.recommendations,
                ar.completeness_score,
                ar.clarity_score,
                ar.feasibility_score,
                ar.innovation_score,
                ar.quality_score,
                s.project_name,
                ar.created_at,
                ar.updated_at
            FROM auditor_results ar
            LEFT JOIN sessions s ON ar.session_id = s.id
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            ORDER BY ar.created_at DESC
            LIMIT %s
        """

        audits = execute_query(query, (limit,)) or []

        # Apply filters
        if status_filter != "–í—Å–µ":
            audits = [a for a in audits if a.get('approval_status') == status_filter]

        # Display count
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(audits)}**")

        if not audits:
            st.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Display audits
        for audit in audits:
            approval_status = audit.get('approval_status', 'unknown')
            status_emoji = "‚úÖ" if approval_status == 'approved' else "‚ö†Ô∏è" if approval_status == 'needs_revision' else "‚ùå"

            # User display name
            first_name = audit.get('first_name', '')
            last_name = audit.get('last_name', '')
            username = audit.get('username', 'Unknown')
            user_display = f"{first_name} {last_name}".strip() or username

            audit_id = audit.get('audit_id', 'N/A')
            anketa_id = audit.get('anketa_id', 'N/A')
            avg_score = audit.get('audit_score', 0)

            with st.expander(f"{status_emoji} –ê—É–¥–∏—Ç #{audit_id} - {user_display} (–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg_score}/10)"):
                # Main info
                col1, col2 = st.columns(2)

                with col1:
                    st.write(f"**ID –∞—É–¥–∏—Ç–∞:** {audit_id}")
                    st.write(f"**Anketa ID:** {anketa_id}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_display} (@{username})")
                    st.write(f"**Telegram ID:** {audit.get('user_id', 'N/A')}")
                    st.write(f"**–ü—Ä–æ–µ–∫—Ç:** {audit.get('project_name', 'N/A')}")

                with col2:
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {approval_status}")
                    st.write(f"**–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª:** {avg_score}/10")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {audit.get('created_at', 'N/A')}")
                    st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {audit.get('updated_at', 'N/A')}")

                st.markdown("---")

                # Detailed scores
                st.markdown("**üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:**")
                score_col1, score_col2, score_col3, score_col4, score_col5 = st.columns(5)

                with score_col1:
                    st.metric("–ü–æ–ª–Ω–æ—Ç–∞", f"{audit.get('completeness_score', 0)}/10")
                with score_col2:
                    st.metric("–Ø—Å–Ω–æ—Å—Ç—å", f"{audit.get('clarity_score', 0)}/10")
                with score_col3:
                    st.metric("–†–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç—å", f"{audit.get('feasibility_score', 0)}/10")
                with score_col4:
                    st.metric("–ò–Ω–Ω–æ–≤–∞—Ü–∏—è", f"{audit.get('innovation_score', 0)}/10")
                with score_col5:
                    st.metric("–ö–∞—á–µ—Å—Ç–≤–æ", f"{audit.get('quality_score', 0)}/10")

                # Show recommendations
                recommendations = audit.get('recommendations')
                if recommendations:
                    st.markdown("**üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∞:**")
                    if isinstance(recommendations, dict):
                        if 'strengths' in recommendations:
                            st.markdown("**–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:**")
                            for strength in recommendations['strengths']:
                                st.write(f"‚úÖ {strength}")

                        if 'improvements' in recommendations:
                            st.markdown("**–û–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:**")
                            for improvement in recommendations['improvements']:
                                st.write(f"‚ö†Ô∏è {improvement}")
                    else:
                        st.json(recommendations)

    except Exception as e:
        logger.error(f"Error loading audits: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")


def render_planner_tab():
    """Render Planner Agent tab"""
    st.markdown("### üìê Planner Agent")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –≥—Ä–∞–Ω—Ç–∞ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")

    # Statistics
    stats = get_agent_statistics('planner', db)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –ø–ª–∞–Ω–æ–≤", stats.get('total', 0))
    with col2:
        st.metric("–ü–æ–ª–Ω—ã–π mapping", stats.get('complete_mappings', 0))
    with col3:
        st.metric("–°—Ä–µ–¥–Ω–µ —Ä–∞–∑–¥–µ–ª–æ–≤", f"{stats.get('avg_sections', 0)}")

    st.markdown("---")

    # Structure templates
    st.markdown("### üìã –®–∞–±–ª–æ–Ω—ã —Å—Ç—Ä—É–∫—Ç—É—Ä")

    templates = {
        '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–π –≥—Ä–∞–Ω—Ç': [
            '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            '–ö—Ä–∞—Ç–∫–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è',
            '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
            '–¶–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏',
            '–ü–ª–∞–Ω —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
            '–ë—é–¥–∂–µ—Ç',
            '–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
        ],
        '–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π –≥—Ä–∞–Ω—Ç': [
            '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å',
            '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
            '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
            '–ö–æ–º–∞–Ω–¥–∞',
            '–ë—é–¥–∂–µ—Ç'
        ]
    }

    for template_name, sections in templates.items():
        with st.expander(f"üìÑ {template_name}"):
            for i, section in enumerate(sections, 1):
                st.markdown(f"{i}. {section}")

    st.markdown("---")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        render_agent_prompts('planner', 'Planner Agent')

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_generic_agent_settings('planner', 'Planner Agent')


def render_researcher_tab():
    """Render Researcher Agent tab with sub-tabs"""
    st.markdown("### üîç Researcher Agent")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –û–±–æ–≥–∞—â–∞–µ—Ç –∑–∞—è–≤–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ Perplexity API")

    # SUB-TABS for Researcher
    researcher_subtabs = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"]
    researcher_icons = ["üìä", "üî¨", "üí∞"]

    tab1, tab2, tab3 = st.tabs([f"{icon} {name}" for icon, name in zip(researcher_icons, researcher_subtabs)])

    # TAB 1: Statistics
    with tab1:
        render_researcher_statistics()

    # TAB 2: Investigations
    with tab2:
        render_researcher_investigations()

    # TAB 3: Cost Analytics
    with tab3:
        render_researcher_cost_analytics()


def render_researcher_statistics():
    """Render Researcher statistics sub-tab"""
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã Researcher")

    # Execution mode controls and queue display
    render_agent_execution_controls('researcher')

    stats = get_agent_statistics('researcher', db)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π", stats.get('total', 0))
    with col2:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", stats.get('completed', 0))
    with col3:
        st.metric("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", stats.get('processing', 0))
    with col4:
        st.metric("–û—à–∏–±–∫–∏", stats.get('errors', 0))

    st.markdown("---")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        try:
            render_agent_prompts('researcher', 'Researcher Agent')
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
            import traceback
            st.code(traceback.format_exc())
    else:
        st.warning(f"‚ö†Ô∏è Prompt Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {PROMPT_MANAGER_ERROR}")

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_generic_agent_settings('researcher', 'Researcher Agent')


def render_researcher_investigations():
    """Render Researcher investigations list (from üî¨_–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è_–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è.py)"""
    st.markdown("#### üî¨ –í—Å–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")

    # Filters
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "completed", "pending", "processing", "error"],
            key="researcher_status_filter"
        )

    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            key="researcher_period_filter"
        )

    with col3:
        provider_filter = st.selectbox(
            "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä",
            ["–í—Å–µ", "perplexity", "gigachat", "ollama"],
            key="researcher_provider_filter"
        )

    with col4:
        user_filter = st.text_input(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (username –∏–ª–∏ ID)",
            placeholder="–í–≤–µ–¥–∏—Ç–µ username",
            key="researcher_user_filter"
        )

    st.markdown("---")

    # Get investigations
    investigations = get_researcher_investigations(db)

    # Apply filters
    if status_filter != "–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã":
        investigations = [r for r in investigations if r.get('status') == status_filter]

    if provider_filter != "–í—Å–µ":
        investigations = [r for r in investigations if r.get('llm_provider') == provider_filter]

    if user_filter:
        user_filter_lower = user_filter.lower()
        investigations = [r for r in investigations
                         if (r.get('username', '').lower().find(user_filter_lower) != -1 or
                             str(r.get('user_id', '')).find(user_filter) != -1)]

    # Display count
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π: {len(investigations)}**")

    if not investigations:
        st.info("üìã –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # Display investigations
    for research in investigations:
        status_emoji = "‚úÖ" if research['status'] == 'completed' else "üîÑ" if research['status'] == 'processing' else "‚ùå"
        username = research.get('username', 'Unknown')
        research_id = research.get('research_id', research.get('id', 'N/A'))

        with st.expander(f"{status_emoji} {research_id} - {username}"):
            col1, col2 = st.columns(2)

            with col1:
                st.write(f"**ID –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:** {research_id}")
                st.write(f"**ID –∞–Ω–∫–µ—Ç—ã:** {research.get('anketa_id', 'N/A')}")
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}")
                st.write(f"**Telegram ID:** {research.get('user_id', 'N/A')}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {research['status']}")

            with col2:
                st.write(f"**LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä:** {research.get('llm_provider', 'N/A')}")
                st.write(f"**–ú–æ–¥–µ–ª—å:** {research.get('model', 'N/A')}")
                st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {research.get('created_at', 'N/A')}")
                if research.get('completed_at'):
                    st.write(f"**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** {research['completed_at']}")

            # Results
            if research.get('research_results'):
                st.markdown("**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:**")
                st.text_area(
                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                    value=research['research_results'],
                    height=200,
                    key=f"results_{research.get('id', research_id)}",
                    disabled=True
                )

            # Action buttons
            col1, col2, col3, col4 = st.columns(4)

            with col1:
                if st.button("üìÑ –ê–Ω–∫–µ—Ç–∞", key=f"view_anketa_{research.get('id', research_id)}"):
                    st.session_state.selected_anketa_id = research.get('anketa_id')
                    st.rerun()

            with col2:
                if st.button("üìä –î–µ—Ç–∞–ª–∏", key=f"details_{research.get('id', research_id)}"):
                    st.session_state.selected_research_id = research_id
                    st.rerun()

            with col3:
                if st.button("üìã ID", key=f"copy_{research.get('id', research_id)}"):
                    st.code(research_id)
                    st.success("ID –ø–æ–∫–∞–∑–∞–Ω!")

            with col4:
                if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_{research.get('id', research_id)}"):
                    st.session_state.selected_research_export = research_id
                    st.rerun()


def render_researcher_cost_analytics():
    """Render Researcher cost analytics (from üî¨_–ê–Ω–∞–ª–∏—Ç–∏–∫–∞_–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è.py)"""
    st.markdown("#### üí∞ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ç–æ–∫–µ–Ω—ã")

    try:
        # Get Perplexity service statistics
        from services.perplexity_service import PerplexityService
        perplexity_service = PerplexityService()
        account_stats = perplexity_service.get_combined_statistics()

        # Display account info
        account_info = account_stats.get('account_info', {})

        col1, col2, col3 = st.columns(3)

        with col1:
            balance_emoji = "üí∞"
            current_balance = account_info.get('current_balance', 0)
            tier = account_info.get('current_tier', 'Tier 0')
            spent = account_info.get('total_spent', 0.02)
            balance_str = f"{current_balance:.6f}"
            spent_str = f"{spent:.2f}"
            st.markdown(f"""
            **{balance_emoji} –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞:**
            - **Credit balance:** {balance_str} USD
            - **–£—Ä–æ–≤–µ–Ω—å:** {tier}
            - **–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:** {spent_str} USD
            """)

        with col2:
            chart_emoji = "üìä"
            screen_data = perplexity_service.get_latest_screen_data() if hasattr(perplexity_service, 'get_latest_screen_data') else {}
            st.markdown(f"""
            **{chart_emoji} API Requests:**
            - **sonar-pro:** {screen_data.get('sonar_pro_low', 0)}
            - **sonar medium:** {screen_data.get('sonar_medium', 0)}
            - **sonar low:** {screen_data.get('sonar_low', 0)}
            """)

        with col3:
            st.markdown("**üì• Input Tokens:**")
            st.markdown(f"""
            - **sonar:** {screen_data.get('sonar_input_tokens', 0):,}
            - **reasoning-pro:** {screen_data.get('reasoning_pro_input_tokens', 0):,}
            - **sonar-pro:** {screen_data.get('sonar_pro_input_tokens', 0):,}
            """)

        st.markdown("---")

        # Cost chart (placeholder - needs actual data)
        st.markdown("### üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
        st.info("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")

        # Provider comparison
        st.markdown("### üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        st.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ GigaChat vs GPT vs Perplexity (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")

    except Exception as e:
        logger.error(f"Error in cost analytics: {e}")
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        st.info("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")


def render_writer_tab():
    """Render Writer Agent tab with sub-tabs"""
    st.markdown("### ‚úçÔ∏è Writer Agent")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ GigaChat")

    # SUB-TABS for Writer
    writer_subtabs = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¢–µ–∫—Å—Ç—ã"]
    writer_icons = ["üìä", "üìù"]

    tab1, tab2 = st.tabs([f"{icon} {name}" for icon, name in zip(writer_icons, writer_subtabs)])

    # TAB 1: Statistics
    with tab1:
        render_writer_statistics()

    # TAB 2: Generated texts
    with tab2:
        render_writer_texts()


def render_writer_statistics():
    """Render Writer statistics sub-tab"""
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Writer")

    # Execution mode controls and queue display
    render_agent_execution_controls('writer')

    stats = get_agent_statistics('writer', db)

    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤", stats.get('total', 0))
    with col2:
        st.metric("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", stats.get('completed', 0))
    with col3:
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{stats.get('avg_quality_score', 0)}/10")

    st.markdown("---")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        render_agent_prompts('writer', 'Writer Agent')

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_writer_settings()


def render_writer_texts():
    """Render Writer generated texts list"""
    st.markdown("#### üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã")

    # Filters
    col1, col2, col3 = st.columns(3)

    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "completed", "draft", "error"],
            key="writer_status_filter"
        )

    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            key="writer_period_filter"
        )

    with col3:
        limit = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π",
            min_value=10,
            max_value=100,
            value=20,
            key="writer_limit"
        )

    st.markdown("---")

    # Get texts
    texts = get_writer_generated_texts(db)

    # Apply filters
    if status_filter != "–í—Å–µ":
        texts = [t for t in texts if t.get('status') == status_filter]

    texts = texts[:limit]

    # Display count
    st.write(f"**–ù–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: {len(texts)}**")

    if not texts:
        st.info("üìù –¢–µ–∫—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # Display texts
    for text in texts:
        status_emoji = "‚úÖ" if text['status'] == 'completed' else "üìù" if text['status'] == 'draft' else "‚ùå"
        grant_id = text.get('grant_id', text.get('id', 'N/A'))

        # Format created_at - handle both datetime and string
        created_at = text.get('created_at', 'N/A')
        if created_at != 'N/A':
            created_at_str = str(created_at)[:10] if created_at else 'N/A'
        else:
            created_at_str = 'N/A'

        with st.expander(f"{status_emoji} –ì—Ä–∞–Ω—Ç {grant_id} - {created_at_str}"):
            col1, col2 = st.columns(2)

            with col1:
                st.write(f"**ID –≥—Ä–∞–Ω—Ç–∞:** {grant_id}")
                st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {text.get('user_id', 'N/A')}")
                st.write(f"**–°—Ç–∞—Ç—É—Å:** {text['status']}")

            with col2:
                st.write(f"**–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:** {text.get('quality_score', 'N/A')}/10")
                st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {str(text.get('created_at', 'N/A'))}")
                st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {str(text.get('updated_at', 'N/A'))}")

            # Action buttons
            col1, col2, col3 = st.columns(3)

            with col1:
                if st.button("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", key=f"view_text_{text.get('id', grant_id)}"):
                    st.info("–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")

            with col2:
                if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_text_{text.get('id', grant_id)}"):
                    st.info("–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—Å—Ç–∞ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")

            with col3:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_text_{text.get('id', grant_id)}"):
                    st.info("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")


def render_reviewer_tab():
    """Render Reviewer Agent tab with sub-tabs"""
    st.markdown("### üîé Reviewer Agent (–†–µ—Ü–µ–Ω–∑–µ–Ω—Ç)")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –î–µ–ª–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç –≥–æ—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ –∏ –¥–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ")

    # SUB-TABS for Reviewer
    reviewer_subtabs = ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–†–µ—Ü–µ–Ω–∑–∏–∏"]
    reviewer_icons = ["üìä", "üîé"]

    tab1, tab2 = st.tabs([f"{icon} {name}" for icon, name in zip(reviewer_icons, reviewer_subtabs)])

    # TAB 1: Statistics
    with tab1:
        render_reviewer_statistics()

    # TAB 2: Reviews
    with tab2:
        render_reviewer_reviews()


def render_reviewer_statistics():
    """Render Reviewer statistics sub-tab"""
    st.markdown("#### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Reviewer")

    # Execution mode controls and queue display
    render_agent_execution_controls('reviewer')

    # Statistics
    stats = get_agent_statistics('reviewer', db)

    # Safety check: if stats is None, use empty dict
    if stats is None:
        stats = {}

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–í—Å–µ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏–π", stats.get('total', 0))
    with col2:
        st.metric("–û–¥–æ–±—Ä–µ–Ω–æ", stats.get('approved', 0))
    with col3:
        st.metric("–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", stats.get('needs_revision', 0))
    with col4:
        st.metric("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", f"{stats.get('avg_score', 0)}/10")

    st.markdown("---")

    # Review criteria
    st.markdown("### üìã –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è")

    criteria = {
        '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ–æ–Ω–¥–∞': '–ù–∞—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Ñ–æ–Ω–¥–∞ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤',
        '–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞': '–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ª–æ–≥–∏–∫–∞ –∏–∑–ª–æ–∂–µ–Ω–∏—è',
        '–û–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –±—é–¥–∂–µ—Ç–∞': '–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç–µ–π –±—é–¥–∂–µ—Ç–∞',
        '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å': '–ó–Ω–∞—á–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ–±—â–µ—Å—Ç–≤–∞',
        '–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏': '–í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∑–∞—è–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π'
    }

    for criterion, description in criteria.items():
        with st.expander(f"üìå {criterion}"):
            st.markdown(f"**{description}**")
            st.markdown("- –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10")
            st.markdown("- –í–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–¥–∞—á–µ –∑–∞—è–≤–∫–∏")

    st.markdown("---")

    # Prompt management
    if PROMPT_MANAGER_AVAILABLE:
        render_agent_prompts('reviewer', 'Reviewer Agent')

    # AI Agent Settings
    if AGENT_SETTINGS_AVAILABLE:
        render_generic_agent_settings('reviewer', 'Reviewer Agent')


def render_reviewer_reviews():
    """Render Reviewer reviews list"""
    st.markdown("#### üîé –†–µ—Ü–µ–Ω–∑–∏–∏ –≥–æ—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫")

    # Filters
    col1, col2, col3 = st.columns(3)

    with col1:
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å",
            ["–í—Å–µ", "approved", "needs_revision", "rejected"],
            key="reviewer_status_filter"
        )

    with col2:
        period_filter = st.selectbox(
            "–ü–µ—Ä–∏–æ–¥",
            ["–í—Å–µ –≤—Ä–µ–º—è", "–°–µ–≥–æ–¥–Ω—è", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"],
            key="reviewer_period_filter"
        )

    with col3:
        limit = st.number_input(
            "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–µ–π",
            min_value=10,
            max_value=100,
            value=20,
            key="reviewer_limit"
        )

    st.markdown("---")

    # Get reviews from grants table
    try:
        query = """
            SELECT
                g.grant_id,
                g.user_id,
                u.username,
                g.grant_title,
                g.review_score,
                g.review_feedback,
                g.final_status,
                g.created_at,
                g.updated_at
            FROM grants g
            LEFT JOIN users u ON g.user_id = u.telegram_id
            WHERE g.review_score IS NOT NULL
            ORDER BY g.updated_at DESC
            LIMIT %s
        """

        reviews = execute_query(query, (limit,)) or []

        # Apply filters
        if status_filter != "–í—Å–µ":
            reviews = [r for r in reviews if r.get('final_status') == status_filter]

        # Display count
        st.write(f"**–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Ü–µ–Ω–∑–∏–π: {len(reviews)}**")

        if not reviews:
            st.info("üîé –†–µ—Ü–µ–Ω–∑–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # Display reviews
        for review in reviews:
            status_emoji = "‚úÖ" if review.get('final_status') == 'approved' else "‚ö†Ô∏è" if review.get('final_status') == 'needs_revision' else "‚ùå"
            username = review.get('username', 'Unknown')
            grant_id = review.get('grant_id', 'N/A')
            grant_name = review.get('grant_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            score = review.get('review_score', 0)

            with st.expander(f"{status_emoji} {grant_id} - {grant_name[:50]}... (–û—Ü–µ–Ω–∫–∞: {score}/10)"):
                col1, col2 = st.columns(2)

                with col1:
                    st.write(f"**ID –≥—Ä–∞–Ω—Ç–∞:** {grant_id}")
                    st.write(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {grant_name}")
                    st.write(f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}")
                    st.write(f"**Telegram ID:** {review.get('user_id', 'N/A')}")

                with col2:
                    st.write(f"**–û—Ü–µ–Ω–∫–∞ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞:** {score}/10")
                    st.write(f"**–°—Ç–∞—Ç—É—Å:** {review.get('final_status', 'N/A')}")
                    st.write(f"**–°–æ–∑–¥–∞–Ω–æ:** {review.get('created_at', 'N/A')}")
                    st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {review.get('updated_at', 'N/A')}")

                # Show review feedback
                if review.get('review_feedback'):
                    st.markdown("**–ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞:**")
                    st.text_area(
                        "Review",
                        value=review['review_feedback'],
                        height=200,
                        key=f"review_{grant_id}",
                        disabled=True,
                        label_visibility="collapsed"
                    )

                # Action buttons
                col1, col2, col3 = st.columns(3)

                with col1:
                    if st.button("üìÑ –ó–∞—è–≤–∫–∞", key=f"view_grant_{grant_id}"):
                        st.session_state.selected_grant_id = grant_id
                        st.rerun()

                with col2:
                    if st.button("üìã ID", key=f"copy_grant_{grant_id}"):
                        st.code(grant_id)
                        st.success("ID –ø–æ–∫–∞–∑–∞–Ω!")

                with col3:
                    if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç", key=f"export_review_{grant_id}"):
                        st.info("–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏ (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")

    except Exception as e:
        logger.error(f"Error loading reviews: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Ü–µ–Ω–∑–∏–π: {e}")


# =============================================================================
# AI AGENT SETTINGS UI COMPONENTS
# =============================================================================

def render_interviewer_settings():
    """Render Interviewer Agent settings UI"""
    if not AGENT_SETTINGS_AVAILABLE:
        st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    st.markdown("---")
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ –∏–Ω—Ç–µ—Ä–≤—å—é")

    # Get current settings
    current_settings = get_agent_settings('interviewer')
    current_mode = current_settings.get('mode', 'structured')

    # Mode selection
    mode_icon_structured = "üìã"
    mode_icon_ai = "ü§ñ"

    mode = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–∞:",
        options=['structured', 'ai_powered'],
        format_func=lambda x: {
            'structured': f'{mode_icon_structured} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (24 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞)',
            'ai_powered': f'{mode_icon_ai} AI-Powered (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ Claude Code)'
        }[x],
        index=0 if current_mode == 'structured' else 1,
        key='interviewer_mode_select'
    )

    # Info about selected mode
    if mode == 'structured':
        st.info("üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ 24 —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã interview_questions")
    else:
        st.info("ü§ñ **AI-Powered —Ä–µ–∂–∏–º:** Claude Code –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    # Save and Reset buttons
    col1, col2, col3 = st.columns([1, 1, 4])

    with col1:
        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key='save_interviewer'):
            if execute_update:
                try:
                    success = save_agent_settings('interviewer', mode=mode)
                    if success:
                        st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.error("‚ö†Ô∏è execute_update –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    with col2:
        if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key='reset_interviewer'):
            if execute_update:
                try:
                    success = save_agent_settings('interviewer', mode='structured')
                    if success:
                        st.success("‚úÖ –°–±—Ä–æ—à–µ–Ω–æ –∫ structured —Ä–µ–∂–∏–º—É")
                        st.rerun()
                    else:
                        st.error("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                st.error("‚ö†Ô∏è execute_update –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def render_writer_settings():
    """Render Writer Agent settings UI"""
    if not AGENT_SETTINGS_AVAILABLE:
        st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    st.markdown("---")
    st.markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞")

    # Get current settings
    current_settings = get_agent_settings('writer')
    current_provider = current_settings.get('provider', 'claude_code')  # Default: Claude Code
    config_data = current_settings.get('config', {})

    # Provider selection
    gigachat_icon = "üá∑üá∫"
    claude_icon = "üá∫üá∏"

    provider = st.radio(
        "LLM –ü—Ä–æ–≤–∞–π–¥–µ—Ä:",
        options=['gigachat', 'claude_code'],
        format_func=lambda x: {
            'gigachat': f'{gigachat_icon} GigaChat (—Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç, –±—ã—Å—Ç—Ä–æ)',
            'claude_code': f'{claude_icon} Claude Code (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ + —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)'
        }[x],
        index=0 if current_provider == 'gigachat' else 1,
        key='writer_provider'
    )

    # Temperature slider
    temperature = st.slider(
        "Temperature (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å):",
        min_value=0.0,
        max_value=1.0,
        value=config_data.get('temperature', 0.7),
        step=0.1,
        key='writer_temperature',
        help="0.0 = —Ç–æ—á–Ω—ã–π, 1.0 = –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"
    )

    # Save button
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key='save_writer'):
        if execute_update:
            try:
                success = save_agent_settings(
                    'writer',
                    provider=provider,
                    config={'temperature': temperature}
                )
                if success:
                    st.success("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Writer —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.error("‚ö†Ô∏è execute_update –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def render_agent_prompts(agent_name: str, display_name: str):
    """
    Render prompt management UI for an agent

    Args:
        agent_name: Agent identifier (auditor, planner, writer, researcher)
        display_name: Human-readable name for display
    """
    if not PROMPT_MANAGER_AVAILABLE:
        st.info("üìù –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    st.markdown("---")
    st.markdown(f"### üìù –ü—Ä–æ–º–ø—Ç—ã {display_name}")

    try:
        # Get all prompts for this agent
        prompts = get_agent_prompts(agent_name)

        if not prompts:
            st.info(f"–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è {display_name} –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return

        # Group prompts by type
        prompts_by_type = {}
        for prompt in prompts:
            prompt_type = prompt.get('prompt_type', 'general')
            if prompt_type not in prompts_by_type:
                prompts_by_type[prompt_type] = []
            prompts_by_type[prompt_type].append(prompt)

        # Display prompts grouped by type
        for prompt_type, type_prompts in prompts_by_type.items():
            st.markdown(f"#### üìÑ {prompt_type.replace('_', ' ').title()}")

            for prompt in type_prompts:
                prompt_key = prompt.get('prompt_key', '')
                is_default = prompt.get('is_default', False)
                version = prompt.get('version', 1)

                default_badge = " üåü [DEFAULT]" if is_default else ""
                version_badge = f"v{version}"

                with st.expander(f"üìã {prompt_key} {version_badge}{default_badge}"):
                    # Metadata
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write(f"**–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** {prompt.get('llm_provider', 'N/A')}")
                    with col2:
                        st.write(f"**–ú–æ–¥–µ–ª—å:** {prompt.get('model', 'N/A') or 'default'}")
                    with col3:
                        st.write(f"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** {prompt.get('usage_count', 0)}")

                    col4, col5, col6 = st.columns(3)
                    with col4:
                        st.write(f"**Temperature:** {prompt.get('temperature', 0.7)}")
                    with col5:
                        st.write(f"**Max tokens:** {prompt.get('max_tokens', 4000)}")
                    with col6:
                        avg_score = prompt.get('avg_score')
                        score_text = f"{avg_score:.2f}" if avg_score else "N/A"
                        st.write(f"**–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:** {score_text}")

                    # Description
                    if prompt.get('prompt_description'):
                        st.info(prompt.get('prompt_description'))

                    # Variables
                    variables = prompt.get('variables')
                    if variables:
                        if isinstance(variables, str):
                            try:
                                variables = json.loads(variables)
                            except:
                                variables = None

                        if variables:
                            st.markdown("**–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞:**")
                            st.json(variables)

                    # Prompt text editor
                    st.markdown("**–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞:**")
                    prompt_text = st.text_area(
                        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç:",
                        value=prompt.get('prompt_text', ''),
                        height=300,
                        key=f"edit_{prompt_key}",
                        help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {variable_name} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
                    )

                    # Action buttons
                    col1, col2, col3, col4 = st.columns(4)

                    with col1:
                        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{prompt_key}"):
                            try:
                                # Save updated prompt (increments version)
                                new_id = save_prompt(
                                    agent_name=agent_name,
                                    prompt_type=prompt.get('prompt_type'),
                                    prompt_text=prompt_text,
                                    prompt_key=prompt_key,
                                    description=prompt.get('prompt_description'),
                                    variables=variables,
                                    llm_provider=prompt.get('llm_provider', 'gigachat'),
                                    model=prompt.get('model'),
                                    temperature=float(prompt.get('temperature', 0.7)),
                                    max_tokens=int(prompt.get('max_tokens', 4000)),
                                    is_default=is_default,
                                    updated_by='admin'
                                )

                                if new_id:
                                    st.success(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! (v{version + 1})")
                                    st.rerun()
                                else:
                                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                    with col2:
                        if not is_default:
                            if st.button("üåü –°–¥–µ–ª–∞—Ç—å default", key=f"default_{prompt_key}"):
                                try:
                                    success = set_default_prompt(prompt_key)
                                    if success:
                                        st.success("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ default!")
                                        st.rerun()
                                    else:
                                        st.error("‚ùå –û—à–∏–±–∫–∞")
                                except Exception as e:
                                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

                    with col3:
                        if st.button("üìä –¢–µ—Å—Ç", key=f"test_{prompt_key}"):
                            st.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

                    with col4:
                        if st.button("üìú –ò—Å—Ç–æ—Ä–∏—è", key=f"history_{prompt_key}"):
                            st.info(f"–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π: v1 ‚Üí v{version}")

    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        import traceback
        st.code(traceback.format_exc())


def render_generic_agent_settings(agent_name: str, display_name: str):
    """
    Render universal agent settings UI for Auditor/Planner/Researcher

    Args:
        agent_name: Agent identifier (auditor, planner, researcher)
        display_name: Human-readable name for display
    """
    if not AGENT_SETTINGS_AVAILABLE:
        st.warning("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return

    st.markdown("---")
    st.markdown(f"### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {display_name}")

    # Get current settings
    current_settings = get_agent_settings(agent_name)
    current_provider = current_settings.get('provider', 'claude_code')  # Default: Claude Code
    config_data = current_settings.get('config', {})

    # Provider select
    gigachat_icon = "üá∑üá∫"
    claude_icon = "üá∫üá∏"

    provider = st.selectbox(
        "LLM –ü—Ä–æ–≤–∞–π–¥–µ—Ä:",
        options=['gigachat', 'claude_code'],
        format_func=lambda x: f'{gigachat_icon} GigaChat' if x == 'gigachat' else f'{claude_icon} Claude Code',
        index=0 if current_provider == 'gigachat' else 1,
        key=f'{agent_name}_provider'
    )

    # Temperature slider
    temperature = st.slider(
        "Temperature:",
        min_value=0.0,
        max_value=1.0,
        value=config_data.get('temperature', 0.5),
        step=0.1,
        key=f'{agent_name}_temperature',
        help="–ö–æ–Ω—Ç—Ä–æ–ª—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"
    )

    # Save button
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f'save_{agent_name}'):
        if execute_update:
            try:
                success = save_agent_settings(
                    agent_name,
                    provider=provider,
                    config={'temperature': temperature}
                )
                if success:
                    st.success(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ {display_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        else:
            st.error("‚ö†Ô∏è execute_update –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


def render_prompts_editor_tab():
    """Render Prompts Editor tab - NEW for database prompt management"""
    st.markdown("### üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î")
    st.markdown("**–û–ø–∏—Å–∞–Ω–∏–µ:** –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∞–≥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ goal, backstory, LLM prompts, queries.")

    if not PROMPT_EDITOR_AVAILABLE or not PromptEditor:
        st.error("‚ùå PromptEditor –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç utils.prompt_editor")
        return

    # Initialize AdminDatabase
    try:
        db = AdminDatabase()
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return

    # Create PromptEditor instance
    editor = PromptEditor(db)

    # Bulk operations panel
    with st.expander("üîß –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", expanded=False):
        editor.render_bulk_operations()

    st.markdown("---")

    # Search panel
    with st.expander("üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º", expanded=False):
        selected_agent = editor.render_prompt_search()
        if selected_agent:
            st.session_state['selected_agent_for_edit'] = selected_agent

    st.markdown("---")

    # Agent selection
    st.markdown("### –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")

    agent_options = {
        'interviewer': 'üìù Interviewer Agent (13 –ø—Ä–æ–º–ø—Ç–æ–≤)',
        'auditor': '‚úÖ Auditor Agent (6 –ø—Ä–æ–º–ø—Ç–æ–≤)',
        'researcher_v2': 'üîç Researcher V2 Agent (31 –ø—Ä–æ–º–ø—Ç)',
        'writer_v2': '‚úçÔ∏è Writer V2 Agent (4 –ø—Ä–æ–º–ø—Ç–∞)',
        'reviewer': 'üîé Reviewer Agent (2 –ø—Ä–æ–º–ø—Ç–∞)'
    }

    # Use session state for selected agent (from search or dropdown)
    if 'selected_agent_for_edit' not in st.session_state:
        st.session_state['selected_agent_for_edit'] = 'interviewer'

    selected_agent = st.selectbox(
        "–ê–≥–µ–Ω—Ç:",
        options=list(agent_options.keys()),
        format_func=lambda x: agent_options[x],
        key='agent_selector',
        index=list(agent_options.keys()).index(st.session_state.get('selected_agent_for_edit', 'interviewer'))
    )

    st.markdown("---")

    # Render prompts editor for selected agent
    try:
        editor.render_agent_prompts_editor(selected_agent)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        import traceback
        with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏"):
            st.code(traceback.format_exc())

    # Help section
    with st.expander("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –ø—Ä–æ–º–ø—Ç–æ–≤"):
        st.markdown("""
        **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä:**

        1. **–í—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞:** –í—ã–±–µ—Ä–∏—Ç–µ –∞–≥–µ–Ω—Ç–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        2. **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞:** –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        3. **–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `{VARIABLE_NAME}` –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        4. **–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:** –ù–∞–∂–º–∏—Ç–µ "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        5. **–°–±—Ä–æ—Å –∫–µ—à–∞:** –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–µ—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è

        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–ø—Ä–∏–º–µ—Ä—ã):**
        - `{–ü–†–û–ë–õ–ï–ú–ê}` - –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –∞–Ω–∫–µ—Ç—ã
        - `{–†–ï–ì–ò–û–ù}` - –≥–µ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        - `{–ë–Æ–î–ñ–ï–¢}` - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞
        - `{–°–†–û–ö}` - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
        - `{project_name}` - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        - `{application_text}` - —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏

        **–¢–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤:**
        - `goal` - —Ü–µ–ª—å –∞–≥–µ–Ω—Ç–∞ (1 –ø—Ä–æ–º–ø—Ç)
        - `backstory` - –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–≥–µ–Ω—Ç–∞ (1 –ø—Ä–æ–º–ø—Ç)
        - `llm_*` - –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è LLM –∑–∞–ø—Ä–æ—Å–æ–≤ (Auditor: 4 –ø—Ä–æ–º–ø—Ç–∞)
        - `fallback_question` - –∑–∞–ø–∞—Å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (Interviewer: 10 –ø—Ä–æ–º–ø—Ç–æ–≤)
        - `block*_query` - —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (Researcher: 27 –ø—Ä–æ–º–ø—Ç–æ–≤)
        - `stage*` - –ø—Ä–æ–º–ø—Ç—ã —ç—Ç–∞–ø–æ–≤ (Writer: 2 –ø—Ä–æ–º–ø—Ç–∞)

        **–í–∞–∂–Ω–æ:**
        - –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        - –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã
        - –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è hardcoded –≤–µ—Ä—Å–∏—è (fallback)
        - –ö–µ—à –ø—Ä–æ–º–ø—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        """)


# =============================================================================
# MAIN PAGE
# =============================================================================

def render_stage_summary():
    """Render stage funnel summary"""
    st.markdown("### üîÑ –í–æ—Ä–æ–Ω–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫")

    try:
        # Count all active sessions by stage (for funnel metrics)
        count_query = """
            SELECT
                COALESCE(s.current_step, 'interviewer') as current_stage,
                COUNT(*) as count
            FROM sessions s
            WHERE s.anketa_id IS NOT NULL
              AND s.status != 'archived'
            GROUP BY s.current_step
        """
        stage_results = execute_query(count_query) or []

        # Build stage counts
        stage_counts = {'interviewer': 0, 'auditor': 0, 'researcher': 0, 'writer': 0, 'reviewer': 0}
        for row in stage_results:
            stage = row.get('current_stage', 'interviewer')
            count = row.get('count', 0)
            # Handle typos and old statuses
            if stage == 'interview':  # Typo fix
                stage = 'interviewer'
            elif stage == 'completed':  # Completed counts as reviewer
                stage = 'reviewer'

            if stage in stage_counts:
                stage_counts[stage] += count  # Use += to handle duplicates

        # Get recent sessions for display
        sessions_query = """
            SELECT
                s.anketa_id,
                COALESCE(s.current_step, 'interviewer') as current_stage,
                u.username,
                s.started_at,
                s.last_activity
            FROM sessions s
            LEFT JOIN users u ON s.telegram_id = u.telegram_id
            WHERE s.anketa_id IS NOT NULL
              AND s.status != 'archived'
            ORDER BY COALESCE(s.last_activity, s.started_at) DESC
            LIMIT 10
        """
        sessions = execute_query(sessions_query) or []

        if sessions or any(stage_counts.values()):
            # Show summary metrics (from ALL active sessions)
            col1, col2, col3, col4, col5 = st.columns(5)

            with col1:
                st.metric("üìù Interviewer", stage_counts['interviewer'])
            with col2:
                st.metric("‚úÖ Auditor", stage_counts['auditor'])
            with col3:
                st.metric("üîç Researcher", stage_counts['researcher'])
            with col4:
                st.metric("‚úçÔ∏è Writer", stage_counts['writer'])
            with col5:
                st.metric("üîé Reviewer", stage_counts['reviewer'])

            st.markdown("---")

            # Show recent sessions with stage badges
            st.markdown("#### üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

            for session in sessions[:5]:
                anketa_id = session.get('anketa_id')
                current_stage = session.get('current_stage', 'interviewer')
                agents_passed = session.get('agents_passed', [])
                username = session.get('username', 'Unknown')

                if STAGE_TRACKER_AVAILABLE:
                    # Use stage tracker for nice badge
                    badge = format_stage_progress_compact(anketa_id, current_stage, agents_passed)
                    st.markdown(f"**{badge}** - @{username}")
                else:
                    # Fallback display
                    stage_emoji = {'interviewer': 'üìù', 'auditor': '‚úÖ', 'researcher': 'üîç', 'writer': '‚úçÔ∏è', 'reviewer': 'üîé'}.get(current_stage, '‚ùì')
                    st.markdown(f"**{stage_emoji} {anketa_id}** - Stage: {current_stage} - @{username}")

        else:
            st.info("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    except Exception as e:
        logger.error(f"Error rendering stage summary: {e}")
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏: {e}")


def main():
    """Main page rendering"""
    if render_page_header:
        render_page_header("AI –ê–≥–µ–Ω—Ç—ã", "ü§ñ", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã")
    else:
        st.title("ü§ñ AI –ê–≥–µ–Ω—Ç—ã")
        st.markdown("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ AI –∞–≥–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã")

    # Stage funnel summary
    render_stage_summary()

    st.markdown("---")

    # MAIN TABS (5 agents + Prompts Editor)
    agent_tabs = ["Interviewer", "Auditor", "Researcher", "Writer", "Reviewer", "–†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤"]
    agent_icons = ["üìù", "‚úÖ", "üîç", "‚úçÔ∏è", "üîé", "‚öôÔ∏è"]

    tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([f"{icon} {name}" for icon, name in zip(agent_icons, agent_tabs)])

    with tab1:
        render_interviewer_tab()

    with tab2:
        render_auditor_tab()

    with tab3:
        render_researcher_tab()

    with tab4:
        render_writer_tab()

    with tab5:
        render_reviewer_tab()

    with tab6:
        render_prompts_editor_tab()

    # Planner tab hidden temporarily
    # with tab7:
    #     render_planner_tab()

    # Footer
    st.markdown("---")
    st.caption("AI Agents v3.0.0 | –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–∑ 5 –∞—Ä—Ö–∏–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    st.caption("–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Pipeline Dashboard")


if __name__ == "__main__":
    main()
