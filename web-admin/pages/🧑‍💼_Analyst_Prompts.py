#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Auditor prompts management page for GrantService admin panel
"""

import streamlit as st
import sys
import os

# Simple imports without path manipulation
# The environment will be set up by the launcher

# Authorization check
try:
    from utils.auth import is_user_authorized
    if not is_user_authorized():
        st.error("‚õî –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω / Not authorized")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ / Please use the bot to get a token")
        st.stop()
except ImportError as e:
    st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ / Import error: {e}")
    st.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ launcher.py / Run via launcher.py")
    st.stop()

Auditor prompts management page for GrantService admin panel
"""

import streamlit as st
import sys
import json
from datetime import datetime

import streamlit as st
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)  # web-admin
grandparent_dir = os.path.dirname(parent_dir)  # GrantService
sys.path.insert(0, grandparent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ config –∏ data
sys.path.insert(0, parent_dir)  # –î–ª—è –∏–º–ø–æ—Ä—Ç–∞ utils

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
from utils.auth import is_user_authorized

if not is_user_authorized():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    import importlib.util
    spec = importlib.util.spec_from_file_location(
        "login_page", 
        os.path.join(current_dir, "üîê_–í—Ö–æ–¥.py")
    )
    login_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(login_module)
    login_module.show_login_page()
    st.stop()
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(grandparent_dir)

from utils.database import AdminDatabase
from data.database import insert_agent_prompt, update_agent_prompt, delete_agent_prompt, get_agent_prompts
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger('analyst_prompts')

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
st.title("üîç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
db = AdminDatabase()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
prompts = get_agent_prompts('auditor')

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
st.subheader("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç")

with st.form("new_auditor_prompt_form"):
    col1, col2 = st.columns(2)
    
    with col1:
        prompt_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞", key="new_auditor_name")
        prompt_type = st.selectbox(
            "–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞",
            ["task", "system", "context"],
            key="new_auditor_type"
        )
        order_num = st.number_input("–ü–æ—Ä—è–¥–æ–∫", min_value=1, value=1, key="new_auditor_order")
    
    with col2:
        temperature = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 2.0, 0.7, 0.1, key="new_auditor_temp")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ç–æ–∫–µ–Ω–æ–≤
        model_name = st.selectbox(
            "–ú–æ–¥–µ–ª—å",
            ["GigaChat-Pro", "sonar", "sonar-pro", "reasoning-pro"],
            help="GigaChat-Pro: –¥–æ 8K —Ç–æ–∫–µ–Ω–æ–≤, sonar: –¥–æ 4K —Ç–æ–∫–µ–Ω–æ–≤, sonar-pro/reasoning-pro: –¥–æ 32K —Ç–æ–∫–µ–Ω–æ–≤",
            key="new_auditor_model"
        )
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏
        if model_name == "GigaChat-Pro":
            max_tokens = st.number_input(
                "–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 
                min_value=100, 
                max_value=8000, 
                value=2000, 
                help="GigaChat-Pro: –º–∞–∫—Å–∏–º—É–º 8,000 —Ç–æ–∫–µ–Ω–æ–≤",
                key="new_auditor_tokens"
            )
        elif model_name == "sonar":
            max_tokens = st.number_input(
                "–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 
                min_value=100, 
                max_value=4000, 
                value=2000, 
                help="sonar: –º–∞–∫—Å–∏–º—É–º 4,000 —Ç–æ–∫–µ–Ω–æ–≤",
                key="new_auditor_tokens"
            )
        else:  # sonar-pro, reasoning-pro
            max_tokens = st.number_input(
                "–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", 
                min_value=100, 
                max_value=32000, 
                value=4000, 
                help="sonar-pro/reasoning-pro: –º–∞–∫—Å–∏–º—É–º 32,000 —Ç–æ–∫–µ–Ω–æ–≤",
                key="new_auditor_tokens"
            )
    
    prompt_content = st.text_area(
        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞",
        height=200,
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞...",
        key="new_auditor_content"
    )
    
    is_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=True, key="new_auditor_active")
    
    submitted = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç")
    
    if submitted:
        if prompt_name and prompt_content:
            try:
                insert_agent_prompt(
                    agent_type='auditor',
                    prompt_name=prompt_name,
                    prompt_content=prompt_content,
                    prompt_type=prompt_type,
                    order_num=order_num,
                    temperature=temperature,
                    max_tokens=max_tokens,
                    model_name=model_name,
                    is_active=is_active
                )
                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                st.rerun()
            except Exception as e:
                logger.error(f"Error creating analyst prompt: {e}", exc_info=True)
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            st.error("‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

# –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
st.subheader("üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã")

if prompts:
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
    prompt_types = list(set([p['prompt_type'] for p in prompts]))
    selected_type = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É", ["–í—Å–µ"] + prompt_types)
    
    if selected_type != "–í—Å–µ":
        filtered_prompts = [p for p in prompts if p['prompt_type'] == selected_type]
    else:
        filtered_prompts = prompts
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É
    filtered_prompts.sort(key=lambda x: x['order_num'])
    
    for i, prompt in enumerate(filtered_prompts):
        with st.expander(f"{prompt['prompt_name']} ({prompt['prompt_type']})"):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                st.code(prompt['prompt_content'])
                
                st.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                params_text = f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {prompt['temperature']}, "
                params_text += f"–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {prompt['max_tokens']}, "
                params_text += f"–ú–æ–¥–µ–ª—å: {prompt['model_name']}, "
                params_text += f"–ü–æ—Ä—è–¥–æ–∫: {prompt['order_num']}"
                st.info(params_text)
            
            with col2:
                status_color = "üü¢" if prompt['is_active'] else "üî¥"
                st.write(f"{status_color} **–°—Ç–∞—Ç—É—Å:** {'–ê–∫—Ç–∏–≤–µ–Ω' if prompt['is_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                
                st.write(f"**ID:** {prompt['id']}")
                st.write(f"**–°–æ–∑–¥–∞–Ω:** {prompt['created_at']}")
                st.write(f"**–û–±–Ω–æ–≤–ª–µ–Ω:** {prompt['updated_at']}")
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_auditor_{prompt['id']}"):
                    st.session_state.editing_auditor_prompt = prompt['id']
                    st.rerun()
            
            with col2:
                if st.button("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"toggle_auditor_{prompt['id']}"):
                    try:
                        new_status = not prompt['is_active']
                        update_agent_prompt(
                            prompt['id'],
                            is_active=new_status
                        )
                        st.success("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")
                        st.rerun()
                    except Exception as e:
                        logger.error(f"Error updating analyst prompt status: {e}", exc_info=True)
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
            with col3:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_auditor_{prompt['id']}"):
                    try:
                        delete_agent_prompt(prompt['id'])
                        st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —É–¥–∞–ª–µ–Ω!")
                        st.rerun()
                    except Exception as e:
                        logger.error(f"Error deleting analyst prompt: {e}", exc_info=True)
                        st.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            
            # –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.session_state.get('editing_auditor_prompt') == prompt['id']:
                st.subheader("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞")
                
                with st.form(f"edit_auditor_form_{prompt['id']}"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        edit_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=prompt['prompt_name'], key=f"edit_auditor_name_{prompt['id']}")
                        edit_type = st.selectbox(
                            "–¢–∏–ø",
                            ["task", "system", "context"],
                            index=["task", "system", "context"].index(prompt['prompt_type']),
                            key=f"edit_auditor_type_{prompt['id']}"
                        )
                        edit_order = st.number_input("–ü–æ—Ä—è–¥–æ–∫", min_value=1, value=prompt['order_num'], key=f"edit_auditor_order_{prompt['id']}")
                    
                    with col2:
                        edit_temp = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 0.0, 2.0, prompt['temperature'], 0.1, key=f"edit_auditor_temp_{prompt['id']}")
                        edit_tokens = st.number_input("–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤", min_value=100, value=prompt['max_tokens'], key=f"edit_auditor_tokens_{prompt['id']}")
                        edit_model = st.text_input("–ú–æ–¥–µ–ª—å", value=prompt['model_name'], key=f"edit_auditor_model_{prompt['id']}")
                    
                    edit_content = st.text_area(
                        "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ",
                        value=prompt['prompt_content'],
                        height=200,
                        key=f"edit_auditor_content_{prompt['id']}"
                    )
                    
                    edit_active = st.checkbox("–ê–∫—Ç–∏–≤–µ–Ω", value=prompt['is_active'], key=f"edit_auditor_active_{prompt['id']}")
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å"):
                            try:
                                update_agent_prompt(
                                    prompt['id'],
                                    prompt_name=edit_name,
                                    prompt_content=edit_content,
                                    prompt_type=edit_type,
                                    order_num=edit_order,
                                    temperature=edit_temp,
                                    max_tokens=edit_tokens,
                                    model_name=edit_model,
                                    is_active=edit_active
                                )
                                st.success("‚úÖ –ü—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!")
                                del st.session_state.editing_auditor_prompt
                                st.rerun()
                            except Exception as e:
                                logger.error(f"Error updating analyst prompt: {e}", exc_info=True)
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                    
                    with col2:
                        if st.form_submit_button("‚ùå –û—Ç–º–µ–Ω–∞"):
                            del st.session_state.editing_auditor_prompt
                            st.rerun()
else:
    st.info("üìù –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

# –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç
st.subheader("üì§ –ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç")

col1, col2 = st.columns(2)

with col1:
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤"):
        if prompts:
            # –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "prompts": prompts,
                "export_date": datetime.now().isoformat()
            }
            
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å JSON",
                data=json.dumps(export_data, indent=2, ensure_ascii=False),
                file_name=f"auditor_prompts_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
        else:
            st.warning("–ù–µ—Ç –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

with col2:
    uploaded_file = st.file_uploader("üì§ –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–º–ø—Ç–æ–≤", type=['json'])
    
    if uploaded_file is not None:
        try:
            import_data = json.load(uploaded_file)
            
            if st.button("üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                imported_count = 0
                
                for prompt_data in import_data.get('prompts', []):
                    try:
                        insert_agent_prompt(
                            agent_type='auditor',
                            prompt_name=prompt_data['prompt_name'],
                            prompt_content=prompt_data['prompt_content'],
                            prompt_type=prompt_data['prompt_type'],
                            order_num=prompt_data['order_num'],
                            temperature=prompt_data['temperature'],
                            max_tokens=prompt_data['max_tokens'],
                            model_name=prompt_data['model_name'],
                            is_active=prompt_data['is_active']
                        )
                        imported_count += 1
                    except Exception as e:
                        logger.error(f"Error importing analyst prompt: {e}", exc_info=True)
                        st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–æ–º–ø—Ç–∞: {e}")
                
                st.success(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø—Ä–æ–º–ø—Ç–æ–≤!")
                st.rerun()
                
        except Exception as e:
            logger.error(f"Error reading import file: {e}", exc_info=True)
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}") 