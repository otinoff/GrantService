#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
"""

import streamlit as st
import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('/var/GrantService')

from data.database import get_agent_prompts, get_researcher_logs
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PerplexityService –Ω–∞–ø—Ä—è–º—É—é
import sys
sys.path.append('/var/GrantService/telegram-bot')
from services.perplexity_service import PerplexityService

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
perplexity_service = PerplexityService()

st.set_page_config(
    page_title="üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤",
    page_icon="üß™",
    layout="wide"
)

st.title("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è")
st.markdown("–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–ø—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ Perplexity API")

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=300)
def get_researcher_prompts():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è"""
    try:
        prompts = get_agent_prompts('researcher')
        return prompts
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return []

prompts = get_researcher_prompts()

# –°–µ–∫—Ü–∏—è 1: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
st.markdown("---")
st.subheader("üìù –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å")

col1, col2 = st.columns([3, 1])

with col1:
    user_query = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è Perplexity",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞–π–¥–∏ –≥—Ä–∞–Ω—Ç—ã –¥–ª—è –ù–ö–û –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞ 2025 –≥–æ–¥",
        height=120
    )

with col2:
    st.markdown("**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**")
    model = st.selectbox(
        "–ú–æ–¥–µ–ª—å:",
        ["sonar", "sonar-pro", "reasoning-pro"],
        index=0,
        help="sonar - —Å–∞–º–∞—è —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è, reasoning-pro - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"
    )
    
    st.markdown("**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:**")
    if model == "sonar":
        st.info("üí∞ –≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å\n‚ö° –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã\nüîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\nüíµ $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    elif model == "sonar-pro":
        st.info("üß† –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å\nüìä –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\nüí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\nüíµ $3/1M —Ç–æ–∫–µ–Ω–æ–≤")
    elif model == "reasoning-pro":
        st.info("ü§ñ –ú–æ–¥–µ–ª—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π\nüß© –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞\nüí∏ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å\nüíµ $15/1M —Ç–æ–∫–µ–Ω–æ–≤")

# –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
if st.button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Perplexity", type="primary", disabled=not user_query.strip()):
    if user_query.strip():
        with st.spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Perplexity..."):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = perplexity_service.search_grants(
                    user_query, 
                    user_id=1, 
                    session_id=1
                )
                
                if result and ('answer' in result or 'grants_info' in result):
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.markdown("---")
                    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç")
                    
                    col1, col2 = st.columns([2, 1])
                    
                    with col1:
                        st.markdown("**–û—Ç–≤–µ—Ç:**")
                        answer_text = result.get('answer') or result.get('grants_info', '–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        st.markdown(answer_text)
                        
                        if 'sources' in result and result['sources']:
                            st.markdown("**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                            for i, source in enumerate(result['sources'][:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                                st.markdown(f"{i+1}. [{source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}]({source.get('url', '#')})")
                    
                    with col2:
                        st.markdown("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:**")
                        if 'usage' in result:
                            usage = result['usage']
                            st.metric("–í—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", usage.get('input_tokens', 0))
                            st.metric("–í—ã—Ö–æ–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã", usage.get('output_tokens', 0))
                            st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å", f"${usage.get('cost', 0):.6f}")
                        
                        st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                        st.markdown(f"- –ú–æ–¥–µ–ª—å: {model}")
                        st.markdown(f"- –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
                
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Perplexity")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# –°–µ–∫—Ü–∏—è 2: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
st.markdown("---")
st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
try:
    logs = get_researcher_logs(limit=10)
    
    if logs:
        for i, log in enumerate(logs):
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            
            with col1:
                query_preview = log['query_text'][:50] + "..." if len(log['query_text']) > 50 else log['query_text']
                st.markdown(f"**{query_preview}**")
                st.caption(f"–í—Ä–µ–º—è: {log['created_at']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
                try:
                    usage_stats_raw = log.get('usage_stats', '{}')
                    if isinstance(usage_stats_raw, dict):
                        usage_stats = usage_stats_raw
                    else:
                        usage_stats = json.loads(usage_stats_raw)
                    model = usage_stats.get('model', 'unknown')
                    st.caption(f"–ú–æ–¥–µ–ª—å: {model}")
                except:
                    st.caption("–ú–æ–¥–µ–ª—å: unknown")
            
            with col2:
                st.markdown(f"**–°—Ç–æ–∏–º–æ—Å—Ç—å:** ${log.get('cost', 0):.6f}")
            
            with col3:
                if log.get('status') == 'success':
                    st.success("‚úÖ")
                else:
                    st.error("‚ùå")
            
            with col4:
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
                if st.button("üîç –î–µ—Ç–∞–ª–∏", key=f"details_{i}"):
                    st.session_state[f"show_details_{i}"] = not st.session_state.get(f"show_details_{i}", False)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
            if st.session_state.get(f"show_details_{i}", False):
                with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ", expanded=True):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.markdown("**üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**")
                        st.code(log['query_text'], language="text")
                        
                        st.markdown("**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**")
                        try:
                            usage_stats_raw = log.get('usage_stats', '{}')
                            if isinstance(usage_stats_raw, dict):
                                usage_stats = usage_stats_raw
                            else:
                                usage_stats = json.loads(usage_stats_raw)
                            st.json(usage_stats)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                    
                    with col2:
                        st.markdown("**üì• –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API:**")
                        try:
                            response_data = None
                            if log.get('perplexity_response'):
                                response_data = json.loads(log.get('perplexity_response', '{}'))
                            elif log.get('result'):
                                response_data = json.loads(log.get('result', '{}'))
                            else:
                                response_data = {}
                            
                            st.json(response_data)
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
                        
                        if log.get('error_message'):
                            st.markdown("**‚ùå –û—à–∏–±–∫–∞:**")
                            st.error(log['error_message'])
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    try:
                        sources_raw = log.get('sources', '[]')
                        if isinstance(sources_raw, list):
                            sources = sources_raw
                        else:
                            sources = json.loads(sources_raw)
                        
                        if sources:
                            st.markdown("**üîó –ò—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                            for j, source in enumerate(sources[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                                title = source.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                                url = source.get('url', '#')
                                st.markdown(f"{j+1}. [{title}]({url})")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
    else:
        st.info("üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞")
        
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
st.markdown("---")
st.subheader("üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("**sonar (—ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è):**")
    st.markdown("- –í—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –í—ã—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –ü–æ–∏—Å–∫: $5/1K –∑–∞–ø—Ä–æ—Å–æ–≤")

with col2:
    st.markdown("**sonar-pro (—É–ª—É—á—à–µ–Ω–Ω–∞—è):**")
    st.markdown("- –í—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –í—ã—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –ü–æ–∏—Å–∫: $5/1K –∑–∞–ø—Ä–æ—Å–æ–≤")

with col3:
    st.markdown("**reasoning-pro (—Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è):**")
    st.markdown("- –í—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –í—ã—Ö–æ–¥: $1/1M —Ç–æ–∫–µ–Ω–æ–≤")
    st.markdown("- –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: $12/1K")

st.info("üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å 'sonar' –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ú–æ–¥–µ–ª—å 'reasoning-pro' –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á.") 