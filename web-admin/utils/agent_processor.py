#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Agent Queue Processor
=====================
–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞

Author: Claude Code
Created: 2025-10-11
"""

import sys
import os
import logging
import traceback
import time
from typing import Dict, List, Any, Optional
from datetime import datetime
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'agents'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'data'))

from utils.postgres_helper import execute_query, execute_update
from data.database.models import GrantServiceDatabase

logger = logging.getLogger(__name__)


async def _send_audit_pdf_to_admin(
    session_id: int,
    anketa_id: str,
    audit_result: Dict[str, Any],
    average_score: float,
    approval_status: str
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–¥–∏—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç

    Args:
        session_id: ID —Å–µ—Å—Å–∏–∏
        anketa_id: ID –∞–Ω–∫–µ—Ç—ã
        audit_result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        average_score: –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ (1-10)
        approval_status: –°—Ç–∞—Ç—É—Å –æ–¥–æ–±—Ä–µ–Ω–∏—è (approved/needs_revision/rejected)
    """
    try:
        logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é audit PDF –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF
        audit_data = {
            'session_id': session_id,
            'anketa_id': anketa_id,
            'completed_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'overall_score': audit_result.get('overall_score', average_score),
            'average_score': average_score,
            'approval_status': approval_status,
            'completeness_score': audit_result.get('completeness_score', 70),
            'quality_score': audit_result.get('quality_score', 70),
            'compliance_score': audit_result.get('compliance_score', 70),
            'readiness_status': audit_result.get('readiness_status', '–ù–µ –≥–æ—Ç–æ–≤–æ'),
            'recommendations': audit_result.get('recommendations', []),
            'detailed_analysis': audit_result.get('detailed_analysis', ''),
            'strengths': audit_result.get('strengths', []),
            'weaknesses': audit_result.get('weaknesses', [])
        }

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è PDF –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: score={average_score}, status={approval_status}")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ telegram-bot/utils
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'telegram-bot'))
        from utils.stage_report_generator import generate_stage_pdf

        pdf_bytes = generate_stage_pdf('audit', audit_data)
        logger.info(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(pdf_bytes)} bytes")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        from utils.admin_notifications import AdminNotifier

        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return

        notifier = AdminNotifier(bot_token)

        await notifier.send_stage_completion_pdf(
            stage='audit',
            pdf_bytes=pdf_bytes,
            filename=f"{anketa_id}_AUDIT.pdf",
            caption=f"üîç –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n–û—Ü–µ–Ω–∫–∞: {average_score:.1f}/10\n–°—Ç–∞—Ç—É—Å: {approval_status}\nID: {anketa_id}",
            anketa_id=anketa_id
        )

        logger.info(f"‚úÖ Audit PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {anketa_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ audit PDF –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
        import traceback
        traceback.print_exc()
        raise


async def _send_review_pdf_to_admin(
    grant_id: int,
    anketa_id: str,
    review_result: Dict[str, Any]
):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å PDF –æ—Ç—á–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç

    Args:
        grant_id: ID –≥—Ä–∞–Ω—Ç–∞
        anketa_id: ID –∞–Ω–∫–µ—Ç—ã
        review_result: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –∞–≥–µ–Ω—Ç–∞
    """
    try:
        logger.info(f"üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é review PDF –¥–ª—è –≥—Ä–∞–Ω—Ç–∞ {grant_id}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PDF
        review_data = {
            'grant_id': grant_id,
            'anketa_id': anketa_id,
            'completed_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'readiness_score': review_result.get('readiness_score', 0),
            'approval_probability': review_result.get('approval_probability', 0),
            'strengths': review_result.get('strengths', []),
            'weaknesses': review_result.get('weaknesses', []),
            'recommendations': review_result.get('recommendations', []),
            'detailed_review': review_result.get('detailed_review', ''),
            'final_verdict': review_result.get('final_verdict', '')
        }

        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è PDF –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: score={review_data['readiness_score']}/10, probability={review_data['approval_probability']}%")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ telegram-bot/utils
        sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', 'telegram-bot'))
        from utils.stage_report_generator import generate_stage_pdf

        pdf_bytes = generate_stage_pdf('review', review_data)
        logger.info(f"‚úÖ PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(pdf_bytes)} bytes")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        from utils.admin_notifications import AdminNotifier

        bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not bot_token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return

        notifier = AdminNotifier(bot_token)

        await notifier.send_stage_completion_pdf(
            stage='review',
            pdf_bytes=pdf_bytes,
            filename=f"{grant_id}_REVIEW.pdf",
            caption=f"üëÅÔ∏è –†–µ–≤—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n–û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {review_data['readiness_score']:.1f}/10\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è: {review_data['approval_probability']}%\nID: {grant_id}",
            anketa_id=anketa_id
        )

        logger.info(f"‚úÖ Review PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {grant_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ review PDF –¥–ª—è –≥—Ä–∞–Ω—Ç–∞ {grant_id}: {e}")
        import traceback
        traceback.print_exc()
        raise


class AgentProcessingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—á–µ—Ä–µ–¥–∏"""

    def __init__(self, success: bool, item_id: Any, message: str, details: Optional[Dict] = None):
        self.success = success
        self.item_id = item_id
        self.message = message
        self.details = details or {}
        self.timestamp = datetime.now()


class QueueProcessingStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏"""

    def __init__(self, agent_name: str):
        self.agent_name = agent_name
        self.total_items = 0
        self.processed = 0
        self.succeeded = 0
        self.failed = 0
        self.results: List[AgentProcessingResult] = []
        self.start_time = datetime.now()
        self.end_time = None

    def add_result(self, result: AgentProcessingResult):
        """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.results.append(result)
        self.processed += 1
        if result.success:
            self.succeeded += 1
        else:
            self.failed += 1

    def finish(self):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        self.end_time = datetime.now()

    def get_duration(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"""
        end = self.end_time or datetime.now()
        return (end - self.start_time).total_seconds()

    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'agent_name': self.agent_name,
            'total_items': self.total_items,
            'processed': self.processed,
            'succeeded': self.succeeded,
            'failed': self.failed,
            'duration': self.get_duration(),
            'results': [
                {
                    'success': r.success,
                    'item_id': r.item_id,
                    'message': r.message,
                    'details': r.details
                }
                for r in self.results
            ]
        }


async def process_auditor_queue(limit: int = 10) -> QueueProcessingStats:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Auditor –∞–≥–µ–Ω—Ç–∞

    Auditor –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö:
    - –ï—Å—Ç—å anketa_id
    - current_stage != 'interviewer'
    - –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ auditor_results

    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        QueueProcessingStats —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = QueueProcessingStats('auditor')

    try:
        print(f"\n{'='*60}")
        print(f"üîç –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò –û–ß–ï–†–ï–î–ò AUDITOR (limit={limit})")
        print(f"{'='*60}")
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ Auditor (limit={limit})...")

        # –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        print(f"üìã –ó–∞–ø—Ä–æ—Å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏...")
        queue_items = execute_query("""
            SELECT
                s.id as session_id,
                s.anketa_id,
                s.telegram_id,
                s.current_stage,
                s.status
            FROM sessions s
            WHERE s.anketa_id IS NOT NULL
              AND s.status != 'archived'
              AND s.current_stage != 'interviewer'
              AND NOT EXISTS (
                  SELECT 1 FROM auditor_results ar
                  WHERE ar.session_id = s.id
              )
            ORDER BY s.id ASC
            LIMIT %s
        """, (limit,))

        stats.total_items = len(queue_items)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.total_items}")
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.total_items}")

        if stats.total_items == 0:
            print("‚úÖ –û—á–µ—Ä–µ–¥—å Auditor –ø—É—Å—Ç–∞")
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Auditor –ø—É—Å—Ç–∞")
            stats.finish()
            return stats

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            print(f"üì¶ –ò–º–ø–æ—Ä—Ç AuditorAgent...")
            from agents.auditor_agent import AuditorAgent
        except ImportError as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AuditorAgent: {e}")
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AuditorAgent: {e}")
            stats.finish()
            return stats

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î...")
        db = GrantServiceDatabase()
        print(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuditorAgent (provider=claude_code)...")
        auditor = AuditorAgent(db=db, llm_provider='claude_code')
        print(f"‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n")

        for idx, item in enumerate(queue_items, 1):
                session_id = item['session_id']
                anketa_id = item['anketa_id']

                try:
                    print(f"‚è≥ [{idx}/{stats.total_items}] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id} (anketa: {anketa_id})...")
                    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id} (anketa: {anketa_id})...")

                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
                    print(f"   üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏ {session_id}...")
                    session_data = db.get_session_by_id(session_id)
                    if not session_data:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=session_id,
                            message=f"–°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                        )
                        stats.add_result(result)
                        continue

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∞
                    input_data = {
                        'session_id': session_id,
                        'anketa_id': anketa_id,
                        'user_answers': session_data.get('user_answers', {}),
                        'application': session_data.get('grant_application', {}),
                        'research_data': {},  # TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å research –µ—Å–ª–∏ –µ—Å—Ç—å
                        'selected_grant': {}
                    }

                    # –í—ã–∑–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                    print(f"   ü§ñ –ó–∞–ø—É—Å–∫ Auditor –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}...")
                    start_audit = time.time()
                    audit_result = auditor.process(input_data)
                    audit_time = time.time() - start_audit
                    print(f"   ‚úÖ Auditor –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∑–∞ {audit_time:.1f}s")
                    print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: overall_score={audit_result.get('overall_score', 0):.2f}, status={audit_result.get('status')}")

                    if audit_result.get('status') == 'success':
                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ auditor_results
                        # –°—Ö–µ–º–∞: completeness_score, clarity_score, feasibility_score, innovation_score, quality_score,
                        #        average_score, approval_status, recommendations, auditor_llm_provider, model, metadata

                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞—à–∏ scores –≤ —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã (0-100 -> 1-10)
                        completeness = int(audit_result.get('completeness_score', 70))
                        quality = int(audit_result.get('quality_score', 70))
                        compliance = int(audit_result.get('compliance_score', 70))

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 5 –æ—Ü–µ–Ω–æ–∫ –ø–æ —à–∫–∞–ª–µ 1-10
                        comp_score = min(10, max(1, completeness // 10))
                        clar_score = min(10, max(1, quality // 10))
                        feas_score = min(10, max(1, compliance // 10))
                        inno_score = min(10, max(1, quality // 10))
                        qual_score = min(10, max(1, quality // 10))

                        # –í–ê–ñ–ù–û: average_score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ä–µ–¥–Ω–∏–º –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–º (database constraint)
                        average_score = round((comp_score + clar_score + feas_score + inno_score + qual_score) / 5.0, 2)

                        # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
                        status_map = {
                            '–û—Ç–ª–∏—á–Ω–æ': 'approved',
                            '–•–æ—Ä–æ—à–æ': 'approved',
                            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': 'needs_revision',
                            '–¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏': 'needs_revision',
                            '–ù–µ –≥–æ—Ç–æ–≤–æ': 'rejected'
                        }
                        approval_status = status_map.get(
                            audit_result.get('readiness_status', '–ù–µ –≥–æ—Ç–æ–≤–æ'),
                            'needs_revision'
                        )

                        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î (avg_score={average_score}, status={approval_status})...")
                        start_db = time.time()

                        execute_update("""
                            INSERT INTO auditor_results (
                                session_id, completeness_score, clarity_score,
                                feasibility_score, innovation_score, quality_score,
                                average_score, approval_status, recommendations,
                                auditor_llm_provider, model, metadata
                            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                        """, (
                            session_id,
                            comp_score,
                            clar_score,
                            feas_score,
                            inno_score,
                            qual_score,
                            average_score,
                            approval_status,
                            json.dumps(audit_result.get('recommendations', []), ensure_ascii=False),
                            'claude_code',
                            'sonnet',
                            json.dumps(audit_result, ensure_ascii=False)
                        ))

                        db_time = time.time() - start_db
                        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î –∑–∞ {db_time:.2f}s")

                        # üìÑ –û–¢–ü–†–ê–í–ö–ê PDF –ê–£–î–ò–¢–ê –í –ê–î–ú–ò–ù–°–ö–ò–ô –ß–ê–¢
                        try:
                            print(f"   üìÑ –û—Ç–ø—Ä–∞–≤–∫–∞ audit PDF –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç...")
                            await _send_audit_pdf_to_admin(
                                session_id=session_id,
                                anketa_id=anketa_id,
                                audit_result=audit_result,
                                average_score=average_score,
                                approval_status=approval_status
                            )
                            print(f"   ‚úÖ Audit PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç")
                        except Exception as pdf_error:
                            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ audit PDF: {pdf_error}")
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ audit PDF –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}: {pdf_error}")
                            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

                        result = AgentProcessingResult(
                            success=True,
                            item_id=session_id,
                            message=f"–ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {audit_result.get('overall_score', 0):.2f}",
                            details={'score': audit_result.get('overall_score')}
                        )
                        logger.info(f"‚úÖ –°–µ—Å—Å–∏—è {session_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=session_id,
                            message=f"–û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞: {audit_result.get('message', 'Unknown')}"
                        )
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}")

                    stats.add_result(result)

                except Exception as e:
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ {session_id}: {e}")
                    logger.error(traceback.format_exc())
                    result = AgentProcessingResult(
                        success=False,
                        item_id=session_id,
                        message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                    )
                    stats.add_result(result)

        stats.finish()
        print(f"\n{'='*60}")
        print(f"‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: {stats.succeeded}/{stats.total_items} —É—Å–ø–µ—à–Ω–æ")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è: {stats.get_duration():.1f}s")
        print(f"{'='*60}\n")
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Auditor –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats.succeeded}/{stats.total_items} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Auditor: {e}")
        logger.error(traceback.format_exc())
        stats.finish()

    return stats


def process_researcher_queue(limit: int = 10) -> QueueProcessingStats:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Researcher –∞–≥–µ–Ω—Ç–∞

    Researcher –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö:
    - –ï—Å—Ç—å anketa_id
    - –ï—Å—Ç—å auditor_results
    - –ù–µ—Ç completed research –≤ researcher_research

    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        QueueProcessingStats —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = QueueProcessingStats('researcher')

    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ Researcher (limit={limit})...")

        # –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue_items = execute_query("""
            SELECT
                s.id as session_id,
                s.anketa_id,
                s.telegram_id,
                s.current_stage
            FROM sessions s
            WHERE s.anketa_id IS NOT NULL
              AND s.status != 'archived'
              AND EXISTS (
                  SELECT 1 FROM auditor_results ar
                  WHERE ar.session_id = s.id
              )
              AND NOT EXISTS (
                  SELECT 1 FROM researcher_research rr
                  WHERE rr.session_id = s.id
                    AND rr.status = 'completed'
              )
            ORDER BY s.id ASC
            LIMIT %s
        """, (limit,))

        stats.total_items = len(queue_items)
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.total_items}")

        if stats.total_items == 0:
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Researcher –ø—É—Å—Ç–∞")
            stats.finish()
            return stats

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            from agents.researcher_agent_v2 import ResearcherAgentV2
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ResearcherAgentV2: {e}")
            stats.finish()
            return stats

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        db = GrantServiceDatabase()
        researcher = ResearcherAgentV2(db=db, llm_provider='claude_code')

        for item in queue_items:
                session_id = item['session_id']
                anketa_id = item['anketa_id']

                try:
                    logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è anketa: {anketa_id}...")

                    # –í—ã–∑–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                    research_result = researcher.process({'anketa_id': anketa_id})

                    if research_result.get('status') == 'completed':
                        result = AgentProcessingResult(
                            success=True,
                            item_id=session_id,
                            message=f"–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {research_result.get('research_id')}",
                            details={
                                'research_id': research_result.get('research_id'),
                                'sources_count': research_result.get('research_results', {}).get('metadata', {}).get('sources_count', 0)
                            }
                        )
                        logger.info(f"‚úÖ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è anketa {anketa_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    else:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=session_id,
                            message=f"–û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {research_result.get('error', 'Unknown')}"
                        )
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –¥–ª—è anketa {anketa_id}")

                    stats.add_result(result)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è {anketa_id}: {e}")
                    logger.error(traceback.format_exc())
                    result = AgentProcessingResult(
                        success=False,
                        item_id=session_id,
                        message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                    )
                    stats.add_result(result)

        stats.finish()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Researcher –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats.succeeded}/{stats.total_items} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Researcher: {e}")
        logger.error(traceback.format_exc())
        stats.finish()

    return stats


def process_writer_queue(limit: int = 10) -> QueueProcessingStats:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Writer –∞–≥–µ–Ω—Ç–∞

    Writer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö:
    - –ï—Å—Ç—å anketa_id
    - –ï—Å—Ç—å completed research
    - –ù–µ—Ç –≥—Ä–∞–Ω—Ç–∞ –≤ grants

    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        QueueProcessingStats —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = QueueProcessingStats('writer')

    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ Writer (limit={limit})...")

        # –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue_items = execute_query("""
            SELECT
                s.id as session_id,
                s.anketa_id,
                s.telegram_id,
                rr.research_id
            FROM sessions s
            INNER JOIN researcher_research rr ON rr.session_id = s.id
            WHERE s.anketa_id IS NOT NULL
              AND s.status != 'archived'
              AND rr.status = 'completed'
              AND NOT EXISTS (
                  SELECT 1 FROM grants g
                  WHERE g.anketa_id = s.anketa_id
              )
            ORDER BY s.id ASC
            LIMIT %s
        """, (limit,))

        stats.total_items = len(queue_items)
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.total_items}")

        if stats.total_items == 0:
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Writer –ø—É—Å—Ç–∞")
            stats.finish()
            return stats

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            from agents.writer_agent_v2 import WriterAgentV2
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å WriterAgentV2: {e}")
            stats.finish()
            return stats

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        db = GrantServiceDatabase()
        writer = WriterAgentV2(db=db, llm_provider='claude_code')

        for item in queue_items:
                session_id = item['session_id']
                anketa_id = item['anketa_id']
                research_id = item.get('research_id')

                try:
                    logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞–Ω—Ç–∞ –¥–ª—è anketa: {anketa_id}...")

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–π—Ç–µ—Ä–∞
                    input_data = {
                        'anketa_id': anketa_id,
                        'session_id': session_id,
                        'research_id': research_id
                    }

                    # –í—ã–∑–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                    writer_result = writer.process(input_data)

                    if writer_result.get('status') == 'success':
                        result = AgentProcessingResult(
                            success=True,
                            item_id=session_id,
                            message=f"–ì—Ä–∞–Ω—Ç —Å–æ–∑–¥–∞–Ω: {writer_result.get('grant_id')}",
                            details={
                                'grant_id': writer_result.get('grant_id'),
                                'grant_number': writer_result.get('grant_number')
                            }
                        )
                        logger.info(f"‚úÖ –ì—Ä–∞–Ω—Ç –¥–ª—è anketa {anketa_id} —Å–æ–∑–¥–∞–Ω")
                    else:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=session_id,
                            message=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞: {writer_result.get('error', 'Unknown')}"
                        )
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞–Ω—Ç–∞ –¥–ª—è anketa {anketa_id}")

                    stats.add_result(result)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ writer {anketa_id}: {e}")
                    logger.error(traceback.format_exc())
                    result = AgentProcessingResult(
                        success=False,
                        item_id=session_id,
                        message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                    )
                    stats.add_result(result)

        stats.finish()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Writer –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats.succeeded}/{stats.total_items} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Writer: {e}")
        logger.error(traceback.format_exc())
        stats.finish()

    return stats


async def process_reviewer_queue(limit: int = 10) -> QueueProcessingStats:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å Reviewer –∞–≥–µ–Ω—Ç–∞

    Reviewer –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä–∞–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö:
    - –ù–µ—Ç review_score
    - status != 'archived'

    Args:
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        QueueProcessingStats —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = QueueProcessingStats('reviewer')

    try:
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—á–µ—Ä–µ–¥–∏ Reviewer (limit={limit})...")

        # –ü–æ–ª—É—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue_items = execute_query("""
            SELECT
                g.id as grant_id,
                g.anketa_id,
                g.telegram_id,
                g.status,
                g.grant_text
            FROM grants g
            WHERE g.review_score IS NULL
              AND g.status != 'archived'
            ORDER BY g.id ASC
            LIMIT %s
        """, (limit,))

        stats.total_items = len(queue_items)
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {stats.total_items}")

        if stats.total_items == 0:
            logger.info("‚úÖ –û—á–µ—Ä–µ–¥—å Reviewer –ø—É—Å—Ç–∞")
            stats.finish()
            return stats

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        try:
            from agents.reviewer_agent import ReviewerAgent
        except ImportError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ReviewerAgent: {e}")
            stats.finish()
            return stats

        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
        db = GrantServiceDatabase()
        reviewer = ReviewerAgent(db=db, llm_provider='claude_code')

        for item in queue_items:
                grant_id = item['grant_id']
                anketa_id = item['anketa_id']

                try:
                    logger.info(f"üîÑ –†–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞ {grant_id}...")

                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞–Ω—Ç–∞
                    grant_data = db.get_grant_by_id(grant_id)
                    if not grant_data:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=grant_id,
                            message=f"–ì—Ä–∞–Ω—Ç {grant_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                        )
                        stats.add_result(result)
                        continue

                    # –ó–∞–≥—Ä—É–∑–∏—Ç—å research results
                    research_data = execute_query("""
                        SELECT research_results
                        FROM researcher_research
                        WHERE anketa_id = %s AND status = 'completed'
                        ORDER BY created_at DESC
                        LIMIT 1
                    """, (anketa_id,))

                    research_results = research_data[0]['research_results'] if research_data else {}

                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ—Ü–µ–Ω–∑–µ–Ω—Ç–∞
                    input_data = {
                        'grant_id': grant_id,
                        'grant_content': grant_data.get('grant_text', {}),
                        'research_results': research_results,
                        'user_answers': {},
                        'citations': grant_data.get('citations', []),
                        'tables': grant_data.get('tables', []),
                        'selected_grant': {}
                    }

                    # –í—ã–∑–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞
                    review_result = reviewer.process(input_data)

                    if review_result.get('status') == 'success':
                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã review –≤ grants
                        execute_update("""
                            UPDATE grants
                            SET review_score = %s,
                                review_approval_probability = %s,
                                review_strengths = %s,
                                review_weaknesses = %s,
                                review_recommendations = %s,
                                review_data = %s,
                                updated_at = NOW()
                            WHERE id = %s
                        """, (
                            review_result.get('readiness_score'),
                            review_result.get('approval_probability'),
                            json.dumps(review_result.get('strengths', []), ensure_ascii=False),
                            json.dumps(review_result.get('weaknesses', []), ensure_ascii=False),
                            json.dumps(review_result.get('recommendations', []), ensure_ascii=False),
                            json.dumps(review_result, ensure_ascii=False),
                            grant_id
                        ))

                        # üìÑ –û–¢–ü–†–ê–í–ö–ê PDF –†–ï–í–¨–Æ –í –ê–î–ú–ò–ù–°–ö–ò–ô –ß–ê–¢
                        try:
                            await _send_review_pdf_to_admin(
                                grant_id=grant_id,
                                anketa_id=anketa_id,
                                review_result=review_result
                            )
                        except Exception as pdf_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ review PDF –¥–ª—è –≥—Ä–∞–Ω—Ç–∞ {grant_id}: {pdf_error}")
                            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

                        result = AgentProcessingResult(
                            success=True,
                            item_id=grant_id,
                            message=f"–†–µ—Ü–µ–Ω–∑–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {review_result.get('readiness_score', 0):.2f}/10",
                            details={
                                'readiness_score': review_result.get('readiness_score'),
                                'approval_probability': review_result.get('approval_probability')
                            }
                        )
                        logger.info(f"‚úÖ –ì—Ä–∞–Ω—Ç {grant_id} —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    else:
                        result = AgentProcessingResult(
                            success=False,
                            item_id=grant_id,
                            message=f"–û—à–∏–±–∫–∞ —Ä–µ—Ü–µ–Ω–∑–∏–∏: {review_result.get('message', 'Unknown')}"
                        )
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ü–µ–Ω–∑–∏–∏ –≥—Ä–∞–Ω—Ç–∞ {grant_id}")

                    stats.add_result(result)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ reviewer {grant_id}: {e}")
                    logger.error(traceback.format_exc())
                    result = AgentProcessingResult(
                        success=False,
                        item_id=grant_id,
                        message=f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"
                    )
                    stats.add_result(result)

        stats.finish()
        logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ Reviewer –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats.succeeded}/{stats.total_items} —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Reviewer: {e}")
        logger.error(traceback.format_exc())
        stats.finish()

    return stats


def process_agent_queue(agent_name: str, limit: int = 10) -> QueueProcessingStats:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

    Args:
        agent_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ (auditor, researcher, writer, reviewer)
        limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

    Returns:
        QueueProcessingStats —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    agent_processors = {
        'auditor': process_auditor_queue,
        'researcher': process_researcher_queue,
        'writer': process_writer_queue,
        'reviewer': process_reviewer_queue,
    }

    processor = agent_processors.get(agent_name)

    if not processor:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç: {agent_name}")
        stats = QueueProcessingStats(agent_name)
        stats.finish()
        return stats

    return processor(limit=limit)


__all__ = [
    'process_auditor_queue',
    'process_researcher_queue',
    'process_writer_queue',
    'process_reviewer_queue',
    'process_agent_queue',
    'QueueProcessingStats',
    'AgentProcessingResult',
]
