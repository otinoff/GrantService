#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è Streamlit –∞–¥–º–∏–Ω–∫–∏ GrantService
–ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import streamlit as st
import sys
import os
from typing import Optional, Dict, Any
from functools import wraps
import importlib.util

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
parent_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.insert(0, parent_dir)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ –∏–∑ core
try:
    from core import get_path_manager
    paths = get_path_manager()
except ImportError:
    # Fallback to direct path calculation if core module not available
    from pathlib import Path
    class FallbackPaths:
        def __init__(self):
            self.base_path = Path(parent_dir)
            self.CONSTANTS_FILE = self.base_path / "telegram-bot" / "config" / "constants.py"
            self.LOGIN_PAGE = self.base_path / "web-admin" / "pages" / "login.py"
    paths = FallbackPaths()

from data.database import GrantServiceDatabase

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è telegram-bot —Å –¥–µ—Ñ–∏—Å–æ–º –≤ –∏–º–µ–Ω–∏
try:
    spec = importlib.util.spec_from_file_location(
        "telegram_bot_config_constants",
        str(paths.CONSTANTS_FILE) if hasattr(paths, 'CONSTANTS_FILE') else str(paths.constants_file)
    )
    if spec and spec.loader:
        telegram_bot_config_constants = importlib.util.module_from_spec(spec)
        sys.modules["telegram_bot_config_constants"] = telegram_bot_config_constants
        spec.loader.exec_module(telegram_bot_config_constants)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        ADMIN_USERS = telegram_bot_config_constants.ADMIN_USERS
        ALLOWED_USERS = telegram_bot_config_constants.ALLOWED_USERS
    else:
        # Fallback values if import fails
        ADMIN_USERS = []
        ALLOWED_USERS = []
        print("‚ö†Ô∏è Warning: Could not load user lists from constants.py")
except Exception as e:
    print(f"‚ö†Ô∏è Warning: Error loading constants: {e}")
    ADMIN_USERS = []
    ALLOWED_USERS = []
def validate_login_token(token: str) -> Optional[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        token (str): –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
    Returns:
        Optional[Dict[str, Any]]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    print(f"üîç validate_login_token –≤—ã–∑–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: {token[:20] if token else 'None'}")
    
    if not token:
        print("‚ùå –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω")
        return None
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ë–î
        from data.database import db
        user_data = db.validate_login_token(token)
        print(f"üë§ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data}")
        return user_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        import traceback
        traceback.print_exc()
        return None

def check_user_access(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    """
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    print(f"üìã ALLOWED_USERS: {ALLOWED_USERS}")
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
    if not ALLOWED_USERS:
        print("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –≤—Å–µ—Ö (—Å–ø–∏—Å–æ–∫ ALLOWED_USERS –ø—É—Å—Ç)")
        return True
    
    has_access = user_id in ALLOWED_USERS
    print(f"{'‚úÖ' if has_access else '‚ùå'} –î–æ—Å—Ç—É–ø {'–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' if has_access else '–∑–∞–ø—Ä–µ—â–µ–Ω'} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    return has_access

def is_admin(user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    """
    return user_id in ADMIN_USERS

def is_user_authorized() -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    """
    return 'auth_token' in st.session_state and 'user' in st.session_state

def get_current_user() -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Optional[Dict[str, Any]]: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ None
    """
    return st.session_state.get('user')

def logout() -> None:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if 'auth_token' in st.session_state:
        del st.session_state.auth_token
    if 'user' in st.session_state:
        del st.session_state.user
    st.rerun()

def require_auth(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π/—Å—Ç—Ä–∞–Ω–∏—Ü, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        wrapper: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not is_user_authorized():
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
            import importlib.util
            login_page_path = str(paths.LOGIN_PAGE) if hasattr(paths, 'LOGIN_PAGE') else str(paths.login_page)
            spec = importlib.util.spec_from_file_location(
                "login_page",
                login_page_path
            )
            login_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(login_module)
            login_module.show_login_page()
            st.stop()
        return func(*args, **kwargs)
    return wrapper

def require_admin(func):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π/—Å—Ç—Ä–∞–Ω–∏—Ü, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        wrapper: –û–±–µ—Ä–Ω—É—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    @wraps(func)
    def wrapper(*args, **kwargs):
        if not is_user_authorized():
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ —Å –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
            import importlib.util
            login_page_path = str(paths.LOGIN_PAGE) if hasattr(paths, 'LOGIN_PAGE') else str(paths.login_page)
            spec = importlib.util.spec_from_file_location(
                "login_page",
                login_page_path
            )
            login_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(login_module)
            login_module.show_login_page()
            st.stop()
        
        user = get_current_user()
        if not user or not is_admin(user['telegram_id']):
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            st.stop()
            
        return func(*args, **kwargs)
    return wrapper