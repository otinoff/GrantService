#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Grant Stage Visualizer - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —ç—Ç–∞–ø—ã

–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π timeline –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Streamlit UI
"""

import streamlit as st
from typing import Dict, List, Any


class GrantStageVisualizer:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä —ç—Ç–∞–ø–æ–≤ –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è Streamlit"""

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤
    STAGES = [
        {
            'key': 'interview',
            'name': '–ò–Ω—Ç–µ—Ä–≤—å—é',
            'emoji': 'üìù',
            'description': '–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ (24 –≤–æ–ø—Ä–æ—Å–∞)'
        },
        {
            'key': 'auditor',
            'name': '–ê—É–¥–∏—Ç',
            'emoji': 'üîç',
            'description': '–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞'
        },
        {
            'key': 'researcher',
            'name': '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
            'emoji': 'üìä',
            'description': '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤'
        },
        {
            'key': 'planner',
            'name': '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'emoji': 'üìã',
            'description': '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏'
        },
        {
            'key': 'writer',
            'name': '–ù–∞–ø–∏—Å–∞–Ω–∏–µ',
            'emoji': '‚úçÔ∏è',
            'description': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≥—Ä–∞–Ω—Ç–∞'
        }
    ]

    # Emoji –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    STATUS_EMOJI = {
        'completed': '‚úÖ',
        'pending': '‚è≥',
        'in_progress': 'üîÑ',
        'error': '‚ùå'
    }

    def __init__(self, lifecycle_data: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        Args:
            lifecycle_data: –î–∞–Ω–Ω—ã–µ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ç GrantLifecycleManager
        """
        self.data = lifecycle_data
        self.current_stage = lifecycle_data.get('current_stage')
        self.progress = lifecycle_data.get('progress', 0)
        self.artifacts = lifecycle_data.get('artifacts', {})

    def render_timeline(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å timeline –≤ Streamlit"""

        st.markdown("### üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—è–≤–∫–∏")

        # Progress bar
        st.progress(self.progress / 100, text=f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {self.progress:.0f}%")

        st.markdown("---")

        # Timeline –∫–∞–∫ –∫–æ–ª–æ–Ω–∫–∏
        cols = st.columns(len(self.STAGES))

        for idx, stage in enumerate(self.STAGES):
            stage_key = stage['key']
            artifact = self.artifacts.get(stage_key, {})
            status = artifact.get('status', 'pending')

            with cols[idx]:
                # Emoji —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = self.STATUS_EMOJI.get(status, '‚è≥')

                # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–≤–µ—Ç
                if status == 'completed':
                    color = 'green'
                elif stage_key == self.current_stage:
                    color = 'orange'
                else:
                    color = 'gray'

                # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —ç—Ç–∞–ø–∞
                st.markdown(f"""
                <div style="text-align: center; padding: 10px; border-radius: 10px;
                            background-color: rgba(128, 128, 128, 0.1);">
                    <div style="font-size: 2em;">{stage['emoji']}</div>
                    <div style="font-size: 1.2em; font-weight: bold; color: {color};">
                        {stage['name']}
                    </div>
                    <div style="font-size: 1.5em;">{status_emoji}</div>
                    <div style="font-size: 0.8em; color: gray;">
                        {stage['description']}
                    </div>
                </div>
                """, unsafe_allow_html=True)

                # –°—Ç—Ä–µ–ª–∫–∞ –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
                if idx < len(self.STAGES) - 1:
                    st.markdown("""
                    <div style="text-align: center; font-size: 2em; margin-top: -10px;">
                        ‚Üí
                    </div>
                    """, unsafe_allow_html=True)

    def render_stage_cards(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞"""

        st.markdown("### üìÇ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –∑–∞—è–≤–∫–∏")
        st.markdown("---")

        for stage in self.STAGES:
            stage_key = stage['key']
            artifact = self.artifacts.get(stage_key, {})
            status = artifact.get('status', 'pending')

            # Expander –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
            with st.expander(f"{stage['emoji']} {stage['name']} ({self.STATUS_EMOJI.get(status, '‚è≥')})",
                            expanded=(status == 'completed')):

                if status == 'completed':
                    self._render_artifact_content(stage_key, artifact)
                elif status == 'in_progress':
                    st.info(f"‚è≥ –≠—Ç–∞–ø '{stage['name']}' –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...")
                elif status == 'error':
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–∞–ø–∞ '{stage['name']}'")
                else:
                    st.warning(f"‚è≥ –≠—Ç–∞–ø '{stage['name']}' –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç")

    def _render_artifact_content(self, stage_key: str, artifact: Dict[str, Any]):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞"""

        if stage_key == 'interview':
            # –ê–Ω–∫–µ—Ç–∞
            questions = artifact.get('data', [])
            st.metric("–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤", len(questions))
            st.caption(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {artifact.get('completed_at', 'N/A')}")

            if questions:
                with st.container():
                    for qa in questions[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                        st.markdown(f"**Q{qa.get('question_id', '?')}:** {qa.get('question_text', '')}")
                        st.markdown(f"**A:** {qa.get('answer', '')}")
                        st.markdown("---")

                    if len(questions) > 5:
                        st.caption(f"... –∏ –µ—â–µ {len(questions) - 5} –≤–æ–ø—Ä–æ—Å–æ–≤")

        elif stage_key == 'auditor':
            # –ê—É–¥–∏—Ç
            col1, col2 = st.columns(2)
            with col1:
                score = artifact.get('score', 0)
                st.metric("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{score}/10")
            with col2:
                st.caption(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {artifact.get('completed_at', 'N/A')}")

            if artifact.get('analysis'):
                st.markdown("**–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**")
                st.text_area("", value=str(artifact.get('analysis', '')), height=150, key=f"audit_analysis_{artifact.get('completed_at')}", disabled=True)

            if artifact.get('recommendations'):
                st.markdown("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                st.text_area("", value=str(artifact.get('recommendations', '')), height=100, key=f"audit_rec_{artifact.get('completed_at')}", disabled=True)

        elif stage_key == 'researcher':
            # –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            st.caption(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {artifact.get('completed_at', 'N/A')}")

            tabs = st.tabs(["–û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞", "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã", "–ò—Å—Ç–æ—á–Ω–∏–∫–∏"])

            with tabs[0]:
                if artifact.get('content'):
                    st.text_area("", value=str(artifact.get('content', '')), height=200, key=f"research_content_{artifact.get('completed_at')}", disabled=True)

            with tabs[1]:
                if artifact.get('market'):
                    st.text_area("", value=str(artifact.get('market', '')), height=200, key=f"research_market_{artifact.get('completed_at')}", disabled=True)

            with tabs[2]:
                if artifact.get('competitors'):
                    st.text_area("", value=str(artifact.get('competitors', '')), height=200, key=f"research_comp_{artifact.get('completed_at')}", disabled=True)

            with tabs[3]:
                if artifact.get('sources'):
                    st.text_area("", value=str(artifact.get('sources', '')), height=150, key=f"research_sources_{artifact.get('completed_at')}", disabled=True)

        elif stage_key == 'planner':
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            st.caption(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {artifact.get('completed_at', 'N/A')}")

            if artifact.get('structure'):
                st.markdown("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞—è–≤–∫–∏:**")
                st.text_area("", value=str(artifact.get('structure', '')), height=150, key=f"planner_struct_{artifact.get('completed_at')}", disabled=True)

            if artifact.get('sections'):
                st.markdown("**–°–µ–∫—Ü–∏–∏:**")
                sections = artifact.get('sections', [])
                if isinstance(sections, list):
                    for i, section in enumerate(sections, 1):
                        st.markdown(f"{i}. {section}")
                else:
                    st.text(str(sections))

        elif stage_key == 'writer':
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –≥—Ä–∞–Ω—Ç
            col1, col2, col3 = st.columns(3)

            with col1:
                st.metric("–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{artifact.get('quality_score', 0)}/10")
            with col2:
                st.metric("LLM", artifact.get('llm_provider', 'N/A'))
            with col3:
                st.metric("–ú–æ–¥–µ–ª—å", artifact.get('model', 'N/A'))

            st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {artifact.get('title', 'N/A')}")
            st.markdown(f"**ID:** {artifact.get('grant_id', 'N/A')}")
            st.caption(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {artifact.get('completed_at', 'N/A')}")

            # –°–µ–∫—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞
            sections = artifact.get('sections', [])
            if sections:
                st.markdown("**–°–µ–∫—Ü–∏–∏ –≥—Ä–∞–Ω—Ç–∞:**")
                for section in sections:
                    if isinstance(section, dict):
                        with st.expander(f"üìÑ {section.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"):
                            st.markdown(section.get('content', ''))

            # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
            if artifact.get('content'):
                st.markdown("---")
                st.markdown("**–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≥—Ä–∞–Ω—Ç–∞:**")
                st.text_area("", value=artifact.get('content', ''), height=400, key=f"grant_full_{artifact.get('completed_at')}", disabled=True)

    def get_stage_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ —ç—Ç–∞–ø–∞–º"""
        completed = sum(1 for stage in self.STAGES if self.artifacts.get(stage['key'], {}).get('status') == 'completed')
        total = len(self.STAGES)

        return f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ {completed} –∏–∑ {total} —ç—Ç–∞–ø–æ–≤ ({self.progress:.0f}%)"


def render_grant_lifecycle(lifecycle_data: Dict[str, Any]):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ Streamlit

    Args:
        lifecycle_data: –î–∞–Ω–Ω—ã–µ –æ—Ç GrantLifecycleManager.get_all_artifacts()
    """
    visualizer = GrantStageVisualizer(lifecycle_data)

    # Timeline
    visualizer.render_timeline()

    st.markdown("---")

    # –ö–∞—Ä—Ç–æ—á–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    visualizer.render_stage_cards()
