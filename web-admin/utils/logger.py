#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è GrantService Web Admin
–í–µ—Ä—Å–∏—è 2.0 - —Å —Ä–æ—Ç–∞—Ü–∏–µ–π, –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º —É—Ä–æ–≤–Ω–µ–π –∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
"""

import logging
import os
import sys
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from datetime import datetime
import traceback
import json
from functools import wraps

class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã
    COLORS = {
        'DEBUG': '\033[94m',     # –°–∏–Ω–∏–π
        'INFO': '\033[92m',      # –ó–µ–ª–µ–Ω—ã–π
        'WARNING': '\033[93m',   # –ñ–µ–ª—Ç—ã–π
        'ERROR': '\033[91m',     # –ö—Ä–∞—Å–Ω—ã–π
        'CRITICAL': '\033[95m',  # –ü—É—Ä–ø—É—Ä–Ω—ã–π
        'ENDC': '\033[0m'        # –ö–æ–Ω–µ—Ü —Ü–≤–µ—Ç–∞
    }
    
    def format(self, record):
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['ENDC']}"
        return super().format(record)

class GrantServiceLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è GrantService"""
    
    def __init__(self):
        self.log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
        self.ensure_log_directory()
    
    def ensure_log_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ —Å graceful fallback"""
        try:
            os.makedirs(self.log_dir, exist_ok=True)
            os.chmod(self.log_dir, 0o755)
        except (OSError, PermissionError) as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –ª–æ–≥–æ–≤: {e}")
            # –û—Ç–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ fallback –≤ /tmp
            self.log_dir = None
    
    def setup_logger(self, name, level=logging.INFO, 
                    max_bytes=10*1024*1024, backup_count=5, 
                    use_time_rotation=True):
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO)
            max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
            backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤
            use_time_rotation: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ä–æ—Ç–∞—Ü–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        """
        logger = logging.getLogger(name)
        logger.setLevel(level)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if logger.handlers:
            logger.handlers.clear()
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã
        detailed_formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(funcName)s() - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        console_formatter = ColoredFormatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%H:%M:%S'
        )
        
        # === –§–ê–ô–õ–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
        if self.log_dir:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞
            try:
                # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø–æ —Ä–∞–∑–º–µ—Ä—É
                main_log_file = os.path.join(self.log_dir, f'{name}.log')
                file_handler = RotatingFileHandler(
                    main_log_file,
                    maxBytes=max_bytes,
                    backupCount=backup_count,
                    encoding='utf-8'
                )
                file_handler.setLevel(logging.DEBUG)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Å –≤ —Ñ–∞–π–ª–∞—Ö
                file_handler.setFormatter(detailed_formatter)
                logger.addHandler(file_handler)
                
                # 2. –§–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
                error_log_file = os.path.join(self.log_dir, f'{name}_errors.log')
                error_handler = RotatingFileHandler(
                    error_log_file,
                    maxBytes=5*1024*1024,  # 5MB –¥–ª—è –æ—à–∏–±–æ–∫
                    backupCount=3,
                    encoding='utf-8'
                )
                error_handler.setLevel(logging.ERROR)
                error_handler.setFormatter(detailed_formatter)
                logger.addHandler(error_handler)
                
                # 3. –î–Ω–µ–≤–Ω–∞—è —Ä–æ—Ç–∞—Ü–∏—è –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
                if use_time_rotation:
                    daily_log_file = os.path.join(self.log_dir, f'{name}_daily.log')
                    daily_handler = TimedRotatingFileHandler(
                        daily_log_file,
                        when='midnight',
                        interval=1,
                        backupCount=30,  # –•—Ä–∞–Ω–∏–º 30 –¥–Ω–µ–π
                        encoding='utf-8'
                    )
                    daily_handler.setLevel(logging.INFO)
                    daily_handler.setFormatter(detailed_formatter)
                    logger.addHandler(daily_handler)
                
                logger.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {main_log_file}")
                
            except (OSError, PermissionError) as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤: {e}")
        else:
            print("‚ö†Ô∏è –§–∞–π–ª–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å")
        
        # === –ö–û–ù–°–û–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(level)
        console_handler.setFormatter(console_formatter)
        logger.addHandler(console_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤
        logger.propagate = False
        
        return logger
    
    def get_log_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ª–æ–≥–∞–º"""
        stats = {
            'log_directory': self.log_dir,
            'files': [],
            'total_size': 0,
            'last_modified': None
        }
        
        try:
            if os.path.exists(self.log_dir):
                for file in os.listdir(self.log_dir):
                    if file.endswith('.log'):
                        file_path = os.path.join(self.log_dir, file)
                        file_stat = os.stat(file_path)
                        stats['files'].append({
                            'name': file,
                            'size': file_stat.st_size,
                            'modified': datetime.fromtimestamp(file_stat.st_mtime).strftime('%Y-%m-%d %H:%M:%S')
                        })
                        stats['total_size'] += file_stat.st_size
                        
                        if not stats['last_modified'] or file_stat.st_mtime > stats['last_modified']:
                            stats['last_modified'] = datetime.fromtimestamp(file_stat.st_mtime)
        
        except Exception as e:
            stats['error'] = str(e)
        
        return stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_grant_logger = GrantServiceLogger()

def setup_logger(name, level=logging.INFO, **kwargs):
    """–§–∞–±—Ä–∏–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤ - –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤"""
    return _grant_logger.setup_logger(name, level, **kwargs)

def get_log_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–æ–≤"""
    return _grant_logger.get_log_stats()

def log_exception(logger, message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                logger.error(f"{message} –≤ {func.__name__}: {str(e)}", exc_info=True)
                raise
        return wrapper
    return decorator

def log_performance(logger):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            import time
            start_time = time.time()
            try:
                result = func(*args, **kwargs)
                execution_time = time.time() - start_time
                logger.info(f"‚ö° {func.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.3f}—Å")
                return result
            except Exception as e:
                execution_time = time.time() - start_time
                logger.error(f"üí• {func.__name__} —É–ø–∞–ª —á–µ—Ä–µ–∑ {execution_time:.3f}—Å: {str(e)}")
                raise
        return wrapper
    return decorator

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
main_logger = setup_logger('web_admin', level=logging.INFO)
database_logger = setup_logger('database', level=logging.DEBUG)
api_logger = setup_logger('api', level=logging.INFO)
error_logger = setup_logger('errors', level=logging.ERROR)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
main_logger.info("üöÄ GrantService Web Admin - —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è v2.0 –∑–∞–ø—É—â–µ–Ω–∞")
main_logger.info(f"üìÅ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {_grant_logger.log_dir}")