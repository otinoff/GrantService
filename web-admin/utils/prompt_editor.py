#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PromptEditor UI Component - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ Streamlit
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –ë–î —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
"""
import streamlit as st
from typing import Dict, List, Any, Optional
import re
import logging
from datetime import datetime

from utils.prompt_manager import DatabasePromptManager, get_database_prompt_manager
from utils.postgres_helper import execute_query, execute_update

logger = logging.getLogger(__name__)


class PromptEditor:
    """UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤"""

    def __init__(self, db_connection):
        """
        Args:
            db_connection: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """
        self.db = db_connection
        self.prompt_manager = get_database_prompt_manager()

    def render_agent_prompts_editor(self, agent_type: str) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞

        Args:
            agent_type: —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞ (interviewer, auditor, researcher_v2, writer_v2, reviewer)
        """
        st.subheader(f"–ü—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–∞: {agent_type}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–∞
        agent_prompts = self._load_agent_prompts(agent_type)

        if not agent_prompts:
            st.warning(f"–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞ '{agent_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ —Ç–∏–ø–∞–º
        prompts_by_type = {}
        for prompt in agent_prompts:
            prompt_type = prompt.get('prompt_type', 'unknown')
            if prompt_type not in prompts_by_type:
                prompts_by_type[prompt_type] = []
            prompts_by_type[prompt_type].append(prompt)

        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
        tabs = st.tabs(list(prompts_by_type.keys()))

        for tab, (prompt_type, prompts) in zip(tabs, prompts_by_type.items()):
            with tab:
                self._render_prompt_type_editor(agent_type, prompt_type, prompts)

    def _render_prompt_type_editor(self, agent_type: str, prompt_type: str, prompts: List[Dict]) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø—Ä–æ–º–ø—Ç–æ–≤

        Args:
            agent_type: —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞
            prompt_type: —Ç–∏–ø –ø—Ä–æ–º–ø—Ç–∞ (goal, backstory, query, etc.)
            prompts: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        """
        st.markdown(f"**–¢–∏–ø –ø—Ä–æ–º–ø—Ç–∞:** `{prompt_type}`")
        st.markdown(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {len(prompts)}")

        # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –º–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, queries), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–ø–∏—Å–∫–æ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –æ–¥–Ω–æ–º—É
        if len(prompts) > 1:
            # –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            prompt_options = [f"{p.get('name', 'Unnamed')} (order: {p.get('order_index', 'N/A')})" for p in prompts]
            selected_index = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                range(len(prompts)),
                format_func=lambda i: prompt_options[i],
                key=f"select_{agent_type}_{prompt_type}"
            )
            selected_prompt = prompts[selected_index]
            self._render_single_prompt_editor(selected_prompt)
        else:
            # –ï–¥–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
            self._render_single_prompt_editor(prompts[0])

    def _render_single_prompt_editor(self, prompt: Dict) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞

        Args:
            prompt: –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ë–î
        """
        prompt_id = prompt.get('id')
        prompt_name = prompt.get('name', 'Unnamed Prompt')
        prompt_template = prompt.get('prompt_template', '')
        variables = prompt.get('variables', {})
        is_active = prompt.get('is_active', True)
        max_tokens = prompt.get('max_tokens')
        temperature = prompt.get('temperature')

        st.markdown(f"### {prompt_name}")
        st.markdown(f"**ID:** `{prompt_id}` | **–ê–∫—Ç–∏–≤–µ–Ω:** {'‚úÖ' if is_active else '‚ùå'}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if variables:
            with st.expander("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"):
                st.json(variables)
                st.info("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {VARIABLE_NAME}")

        # –†–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–∞
        col1, col2 = st.columns([3, 1])

        with col1:
            new_prompt_template = st.text_area(
                "–¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞:",
                value=prompt_template,
                height=300,
                key=f"prompt_text_{prompt_id}",
                help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {PLACEHOLDER} –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"
            )

        with col2:
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            new_is_active = st.checkbox(
                "–ê–∫—Ç–∏–≤–µ–Ω",
                value=is_active,
                key=f"active_{prompt_id}"
            )

            new_max_tokens = st.number_input(
                "Max tokens",
                value=max_tokens if max_tokens else 1000,
                min_value=100,
                max_value=8000,
                step=100,
                key=f"tokens_{prompt_id}"
            )

            new_temperature = st.number_input(
                "Temperature",
                value=temperature if temperature else 0.7,
                min_value=0.0,
                max_value=1.0,
                step=0.1,
                key=f"temp_{prompt_id}"
            )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        validation_errors = self._validate_prompt(new_prompt_template, variables)

        if validation_errors:
            st.error("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in validation_errors:
                st.markdown(f"- {error}")

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col_save, col_reset, col_preview = st.columns(3)

        with col_save:
            if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"save_{prompt_id}", disabled=bool(validation_errors)):
                success = self._save_prompt(
                    prompt_id=prompt_id,
                    prompt_template=new_prompt_template,
                    is_active=new_is_active,
                    max_tokens=new_max_tokens,
                    temperature=new_temperature
                )
                if success:
                    st.success("‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à PromptManager
                    self.prompt_manager.reload_cache()
                    st.rerun()
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")

        with col_reset:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å", key=f"reset_{prompt_id}"):
                st.rerun()

        with col_preview:
            if st.button("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", key=f"preview_{prompt_id}"):
                self._show_prompt_preview(new_prompt_template, variables)

    def _validate_prompt(self, prompt_template: str, variables: Dict) -> List[str]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞

        Args:
            prompt_template: —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            variables: –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

        Returns:
            —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø—É—Å—Ç–æ–π –µ—Å–ª–∏ –æ–∫)
        """
        errors = []

        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
        if len(prompt_template.strip()) < 10:
            errors.append("–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)")

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∏ –æ–±—ä—è–≤–ª–µ–Ω—ã)
        if variables:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ {PLACEHOLDER} –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            used_placeholders = set(re.findall(r'\{([A-Z_]+)\}', prompt_template))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
            declared_vars = set(variables.keys())
            unused_vars = declared_vars - used_placeholders

            if unused_vars:
                errors.append(f"–ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(unused_vars)}")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
        if prompt_template.count('{') != prompt_template.count('}'):
            errors.append("–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ {}")

        return errors

    def _save_prompt(self, prompt_id: int, prompt_template: str, is_active: bool,
                     max_tokens: int, temperature: float) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –≤ –ë–î

        Args:
            prompt_id: ID –ø—Ä–æ–º–ø—Ç–∞
            prompt_template: –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            is_active: –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–ø—Ç
            max_tokens: –º–∞–∫—Å —Ç–æ–∫–µ–Ω–æ–≤
            temperature: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞

        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            query = """
                UPDATE agent_prompts
                SET prompt_template = %s,
                    is_active = %s,
                    max_tokens = %s,
                    temperature = %s,
                    updated_at = NOW()
                WHERE id = %s
            """

            execute_update(query, (
                prompt_template,
                is_active,
                max_tokens,
                temperature,
                prompt_id
            ))

            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç {prompt_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {prompt_id}: {e}")
            return False

    def _show_prompt_preview(self, prompt_template: str, variables: Dict) -> None:
        """
        –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏

        Args:
            prompt_template: —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            variables: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        st.markdown("### üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–º–ø—Ç–∞")

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        example_values = self._generate_example_values(variables)

        try:
            preview_text = prompt_template.format(**example_values)
            st.code(preview_text, language="text")

            st.info(f"–î–ª–∏–Ω–∞: {len(preview_text)} —Å–∏–º–≤–æ–ª–æ–≤")

        except KeyError as e:
            st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {e}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")

    def _generate_example_values(self, variables: Dict) -> Dict[str, str]:
        """
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

        Args:
            variables: –æ–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        """
        example_values = {}

        for var_name, var_info in variables.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if isinstance(var_info, dict):
                example_values[var_name] = var_info.get('example', f'[–ü—Ä–∏–º–µ—Ä {var_name}]')
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏
                if '–ü–†–û–ë–õ–ï–ú–ê' in var_name:
                    example_values[var_name] = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã'
                elif '–†–ï–ì–ò–û–ù' in var_name:
                    example_values[var_name] = '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
                elif '–ë–Æ–î–ñ–ï–¢' in var_name:
                    example_values[var_name] = '1,000,000'
                elif '–°–†–û–ö' in var_name:
                    example_values[var_name] = '12'
                else:
                    example_values[var_name] = f'[{var_name}]'

        return example_values

    def _load_agent_prompts(self, agent_type: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∞–≥–µ–Ω—Ç–∞ –∏–∑ –ë–î

        Args:
            agent_type: —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞

        Returns:
            —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        try:
            query = """
                SELECT
                    id, name, prompt_type, prompt_template,
                    variables, is_active, order_index,
                    max_tokens, temperature, category_id,
                    created_at, updated_at
                FROM agent_prompts
                WHERE agent_type = %s
                ORDER BY prompt_type, order_index NULLS LAST, id
            """

            results = execute_query(query, (agent_type,))

            if not results:
                return []

            prompts = []
            for row in results:
                prompts.append({
                    'id': row['id'],
                    'name': row['name'],
                    'prompt_type': row['prompt_type'],
                    'prompt_template': row['prompt_template'],
                    'variables': row['variables'] if row['variables'] else {},
                    'is_active': row['is_active'],
                    'order_index': row['order_index'],
                    'max_tokens': row['max_tokens'],
                    'temperature': row['temperature'],
                    'category_id': row['category_id'],
                    'created_at': row['created_at'],
                    'updated_at': row['updated_at']
                })

            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent_type}")
            return prompts

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è {agent_type}: {e}")
            return []

    def render_bulk_operations(self) -> None:
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        st.markdown("### üîß –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")

        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫–µ—à –ø—Ä–æ–º–ø—Ç–æ–≤"):
                self.prompt_manager.reload_cache()
                st.success("‚úÖ –ö–µ—à —Å–±—Ä–æ—à–µ–Ω!")

        with col2:
            if st.button("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"):
                stats = self.prompt_manager.get_stats()
                st.json(stats)

        with col3:
            if st.button("üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"):
                try:
                    test_result = execute_query("SELECT COUNT(*) as cnt FROM agent_prompts")
                    if test_result:
                        st.success(f"‚úÖ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–º–ø—Ç–æ–≤: {test_result[0]['cnt']}")
                    else:
                        st.error("‚ùå –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                except Exception as e:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def render_prompt_search(self) -> Optional[str]:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º

        Returns:
            –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ None
        """
        st.markdown("### üîç –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–æ–º–ø—Ç–∞–º")

        search_query = st.text_input(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: SMART, —Ü–∏—Ç–∞—Ç–∞, —Ç–∞–±–ª–∏—Ü–∞...",
            key="prompt_search"
        )

        if search_query and len(search_query) >= 3:
            results = self._search_prompts(search_query)

            if results:
                st.success(f"–ù–∞–π–¥–µ–Ω–æ: {len(results)} –ø—Ä–æ–º–ø—Ç–æ–≤")

                for result in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    with st.expander(f"{result['agent_type']} - {result['name']}"):
                        st.markdown(f"**–¢–∏–ø:** {result['prompt_type']}")
                        st.code(result['prompt_template'][:200] + "...", language="text")

                        if st.button(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", key=f"edit_search_{result['id']}"):
                            return result['agent_type']
            else:
                st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return None

    def _search_prompts(self, query: str) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É

        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å

        Returns:
            —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        """
        try:
            sql_query = """
                SELECT
                    id, agent_type, name, prompt_type, prompt_template
                FROM agent_prompts
                WHERE
                    prompt_template ILIKE %s
                    OR name ILIKE %s
                    OR prompt_type ILIKE %s
                ORDER BY agent_type, prompt_type
                LIMIT 50
            """

            search_pattern = f"%{query}%"
            results = execute_query(sql_query, (search_pattern, search_pattern, search_pattern))

            return results if results else []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return []
