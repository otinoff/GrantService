#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram Bot API
"""

import os
import asyncio
import json
import traceback
from pathlib import Path
from typing import Dict, Any, Tuple, Optional
import requests
import time

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞
def get_bot_token() -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞"""
    try:
        print("üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        current_dir = Path(__file__).parent
        config_paths = [
            current_dir.parent.parent / "config" / ".env",
            current_dir.parent.parent / "telegram-bot" / "config" / ".env",
            current_dir.parent.parent / ".env"
        ]
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç):")
        for config_path in config_paths:
            print(f"   - {config_path}: {'‚úÖ' if config_path.exists() else '‚ùå'}")
            if config_path.exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    for line in f:
                        if line.startswith('TELEGRAM_BOT_TOKEN='):
                            found_token = line.split('=', 1)[1].strip().strip('"\'')
                            print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ {config_path}")
                            print(f"   –¢–æ–∫–µ–Ω: {found_token[:20]}...{found_token[-10:]}")
                            return found_token
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤—Ç–æ—Ä–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if token:
            print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {token[:20]}...{token[-10:]}")
            return token
        else:
            print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ main.py
        main_py_path = current_dir.parent.parent / "telegram-bot" / "main.py"
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é main.py: {main_py_path} ({'‚úÖ' if main_py_path.exists() else '‚ùå'})")
        if main_py_path.exists():
            with open(main_py_path, 'r', encoding='utf-8') as f:
                content = f.read()
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º
                lines = content.split('\n')
                for line in lines:
                    if 'TOKEN' in line and ':' in line and 'AAG' in line:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞: TOKEN = "7685915842:AAG..."
                        token_part = line.split('"')[1] if '"' in line else line.split("'")[1]
                        if token_part and ':' in token_part:
                            print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ main.py: {token_part[:20]}...{token_part[-10:]}")
                            return token_part
        
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö!")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def send_document_to_telegram(user_id: int, file_path: str, caption: str = "",
                            grant_application_id: str = None) -> Tuple[bool, Dict[str, Any]]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        grant_application_id: ID –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        Tuple[bool, Dict]: (—É—Å–ø–µ—Ö, –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """
    try:
        print(f"üì§ === –ù–ê–ß–ò–ù–ê–ï–ú –û–¢–ü–†–ê–í–ö–£ –î–û–ö–£–ú–ï–ù–¢–ê ===")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}")
        print(f"   –§–∞–π–ª: {file_path}")
        print(f"   –ü–æ–¥–ø–∏—Å—å: {caption}")
        print(f"   ID –∑–∞—è–≤–∫–∏: {grant_application_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        print(f"üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...")
        bot_token = get_bot_token()
        if not bot_token:
            print(f"‚ùå –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False, {"error": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {bot_token[:20]}...{bot_token[-10:]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        print(f"üìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_path}")
        if not os.path.exists(file_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return False, {"error": f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}"}
        
        file_size = os.path.getsize(file_path)
        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª - —ç—Ç–æ –∑–∞—è–≤–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ PDF
        if grant_application_id and not file_path:
            print(f"üìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É {grant_application_id} –≤ PDF...")
            file_path = export_application_to_pdf(grant_application_id)
            if not file_path:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–∫–∏ –≤ PDF")
                return False, {"error": "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–∫–∏ –≤ PDF"}
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º URL –¥–ª—è API
        api_url = f"https://api.telegram.org/bot{bot_token}/sendDocument"
        print(f"üîó URL API: {api_url[:50]}...{api_url[-20:]}")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        file_name = os.path.basename(file_path)
        mime_type = get_mime_type(file_path)
        print(f"üìÑ –ò–º—è —Ñ–∞–π–ª–∞: {file_name}")
        print(f"üìÑ MIME —Ç–∏–ø: {mime_type}")
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å...")
        
        with open(file_path, 'rb') as file:
            files = {
                'document': (file_name, file, mime_type)
            }
            
            data = {
                'chat_id': user_id,
                'caption': caption[:1024] if caption else ""  # Telegram –ª–∏–º–∏—Ç 1024 —Å–∏–º–≤–æ–ª–∞
            }
            
            print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:")
            print(f"   chat_id: {data['chat_id']}")
            print(f"   caption: '{data['caption']}'")
            print(f"   document: {file_name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç {file_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            response = requests.post(api_url, data=data, files=files, timeout=30)
            
            print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
            print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
            if response.status_code == 200:
                result = response.json()
                print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {result}")
                if result.get('ok'):
                    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_name}")
                    return True, result.get('result', {})
                else:
                    error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    error_code = result.get('error_code', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥')
                    print(f"‚ùå –û—à–∏–±–∫–∞ API:")
                    print(f"   –ö–æ–¥: {error_code}")
                    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {error_msg}")
                    return False, {"error": error_msg}
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                try:
                    response_text = response.text
                    print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
                except:
                    print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
                error_msg = f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
                return False, {"error": error_msg}
                
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}"
        print(f"‚ùå {error_msg}")
        print(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        return False, {"error": error_msg}

def get_mime_type(file_path: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å MIME —Ç–∏–ø —Ñ–∞–π–ª–∞"""
    extension = Path(file_path).suffix.lower()
    mime_types = {
        '.pdf': 'application/pdf',
        '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        '.doc': 'application/msword',
        '.txt': 'text/plain'
    }
    return mime_types.get(extension, 'application/octet-stream')

def export_application_to_pdf(grant_application_id: str) -> Optional[str]:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–Ω—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ PDF —Ñ–∞–π–ª
    
    Args:
        grant_application_id: ID –≥—Ä–∞–Ω—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
        
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É PDF —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import sys
        from pathlib import Path
        
        current_dir = Path(__file__).parent
        base_dir = current_dir.parent.parent
        
        if str(base_dir) not in sys.path:
            sys.path.insert(0, str(base_dir))
        
        from data.database.models import GrantServiceDatabase
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # PostgreSQL - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        db = GrantServiceDatabase()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application = db.get_application_by_number(grant_application_id)
        if not application:
            print(f"–ó–∞—è–≤–∫–∞ {grant_application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (–≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ PDF)
        ready_grants_dir = base_dir / "data" / "ready_grants"
        ready_grants_dir.mkdir(exist_ok=True)
        
        output_file = ready_grants_dir / f"{grant_application_id}.txt"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        content_lines = [
            f"–ì–†–ê–ù–¢–û–í–ê–Ø –ó–ê–Ø–í–ö–ê: {grant_application_id}",
            "=" * 50,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {application.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            f"–°—Ç–∞—Ç—É—Å: {application.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            f"–°–æ–∑–¥–∞–Ω–∞: {application.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            "",
            "–°–û–î–ï–†–ñ–ê–ù–ò–ï:",
            "-" * 30
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—è–≤–∫–∏
        try:
            if application.get('content_json'):
                content_data = json.loads(application['content_json'])
                if isinstance(content_data, dict):
                    for key, value in content_data.items():
                        content_lines.append(f"{key}: {value}")
                else:
                    content_lines.append(str(content_data))
            else:
                content_lines.append("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        except Exception as e:
            content_lines.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(content_lines))
        
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {output_file}")
        return str(output_file)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–∫–∏ –≤ PDF: {e}")
        print(traceback.format_exc())
        return None

def test_telegram_connection() -> Tuple[bool, str]:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram Bot API"""
    try:
        print(f"üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM ===" )
        
        print(f"üîë –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞...")
        bot_token = get_bot_token()
        if not bot_token:
            print(f"‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False, "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {bot_token[:20]}...{bot_token[-10:]}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ getMe
        api_url = f"https://api.telegram.org/bot{bot_token}/getMe"
        print(f"üîó URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {api_url[:50]}...getMe")
        
        print(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = requests.get(api_url, timeout=10)
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:")
        print(f"   –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"   –ó–∞–≥–æ–ª–æ–≤–∫–∏: {dict(response.headers)}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {result}")
            if result.get('ok'):
                bot_info = result.get('result', {})
                bot_name = bot_info.get('first_name', 'Unknown')
                bot_username = bot_info.get('username', 'Unknown')
                bot_id = bot_info.get('id', 'Unknown')
                success_msg = f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {bot_name} (@{bot_username}), ID: {bot_id}"
                print(success_msg)
                return True, success_msg
            else:
                error_msg = result.get('description', 'Unknown')
                error_code = result.get('error_code', 'Unknown')
                print(f"‚ùå API –æ—à–∏–±–∫–∞:")
                print(f"   –ö–æ–¥: {error_code}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {error_msg}")
                return False, f"‚ùå API –æ—à–∏–±–∫–∞: {error_msg}"
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
            try:
                response_text = response.text
                print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
            except:
                print(f"   –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return False, f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}"
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
        print(f"üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"

def send_message_to_telegram(user_id: int, text: str) -> Tuple[bool, Dict[str, Any]]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        Tuple[bool, Dict]: (—É—Å–ø–µ—Ö, –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞)
    """
    try:
        bot_token = get_bot_token()
        if not bot_token:
            return False, {"error": "–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        data = {
            'chat_id': user_id,
            'text': text[:4096],  # Telegram –ª–∏–º–∏—Ç
            'parse_mode': 'HTML'
        }
        
        response = requests.post(api_url, data=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                return True, result.get('result', {})
            else:
                return False, {"error": result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}
        else:
            return False, {"error": f"HTTP –æ—à–∏–±–∫–∞: {response.status_code}"}
            
    except Exception as e:
        return False, {"error": f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user_availability(user_id: int) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        Tuple[bool, str]: (–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å)
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        success, response = send_message_to_telegram(
            user_id, 
            "üîç –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç GrantService"
        )
        
        if success:
            return True, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω"
        else:
            error = response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            if 'blocked' in error.lower():
                return False, "–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            elif 'not found' in error.lower():
                return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            else:
                return False, f"–û—à–∏–±–∫–∞: {error}"
                
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Sender")
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    success, message = test_telegram_connection()
    print(f"–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {message}")
    
    if success:
        print("\n‚úÖ –ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        print("\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")